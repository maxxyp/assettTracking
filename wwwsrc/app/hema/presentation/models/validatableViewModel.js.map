{"version":3,"sources":["hema/presentation/models/validatableViewModel.ts"],"names":[],"mappings":"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","file":"validatableViewModel.js","sourcesContent":["\nimport { IValidationService } from \"../../business/services/interfaces/IValidationService\";\nimport { ILabelService } from \"../../business/services/interfaces/ILabelService\";\nimport { BaseViewModel } from \"./baseViewModel\";\nimport { BusinessException } from \"../../business/models/businessException\";\nimport { IFormController } from \"../../../common/ui/attributes/IFormController\";\nimport { FormControllerElement } from \"../../../common/ui/attributes/formControllerElement\";\nimport { ValidationController } from \"../../business/services/validation/validationController\";\nimport { IDynamicRule } from \"../../business/services/validation/IDynamicRule\";\nimport { ValidationCombinedResult } from \"../../business/services/validation/validationCombinedResult\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\nimport { StringHelper } from \"../../../common/core/stringHelper\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { DomHelper } from \"../../../common/ui/domHelper\";\nimport { ValidationRule } from \"../../business/services/validation/validationRule\";\n\nexport abstract class ValidatableViewModel extends BaseViewModel implements IFormController {\n    public validationRules: { [key: string]: ValidationRule };\n\n    protected _isDirty: boolean;\n    protected _lastDataLoadTime: number;\n\n    protected _validationService: IValidationService;\n    protected _validationController: ValidationController;\n\n    private _enableValidation: boolean;\n    private _formElements: FormControllerElement[];\n\n    constructor(labelService: ILabelService,\n        eventAggregator: EventAggregator,\n        dialogService: DialogService,\n        validationService: IValidationService) {\n        super(labelService, eventAggregator, dialogService);\n\n        this._validationService = validationService;\n        this._isDirty = false;\n        this._lastDataLoadTime = 0;\n        this._enableValidation = false;\n        this.validationRules = {};\n    }\n\n    public buildValidation(dynamicRules?: IDynamicRule[]): Promise<void> {\n        return this._validationService.build(this, StringHelper.toCamelCase(ObjectHelper.getClassName(this)), dynamicRules).then((validationController) => {\n            if (validationController) {\n                this._validationController = validationController;\n                this.validationRules = validationController.staticRules;\n            }\n            return this.validateAllRules();\n        });\n    }\n\n    public detached(): Promise<void> {\n        return super.detached()\n            .then(() => {\n                this._validationController = null;\n            });\n    }\n\n    public getValidationRule(ruleKey: string): ValidationRule {\n        if (!this.validationRules[ruleKey]) {\n            throw new BusinessException(this, \"getValidationRule\", \"Unable to get rule '{0}' for viewModel '{1}'\", [ruleKey, ObjectHelper.getClassName(this)], null);\n        }\n\n        return this.validationRules[ruleKey];\n    }\n\n    public validationManual(): void {\n        this.validationToggle(true);\n        this._lastDataLoadTime = new Date().getTime();\n    }\n\n    public validationToggle(enable: boolean): void {\n        this._enableValidation = enable;\n    }\n\n    public getValidationEnabled(): boolean {\n        return this._enableValidation;\n    }\n\n    public validateAllRules(): Promise<void> {\n        if (this._validationController) {\n            // .DF_1149 - only validate if the page has loaded\n            let readyToValidate = this._enableValidation && this._lastDataLoadTime && this.pageReadyToValidate();\n\n            if (readyToValidate) {\n                return this._validationService.validate(this._validationController, this, null)\n                    .then((validationCombinedResult) => {\n\n                        this.toggleErrors(validationCombinedResult);\n\n                        return this.updateLiveDataState(validationCombinedResult.isValid)\n                            .then(() => {\n                                this.validationUpdated(validationCombinedResult);\n                            });\n\n                    });\n            } else {\n                return this.validationClearDisplay();\n            }\n        } else {\n            return Promise.resolve();\n        }\n    }\n    public checkAllRules(): Promise<boolean> {\n        if (this._validationController) {\n                return this._validationService.validate(this._validationController, this, null)\n                    .then((validationCombinedResult) => {\n                        return validationCombinedResult.isValid;\n                    });\n        } else {\n            return Promise.resolve(false);\n        }\n    }\n\n    public validateSingleRule(property: string): Promise<ValidationCombinedResult> {\n        if (this._validationController && this._enableValidation) {\n            return this._validationService.validate(this._validationController, this, property)\n                .then((validationCombinedResult) => {\n\n                    this.toggleErrors(validationCombinedResult);\n\n                    this.validationUpdated(validationCombinedResult);\n\n                    return this.updateLiveDataState(undefined)\n                        .then(() => {\n                            return validationCombinedResult;\n                        });\n                });\n        } else {\n            return Promise.resolve(null);\n        }\n    }\n\n    public validationClearDisplay(): Promise<void> {\n        if (this._validationController && this._formElements) {\n            this._formElements.forEach(elem => {\n                this.toggleError(elem, true, \"\");\n            });\n        }\n        return Promise.resolve();\n    }\n\n    public validationClearGroup(groupName: string): Promise<void> {\n        if (this._validationController && this._formElements) {\n            this._formElements.forEach(elem => {\n                if (this._validationController.validationRuleGroups[groupName]) {\n                    if (this._validationController.validationRuleGroups[groupName].find(x => x === elem.valueBindingPropertyName)) {\n                        this.toggleError(elem, true, \"\");\n                    }\n                }\n            });\n        }\n        return Promise.resolve();\n    }\n\n    public validationClearItem(propertyName: string): Promise<void> {\n        if (this._validationController && this._formElements) {\n            if (StringHelper.endsWith(propertyName, \"*\")) {\n                let startsWith = propertyName.substr(0, propertyName.length - 1);\n                let formControllerElements = this._formElements.filter(fe => StringHelper.startsWith(fe.valueBindingPropertyName, startsWith));\n                if (formControllerElements) {\n                    formControllerElements.forEach((formControllerElement) => {\n                        this.toggleError(formControllerElement, true, \"\");\n                    });\n                }\n            } else {\n                let formControllerElement = this._formElements.find(fe => fe.valueBindingPropertyName === propertyName);\n                if (formControllerElement) {\n                    this.toggleError(formControllerElement, true, \"\");\n                }\n            }\n        }\n        return Promise.resolve();\n    }\n\n    public elementsLoaded(formElements: FormControllerElement[]): void {\n        this._formElements = formElements;\n        this.validateAllRules();\n    }\n\n    public elementUpdate(formElement: FormControllerElement, method: string): void {\n        /* clearing data can often lead to property changes so we don't want\n         * to revalidate straight away, give the UI a short time to complete its updates\n         * this is also the case when the data has been initially loaded */\n        if (this._lastDataLoadTime > 0) {\n            let timeNow = new Date().getTime();\n            if (timeNow - this._lastDataLoadTime > 500) {\n                if (this._isDirty) {\n                    this.validateSingleRule(formElement.valueBindingPropertyName);\n                } else {\n                    // .DF_1149 on first touch validate everything, otherwise we may get an overall currentDataState of invalid\n                    //  but with no asterisks showing on other fields\n                    this.setDirty(true);\n                    this.validateAllRules();\n                }\n            }\n        }\n    }\n\n    public setDirty(isDirty: boolean): void {\n        this._isDirty = isDirty;\n    }\n\n    protected validationUpdated(validationCombinedResult: ValidationCombinedResult): void {\n    }\n\n    protected isValidChanged(isValid: boolean): void {\n    }\n\n    // overridden in editableViewModel\n    protected pageReadyToValidate(): boolean {\n        return true;\n    }\n\n    private updateLiveDataState(isValid: boolean): Promise<void> {\n        let p: Promise<boolean>;\n        if (isValid === undefined) {\n            p = this._validationService.validate(this._validationController, this, null)\n                .then((combinedResult) => combinedResult.isValid);\n        } else {\n            p = Promise.resolve(isValid);\n        }\n\n        return p.then((finalIsValid) => {\n            this.isValidChanged(finalIsValid);\n        });\n    }\n\n    private toggleErrors(validationCombinedResult: ValidationCombinedResult): void {\n        if (validationCombinedResult && this._formElements) {\n            for (let property in validationCombinedResult.propertyResults) {\n                let formControllerElement = this._formElements.find(elem => elem.valueBindingPropertyName === property);\n                if (formControllerElement) {\n                    this.toggleError(formControllerElement, validationCombinedResult.propertyResults[property].isValid, validationCombinedResult.propertyResults[property].message);\n                }\n            }\n        }\n    }\n\n    private toggleError(formControllerElement: FormControllerElement, isValid: boolean, message: string): void {\n        let formGroup = DomHelper.closest(formControllerElement.element, \".form-group\");\n        if (formGroup) {\n            if (isValid) {\n                formGroup.classList.remove(\"has-warning\");\n            } else {\n                formGroup.classList.add(\"has-warning\");\n            }\n\n            let customBlock: HTMLElement;\n\n            /* see if the dev has provided a custom error position block, if so use that for messages */\n            let customBlocks = formGroup.getElementsByClassName(\"validation-custom\");\n            if (customBlocks && customBlocks.length > 0) {\n                customBlock = <HTMLElement>customBlocks[0];\n            }\n\n            let labels = formGroup.getElementsByTagName(\"label\");\n\n            if (labels && labels.length > 0) {\n                let labelContainer = labels[0].parentElement;\n\n                let spans = labelContainer.getElementsByClassName(\"help-block validation-message\");\n                let requiredSpan: Element = null;\n                let helpSpan: Element = null;\n                if (spans && spans.length > 0) {\n                    requiredSpan = spans[0];\n                    if (spans.length > 1) {\n                        helpSpan = spans[1];\n                    }\n                }\n\n                if (isValid) {\n                    if (requiredSpan) {\n                        labelContainer.removeChild(requiredSpan);\n                    }\n                    if (helpSpan) {\n                        labelContainer.removeChild(helpSpan);\n                    }\n                    let errorMessageElement = this.getElementByClassName(formGroup, \"requiredFieldMessag\");\n                    if (errorMessageElement) {\n                        errorMessageElement.remove();\n                    }\n                } else {\n                    /* dont add the message block if this is only a required message, and there is no custom block to show it */\n                    if (!requiredSpan) {\n                        requiredSpan = document.createElement(\"span\");\n                        requiredSpan.className = \"help-block validation-message validation-required-marker\";\n\n                        if (formGroup.children[1]) {\n                            let errorMessageElement = this.getElementByClassName(formGroup, \"requiredFieldMessag\");\n                            if (!errorMessageElement) {\n                                let requireFieldMessage = document.createElement(\"span\");\n                                requireFieldMessage.className = \"requiredFieldMessag help-block validation-message validation-required-marker\";\n                                let iconElement = document.createElement(\"i\");\n                                iconElement.className = \"fa fa-exclamation-triangle\";\n                                requireFieldMessage.appendChild(iconElement);\n                                let messageText = document.createElement(\"span\");\n                                messageText.innerHTML = \" Requires input\";\n                                requireFieldMessage.appendChild(messageText);\n                                formGroup.children[1].appendChild(requireFieldMessage);\n                            }\n                        }\n                        labelContainer.insertBefore(requiredSpan, labels[0].nextSibling);\n                    }\n                    if (message !== \"*\" && customBlock === undefined) {\n                        if (!helpSpan) {\n                            helpSpan = document.createElement(\"span\");\n                            helpSpan.className = \"requiredFieldMessage help-block validation-message\";\n                            labelContainer.insertBefore(helpSpan, requiredSpan.nextSibling);\n                        }\n                        helpSpan.textContent = message;\n                    } else {\n                        if (helpSpan) {\n                            labelContainer.removeChild(helpSpan);\n                        }\n                    }\n                }\n            }\n\n            /* display custom messages */\n            if (customBlock) {\n                customBlock.style.display = isValid ? \"none\" : \"block\";\n                customBlock.textContent = message === \"*\" || isValid ? \"\" : message;\n            }\n        }\n    }\n\n    private getElementByClassName(rootElement: Element, classNameSearch: string): Element {\n        if (rootElement.children[1] && rootElement.children[1].children) {\n            for (let i: number = 0; i < rootElement.children[1].children.length; i++) {\n                if (rootElement.children[1].children[i] && rootElement.children[1].children[i].className.indexOf(classNameSearch) > -1) {\n                    return rootElement.children[1].children[i];\n                }\n            }\n        }\n        return undefined;\n    }\n}\n"],"sourceRoot":"../../.."}