{"version":3,"sources":["hema/presentation/models/businessRulesViewModel.ts"],"names":[],"mappings":"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","file":"businessRulesViewModel.js","sourcesContent":["import {ValidatableViewModel} from \"./validatableViewModel\";\nimport {IValidationService} from \"../../business/services/interfaces/IValidationService\";\nimport {IBusinessRuleService} from \"../../business/services/interfaces/IBusinessRuleService\";\nimport {ILabelService} from \"../../business/services/interfaces/ILabelService\";\nimport {ButtonListItem} from \"../../../common/ui/elements/models/buttonListItem\";\nimport {ICatalogService} from \"../../business/services/interfaces/ICatalogService\";\nimport {ArrayHelper} from \"../../../common/core/arrayHelper\";\nimport {BusinessException} from \"../../business/models/businessException\";\nimport {EventAggregator} from \"aurelia-event-aggregator\";\nimport {ObjectHelper} from \"../../../common/core/objectHelper\";\nimport {StringHelper} from \"../../../common/core/stringHelper\";\nimport {DialogService} from \"aurelia-dialog\";\nimport {YesNoNa} from \"../../business/models/yesNoNa\";\n\nexport abstract class BusinessRulesViewModel extends ValidatableViewModel {\n    public businessRules: { [key: string]: any };\n\n    protected _catalogService: ICatalogService;\n\n    protected _businessRuleService: IBusinessRuleService;\n\n    constructor(labelService: ILabelService,\n        eventAggregator: EventAggregator,\n        dialogService: DialogService,\n        validationService: IValidationService,\n        businessRuleService: IBusinessRuleService,\n        catalogService: ICatalogService) {\n        super(labelService, eventAggregator, dialogService, validationService);\n\n        this._businessRuleService = businessRuleService;\n        this._catalogService = catalogService;\n        this.businessRules = {};\n    }\n\n    public static numericSorter(columnName: string, descending: boolean = false) : (a: any, b: any) => number {\n        return (a, b) => {\n            if (+a[columnName] > +b[columnName]) {\n                return descending ? -1 : 1;\n            }\n            if (+a[columnName] < +b[columnName]) {\n                return descending ? 1 : -1;\n            }\n            return 0;\n        };\n    }\n\n    public loadBusinessRules(): Promise<void> {\n        return this._businessRuleService.getRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this)))\n            .then((businessRules) => {\n                this.businessRules = businessRules;\n                return;\n            });\n    }\n\n    public getBusinessRule<T>(ruleKey: string): T {\n        if (!(ruleKey in this.businessRules)) {\n            throw new BusinessException(this, \"getBusinessRule\", \"Unable to get rule '{0}' for viewModel '{1}'\", [ruleKey, ObjectHelper.getClassName(this)], null);\n        }\n\n        let ruleValue = this.businessRules[ruleKey];\n        return <T>ruleValue;\n    }\n\n    public buildNoYesList(): Promise<ButtonListItem[]> {\n        let buttonListItems: ButtonListItem[] = [];\n        buttonListItems.push(new ButtonListItem(this.getLabel(\"no\"), false, false));\n        buttonListItems.push(new ButtonListItem(this.getLabel(\"yes\"), true, false));\n        return Promise.resolve(buttonListItems);\n    }\n\n    public buildYesNoList(): Promise<ButtonListItem[]> {\n        let buttonListItems: ButtonListItem[] = [];\n        buttonListItems.push(new ButtonListItem(this.getLabel(\"yes\"), true, false));\n        buttonListItems.push(new ButtonListItem(this.getLabel(\"no\"), false, false));\n        return Promise.resolve(buttonListItems);\n    }\n\n    public buildNoYesNaList(): Promise<ButtonListItem[]> {\n        let buttonListItems: ButtonListItem[] = [];\n        buttonListItems.push(new ButtonListItem(this.getLabel(\"no\"), YesNoNa.No, false));\n        buttonListItems.push(new ButtonListItem(this.getLabel(\"yes\"), YesNoNa.Yes, false));\n        buttonListItems.push(new ButtonListItem(this.getLabel(\"na\"), YesNoNa.Na, false));\n        return Promise.resolve(buttonListItems);\n    }\n\n    public buildNoNaList(): Promise<ButtonListItem[]> {\n        let buttonListItems: ButtonListItem[] = [];\n        buttonListItems.push(new ButtonListItem(this.getLabel(\"no\"), YesNoNa.No, false));\n        buttonListItems.push(new ButtonListItem(this.getLabel(\"na\"), YesNoNa.Na, false));\n        return Promise.resolve(buttonListItems);\n    }\n\n    public toSortedArray(values: any[], sort?: string | ((a: any, b: any) => number)): any[] {\n        if (!values) {\n            return [];\n        } else {\n            let sortedValues: any[];\n\n            if (StringHelper.isString(sort)) {\n                sortedValues = ArrayHelper.sortByColumn(values, <string>sort);\n            } else if (typeof(sort) === \"function\") {\n                sortedValues = values.sort(<(a: any, b: any) => number>sort);\n            } else {\n                sortedValues = values;\n            }\n            return sortedValues;\n        }\n    }\n\n    public toButtonListItemArray(values: any[], valueField: string, descriptionField: string, sort?: string | ((a: any, b: any) => number)): ButtonListItem[] {\n        return this.toSortedArray(values, sort).map(item => this.toButtonListItem(item, valueField, descriptionField));\n    }\n\n    public toButtonListItem(value: any, valueField: string, descriptionField: string): ButtonListItem {\n        return new ButtonListItem(ObjectHelper.getPathValue(value, descriptionField), ObjectHelper.getPathValue(value, valueField), false);\n    }\n}\n"],"sourceRoot":"../../.."}