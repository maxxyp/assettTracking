{"version":3,"sources":["hema/presentation/models/editableViewModel.ts"],"names":[],"mappings":"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","file":"editableViewModel.js","sourcesContent":["import {observable} from \"aurelia-binding\";\nimport {IJobService} from \"../../business/services/interfaces/IJobService\";\nimport {EventAggregator, Subscription} from \"aurelia-event-aggregator\";\nimport {ILabelService} from \"../../business/services/interfaces/ILabelService\";\nimport {BusinessRulesViewModel} from \"./businessRulesViewModel\";\nimport {IValidationService} from \"../../business/services/interfaces/IValidationService\";\nimport {IBusinessRuleService} from \"../../business/services/interfaces/IBusinessRuleService\";\nimport {ICatalogService} from \"../../business/services/interfaces/ICatalogService\";\nimport {DataState} from \"../../business/models/dataState\";\nimport {StringHelper} from \"../../../common/core/stringHelper\";\nimport {ObjectHelper} from \"../../../common/core/objectHelper\";\nimport {IEngineerService} from \"../../business/services/interfaces/IEngineerService\";\nimport {DialogService} from \"aurelia-dialog\";\nimport {JobServiceConstants} from \"../../business/services/constants/jobServiceConstants\";\nimport {EngineerServiceConstants} from \"../../business/services/constants/engineerServiceConstants\";\nimport { RouteConfig } from \"aurelia-router\";\nimport { AppConstants } from \"../../../appConstants\";\n\nexport abstract class EditableViewModel extends BusinessRulesViewModel {\n\n    @observable()\n    public canEdit: boolean;\n    public isNew: boolean;\n    public jobId: string;\n    @observable()\n    public currentDataState: DataState;\n\n    public isScrolledBottom: boolean;\n\n    protected _jobService: IJobService;\n    protected _engineerService: IEngineerService;\n\n    private _initialDataState: DataState;\n    private _dataStateGroup: string;\n    private _subscriptions: Subscription[];\n    private _canEditCancelledJob: boolean;\n    private _currentRouteConfig: RouteConfig;\n\n    constructor(jobService: IJobService,\n                engineerService: IEngineerService,\n                labelService: ILabelService,\n                eventAggregator: EventAggregator,\n                dialogService: DialogService,\n                validationService: IValidationService,\n                businessRuleService: IBusinessRuleService,\n                catalogService: ICatalogService) {\n        super(labelService, eventAggregator, dialogService, validationService, businessRuleService, catalogService);\n\n        this._jobService = jobService;\n        this._engineerService = engineerService;\n        this.canEdit = false;\n        this._subscriptions = [];\n        this.isScrolledBottom = false;\n        this._canEditCancelledJob = false;\n    }\n\n    public activate(params: { jobId: string }, routeConfig: RouteConfig): Promise<void> {\n        this.jobId = params.jobId;\n        this.isNew = false;\n        this._initialDataState = undefined;\n        this._lastDataLoadTime = 0;\n        // by default a cancelled job (noacess etc) makes all screens canEdit: false.\n        // canEditCancelledJob is a route setting we can apply to override this behaviour on a per route basis.\n        // example: we don't want the task screens to be disabled (and validation to work) so override these with canEditCancelledJob: true\n        if (routeConfig) {\n            this._canEditCancelledJob = routeConfig.settings && !!routeConfig.settings.canEditCancelledJob;\n            this._currentRouteConfig = routeConfig;\n        }\n\n        return super.activate(params, routeConfig);\n    }\n\n    public canDeactivate(): Promise<boolean> {\n        let wasActivated = this._isActivated;\n\n        return super.canDeactivate()\n            .then((canDeactivate) => {\n                if (wasActivated && canDeactivate) {\n                    /* We do the save in canDeactivate as deactivate is not called when navigating to another child router (https://github.com/aurelia/router/issues/132),\n                     we also check that the view is activated as canDeactivate can get called multiple times as the parent routers are deconstructed */\n                    if (this.canEdit && !this.isNew) {\n                        // do not call this.resetLiveDataState() as the save calls it. This will avoid some dataState flashing\n                        return this.save();\n                    } else {\n                        return true;\n                    }\n                } else {\n                    return canDeactivate;\n                }\n            });\n    }\n\n    public attached(): void {\n        super.attached();\n\n        this._subscriptions.push(this._eventAggregator.subscribe(JobServiceConstants.JOB_STATE_CHANGED, () => this.stateChanged()));\n        this._subscriptions.push(this._eventAggregator.subscribe(EngineerServiceConstants.ENGINEER_WORKING_CHANGED, () => this.stateChanged()));\n\n        this.stateChanged();\n    }\n\n    public detached(): Promise<void> {\n        return super.detached()\n            .then(() => {\n                this._subscriptions.forEach(s => s.dispose());\n                this._subscriptions = [];\n                this.setDataState(undefined);\n            });\n    }\n\n    public setInitialDataState(dataStateId: string, initialDataState: DataState) : void {\n        this._initialDataState = initialDataState;\n        this.setDataState(initialDataState);\n    }\n\n    public setNewDataState(dataStateGroup: string) : void {\n        this._dataStateGroup = dataStateGroup;\n        this.setDataState(DataState.notVisited);\n    }\n\n    public getFinalDataState() : DataState {\n        return this._initialDataState === DataState.dontCare && !this._isDirty\n                    ? DataState.dontCare\n                    : this.currentDataState;\n    }\n\n    public load(): Promise<void> {\n        return this.loadModel()\n            .then(() => {\n                /* set the last data load time so that any value bindings don't trigger change events and in turn validation */\n                this._lastDataLoadTime = new Date().getTime();\n                return this.validateAllRules();\n            });\n    }\n\n    public save(): Promise<boolean> {\n        return this.validateAllRules()\n            .then(() => {\n                this._logger.debug(ObjectHelper.getClassName(this) + \" => save\");\n\n                let savePromise = this.saveModel();\n                if (savePromise) {\n                    return savePromise.then(() => {\n\n                        return true;\n                    });\n                } else {\n                    return false;\n                }\n            })\n            .then((hasSaved: boolean) => {\n                if (hasSaved) {\n                    this._logger.debug(ObjectHelper.getClassName(this) + \" => hasSaved: true\");\n                    this.notifyDataStateChanged();\n                    /* only show the confirmation if the data has changed */\n                    if (this._isDirty) {\n                        let finalDataState = this.getFinalDataState();\n                        this.showSaveToast(finalDataState);\n                    }\n                } else {\n                    this._logger.debug(ObjectHelper.getClassName(this) + \" => hasSaved: false\");\n                }\n                this.setDirty(false);\n                return true;\n            })\n            .catch(err => {\n                this.showError(err);\n                return false;\n            });\n    }\n\n    public undo(): Promise<void> {\n        /* set the last data load time so that any value bindings don't trigger change events and in turn validation\n        * we redo the validation after the load anyway */\n        this._lastDataLoadTime = new Date().getTime();\n\n        this.undoModel();\n\n        return this.loadModel()\n            .then(() => {\n                this.setDirty(false);\n                return this.validateAllRules();\n            });\n    }\n\n    public clear(): Promise<void> {\n        let objectName = this.getLabel(\"objectName\");\n\n        return this.showConfirmation(this.getLabel(\"confirmation\"), this.getParameterisedLabel(\"clearQuestion\", [objectName]))\n            .then((result) => {\n                if (!result.wasCancelled) {\n                    /* set the last data load time so that any value bindings don't trigger change events and in turn validation */\n                    this._lastDataLoadTime = new Date().getTime();\n\n                    return this.clearModel()\n                        .then(() => {\n                            this.setDirty(true);\n                            return this.validateAllRules();\n                        });\n                } else {\n                    return Promise.resolve();\n                }\n            });\n    }\n\n    public notifyDataStateChanged(): void {\n        this._eventAggregator.publish(JobServiceConstants.JOB_DATA_STATE_CHANGED);\n    }\n\n    public validationToggle(enable: boolean): void {\n        super.validationToggle(enable && this.canEdit);\n    }\n\n    protected isValidChanged(isValid: boolean) : void {\n        if (this._isActivated) {\n            this.setDataState(isValid ? DataState.valid : DataState.invalid);\n        }\n        if (this._isDirty) {\n            this._eventAggregator.publish(AppConstants.APP_SAVING);\n        }\n    }\n\n    protected stateChanged(): Promise<void> {\n        if (this.jobId) {\n            return Promise.all([\n                this._jobService.isJobEditable(this.jobId),\n                this._jobService.getJob(this.jobId),\n                this._engineerService.isWorking()\n            ])\n            .then(([isEditable, job, isWorking]) => {\n\n                let oldEdit = this.canEdit;\n                this.canEdit = isEditable && isWorking && (!job.jobNotDoingReason || this._canEditCancelledJob) ;\n\n                if (this.canEdit && !oldEdit) {\n                    /* we have switched to editing mode so validate the form using the initial data state logic */\n                    this.validationToggle(true);\n\n                    return this.validateAllRules();\n                } else {\n                    if (oldEdit === true && !this.isNew) {\n                        /*\n                            we were editing and are no longer editing so save any changes and remove any validation errors,\n                            unless we are in new mode and the user is completing a job, in which case we do not want to\n                            save the current record.\n                        */\n                        return this.save()\n                            .then(() => this.validationClearDisplay()\n                                .then(() => {\n                                    this.validationToggle(false);\n                                    return;\n                                }));\n                    }\n                }\n                return undefined;\n            })\n            .catch(() => {\n                this.canEdit = false;\n                this.validationToggle(false);\n            });\n        } else {\n            return Promise.resolve();\n        }\n    }\n\n    protected loadModel(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected saveModel(): Promise<void> {\n        return undefined;\n    }\n\n    protected clearModel(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected undoModel(): void {   }\n\n    protected showSaveToast(finalDataState: DataState) : void {\n        let objectName = this.getLabel(\"objectName\");\n        let msg = this.getParameterisedLabel(StringHelper.endsWith(objectName, \"s\") ? \"savedDescriptionPlural\" : \"savedDescription\", [objectName.toLowerCase()]);\n        if (finalDataState === DataState.invalid) {\n            msg += this.getLabel(\"savedDataInvalid\");\n            this.showDanger(this.getLabel(\"savedTitle\"), msg);\n        } else {\n            this.showSuccess(this.getLabel(\"savedTitle\"), msg);\n        }\n    }\n\n    protected pageReadyToValidate(): boolean {\n        // .DF_1149 - only validate if the page has loaded and specified its starting dataState\n        return (this._initialDataState !== undefined || this._dataStateGroup)\n            // do not validate if this is a don't care and the user has not touched it\n            && !(this._initialDataState === DataState.dontCare && !this._isDirty);\n    }\n\n    private setDataState(dataState: DataState) : void {\n        this.currentDataState = dataState;\n        if (this._currentRouteConfig && this._currentRouteConfig.settings) {\n            this._currentRouteConfig.settings.currentDataState = dataState;\n        }\n    }\n}\n"],"sourceRoot":"../../.."}