{"version":3,"sources":["hema/presentation/elements/yesNoButtonList.ts"],"names":[],"mappings":";;;;;;;;;;;;IAOA,IAAM,kBAAkB,GAAW,QAAQ,CAAC;IAC5C,IAAM,OAAO,GAAW,KAAK,CAAC;IAC9B,IAAM,MAAM,GAAW,IAAI,CAAC;IAG5B;QAaI,yBAAY,OAAgB,EAAE,YAA2B;YACrD,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YAEtB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QACtC,CAAC;QAEM,kCAAQ,GAAf;YAAA,iBAWC;YAVG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,kBAAkB,CAAC;iBACjD,IAAI,CAAC,UAAA,MAAM;gBACR,KAAI,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC;gBAC1C,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;gBAEvC,KAAI,CAAC,WAAW,GAAG;oBACf,IAAI,+BAAc,CAAC,KAAI,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC;oBAC/C,IAAI,+BAAc,CAAC,KAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC;iBAClD,CAAC;YACN,CAAC,CAAC,CAAC;QACX,CAAC;QAEM,sCAAY,GAAnB,UAAoB,QAAiB,EAAE,QAAiB;YACpD,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,IAAI,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;gBAClD,MAAM,CAAC;YACX,CAAC;YAED,IAAI,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC;YAC9C,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,SAAS,EAAE;gBACnD,MAAM,EAAE;oBACJ,KAAK,EAAE,QAAQ;iBAClB;gBACD,OAAO,EAAE,IAAI;aAChB,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QAC3B,CAAC;QA3CD;YADC,6BAAQ,CAAC,EAAE,kBAAkB,EAAE,6BAAW,CAAC,MAAM,EAAE,CAAC;;4DAChB;QAGrC;YADC,6BAAQ,CAAC,EAAE,kBAAkB,EAAE,6BAAW,CAAC,MAAM,EAAE,CAAC;;sDACnC;QANT,eAAe;YAD3B,0BAAM,CAAC,OAAO,EAAE,2BAAY,CAAC;6CAcL,OAAO;WAbnB,eAAe,CA+C3B;QAAD,sBAAC;KA/CD,AA+CC,IAAA;IA/CY,0CAAe","file":"yesNoButtonList.js","sourcesContent":["import { ButtonListItem } from \"../../../common/ui/elements/models/buttonListItem\";\nimport { LabelService } from \"../../business/services/labelService\";\nimport { inject } from \"aurelia-framework\";\nimport { ILabelService } from \"../../business/services/interfaces/ILabelService\";\nimport { bindable } from \"aurelia-templating\";\nimport { bindingMode } from \"aurelia-binding\";\n\nconst COMMON_LABEL_GROUP: string = \"common\";\nconst YES_KEY: string = \"yes\";\nconst NO_KEY: string = \"no\";\n\n@inject(Element, LabelService)\nexport class YesNoButtonList {\n\n    @bindable({ defaultBindingMode: bindingMode.oneWay })\n    public yesNoLookup: ButtonListItem[];\n\n    @bindable({ defaultBindingMode: bindingMode.twoWay })\n    public value: any;\n\n    private  _element: Element;\n    private _yesLabel: string;\n    private _noLabel: string;\n    private _labelService: ILabelService;\n\n    constructor(element: Element, labelService: ILabelService) {\n        this.yesNoLookup = [];\n\n        this._element = element;\n        this._labelService = labelService;\n    }\n\n    public attached(): Promise<void> {\n        return this._labelService.getGroup(COMMON_LABEL_GROUP)\n            .then(labels => {\n                this._yesLabel = labels[YES_KEY] || \"yes\";\n                this._noLabel = labels[NO_KEY] || \"no\";\n\n                this.yesNoLookup = [\n                    new ButtonListItem(this._yesLabel, true, false),\n                    new ButtonListItem(this._noLabel, false, false)\n                ];\n            });\n    }\n\n    public valueChanged(newState: boolean, oldState: boolean): void {\n        if (newState === oldState || newState === undefined) {\n            return;\n        }\n\n        let eventName = newState ? \"on-yes\" : \"on-no\"; \n        this._element.dispatchEvent(new CustomEvent(eventName, {\n            detail: {\n                value: newState\n            },\n            bubbles: true\n        }));\n        this.value = undefined;\n    }\n}\n"],"sourceRoot":"../../.."}