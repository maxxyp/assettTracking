{"version":3,"sources":["hema/presentation/elements/stateButtons.ts"],"names":[],"mappings":"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","file":"stateButtons.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\r\nimport * as Logging from \"aurelia-logging\";\r\nimport { customElement, bindable, bindingMode, inject } from \"aurelia-framework\";\r\nimport { IconButtonListItem } from \"../../../common/ui/elements/models/iconButtonListItem\";\r\nimport { JobService } from \"../../business/services/jobService\";\r\nimport { IJobService } from \"../../business/services/interfaces/IJobService\";\r\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\r\nimport { JobState } from \"../../business/models/jobState\";\r\nimport { EngineerService } from \"../../business/services/engineerService\";\r\nimport { IEngineerService } from \"../../business/services/interfaces/IEngineerService\";\r\nimport { JobServiceConstants } from \"../../business/services/constants/jobServiceConstants\";\r\nimport { AppConstants } from \"../../../appConstants\";\r\nimport { Router } from \"aurelia-router\";\r\nimport { ArchiveService } from \"../../business/services/archiveService\";\r\nimport { IArchiveService } from \"../../business/services/interfaces/IArchiveService\";\r\nimport { LabelService } from \"../../business/services/labelService\";\r\nimport { ILabelService } from \"../../business/services/interfaces/ILabelService\";\r\nimport { StringHelper } from \"../../../common/core/stringHelper\";\r\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\r\nimport { Guid } from \"../../../common/core/guid\";\r\nimport { IToastItem } from \"../../../common/ui/elements/models/IToastItem\";\r\nimport { BaseException } from \"../../../common/core/models/baseException\";\r\nimport { ViewService } from \"../services/viewService\";\r\nimport { ReferenceDataService } from \"../../business/services/referenceDataService\";\r\nimport { IReferenceDataService } from \"../../business/services/interfaces/IReferenceDataService\";\r\nimport { DialogService } from \"aurelia-dialog\";\r\nimport { ErrorDialogModel } from \"../../../common/ui/dialogs/models/errorDialogModel\";\r\nimport { ErrorDialog } from \"../../../common/ui/dialogs/errorDialog\";\r\nimport { WindowHelper } from \"../../core/windowHelper\";\r\nimport { AnalyticsConstants } from \"../../../common/analytics/analyticsConstants\";\r\nimport * as moment from \"moment\";\r\nimport { Confirmation } from \"../modules/confirmation/confirmation\";\r\nimport { ModalBusyService } from \"../../../common/ui/services/modalBusyService\";\r\nimport { IModalBusyService } from \"../../../common/ui/services/IModalBusyService\";\r\nimport { Job } from \"../../business/models/job\";\r\nimport { ChargeService } from \"../../business/services/charge/chargeService\";\r\nimport { IChargeService } from \"../../business/services/interfaces/charge/IchargeService\";\r\nimport { IBusinessRuleService } from \"../../business/services/interfaces/IBusinessRuleService\";\r\nimport { BusinessRuleService } from \"../../business/services/businessRuleService\";\r\n@customElement(\"state-buttons\")\r\n@inject(JobService, EngineerService, EventAggregator, Router, ArchiveService, LabelService, ViewService,\r\n        ReferenceDataService, DialogService, ModalBusyService, ChargeService, BusinessRuleService)\r\nexport class StateButtons {\r\n\r\n    @bindable({ defaultBindingMode: bindingMode.oneWay })\r\n    public jobId: string;\r\n\r\n    @bindable({ defaultBindingMode: bindingMode.oneWay })\r\n    public requestedState: number;\r\n\r\n    public possibleStates: IconButtonListItem[];\r\n    public engineerService: IEngineerService;\r\n\r\n    private _jobService: IJobService;\r\n    private _eventAggregator: EventAggregator;\r\n\r\n    private _subscriptions: Subscription[];\r\n\r\n    private _archiveService: IArchiveService;\r\n    private _router: Router;\r\n    private _labelService: ILabelService;\r\n    private _viewService: ViewService;\r\n    private _referenceDataService: IReferenceDataService;\r\n    private _dialogService: DialogService;\r\n    private _businessRuleService: IBusinessRuleService;\r\n\r\n    private _logger: Logging.Logger;\r\n    private _modalBusyService: IModalBusyService;\r\n    private _labels: { [key: string]: string };\r\n    private _modalStartTime: number;\r\n    private _chargeService: IChargeService;\r\n\r\n    constructor(jobService: IJobService,\r\n        engineerService: IEngineerService,\r\n        eventAggregator: EventAggregator,\r\n        router: Router,\r\n        archiveService: IArchiveService,\r\n        labelService: ILabelService,\r\n        viewService: ViewService,\r\n        referenceDataService: IReferenceDataService,\r\n        dialogService: DialogService,\r\n        modalBusyService: IModalBusyService,\r\n        chargeService: IChargeService,\r\n        businessRuleService: IBusinessRuleService) {\r\n        this._jobService = jobService;\r\n        this.engineerService = engineerService;\r\n        this._eventAggregator = eventAggregator;\r\n        this._router = router;\r\n        this._archiveService = archiveService;\r\n        this._labelService = labelService;\r\n        this._viewService = viewService;\r\n        this._referenceDataService = referenceDataService;\r\n        this._dialogService = dialogService;\r\n\r\n        this.possibleStates = [];\r\n        this._subscriptions = [];\r\n\r\n        this.updateState();\r\n        this.updateDataState();\r\n\r\n        this._logger = Logging.getLogger(\"StateButtons\");\r\n        this._modalBusyService = modalBusyService;\r\n        this._chargeService = chargeService;\r\n        this._businessRuleService = businessRuleService;\r\n    }\r\n\r\n    public attached(): void {\r\n        this._subscriptions.push(this._eventAggregator.subscribe(JobServiceConstants.JOB_STATE_CHANGED, () => this.updateState()));\r\n        this._subscriptions.push(this._eventAggregator.subscribe(JobServiceConstants.JOB_DATA_STATE_CHANGED, () => this.updateDataState()));\r\n        this._subscriptions.push(this._eventAggregator.subscribe(JobServiceConstants.JOB_COMPLETION_REFRESH, () => this.showHideJobCompletionProgressModal(false)));\r\n\r\n        this._labelService.getGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this)))\r\n            .then(labels => {\r\n                this._labels = labels;\r\n            });\r\n    }\r\n\r\n    public detached(): void {\r\n        this._subscriptions.forEach(s => s.dispose());\r\n        this._subscriptions = [];\r\n    }\r\n\r\n    public jobIdChanged(): void {\r\n        this.updateState();\r\n    }\r\n\r\n    public requestedStateChanged(newValue: number, oldValue: number): Promise<void> {\r\n\r\n        return this._jobService.getJobState(this.jobId)\r\n            .then(state => {\r\n                if (state.value === newValue) {\r\n                    return Promise.resolve();\r\n                }\r\n\r\n                this.addToAnalytics(newValue);\r\n\r\n                let p: Promise<boolean> = Promise.resolve(true);\r\n\r\n                if (newValue === JobState.enRoute) {\r\n                    p = this.ensureEngineerWorkingIsSet()\r\n                        .then(() => {\r\n                            return this.refreshAppIfReferenceDataIsOutOfDate();\r\n                        });\r\n                } else if (newValue === JobState.complete) {\r\n                    p = this.ensureJobSavedAndRunCompleteChecks()\r\n                        .then(async completeJobChecksPassed => {\r\n                            if (!completeJobChecksPassed) {\r\n                                this.requestedState = oldValue;\r\n                            } else {\r\n                                await this.showHideJobCompletionProgressModal(true);\r\n\r\n                                let job = await this._jobService.getJob(this.jobId);\r\n                                // the below is to handle the scenario where the user is pressing complete button without visiting any tabs after relaunching the app\r\n                                // rebuild the charge model as it is not getting seriallized properly when the above instance take place\r\n                                if (job && Job.isIncompleteSerialization(job)) {\r\n                                    await this._chargeService.startCharges(this.jobId);\r\n                                }\r\n                            }\r\n                            return completeJobChecksPassed;\r\n                        });\r\n                }\r\n\r\n                return p.then(okToSetState => okToSetState\r\n                    ? this._jobService.setJobState(this.jobId, newValue)\r\n                        .then(() => this.addToArchive(this.jobId, newValue))\r\n                    : null);\r\n            });\r\n    }\r\n\r\n    private addToAnalytics(state: number): void {\r\n        if (state && this.jobId) {\r\n            try {\r\n                this._eventAggregator.publish(AnalyticsConstants.ANALYTICS_EVENT, {\r\n                    category: AnalyticsConstants.JOB_STATE + \" : \" + this.jobId,\r\n                    action: JobState[state],\r\n                    label: moment().format(AnalyticsConstants.DATE_TIME_FORMAT),\r\n                    metric: AnalyticsConstants.METRIC\r\n                });\r\n            } catch {\r\n                // do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    private ensureEngineerWorkingIsSet(): Promise<void> {\r\n        return this.engineerService.isWorking()\r\n            /* undefined means go to working mode instead of a specific status */\r\n            .then(isWorking => isWorking ? null : this.engineerService.setStatus(undefined));\r\n    }\r\n\r\n    private ensureJobSavedAndRunCompleteChecks(): Promise<boolean> {\r\n        return this._viewService.saveAll()\r\n            .then(() => this.checkIsAllDataStateValid())\r\n            .then(isValidSoFar => isValidSoFar ? this.checkIsAppointmentSetAndRedirect() : false)\r\n            .then(isValidSoFar => isValidSoFar ? this.checkIfJobFinishTimeNeedsToBeUpdated() : false);\r\n    }\r\n\r\n    private checkIsAppointmentSetAndRedirect(): Promise<boolean> {\r\n        return this._jobService.requiresAppointment(this.jobId)\r\n            .then(requiresAppt => {\r\n                if (requiresAppt) {\r\n                    this.showPrompt(\"bookAppointmentTitle\", \"bookAppointmentDescription\");\r\n                    this._router.navigate(\"/customers/to-do/\" + this.jobId + \"/appointment/book-an-appointment\");\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n    }\r\n\r\n    private checkIsAllDataStateValid(): Promise<boolean> {\r\n        return this._jobService.getDataStateSummary(this.jobId)\r\n            .then(dataStateSummary => {\r\n                if (dataStateSummary.getCombinedTotals().invalid + dataStateSummary.getCombinedTotals().notVisited > 0) {\r\n                    this.showPrompt(\"isValidReminderTitle\", \"isValidReminderDescription\");\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n    }\r\n\r\n    private async refreshAppIfReferenceDataIsOutOfDate(): Promise<boolean> {\r\n        let shouldUserRefresh = await this._referenceDataService.shouldUserRefreshReferenceData();\r\n        if (!shouldUserRefresh) {\r\n            return true;\r\n        }\r\n\r\n        let model: ErrorDialogModel = new ErrorDialogModel();\r\n        model.errorMessage = ObjectHelper.getPathValue(this._labels, \"referenceDataOutOfDateDescription\");\r\n        model.header = ObjectHelper.getPathValue(this._labels, \"referenceDataOutOfDateTitle\");\r\n\r\n        await this._dialogService.open({ viewModel: ErrorDialog, model: model });\r\n\r\n        WindowHelper.reload();\r\n        return false;\r\n    }\r\n\r\n    private showPrompt(titleKey: string, descriptionKey: string): void {\r\n        let toastItem: IToastItem = {\r\n            id: Guid.newGuid(),\r\n            title: ObjectHelper.getPathValue(this._labels, titleKey),\r\n            content: ObjectHelper.getPathValue(this._labels, descriptionKey),\r\n            toastAction: { details: ObjectHelper.getPathValue(this._labels, descriptionKey) },\r\n            style: \"info\",\r\n            dismissTime: 2.25\r\n        };\r\n        this._eventAggregator.publish(AppConstants.APP_TOAST_ADDED, toastItem);\r\n    }\r\n\r\n    private updateState(): void {\r\n        this.possibleStates = [];\r\n\r\n        if (this.jobId) {\r\n            this._jobService.getActiveJobId()\r\n                .then((activeJobId) => {\r\n                    let showButtons: boolean;\r\n                    if (activeJobId) {\r\n                        showButtons = activeJobId === this.jobId;\r\n                    } else {\r\n                        showButtons = true;\r\n                    }\r\n\r\n                    if (showButtons) {\r\n                        this._jobService.getJobState(this.jobId)\r\n                            .then(state => {\r\n                                this.requestedState = state.value;\r\n\r\n                                this._jobService.getJobTargetStates(this.jobId)\r\n                                    .then((targetStates) => {\r\n                                        if (targetStates) {\r\n                                            for (let i = 0; i < targetStates.length; i++) {\r\n                                                this.possibleStates.push(\r\n                                                    new IconButtonListItem(targetStates[i].name,\r\n                                                        targetStates[i].value,\r\n                                                        false,\r\n                                                        \"job-state-\" + JobState[targetStates[i].value]));\r\n                                            }\r\n\r\n                                            this.updateDataState();\r\n                                        }\r\n                                    })\r\n                                    .catch((error: BaseException) => {\r\n                                        this._logger.error(error && error.toString());\r\n                                    });\r\n                            });\r\n                    }\r\n                });\r\n\r\n        }\r\n    }\r\n\r\n    private updateDataState(): void {\r\n        if (this.possibleStates) {\r\n            let completeState = this.possibleStates.find(i => i.value === JobState.complete);\r\n\r\n            if (completeState) {\r\n                if (this.jobId) {\r\n                    this._jobService.getActiveJobId()\r\n                        .then((activeJobId) => {\r\n                            if (activeJobId === this.jobId) {\r\n                                this._jobService.getDataStateSummary(this.jobId)\r\n                                    .then((dataSummary) => {\r\n                                        if (dataSummary) {\r\n                                            let combined = dataSummary.getCombinedTotals();\r\n\r\n                                            if (combined.invalid > 0) {\r\n                                                completeState.disabled = true;\r\n                                                completeState.iconClassName = \"job-state-complete state-invalid\";\r\n                                            } else if (combined.notVisited > 0) {\r\n                                                completeState.disabled = true;\r\n                                                completeState.iconClassName = \"job-state-complete state-not-visited\";\r\n                                            } else {\r\n                                                completeState.disabled = false;\r\n                                                completeState.iconClassName = \"job-state-complete state-valid\";\r\n                                            }\r\n                                        } else {\r\n                                            completeState.disabled = true;\r\n                                            completeState.iconClassName = \"job-state-complete state-invalid\";\r\n                                        }\r\n                                    });\r\n                            }\r\n                        });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private addToArchive(jobId: string, jobState: JobState): Promise<void> {\r\n        return this.engineerService.getCurrentEngineer().then((engineer) => {\r\n            if (engineer) {\r\n                return this._jobService.getJob(jobId).then((job) => {\r\n                    if (job) {\r\n                        return this._archiveService.addUpdateJobState(job, engineer, jobState);\r\n                    } else {\r\n                        return Promise.resolve();\r\n                    }\r\n                });\r\n            } else {\r\n                return Promise.resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    private async checkIfJobFinishTimeNeedsToBeUpdated(): Promise<boolean> {\r\n        let needToBeUpdated = await this._jobService.checkIfJobFinishTimeNeedsToBeUpdated();\r\n\r\n        if (needToBeUpdated) {\r\n            let [labels, job] = await Promise.all([this._labelService.getGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this))),\r\n                this._jobService.getJob(this.jobId)]);\r\n\r\n            let amendLabel = ObjectHelper.getPathValue(labels, \"amend\");\r\n            let continueLabel = ObjectHelper.getPathValue(labels, \"continue\");\r\n            let title = ObjectHelper.getPathValue(labels, \"confirmation\");\r\n            let message = ObjectHelper.getPathValue(labels, \"jobFinishTimeUpdateConfirmationMessage\");\r\n            let dialogResult = await this._dialogService.open({ viewModel: Confirmation, model: { title: title, message: message, yesLabel: amendLabel, noLabel: continueLabel } });\r\n            if (!dialogResult.wasCancelled) {\r\n                let businessRules = await this._businessRuleService.getQueryableRuleGroup(\"jobService\");\r\n                let jobDoingStatuses: string = businessRules.getBusinessRule<string>(\"jobDoingStatuses\");\r\n                let activeTasks = job && job.tasks && job.tasks.filter(task => jobDoingStatuses.indexOf(task.status) > -1) || [];\r\n                let routePath: string = activeTasks.length > 1\r\n                                            ? \"/customers/to-do/\" + this.jobId + \"/activities\"\r\n                                            : activeTasks.length === 1 ? \"/customers/to-do/\" + this.jobId + \"/activities/\" + activeTasks[0].id + \"/details\" \r\n                                            : undefined;\r\n                if (routePath) {\r\n                    this._router.navigate(routePath);\r\n                    return false;\r\n                }          \r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private async showHideJobCompletionProgressModal(isJobCompletionInProgress: boolean): Promise<void> {\r\n        if (isJobCompletionInProgress) {\r\n            const jobCompletingText = ObjectHelper.getPathValue(this._labels, \"jobCompletingText\");          \r\n            await this._modalBusyService.showBusy(\"StateButtons\", \"Visit Completion\", jobCompletingText);   \r\n            this._modalStartTime = new Date().getTime();\r\n        } else {\r\n            const modalEndTime = new Date().getTime();\r\n            const diff: number = modalEndTime - this._modalStartTime || 0;\r\n            const modalDisplayms: number = 2000;\r\n            // checking if the modal has been displaying for less than 2 seconds\r\n            if (Math.round(diff) < modalDisplayms) {\r\n                const delaySecs = modalDisplayms - Math.round(diff);\r\n                await Promise.delay(delaySecs);\r\n            }\r\n            await this._modalBusyService.hideBusy(\"StateButtons\");\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../../.."}