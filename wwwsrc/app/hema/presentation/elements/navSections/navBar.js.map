{"version":3,"sources":["hema/presentation/elements/navSections/navBar.ts"],"names":[],"mappings":"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","file":"navBar.js","sourcesContent":["import {inject} from \"aurelia-dependency-injection\";\nimport {customElement} from \"aurelia-templating\";\nimport {EventAggregator, Subscription} from \"aurelia-event-aggregator\";\nimport {Router} from \"aurelia-router\";\nimport {App} from \"../../../../app\";\nimport {ConfigurationService} from \"../../../../common/core/services/configurationService\";\nimport {IConfigurationService} from \"../../../../common/core/services/IConfigurationService\";\nimport { IHemaConfiguration } from \"../../../IHemaConfiguration\";\n\n@customElement(\"nav-bar\")\n@inject(Router, EventAggregator, ConfigurationService)\nexport class NavBar {\n    public showSearch: boolean;\n    public breadCrumbs: string[];\n    public navHistory: string[];\n\n    public simulation: string;\n    public applicationModeBadge: string;\n\n    private _eventAggregator: EventAggregator;\n    private _router: Router;\n\n    private _routeChangeSubscription: Subscription;\n\n    constructor(router: Router, eventAggregator: EventAggregator, configurationService: IConfigurationService) {\n        this._eventAggregator = eventAggregator;\n        this._router = router;\n\n        this._routeChangeSubscription = this._eventAggregator.subscribe(\"router:navigation:complete\", () => this.handleRouteChanged(router));\n\n        this.breadCrumbs = [];\n        this.showSearch = false;\n        this.navHistory = [];\n\n        this.applicationModeBadge = configurationService.getConfiguration<IHemaConfiguration>().applicationBadge || this.generateApplicationModeBadge(configurationService);\n    }\n\n    public showHideSearchResults(): void {\n        this.showSearch = !this.showSearch;\n    }\n\n    public back(): void {\n        if (this.navHistory.length > 0) {\n            this.navHistory.pop();\n            this._router.navigate(this.navHistory.pop());\n        }\n    }\n\n    public navigateByIndex(index: number) : void {\n        this._router.navigate(this.navHistory[this.navHistory.length - 1].split(\"/\").slice(1, index + 2).join(\"/\"));\n    }\n\n    public detached(): void {\n        if (this._routeChangeSubscription) {\n            this._routeChangeSubscription.dispose();\n        }\n    }\n\n    private handleRouteChanged(router: Router): void {\n        this.breadCrumbs = router.currentInstruction.fragment.split(\"/\").slice(1);\n\n        if (this.breadCrumbs.length === 1) {\n            /* if we have navigated to a top level route then clear the history */\n            this.navHistory = [];\n        }\n        this.navHistory.push(router.currentInstruction.fragment);\n\n        /* limit to 20 entries */\n        this.navHistory.slice(Math.max(this.navHistory.length - 5, 1));\n\n        for (let i = 0; i < this.breadCrumbs.length; i++) {\n            /* if the breadcrumb contains digits then treat it as an id based on the previous item */\n            if (/\\d/.test(this.breadCrumbs[i]) && i >= 1) {\n                let previous = this.breadCrumbs[i - 1];\n                if (previous.charAt(previous.length - 1) === \"s\") {\n                    previous = previous.substr(0, previous.length - 1);\n                }\n                this.breadCrumbs[i] = \"Details\";\n            } else {\n                this.breadCrumbs[i] = this.titleCase(this.breadCrumbs[i].replace(/-/g, \" \"));\n            }\n        }\n    }\n\n    private titleCase(val: string): string {\n        return val.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n    }\n\n    private generateApplicationModeBadge(configurationService: IConfigurationService): string {\n        let badge: string;\n        let simulationCount = App.requiresSimulation(configurationService);\n        if (simulationCount.totalRoutes === simulationCount.simulatedRoutes) {\n            badge = this.applicationModeBadge = \"SIMULATION\";\n        } else if (simulationCount.simulatedRoutes > 0) {\n            badge = this.applicationModeBadge = \"PARTIAL SIMULATION\";\n        }\n        return badge;\n    }\n}\n"],"sourceRoot":"../../../.."}