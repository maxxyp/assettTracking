{"version":3,"sources":["hema/presentation/elements/worklistNotification.ts"],"names":[],"mappings":"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","file":"worklistNotification.js","sourcesContent":["import { bindingMode } from \"aurelia-binding\";\nimport { bindable, customElement, inject } from \"aurelia-framework\";\nimport { EngineerService } from \"../../business/services/engineerService\";\nimport { JobService } from \"../../business/services/jobService\";\nimport { LabelService } from \"../../business/services/labelService\";\nimport { ILabelService } from \"../../business/services/interfaces/ILabelService\";\nimport { IJobService } from \"../../business/services/interfaces/IJobService\";\nimport { IEngineerService } from \"../../business/services/interfaces/IEngineerService\";\nimport { Subscription, EventAggregator } from \"aurelia-event-aggregator\";\nimport { JobState } from \"../../business/models/jobState\";\nimport { WorkRetrievalServiceConstants } from \"../../business/services/constants/workRetrievalServiceConstants\";\nimport { StringHelper } from \"../../../common/core/stringHelper\";\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\nimport { EngineerServiceConstants } from \"../../business/services/constants/engineerServiceConstants\";\n\nimport { AttributeConstants } from \"../../../common/ui/attributes/constants/attributeConstants\";\nimport { WorkRetrievalTracker } from \"../../business/services/workRetrievalTracker\";\nimport { AnalyticsConstants } from \"../../../common/analytics/analyticsConstants\";\n\nconst WORKLIST_RETRIVAL_LABEL: string = \"Worklist Retrival\";\n\n@customElement(\"worklist-notification\")\n@inject(LabelService, EventAggregator, JobService, EngineerService, WorkRetrievalTracker)\nexport class WorklistNotification {\n    public jobsTodoCount: number;\n    public activitiesCount: number;\n    public labels: { [key: string]: string };\n    public isFullScreen: boolean;\n\n    @bindable({ defaultBindingMode: bindingMode.oneWay })\n    public jobRefreshFn: () => Promise<any>;\n\n    public status: \"NOT_WORKING\" | \"NORMAL\" | \"REQUESTING\" | \"FAILED_WORKLIST\" | \"NEW_WORKLIST\";\n    public  tracker: WorkRetrievalTracker;\n\n    private _eventAggregator: EventAggregator;\n    private _subscriptions: Subscription[];\n    private _jobService: IJobService;\n    private _engineerService: IEngineerService;\n    private _labelService: ILabelService;\n    private _lastKnownUpdatedTime: Date;\n\n    constructor(labelService: ILabelService,\n        eventAggregator: EventAggregator,\n        jobService: IJobService,\n        engineerService: IEngineerService,\n        workRetrievalTracker: WorkRetrievalTracker) {\n        this._eventAggregator = eventAggregator;\n        this._jobService = jobService;\n        this._engineerService = engineerService;\n\n        this._labelService = labelService;\n        this.labels = {};\n        this.tracker = workRetrievalTracker;\n        this._subscriptions = [];\n    }\n\n    public async attached(): Promise<void> {\n        this.labels = await this._labelService.getGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this)));\n\n        this._subscriptions = [\n            this._eventAggregator.subscribe(EngineerServiceConstants.ENGINEER_STATUS_CHANGED, () => this.update()),\n            this._eventAggregator.subscribe(WorkRetrievalServiceConstants.REFRESH_START_STOP, () => this.update()),\n            this._eventAggregator.subscribe(AttributeConstants.FULL_SCREEN_TOGGLE, (isFullScreen: boolean) => this.isFullScreen = window.isFullScreen)\n        ];\n\n        await this.updateList();\n        await this.update();\n    }\n\n    public detached(): void {\n        this._subscriptions.forEach(s => s.dispose());\n    }\n\n    public triggerWorklistRetrieval(): void {\n        this._eventAggregator.publish(WorkRetrievalServiceConstants.REQUEST_WORK_AND_REFRESH_WORK_LIST);\n        this._eventAggregator.publish(AnalyticsConstants.ANALYTICS_EVENT, {\n            category: AnalyticsConstants.WORKLIST_RETRIVAL_CATEGORY,\n            action: AnalyticsConstants.CLICK_ACTION,\n            label: WORKLIST_RETRIVAL_LABEL,\n            metric: AnalyticsConstants.METRIC\n        });\n    }\n\n    public async refreshAfterNewWorklist(): Promise<void> {\n        await this.updateList();\n        await this.update();\n    }\n\n    private async update(): Promise<void> {\n\n        let getTime = (date: Date) => date ? date.getTime() : 0;\n\n        if (!await this._engineerService.isWorking()) {\n            this.status = \"NOT_WORKING\";\n        } else if (this.tracker.requestingStatus) {\n            this.status = \"REQUESTING\";\n        } else if (getTime(this.tracker.lastFailedTime) > getTime(this.tracker.lastRequestTime)) {\n            this.status = \"FAILED_WORKLIST\";\n        } else if (this._lastKnownUpdatedTime && getTime(this.tracker.lastUpdatedTime) !== getTime(this._lastKnownUpdatedTime)) {\n            this.status = \"NEW_WORKLIST\";\n        } else {\n\n            // edge case: we are looking at the screen when the first request of the day comes in, i.e. this._lastKnownUpdatedTime is empty,\n            // in this case don't show the refresh worklist button and just automatically refresh the worklist\n            if (getTime(this.tracker.lastUpdatedTime) !== getTime(this._lastKnownUpdatedTime)) {\n                await this.updateList();\n            }\n\n            this.status = \"NORMAL\";\n            let jobsToDo = await this._jobService.getJobsToDo() || [];\n            let liveJobs = jobsToDo.filter(x => x.state !== JobState.done);\n\n            this.jobsTodoCount = liveJobs.length;\n            this.activitiesCount = liveJobs.map(job => (job.tasks || []).length)\n                                        .reduce((prev, curr) => prev + curr, 0);\n        }\n    }\n\n    private async updateList(): Promise<void> {\n        this._lastKnownUpdatedTime = this.tracker.lastUpdatedTime;\n        if (!!this.jobRefreshFn) {\n            await this.jobRefreshFn();\n        }\n    }\n}\n"],"sourceRoot":"../../.."}