{"version":3,"sources":["hema/presentation/elements/catalogLookup.ts"],"names":[],"mappings":"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","file":"catalogLookup.js","sourcesContent":["import {inject, bindable} from \"aurelia-framework\";\nimport {CatalogService} from \"../../business/services/catalogService\";\nimport {ICatalogService} from \"../../business/services/interfaces/ICatalogService\";\n\n@inject(CatalogService)\nexport class CatalogLookup {\n    @bindable public catalog: string;\n    @bindable public keyField: string;\n    @bindable public descriptionField: string;\n    @bindable public splitIndex: number;\n    @bindable public value: string;\n\n    public display: string;\n\n    private _catalogService: ICatalogService;\n\n    constructor(catalogService: ICatalogService) {\n        this._catalogService = catalogService;\n    }\n\n    public catalogChanged(): void {\n        this.updateDisplay();\n    }\n\n    public keyFieldChanged(): void {\n        this.updateDisplay();\n    }\n\n    public descriptionFieldChanged(): void {\n        this.updateDisplay();\n    }\n\n    public valueChanged(): void {\n        this.updateDisplay();\n    }\n\n    public splitIndexChanged(): void {\n        this.updateDisplay();\n    }\n\n    public updateDisplay(): void {\n        this.display = this.value;\n\n        if (this.catalog && this.keyField && this.descriptionField && this.value) {\n            let keyFields: string[];\n            let values: string[];\n            if (this.keyField.indexOf(\"|\") > 0) {\n                keyFields = this.keyField.split(\"|\");\n            } else {\n                keyFields = [this.keyField];\n            }\n            if (this.value.indexOf(\"|\") > 0) {\n                values = this.value.split(\"|\");\n            } else {\n                values = [this.value];\n            }\n            this._catalogService.getItemDescription(this.catalog, keyFields, values, this.descriptionField)\n                .then(description => {\n                   if (description) {\n                       if (this.splitIndex !== undefined) {\n                           // this is the extra long hyphen\n                           let splitParts: string[] = description.split(\"–\");\n                           if (splitParts.length === 1) {\n                               // regular hyphen\n                               splitParts = description.split(\"–\");\n                           }\n\n                           if (splitParts.length > this.splitIndex) {\n                               this.display = splitParts[this.splitIndex].trim();\n                           } else {\n                               this.display = description;\n                           }\n\n                       } else {\n                           this.display = description;\n                       }\n                   }\n                })\n                .catch(() => {});\n        }\n    }\n}\n"],"sourceRoot":"../../.."}