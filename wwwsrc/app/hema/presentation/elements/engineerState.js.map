{"version":3,"sources":["hema/presentation/elements/engineerState.ts"],"names":[],"mappings":"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","file":"engineerState.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport { customElement, bindable, bindingMode, inject } from \"aurelia-framework\";\nimport { IEngineerService } from \"../../business/services/interfaces/IEngineerService\";\nimport { EngineerService } from \"../../business/services/engineerService\";\nimport { ILabelService } from \"../../business/services/interfaces/ILabelService\";\nimport { LabelService } from \"../../business/services/labelService\";\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\nimport { StringHelper } from \"../../../common/core/stringHelper\";\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\nimport { BusinessRuleService } from \"../../business/services/businessRuleService\";\nimport { IBusinessRuleService } from \"../../business/services/interfaces/IBusinessRuleService\";\nimport { JobService } from \"../../business/services/jobService\";\nimport { IJobService } from \"../../business/services/interfaces/IJobService\";\nimport { JobState } from \"../../business/models/jobState\";\nimport { EngineerServiceConstants } from \"../../business/services/constants/engineerServiceConstants\";\nimport { JobServiceConstants } from \"../../business/services/constants/jobServiceConstants\";\nimport { IFieldOperativeStatus } from \"../../business/models/reference/IFieldOperativeStatus\";\nimport { ConfigurationService } from \"../../../common/core/services/configurationService\";\nimport { IConfigurationService } from \"../../../common/core/services/IConfigurationService\";\nimport { IHemaConfiguration } from \"../../IHemaConfiguration\";\nimport { CatalogConstants } from \"../../business/services/constants/catalogConstants\";\nimport { Router } from \"aurelia-router\";\nimport { FftService } from \"../../api/services/fftService\";\nimport { DialogService, DialogResult } from \"aurelia-dialog\";\nimport { ErrorDialogModel } from \"../../../common/ui/dialogs/models/errorDialogModel\";\nimport { ErrorDialog } from \"../../../common/ui/dialogs/errorDialog\";\nimport { ArchiveService } from \"../../business/services/archiveService\";\nimport { IArchiveService } from \"../../business/services/interfaces/IArchiveService\";\nimport { InfoDialog } from \"../../../common/ui/dialogs/infoDialog\";\nimport { InfoDialogModel } from \"../../../common/ui/dialogs/models/infoDialogModel\";\nimport { EndOfDayFail } from \"../modules/eod/endOfDayFail\";\nimport { UserPreferenceConstants } from \"../../business/services/constants/userPreferenceConstants\";\nimport { StorageService } from \"../../business/services/storageService\";\nimport { IStorageService } from \"../../business/services/interfaces/IStorageService\";\nimport { EngineerDialogConstants } from \"../constants/engineerDialogConstants\";\nimport { MessageService } from \"../../business/services/messageService\";\nimport { IMessageService } from \"../../business/services/interfaces/IMessageService\";\nimport { ArchiveConstants } from \"../../business/services/constants/archiveConstants\";\nimport { IAnalyticsService } from \"../../../common/analytics/IAnalyticsService\";\nimport { Analytics } from \"../../../common/analytics/analytics\";\nimport { ENGINEER_TYPE_DIEMENTION1, ENGINEER_PATCH_DIEMENTION2, ENGINEER_REGION_DIEMENTION3 }\n    from \"../../../common/analytics/analyticsCustomDimentions\";\nimport { VanStockService } from \"../../api/services/vanStockService\";\nimport { VanStockService as BusinessVanStockService} from \"../../business/services/vanStockService\";\nimport { IResilientService } from \"../../../common/resilience/services/interfaces/IResilientService\";\nimport { FeatureToggleService } from \"../../business/services/featureToggleService\";\nimport { IFeatureToggleService } from \"../../business/services/interfaces/IFeatureToggleService\";\nimport { IVanStockService } from \"../../business/services/interfaces/IVanStockService\";\n\n@customElement(\"engineer-state\")\n@inject(EngineerService, JobService, LabelService, BusinessRuleService, EventAggregator, ConfigurationService,\n    Router, FftService, VanStockService, DialogService, ArchiveService, StorageService, MessageService, Analytics,\n    FeatureToggleService, BusinessVanStockService )\nexport class EngineerState {\n\n    @bindable({ defaultBindingMode: bindingMode.oneWay })\n    public engineerState: string;\n\n    public engineerStatuses: IFieldOperativeStatus[];\n\n    public canChangeEngineerStatus: boolean;\n    public userSettingsComplete: boolean;\n    public labels: { [key: string]: string };\n    public catalog: CatalogConstants;\n    public myStatusLabel: string;\n\n    public isSignedOn: boolean;\n\n    public engineerService: IEngineerService;\n    private _labelService: ILabelService;\n    private _jobService: IJobService;\n    private _messageService: IMessageService;\n    private _analytics: IAnalyticsService;\n    private _businessRuleService: IBusinessRuleService;\n    private _eventAggregator: EventAggregator;\n\n    private _workingStatus: IFieldOperativeStatus;\n    private _notWorkingStatus: IFieldOperativeStatus;\n    private _signOnStatus: IFieldOperativeStatus;\n    private _signOffStatus: IFieldOperativeStatus;\n    private _allStatuses: IFieldOperativeStatus[];\n    private _alwaysAllowSignOff: boolean;\n    private _fftService: IResilientService;\n    private _vanStockService: IResilientService;\n    private _dialogService: DialogService;\n\n    private _subscriptions: Subscription[];\n\n    private _router: Router;\n    private _signOffId: string;\n    private _archiveService: IArchiveService;\n    private _storageService: IStorageService;\n    private _featureToggleService: IFeatureToggleService;\n    private _businessVanStockService: IVanStockService;\n    private _lastKnownHandledEngineerState: string;\n\n    constructor(engineerService: IEngineerService,\n        jobService: IJobService,\n        labelService: ILabelService,\n        businessRuleService: IBusinessRuleService,\n        eventAggregator: EventAggregator,\n        configurationService: IConfigurationService,\n        router: Router,\n        fftService: IResilientService,\n        vanStockService: IResilientService,\n        dialogService: DialogService,\n        archiveService: IArchiveService,\n        storageService: IStorageService,\n        messageService: IMessageService,\n        analytics: IAnalyticsService,\n        featureToggleService: IFeatureToggleService,\n        businessVanStockService: IVanStockService) {\n        this.engineerService = engineerService;\n        this._labelService = labelService;\n        this._jobService = jobService;\n        this._businessRuleService = businessRuleService;\n        this._messageService = messageService;\n        this._eventAggregator = eventAggregator;\n        this.catalog = CatalogConstants;\n\n        this.engineerStatuses = [];\n        this.canChangeEngineerStatus = true;\n\n        this._subscriptions = [];\n        this._router = router;\n        this._fftService = fftService;\n        this._vanStockService = vanStockService;\n\n        this._dialogService = dialogService;\n        let hemaConfiguration = configurationService.getConfiguration<IHemaConfiguration>();\n        if (hemaConfiguration) {\n            this._alwaysAllowSignOff = hemaConfiguration.alwaysAllowSignOff;\n        } else {\n            this._alwaysAllowSignOff = false;\n        }\n        this._archiveService = archiveService;\n        this._storageService = storageService;\n        this._featureToggleService = featureToggleService;\n        this._businessVanStockService = businessVanStockService;\n        this._analytics = analytics;\n    }\n\n    public attached(): Promise<void> {\n        this._subscriptions.push(this._eventAggregator.subscribe(EngineerServiceConstants.ENGINEER_STATUS_CHANGED, () => this.engineerUpdateStatus()));\n        this._subscriptions.push(this._eventAggregator.subscribe(JobServiceConstants.JOB_STATE_CHANGED, () => this.engineerUpdateStatus()\n            .then(() => this.updateJobState())));\n        this._subscriptions.push(this._eventAggregator.subscribe(UserPreferenceConstants.USER_PREFERENCES_CHANGED, (\n            engineer: {\n                engineerType: string,\n                engineerPatch: string,\n                engineerRegion: string\n            }) => {\n            this._analytics.setCustomMetaData(engineer, {\n                engineerType: ENGINEER_TYPE_DIEMENTION1,\n                engineerPatch: ENGINEER_PATCH_DIEMENTION2,\n                engineerRegion: ENGINEER_REGION_DIEMENTION3\n            });\n            this.userSettingsToggle();\n        }));\n\n        this.userSettingsToggle();\n\n        return this._businessRuleService.getRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(EngineerService)))\n            .then(engineerServiceBusinessRules => {\n                return this._labelService.getGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this)))\n                    .then((labels) => {\n                        this.labels = labels;\n\n                        this._workingStatus = <IFieldOperativeStatus>{};\n                        this._workingStatus.fieldOperativeStatus = \"internalWorking\";\n                        this._workingStatus.fieldOperativeStatusDescription = ObjectHelper.getPathValue(labels, \"working\");\n\n                        this._notWorkingStatus = <IFieldOperativeStatus>{};\n                        this._notWorkingStatus.fieldOperativeStatus = \"internalNotWorking\";\n                        this._notWorkingStatus.fieldOperativeStatusDescription = ObjectHelper.getPathValue(labels, \"notWorking\");\n\n                        return this.engineerService.getAllStatus()\n                            .then((data) => {\n                                let signOnId = ObjectHelper.getPathValue(engineerServiceBusinessRules, \"signOnId\");\n                                this._signOffId = ObjectHelper.getPathValue(engineerServiceBusinessRules, \"signOffId\");\n\n                                this._signOnStatus = data.find(es => es.fieldOperativeStatus === signOnId);\n                                this._signOffStatus = data.find(es => es.fieldOperativeStatus === this._signOffId);\n\n                                if (!this._signOnStatus) {\n                                    this._signOnStatus = <IFieldOperativeStatus>{};\n                                    this._signOnStatus.fieldOperativeStatus = signOnId;\n                                    this._signOnStatus.fieldOperativeStatusDescription = ObjectHelper.getPathValue(labels, \"signOn\");\n                                }\n\n                                if (!this._signOffStatus) {\n                                    this._signOffStatus = <IFieldOperativeStatus>{};\n                                    this._signOffStatus.fieldOperativeStatus = this._signOffId;\n                                    this._signOffStatus.fieldOperativeStatusDescription = ObjectHelper.getPathValue(labels, \"signOff\");\n                                }\n\n                                let minId: number = +ObjectHelper.getPathValue(engineerServiceBusinessRules, \"minId\");\n\n                                this._allStatuses = data.filter(fos => +fos.fieldOperativeStatus >= minId && fos.fieldOperativeStatus !== signOnId && fos.fieldOperativeStatus !== this._signOffId);\n                            })\n                            .then(() => this.engineerUpdateStatus())\n                            .then(() => this.updateJobState());\n                    });\n            });\n    }\n\n    public detached(): void {\n        this._subscriptions.forEach(sub => sub.dispose());\n        this._subscriptions = [];\n    }\n\n    public engineerStateChanged(newValue: string, oldValue: string): Promise<void> {\n        if (this._subscriptions.length === 0) {\n            return Promise.resolve();\n        }\n\n        if (newValue === this._lastKnownHandledEngineerState) {\n            // we are resetting from within this handler so do not trigger the actual business logic\n            return Promise.resolve();\n        }\n\n        // a standard status change...\n        if (newValue !== this._signOffId) {\n            // 'working' is followed immeditately by 'ready for work' status\n            // meaning 'ready for work' will always be zero.\n            // hence we exclude it from archive\n            return this._businessRuleService.getRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(EngineerService)))\n                .then(engineerServiceBusinessRules => {\n                    let signOnId = ObjectHelper.getPathValue(engineerServiceBusinessRules, \"signOnId\");\n                    return this.setPartsCollectionProgress()\n                        .then(() => this.engineerService.setStatus(newValue === \"internalWorking\" || newValue === \"internalNotWorking\" ? undefined : newValue))\n                        .then(() => this.addToArchive(newValue === \"internalNotWorking\" || newValue === signOnId ? undefined : newValue))\n                        .then(() => this._lastKnownHandledEngineerState = newValue)\n                        .thenReturn();\n                });\n        }\n\n        // ... otherwise we are trying to sign off for the day\n        if (this._messageService.unreadCount > 0) {\n            return this.showEndOfDayErrorDialog(EngineerDialogConstants.END_OF_DAY_MESSAGE_UNREAD)\n                .then(() => this.engineerState = oldValue)\n                .thenReturn();\n        }\n\n        return this.hasUnsentPayloads()\n            .then(hasUnsentPayloads => {\n                if (hasUnsentPayloads) {\n                    return this.showEndOfDayErrorDialog(EngineerDialogConstants.END_OF_DAY_MESSAGE_UNSENT)\n                        .then(() => this.engineerState = oldValue)\n                        .thenReturn();\n                } else {\n                    // good to go\n                    return this.engineerService.setStatus(newValue)\n                        .then(() => this.showEndOfDaySuccessDialog())\n                        .then(() => this.addToArchive(newValue))\n                        .then(() => this._lastKnownHandledEngineerState = newValue)\n                        .thenReturn()\n                        .catch(() => this.showEndOfDayRetryDialog()\n                            .then((result) => {\n                                if (result.output) {\n                                    // retry immediately\n                                    this.engineerStateChanged(newValue, oldValue);\n                                } else {\n                                    // let the user escape from infinite loop if no network\n                                    this.engineerState = oldValue;\n                                }\n                            })\n                        );\n                }\n            });\n\n    }\n\n    public addToArchive(state: string): Promise<void> {\n        if (state) {\n            return this._jobService.getActiveJobId().then((jobId) => {\n                return this.engineerService.getCurrentEngineer().then((engineer) => {\n                    if (engineer && engineer.id) {\n                        return this._archiveService.addEngineerState(engineer, state, jobId)\n                            .then(() => this._eventAggregator.publish(ArchiveConstants.ARCHIVE_UPDATED));\n                    } else {\n                        return Promise.resolve();\n                    }\n                });\n            });\n        }\n        return Promise.resolve();\n    }    \n\n    private engineerUpdateStatus(): Promise<void> {\n        return this.engineerService.isSignedOn()\n            .then((isSignedOn) => {\n                this.updateStatus(isSignedOn);\n                return this.areAllJobsDone().then((alldone) => {\n                    return this.engineerService.isWorking()\n                        .then(isWorking => {\n                            this.isSignedOn = isSignedOn;\n                            this.engineerStatuses = [];\n\n                            if (!isSignedOn) {\n                                this.engineerStatuses.push(this._notWorkingStatus);\n                                if (this._signOnStatus) {\n                                    this.engineerStatuses.push(this._signOnStatus);\n                                }\n                                this.engineerState = this._notWorkingStatus.fieldOperativeStatus;\n                                return undefined;\n                            } else {\n                                this.engineerStatuses.push(this._workingStatus);\n                                this.engineerStatuses = this.engineerStatuses.concat(this._allStatuses);\n                                if (this._signOffStatus && alldone === true) {\n                                    this.engineerStatuses.push(this._signOffStatus);\n                                }\n                                if (isWorking) {\n                                    this.engineerState = this._workingStatus.fieldOperativeStatus;\n                                    return undefined;\n                                } else {\n                                    return this.engineerService.getStatus()\n                                        .then((status) => {\n                                            if (status) {\n                                                let state = this.engineerStatuses.find(es => es.fieldOperativeStatus === status);\n                                                if (state) {\n                                                    this.engineerState = state.fieldOperativeStatus;\n                                                }\n                                            }\n                                        });\n                                }\n                            }\n                        });\n                });\n            });\n    }\n\n    private updateJobState(): Promise<void> {\n        /* if there is no active job then we are allowed to change the engineer status */\n        return this._jobService.getActiveJobId()\n            .then(activeJobId => {\n                if (activeJobId) {\n                    return this._jobService.getJobState(activeJobId)\n                        .then(jobState => {\n                            if (jobState) {\n                                this.canChangeEngineerStatus = false;\n                                if (jobState.value === JobState.complete) {\n                                    this._router.navigateToRoute(\"customers\");\n                                }\n                            } else {\n                                this.canChangeEngineerStatus = true;\n                            }\n                        });\n                } else {\n                    this.canChangeEngineerStatus = true;\n                    return undefined;\n                }\n            });\n    }\n\n    private areAllJobsDone(): Promise<boolean> {\n        if (this._alwaysAllowSignOff === false) {\n            return this._jobService.areAllJobsDone();\n        } else {\n            return Promise.resolve(true);\n        }\n    }\n\n    private updateStatus(isSignedOn: boolean): void {\n        if (this.labels) {\n            const myStatus: string = \"myStatus\";\n            const signInHere: string = \"signInHere\";\n            if (isSignedOn) {\n                this.myStatusLabel = this.labels[myStatus];\n            } else {\n                this.myStatusLabel = this.labels[signInHere];\n            }\n        }\n    }\n\n    private async hasUnsentPayloads(): Promise<boolean> {\n        let payloads = [\n            ...await this._fftService.getUnsentPayloads(),\n            ... await this._vanStockService.getUnsentPayloads()\n        ];\n        if (payloads && payloads.length > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    private showEndOfDaySuccessDialog(): Promise<DialogResult> {\n        let model: InfoDialogModel = new InfoDialogModel(\n            this.labels[EngineerDialogConstants.SIGN_OFF],\n            this.labels[EngineerDialogConstants.END_OF_DAY_MESSAGE_SUCCESS]);\n        return this._dialogService.open({ viewModel: InfoDialog, model: model });\n    }\n\n    private showEndOfDayRetryDialog(): Promise<DialogResult> {\n        let model: ErrorDialogModel = new ErrorDialogModel();\n        model.errorMessage = this.labels[EngineerDialogConstants.END_OF_DAY_MESSAGE_RETRY];\n        model.header = this.labels[EngineerDialogConstants.SIGN_OFF];\n        return this._dialogService.open({ viewModel: EndOfDayFail, model: model });\n    }\n\n    private showEndOfDayErrorDialog(errorMessage: string): Promise<DialogResult> {\n        let model: ErrorDialogModel = new ErrorDialogModel();\n        model.errorMessage = this.labels[errorMessage];\n        model.header = this.labels[EngineerDialogConstants.SIGN_OFF];\n        return this._dialogService.open({ viewModel: ErrorDialog, model: model });\n    }\n\n    private userSettingsToggle(): void {\n        this._storageService.userSettingsComplete().then((complete) => {\n            if (complete) {\n                this.userSettingsComplete = true;\n            } else {\n                this.userSettingsComplete = false;\n            }\n        });\n    }\n\n    private async setPartsCollectionProgress(): Promise<void> {\n\n        if (this.engineerState === EngineerService.OBTAINING_MATS_STATUS && !this.engineerService.isPartCollectionInProgress) {\n            const existsPartsToCollect = this._featureToggleService.isAssetTrackingEnabled()\n                ? (await this._businessVanStockService.getPartsToCollect()).toCollect.length > 0\n                : (await this._jobService.getPartsCollections() || []).some(partCollection => !partCollection.done);\n            if (existsPartsToCollect) {\n                // force the user to exit OBTAING MATS by using the parts collection UI\n                this.engineerService.isPartCollectionInProgress = true;\n            }\n        }\n    }\n}\n"],"sourceRoot":"../../.."}