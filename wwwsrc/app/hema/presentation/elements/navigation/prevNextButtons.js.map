{"version":3,"sources":["hema/presentation/elements/navigation/prevNextButtons.ts"],"names":[],"mappings":";;;;;;;;;;;;IASA;QAgBI,yBAAY,MAAc,EAAE,eAAgC;YACxD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QAC5C,CAAC;QAEM,kCAAQ,GAAf;YAAA,iBAGC;YAFG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,4BAA4B,EAAE,cAAM,OAAA,KAAI,CAAC,sBAAsB,EAAE,EAA7B,CAA6B,CAAC,CAAC;YACxH,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAClC,CAAC;QAEM,kCAAQ,GAAf;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;gBAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC9B,CAAC;QACL,CAAC;QAED,sBAAW,6CAAgB;iBAA3B;gBACI,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YACjD,CAAC;;;WAAA;QAEM,wCAAc,GAArB;YACI,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAClC,CAAC;QAEM,uCAAa,GAApB;YACI,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAClC,CAAC;QAEM,wCAAc,GAArB;YACI,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YACpC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBAElD,EAAE,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBAExC,IAAI,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;oBAErE,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBACd,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpH,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;QAEM,4CAAkB,GAAzB;YACI,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YACpC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBAElD,EAAE,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,IAAI,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;oBAErE,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBACd,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpH,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;QAEO,gDAAsB,GAA9B;YACI,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YACpC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBAE3C,IAAI,IAAI,GAAG,EAAE,CAAC;gBACd,IAAI,WAAW,GAAG,KAAK,CAAC;gBACxB,IAAI,OAAO,GAAG,KAAK,CAAC;gBAEpB,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;oBACb,IAAI,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC9C,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC;oBAClD,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3E,CAAC;gBAED,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;gBAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;gBACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC;QACL,CAAC;QAEO,sCAAY,GAApB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxD,IAAI,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAErE,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;oBACd,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC/D,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QAEO,2CAAiB,GAAzB,UAA0B,MAAc,EAAE,OAAe;YACrD,IAAI,WAAW,GAAG,MAAM,CAAC;YAEzB,IAAI,IAAI,GAAY,KAAK,CAAC;YAE1B,GAAG,CAAC;gBACA,EAAE,CAAC,CAAC,WAAW;oBACX,WAAW,CAAC,kBAAkB;oBAC9B,WAAW,CAAC,kBAAkB,CAAC,MAAM;oBACrC,WAAW,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBACjD,IAAI,GAAG,IAAI,CAAC;gBAChB,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC5B,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC;gBACrC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,GAAG,IAAI,CAAC;oBACZ,WAAW,GAAG,IAAI,CAAC;gBACvB,CAAC;YACL,CAAC,QACM,CAAC,IAAI,EAAE;YAEd,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;QAjID;YADC,6BAAQ,CAAC,EAAE,kBAAkB,EAAE,6BAAW,CAAC,MAAM,EAAE,CAAC;;uDAC7B;QAGxB;YADC,6BAAQ,CAAC,EAAE,kBAAkB,EAAE,6BAAW,CAAC,MAAM,EAAE,CAAC;;wDAC9B;QANd,eAAe;YAF3B,kCAAa,CAAC,mBAAmB,CAAC;YAClC,qCAAM,CAAC,uBAAM,EAAE,0CAAe,CAAC;6CAiBR,uBAAM,EAAmB,0CAAe;WAhBnD,eAAe,CAqI3B;QAAD,sBAAC;KArID,AAqIC,IAAA;IArIY,0CAAe","file":"prevNextButtons.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\nimport { Router } from \"aurelia-router\";\nimport { customElement, bindable } from \"aurelia-templating\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { bindingMode } from \"aurelia-binding\";\nimport { Subscription, EventAggregator } from \"aurelia-event-aggregator\";\n\n@customElement(\"prev-next-buttons\")\n@inject(Router, EventAggregator)\nexport class PrevNextButtons {\n\n    @bindable({ defaultBindingMode: bindingMode.oneWay })\n    public values: string[];\n\n    @bindable({ defaultBindingMode: bindingMode.oneWay })\n    public paramId: string;\n\n    public hasPrevious: boolean;\n    public hasNext: boolean;\n    public info: string;\n\n    private _router: Router;\n    private _subscription: Subscription;\n    private _eventAggregator: EventAggregator;\n\n    constructor(router: Router, eventAggregator: EventAggregator) {\n        this._router = router;\n        this._eventAggregator = eventAggregator;\n    }\n\n    public attached(): void {\n        this._subscription = this._eventAggregator.subscribe(\"router:navigation:complete\", () => this.updateStateFromCurrent());\n        this.updateStateFromCurrent();\n    }\n\n    public detached(): void {\n        if (this._subscription) {\n            this._subscription.dispose();\n            this._subscription = null;\n        }\n    }\n\n    public get hasMultipleItems(): boolean {\n        return this.values && this.values.length > 1;\n    }\n\n    public paramIdChanged(): void {\n        this.updateStateFromCurrent();\n    }\n\n    public valuesChanged(): void {\n        this.updateStateFromCurrent();\n    }\n\n    public navigateToNext(): void {\n        let currentId = this.getCurrentId();\n        if (currentId) {\n            let currentIndex = this.values.indexOf(currentId);\n\n            if (currentIndex < this.values.length - 1) {\n\n                let paramRouter = this.getRouterForParam(this._router, this.paramId);\n\n                if (paramRouter) {\n                    paramRouter.navigate(paramRouter.currentInstruction.fragment.replace(currentId, this.values[currentIndex + 1]));\n                }\n            }\n        }\n    }\n\n    public navigateToPrevious(): void {\n        let currentId = this.getCurrentId();\n        if (currentId) {\n            let currentIndex = this.values.indexOf(currentId);\n\n            if (currentIndex > 0) {\n                let paramRouter = this.getRouterForParam(this._router, this.paramId);\n\n                if (paramRouter) {\n                    paramRouter.navigate(paramRouter.currentInstruction.fragment.replace(currentId, this.values[currentIndex - 1]));\n                }\n            }\n        }\n    }\n\n    private updateStateFromCurrent(): void {\n        let currentId = this.getCurrentId();\n        if (currentId) {\n            let index = this.values.indexOf(currentId);\n\n            let info = \"\";\n            let hasPrevious = false;\n            let hasNext = false;\n\n            if (index >= 0) {\n                info = (index + 1) + \"/\" + this.values.length;\n                hasPrevious = this.values.length > 1 && index > 0;\n                hasNext = this.values.length > 1 && (index < (this.values.length - 1));\n            }\n\n            this.hasPrevious = hasPrevious;\n            this.hasNext = hasNext;\n            this.info = info;\n        }\n    }\n\n    private getCurrentId(): string {\n        if (this.paramId && this.values && this.values.length > 0) {\n            let paramRouter = this.getRouterForParam(this._router, this.paramId);\n\n            if (paramRouter) {\n                return paramRouter.currentInstruction.params[this.paramId];\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    private getRouterForParam(router: Router, paramId: string): Router {\n        let paramRouter = router;\n\n        let done: boolean = false;\n\n        do {\n            if (paramRouter &&\n                paramRouter.currentInstruction &&\n                paramRouter.currentInstruction.params &&\n                paramRouter.currentInstruction.params[paramId]) {\n                done = true;\n            } else if (paramRouter.parent) {\n                paramRouter = paramRouter.parent;\n            } else {\n                done = true;\n                paramRouter = null;\n            }\n        }\n        while (!done);\n\n        return paramRouter;\n    }\n}\n"],"sourceRoot":"../../../.."}