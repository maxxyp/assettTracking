{"version":3,"sources":["hema/presentation/services/viewService.ts"],"names":[],"mappings":";;;;;;;;;;;;IAKA;QAII,qBAAY,MAAc;YACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAC1B,CAAC;QAEM,6BAAO,GAAd;YACI,IAAI,GAAG,GAAwB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,qCAAiB,CAAC,CAAC;YACvG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAzB,CAAyB,CAAC,CAAC;iBACtD,MAAM,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC;QAEO,oCAAc,GAAtB,UAA0B,qBAA4C,EAAE,QAAmB;YACvF,IAAI,UAAU,GAAQ,EAAE,CAAC;YACzB,IAAI,oBAAoB,GAAQ,qBAAqB,CAAC,oBAAoB,CAAC;YAC3E,IAAI,SAAS,GAAG,oBAAoB,IAAI,oBAAoB,CAAC,OAAO,CAAC;YAErE,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,SAAS,IAAI,CAAC,CAAC,QAAQ,IAAI,SAAS,CAAC,SAAS,CAAC,SAAS,YAAiB,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC7I,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YACnD,CAAC;YAED,EAAE,CAAC,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC,CAAC;gBACvC,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,0BAA0B,EAAE,QAAQ,CAAC,CAAC,CAAC;YACxG,CAAC;YAED,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC;QA5BQ,WAAW;YADvB,0BAAM,CAAC,uBAAM,CAAC;6CAKS,uBAAM;WAJjB,WAAW,CA8BvB;QAAD,kBAAC;KA9BD,AA8BC,IAAA;IA9BY,kCAAW","file":"viewService.js","sourcesContent":["import { NavigationInstruction, Router } from \"aurelia-router\";\nimport { EditableViewModel } from \"../models/editableViewModel\";\nimport { inject } from \"aurelia-framework\";\n\n@inject(Router)\nexport class ViewService {\n\n    private _router: Router;\n\n    constructor(router: Router) {\n        this._router = router;\n    }\n\n    public saveAll(): Promise<void> {\n        let vms: EditableViewModel[] = this.findViewModels(this._router.currentInstruction, EditableViewModel);\n        return Promise.all(vms.map(x => x.isNew ? null : x.save()))\n            .return(null);\n    }\n\n    private findViewModels<T>(navigationInstruction: NavigationInstruction, withType?: Function): any[] {\n        let viewModels: T[] = [];\n        let viewPortInstructions = <any>navigationInstruction.viewPortInstructions;\n        let defaultVP = viewPortInstructions && viewPortInstructions.default;\n\n        if (defaultVP && defaultVP.component && defaultVP.component.viewModel && (!withType || defaultVP.component.viewModel instanceof <any>withType)) {\n            viewModels.push(defaultVP.component.viewModel);\n        }\n\n        if (defaultVP.childNavigationInstruction) {\n            viewModels = viewModels.concat(this.findViewModels(defaultVP.childNavigationInstruction, withType));\n        }\n\n        return viewModels;\n    }\n\n}\n"],"sourceRoot":"../../.."}