{"version":3,"sources":["hema/presentation/factories/taskItemFactory.ts"],"names":[],"mappings":"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","file":"taskItemFactory.js","sourcesContent":["import { ITaskItemFactory } from \"./interfaces/ITaskItemFactory\";\nimport { TaskItemViewModel } from \"../modules/tasks/viewModels/taskItemViewModel\";\nimport { Job } from \"../../business/models/job\";\nimport { TimeRange } from \"../../../common/ui/elements/models/timeRange\";\nimport { IChirpCode } from \"../../business/models/reference/IChirpCode\";\nimport { Task as TaskBusinessModel } from \"../../business/models/task\";\nexport class TaskItemFactory implements ITaskItemFactory {\n\n    public createTaskItemViewModel(taskId: string, job: Job, intervalInMinutes: number, chirpCodesCatalog: IChirpCode[]): TaskItemViewModel {\n        let viewModel: TaskItemViewModel;\n        if (taskId) {\n            let task = Job.getTasksAndCompletedTasks(job).find(t => t.id === taskId);\n            if (task) {\n                viewModel = new TaskItemViewModel(taskId, job, task);\n                viewModel.taskTime = new TimeRange(task.startTime, task.endTime);\n                viewModel.chirpCodes = task.chirpCodes ? chirpCodesCatalog.filter(cc => task.chirpCodes.indexOf(cc.code) >= 0) : undefined;\n                viewModel.isNotDoingJobByAnotherTask = job.tasks.some(t => t.isTaskThatSetsJobAsNoAccessed && t.id !== taskId);\n                viewModel.selectedChirpCode = undefined;\n            }\n        }\n        return viewModel;\n    }\n\n    public createTaskItemBusinessModel(viewModel: TaskItemViewModel, taskId: string, adviceResultsThatNeedCategory: string): TaskBusinessModel {\n        let task: TaskBusinessModel = new TaskBusinessModel(true, viewModel.isNewRFA);\n\n        task.id = taskId;\n        task.status = viewModel.status;\n        task.workedOnCode = viewModel.workedOnCode;\n        task.activity = viewModel.activity;\n        task.productGroup = viewModel.productGroup;\n        task.partType = viewModel.partType;\n        task.faultActionCode = viewModel.faultActionCode;\n        task.adviceOutcome = viewModel.adviceOutcome;\n        task.adviceCode = (adviceResultsThatNeedCategory.indexOf(viewModel.adviceOutcome) !== -1) ? viewModel.adviceCode : undefined;\n        task.adviceComment = (adviceResultsThatNeedCategory.indexOf(viewModel.adviceOutcome) !== -1) ? viewModel.adviceComment : undefined;\n\n        if (viewModel.taskTime) {\n            task.startTime = viewModel.taskTime.startTime;\n            task.endTime = viewModel.taskTime.endTime;\n        }\n        task.workDuration = viewModel.workDuration;\n        task.chargeableTime = viewModel.chargeableTime;\n\n        task.report = viewModel.taskReport;\n        task.chirpCodes = viewModel.chirpCodes ? viewModel.chirpCodes.map(cc => cc.code) : undefined;\n        task.isPartLJReportable = viewModel.isPartLJReportable;\n        task.applianceType = viewModel.applianceType;\n        task.orderNo = viewModel.orderNo;\n\n        task.isFirstVisit = viewModel.isFirstVisit;\n        task.showMainPartSelectedWithInvalidActivityTypeMessage = viewModel.showMainPartSelectedWithInvalidActivityTypeMessage;\n        task.showMainPartSelectedWithInvalidProductGroupTypeMessage = viewModel.showMainPartSelectedWithInvalidProductGroupTypeMessage;\n        task.showMainPartSelectedWithInvalidPartTypeMessage = viewModel.showMainPartSelectedWithInvalidPartTypeMessage;\n        task.hasMainPart = viewModel.hasMainPart;\n        task.mainPartPartType = viewModel.mainPartPartType;\n        return task;\n    }\n\n    public clearViewModel(viewModel: TaskItemViewModel, task: TaskBusinessModel, firstVisitTaskCode: string, resetViewModel: boolean): void {\n        viewModel.status = undefined;\n        viewModel.workedOnCode = undefined;\n\n        // if first visit then retain dropdown state\n        if (viewModel.activity !== firstVisitTaskCode || resetViewModel) {\n            // this.workedOnCode = undefined;\n            viewModel.activity = undefined;\n            viewModel.visitActivityFilteredCatalog = [];\n            viewModel.partTypeFilteredCatalog = [];\n            viewModel.faultActionCodeFilteredCatalog = [];\n            viewModel.showProductGroupAndPartTypes = false;\n        }\n\n        viewModel.adviceOutcome = undefined;\n        viewModel.adviceCode = undefined;\n        viewModel.adviceComment = undefined;\n        viewModel.taskReport = undefined;\n\n        if (task && task.startTime && task.endTime) {\n            viewModel.taskTime = new TimeRange(task.startTime, task.endTime);\n        }\n        viewModel.workDuration = task ? task.workDuration : undefined;\n        viewModel.chargeableTime = task ? task.chargeableTime : undefined;\n\n        viewModel.chirpCodes = undefined;\n        viewModel.totalPreviousWorkDuration = TaskItemViewModel.getTotalPreviousChargeableTime(task);\n        viewModel.faultActionCode = undefined;\n        viewModel.productGroup = undefined;\n        viewModel.partType = undefined;\n        viewModel.isPartLJReportable = undefined;\n    }\n}\n"],"sourceRoot":"../../.."}