{"version":3,"sources":["hema/presentation/factories/landlordFactory.ts"],"names":[],"mappings":"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","file":"landlordFactory.js","sourcesContent":["import {BusinessException} from \"../../business/models/businessException\";\nimport {LandlordSafetyCertificate as LandlordSafetyCertificateBusinessModel} from \"../../business/models/landlord/landlordSafetyCertificate\";\nimport {LandlordSafetyCertificateAppliance as LandlordSafetyCertificateApplianceBusinessModel} from \"../../business/models/landlord/landlordSafetyCertificateAppliance\";\nimport {LandlordSafetyCertificateDefect as LandlordSafetyCertificateDefectBusinessModel} from \"../../business/models/landlord/landlordSafetyCertificateDefect\";\n\nimport {LandlordSafetyCertificateViewModel} from \"../models/landlordSafetyCertificateViewModel\";\nimport {LandlordSafetyCertificateApplianceViewModel} from \"../models/landlordSafetyCertificateApplianceViewModel\";\nimport {LandlordSafetyCertificateDefectViewModel} from \"../models/landlordSafetyCertificateDefectViewModel\";\n\nimport {ILandlordFactory} from \"./interfaces/ILandlordFactory\";\nimport {OperatingValueUnits} from \"../../business/models/landlord/operatingValueUnits\";\nimport {YesNoNa} from \"../../business/models/yesNoNa\";\n// import {ArrayHelper} from \"../../../common/core/arrayHelper\";\n\nexport class LandlordFactory implements ILandlordFactory {\n\n    public createLandlordSafetyCertificateViewModel(landlordSafetyCertificateBusinessModel: LandlordSafetyCertificateBusinessModel,\n                                                    labels: { [key: string]: any }) : LandlordSafetyCertificateViewModel {\n        let vm = new LandlordSafetyCertificateViewModel();\n\n        let incompleteLabel = this.getDictionaryValue<string>(labels, \"incomplete\");\n        let yesLabel = this.getDictionaryValue<string>(labels, \"yes\");\n        let noLabel = this.getDictionaryValue<string>(labels, \"no\");\n        let notApplicableLabel = this.getDictionaryValue<string>(labels, \"notApplicable\");\n        let unableToTestLabel = this.getDictionaryValue<string>(labels, \"unableToTest\");\n        let passLabel = this.getDictionaryValue<string>(labels, \"pass\");\n        let failLabel = this.getDictionaryValue<string>(labels, \"fail\");\n\n        if (landlordSafetyCertificateBusinessModel) {\n            vm.jobNumber = landlordSafetyCertificateBusinessModel.jobNumber;\n            vm.date = landlordSafetyCertificateBusinessModel.date;\n\n            vm.engineerName = landlordSafetyCertificateBusinessModel.engineerName;\n            vm.engineerId = landlordSafetyCertificateBusinessModel.engineerId;\n\n            vm.landlordAddress = landlordSafetyCertificateBusinessModel.landlordAddress;\n            vm.propertyAddress = landlordSafetyCertificateBusinessModel.propertyAddress;\n\n            vm.appliances = [];\n            vm.defects = [];\n\n            if (landlordSafetyCertificateBusinessModel.appliances && landlordSafetyCertificateBusinessModel.appliances.length > 0) {\n                // aArrayHelper.sortByColumn(landlordSafetyCertificateBusinessModel.appliances, \"id\");\n\n                for (let applianceCounter = 0; applianceCounter < landlordSafetyCertificateBusinessModel.appliances.length; applianceCounter++) {\n                    let certificateApplianceBusinessModel = landlordSafetyCertificateBusinessModel.appliances[applianceCounter];\n                    let certificateDefectBusinessModel = landlordSafetyCertificateBusinessModel.defects[applianceCounter];\n\n                    vm.appliances.push(this.createLandlordSafetyCertificateApplianceViewModel(certificateApplianceBusinessModel, labels));\n                    vm.defects.push(this.createLandlordSafetyCertificateDefectViewModel(certificateDefectBusinessModel, labels));\n\n                    if (certificateApplianceBusinessModel.requestedToTest === false || certificateApplianceBusinessModel.unableToTest === true) {\n                        // defect DF_1441 - labelledAndWarningNoticeGiven should be set to N/A when requestedToTest is falsee or unableToTest is true\n                        vm.defects[applianceCounter].labelledAndWarningNoticeGiven = notApplicableLabel;\n                    }\n                }\n            }\n\n            vm.applianceCount = vm.appliances.length;\n\n            vm.instPremDefect = new LandlordSafetyCertificateDefectViewModel();\n\n            if (landlordSafetyCertificateBusinessModel.certificateResult && landlordSafetyCertificateBusinessModel.certificateResult.propertySafetyDefect) {\n                if (landlordSafetyCertificateBusinessModel.certificateResult.propertySafetyDefect.isNotApplicable === true) {\n                    vm.instPremDefect.details = notApplicableLabel;\n                    vm.instPremDefect.actionTaken = notApplicableLabel;\n                    vm.instPremDefect.labelledAndWarningNoticeGiven = notApplicableLabel;\n                    vm.instPremDefect.conditionOfAppliance = notApplicableLabel;\n                } else {\n                    if (landlordSafetyCertificateBusinessModel.certificateResult.propertySafetyDefect.details === undefined) {\n                        vm.instPremDefect.details = incompleteLabel;\n                    } else {\n                        vm.instPremDefect.details = landlordSafetyCertificateBusinessModel.certificateResult.propertySafetyDefect.details;\n                    }\n\n                    if (landlordSafetyCertificateBusinessModel.certificateResult.propertySafetyDefect.actionTaken === undefined) {\n                        vm.instPremDefect.actionTaken = incompleteLabel;\n                    } else {\n                        vm.instPremDefect.actionTaken = landlordSafetyCertificateBusinessModel.certificateResult.propertySafetyDefect.actionTaken;\n                    }\n\n                    if (landlordSafetyCertificateBusinessModel.certificateResult.propertySafetyDefect.labelledAndWarningNoticeGiven === undefined) {\n                        vm.instPremDefect.labelledAndWarningNoticeGiven = incompleteLabel;\n                    } else {\n                        switch (landlordSafetyCertificateBusinessModel.certificateResult.propertySafetyDefect.labelledAndWarningNoticeGiven) {\n                            case YesNoNa.Yes:\n                                vm.instPremDefect.labelledAndWarningNoticeGiven = yesLabel;\n                                break;\n                            case YesNoNa.No:\n                                vm.instPremDefect.labelledAndWarningNoticeGiven = noLabel;\n                                break;\n                            case YesNoNa.Na:\n                                vm.instPremDefect.labelledAndWarningNoticeGiven = notApplicableLabel;\n                                break;\n                            default:\n                                vm.instPremDefect.labelledAndWarningNoticeGiven = incompleteLabel;\n                                break;\n                        }\n                    }\n\n                    if (landlordSafetyCertificateBusinessModel.certificateResult.propertySafetyDefect.conditionOfAppliance === undefined) {\n                        vm.instPremDefect.conditionOfAppliance = incompleteLabel;\n                    } else {\n                        vm.instPremDefect.conditionOfAppliance = landlordSafetyCertificateBusinessModel.certificateResult.propertySafetyDefect.conditionOfAppliance;\n                    }\n                }\n            } else {\n                vm.instPremDefect.details = incompleteLabel;\n                vm.instPremDefect.actionTaken = incompleteLabel;\n                vm.instPremDefect.labelledAndWarningNoticeGiven = incompleteLabel;\n                vm.instPremDefect.conditionOfAppliance = incompleteLabel;\n            }\n\n            if (landlordSafetyCertificateBusinessModel.certificateResult.gasInstallationTightnessTestAndVisualInspectionOfPipeworkPass === undefined) {\n                vm.gasInstallationTightnessTestAndVisualInspectionOfPipeworkPass = incompleteLabel;\n            } else {\n                switch (landlordSafetyCertificateBusinessModel.certificateResult.gasInstallationTightnessTestAndVisualInspectionOfPipeworkPass) {\n                    case YesNoNa.Yes:\n                        vm.gasInstallationTightnessTestAndVisualInspectionOfPipeworkPass = passLabel;\n                        break;\n                    case YesNoNa.No:\n                        vm.gasInstallationTightnessTestAndVisualInspectionOfPipeworkPass = failLabel;\n                        break;\n                    case YesNoNa.Na:\n                        vm.gasInstallationTightnessTestAndVisualInspectionOfPipeworkPass = unableToTestLabel;\n                        break;\n                    default:\n                        vm.gasInstallationTightnessTestAndVisualInspectionOfPipeworkPass = incompleteLabel;\n                        break;\n                }\n            }\n        }\n\n        return vm;\n    }\n\n    public createLandlordSafetyCertificateApplianceViewModel(certificateApplianceBusinessModel: LandlordSafetyCertificateApplianceBusinessModel, labels: { [key: string]: any })\n        : LandlordSafetyCertificateApplianceViewModel {\n\n        let vm: LandlordSafetyCertificateApplianceViewModel = new LandlordSafetyCertificateApplianceViewModel();\n\n        let incompleteLabel = this.getDictionaryValue<string>(labels, \"incomplete\");\n        let yesLabel = this.getDictionaryValue<string>(labels, \"yes\");\n        let noLabel = this.getDictionaryValue<string>(labels, \"no\");\n        let passLabel = this.getDictionaryValue<string>(labels, \"pass\");\n        let failLabel = this.getDictionaryValue<string>(labels, \"fail\");\n        let notApplicableLabel = this.getDictionaryValue<string>(labels, \"notApplicable\");\n        let dashesLabel = this.getDictionaryValue<string>(labels, \"dashes\");\n        let operatingUnitsMLabel = this.getDictionaryValue<string>(labels, \"operatingUnitsM\");\n        let operatingUnitsRLabel = this.getDictionaryValue<string>(labels, \"operatingUnitsR\");\n        let operatingUnitsKLabel = this.getDictionaryValue<string>(labels, \"operatingUnitsK\");\n\n        vm.id = certificateApplianceBusinessModel.id;\n        vm.location = certificateApplianceBusinessModel.location ? certificateApplianceBusinessModel.location : incompleteLabel;\n        vm.type = certificateApplianceBusinessModel.type ? certificateApplianceBusinessModel.type : incompleteLabel;\n        vm.flueType = certificateApplianceBusinessModel.flueType ? certificateApplianceBusinessModel.flueType : incompleteLabel;\n\n        vm.make = certificateApplianceBusinessModel.make ? certificateApplianceBusinessModel.make : incompleteLabel;\n        vm.model = certificateApplianceBusinessModel.model ? certificateApplianceBusinessModel.model : incompleteLabel;\n\n        if (certificateApplianceBusinessModel.requestedToTest === undefined) {\n            vm.requestedToTest = incompleteLabel;\n        } else {\n            vm.requestedToTest = certificateApplianceBusinessModel.requestedToTest === true\n                ? yesLabel\n                : noLabel;\n        }\n\n        if (certificateApplianceBusinessModel.unableToTest === undefined) {\n            vm.unableToTest = incompleteLabel;\n        } else {\n            vm.unableToTest = certificateApplianceBusinessModel.unableToTest === true\n                ? yesLabel\n                : dashesLabel;\n        }\n\n        if (certificateApplianceBusinessModel.unableToTest === true || certificateApplianceBusinessModel.requestedToTest === false) {\n            vm.applianceSafe = notApplicableLabel;\n            vm.operatingValue = notApplicableLabel;\n            vm.operatingValueUnits = \"\";\n        } else {\n            \n            if (certificateApplianceBusinessModel.applianceSafe === undefined) {\n                vm.applianceSafe = incompleteLabel;\n            } else {\n                vm.applianceSafe = certificateApplianceBusinessModel.applianceSafe === true\n                    ? yesLabel\n                    : noLabel;\n            }\n\n            if (certificateApplianceBusinessModel.operatingValue === undefined || certificateApplianceBusinessModel.operatingValue === null) {\n                vm.operatingValue = incompleteLabel;\n                vm.operatingValueUnits = \"\";\n            } else {\n                vm.operatingValue = certificateApplianceBusinessModel.operatingValue.toString(10);\n\n                switch (certificateApplianceBusinessModel.operatingValueUnits) {\n                    case OperatingValueUnits.K:\n                        vm.operatingValueUnits = operatingUnitsKLabel;\n                        break;\n                    case OperatingValueUnits.R:\n                        vm.operatingValueUnits = operatingUnitsRLabel;\n                        break;\n                    case OperatingValueUnits.M:\n                        vm.operatingValueUnits = operatingUnitsMLabel;\n                        break;\n                    default:\n                        vm.operatingValueUnits = \"\";\n                        break;\n                }\n            }\n        }\n\n        if (certificateApplianceBusinessModel.safetyDeviceCorrectOperation === undefined) {\n            vm.safetyDeviceCorrectOperation = incompleteLabel;\n        } else {\n            switch (certificateApplianceBusinessModel.safetyDeviceCorrectOperation) {\n                case YesNoNa.Yes:\n                    vm.safetyDeviceCorrectOperation = yesLabel;\n                    break;\n                case YesNoNa.No:\n                    vm.safetyDeviceCorrectOperation = noLabel;\n                    break;\n                case YesNoNa.Na:\n                    vm.safetyDeviceCorrectOperation = notApplicableLabel;\n                    break;\n                default:\n                    vm.safetyDeviceCorrectOperation = incompleteLabel;\n                    break;\n            }\n        }\n\n        if (certificateApplianceBusinessModel.ventilationSatisfactory === undefined) {\n            vm.ventilationSatisfactory = incompleteLabel;\n        } else {\n            switch (certificateApplianceBusinessModel.ventilationSatisfactory) {\n                case YesNoNa.Yes:\n                    vm.ventilationSatisfactory = yesLabel;\n                    break;\n                case YesNoNa.No:\n                    vm.ventilationSatisfactory = noLabel;\n                    break;\n                case YesNoNa.Na:\n                    vm.ventilationSatisfactory = notApplicableLabel;\n                    break;\n                default:\n                    vm.ventilationSatisfactory = incompleteLabel;\n                    break;\n            }\n        }\n\n        if (certificateApplianceBusinessModel.flueFlowTest === undefined) {\n            vm.flueFlowTest = incompleteLabel;\n        } else {\n            switch (certificateApplianceBusinessModel.flueFlowTest) {\n                case YesNoNa.Yes:\n                    vm.flueFlowTest = passLabel;\n                    break;\n                case YesNoNa.No:\n                    vm.flueFlowTest = failLabel;\n                    break;\n                case YesNoNa.Na:\n                    vm.flueFlowTest = notApplicableLabel;\n                    break;\n                default:\n                    vm.flueFlowTest = incompleteLabel;\n                    break;\n            }\n        }\n\n        if (certificateApplianceBusinessModel.spillageTest === undefined) {\n            vm.spillageTest = incompleteLabel;\n        } else {\n            switch (certificateApplianceBusinessModel.spillageTest) {\n                case YesNoNa.Yes:\n                    vm.spillageTest = passLabel;\n                    break;\n                case YesNoNa.No:\n                    vm.spillageTest = failLabel;\n                    break;\n                case YesNoNa.Na:\n                    vm.spillageTest = notApplicableLabel;\n                    break;\n                default:\n                    vm.spillageTest = incompleteLabel;\n                    break;\n            }\n        }\n\n        if (certificateApplianceBusinessModel.visualConditionOfFlueAndTerminationSatisfactory === undefined) {\n            vm.visualConditionOfFlueAndTerminationSatisfactory = incompleteLabel;\n        } else {\n            switch (certificateApplianceBusinessModel.visualConditionOfFlueAndTerminationSatisfactory) {\n                case YesNoNa.Yes:\n                    vm.visualConditionOfFlueAndTerminationSatisfactory = yesLabel;\n                    break;\n                case YesNoNa.No:\n                    vm.visualConditionOfFlueAndTerminationSatisfactory = noLabel;\n                    break;\n                case YesNoNa.Na:\n                    vm.visualConditionOfFlueAndTerminationSatisfactory = notApplicableLabel;\n                    break;\n                default:\n                    vm.visualConditionOfFlueAndTerminationSatisfactory = incompleteLabel;\n                    break;\n            }\n        }\n\n        return vm;\n    }\n\n    public createLandlordSafetyCertificateDefectViewModel(certificateDefectBusinessModel: LandlordSafetyCertificateDefectBusinessModel, labels: { [key: string]: any })\n        : LandlordSafetyCertificateDefectViewModel {\n\n        let vm: LandlordSafetyCertificateDefectViewModel = new LandlordSafetyCertificateDefectViewModel();\n\n        let incompleteLabel = this.getDictionaryValue<string>(labels, \"incomplete\");\n        let yesLabel = this.getDictionaryValue<string>(labels, \"yes\");\n        let noLabel = this.getDictionaryValue<string>(labels, \"no\");\n        let notApplicableLabel = this.getDictionaryValue<string>(labels, \"notApplicable\");\n\n        if (certificateDefectBusinessModel.isNotApplicable) {\n            vm.details = notApplicableLabel;\n            vm.actionTaken = notApplicableLabel;\n            vm.conditionOfAppliance = notApplicableLabel;\n            vm.labelledAndWarningNoticeGiven = notApplicableLabel;\n        } else {\n            if (certificateDefectBusinessModel.details === undefined) {\n                vm.details = incompleteLabel;\n            } else {\n                vm.details = certificateDefectBusinessModel.details;\n            }\n\n            if (certificateDefectBusinessModel.actionTaken === undefined) {\n                vm.actionTaken = incompleteLabel;\n            } else {\n                vm.actionTaken = certificateDefectBusinessModel.actionTaken;\n            }\n\n            if (certificateDefectBusinessModel.labelledAndWarningNoticeGiven === undefined) {\n                vm.labelledAndWarningNoticeGiven = incompleteLabel;\n            } else {\n                switch (certificateDefectBusinessModel.labelledAndWarningNoticeGiven) {\n                    case YesNoNa.Yes:\n                        vm.labelledAndWarningNoticeGiven = yesLabel;\n                        break;\n                    case YesNoNa.No:\n                        vm.labelledAndWarningNoticeGiven = noLabel;\n                        break;\n                    case YesNoNa.Na:\n                        vm.labelledAndWarningNoticeGiven = notApplicableLabel;\n                        break;\n                    default:\n                        vm.labelledAndWarningNoticeGiven = incompleteLabel;\n                        break;\n                }\n            }\n\n            if (certificateDefectBusinessModel.conditionOfAppliance === undefined) {\n                vm.conditionOfAppliance = incompleteLabel;\n            } else {\n                vm.conditionOfAppliance = certificateDefectBusinessModel.conditionOfAppliance;\n            }\n        }\n\n        return vm;\n    }\n\n    public getDictionaryValue<T>(source: { [key: string] : any }, key: string): T {\n        if (!source || !(key in source)) {\n            throw new BusinessException(this, \"getDictionaryValue\", \"Unable to get dictionary value '{0}' in factory 'landlordFactory'\", [key], null);\n        }\n\n        let value = source[key];\n        return <T>value;\n    }\n}\n"],"sourceRoot":"../../.."}