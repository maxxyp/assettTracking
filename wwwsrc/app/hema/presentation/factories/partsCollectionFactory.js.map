{"version":3,"sources":["hema/presentation/factories/partsCollectionFactory.ts"],"names":[],"mappings":";;;IAMA;QAAA;QAgDA,CAAC;QA/CU,+DAA8B,GAArC,UAAsC,aAAmC;YACrE,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAChB,IAAM,WAAS,GAAoC,EAAE,CAAC;gBACtD,aAAa,CAAC,OAAO,CAAC,UAAA,EAAE;oBACpB,IAAM,EAAE,GAAG,IAAI,6DAA6B,EAAE,CAAC;oBAC/C,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,EAAE,CAAC;oBACjB,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;wBACX,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC;wBACd,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC;4BACd,IAAM,IAAI,GAAG,IAAI,mDAAwB,EAAE,CAAC;4BAC5C,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,gBAAgB,CAAC;4BAC3C,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;4BAC3B,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC;4BACjC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACxB,CAAC,CAAC,CAAC;oBACP,CAAC;oBACD,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACd,EAAE,CAAC,QAAQ,GAAG,IAAI,mEAAgC,EAAE,CAAC;wBACrD,IAAI,YAAY,GAAa,EAAE,CAAC;wBAEhC,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;4BACpB,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBACzC,CAAC;wBAED,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;4BACxB,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;wBAC7C,CAAC;wBAED,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;4BACzB,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;wBAC9C,CAAC;wBAED,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACvB,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;wBAC5C,CAAC;wBAED,EAAE,CAAC,QAAQ,CAAC,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;4BACtB,EAAE,CAAC,QAAQ,CAAC,YAAY,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAC9D,CAAC;oBACL,CAAC;oBACD,WAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACvB,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,WAAS,CAAC;YACrB,CAAC;YACD,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QACL,6BAAC;IAAD,CAhDA,AAgDC,IAAA;IAhDY,wDAAsB","file":"partsCollectionFactory.js","sourcesContent":["import { IPartsCollectionFactory } from \"./interfaces/IPartsCollectionFactory\";\nimport { JobPartsCollection } from \"../../business/models/jobPartsCollection\";\nimport { PartCollectionDetailViewModel } from \"../models/partCollectionDetailViewModel\";\nimport { PartsCollectionViewModel } from \"../models/partsCollectionViewModel\";\nimport { PartsCollectionCustomerViewModel } from \"../models/partsCollectionCustomerViewModel\";\n\nexport class PartsCollectionFactory implements IPartsCollectionFactory {\n    public createPartsCollectionViewModel(businessModel: JobPartsCollection[]): PartCollectionDetailViewModel[] {\n        if (businessModel) {\n            const viewModel: PartCollectionDetailViewModel[] = [];\n            businessModel.forEach(bm => {\n                const vm = new PartCollectionDetailViewModel();\n                vm.jobId = bm.id;\n                if (bm.parts) {\n                    vm.parts = [];\n                    bm.parts.forEach(x => {\n                        const part = new PartsCollectionViewModel();\n                        part.stockReferenceId = x.stockReferenceId;\n                        part.quantity = x.quantity;\n                        part.description = x.description;\n                        vm.parts.push(part);\n                    });\n                }\n                if (bm.customer) {\n                    vm.customer = new PartsCollectionCustomerViewModel();\n                    let contactParts: string[] = [];\n\n                    if (bm.customer.title) {\n                        contactParts.push(bm.customer.title);\n                    }\n\n                    if (bm.customer.firstName) {\n                        contactParts.push(bm.customer.firstName);\n                    }\n\n                    if (bm.customer.middleName) {\n                        contactParts.push(bm.customer.middleName);\n                    }\n\n                    if (bm.customer.lastName) {\n                        contactParts.push(bm.customer.lastName);\n                    }\n\n                    vm.customer.contactName = contactParts.join(\" \");\n                    if (bm.customer.address) {\n                        vm.customer.shortAddress = bm.customer.address.join(\", \");\n                    }\n                }\n                viewModel.push(vm);\n            });\n            return viewModel;\n        }\n        return [];\n    }\n}\n"],"sourceRoot":"../../.."}