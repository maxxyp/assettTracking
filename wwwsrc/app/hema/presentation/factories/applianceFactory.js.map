{"version":3,"sources":["hema/presentation/factories/applianceFactory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;IAiBA;QAAsC,oCAAoB;QAGtD,0BAAY,mBAAyC,EAAE,cAA+B,EAAE,gBAAmC;YAA3H,YACI,kBAAM,mBAAmB,EAAE,cAAc,CAAC,SAE7C;YADG,KAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;;QAC9C,CAAC;QAEM,sDAA2B,GAAlC;YACI,IAAI,SAAS,GAAuB,IAAI,uCAAkB,EAAE,CAAC;YAE7D,SAAS,CAAC,EAAE,GAAG,WAAI,CAAC,OAAO,EAAE,CAAC;YAC9B,SAAS,CAAC,cAAc,GAAG,YAAY,CAAC;YAExC,SAAS,CAAC,iBAAiB,GAAG,KAAK,CAAC;YACpC,SAAS,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAErC,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAEM,oEAAyC,GAAhD,UAAiD,sBAA8C,EAAE,wBAAqC,EACrF,uCAA+C,EAAE,uBAA+B,EAChF,4BAAoD;YACjG,IAAI,SAAS,GAAuB,IAAI,uCAAkB,EAAE,CAAC;YAE7D,SAAS,CAAC,cAAc,GAAG,sBAAsB,CAAC,cAAc,CAAC;YACjE,SAAS,CAAC,SAAS,GAAG,sBAAsB,CAAC,SAAS,CAAC;YACvD,SAAS,CAAC,WAAW,GAAG,sBAAsB,CAAC,WAAW,CAAC;YAE3D,SAAS,CAAC,EAAE,GAAG,sBAAsB,CAAC,EAAE,CAAC;YACzC,SAAS,CAAC,QAAQ,GAAG,sBAAsB,CAAC,QAAQ,CAAC;YACrD,SAAS,CAAC,MAAM,GAAG,sBAAsB,CAAC,MAAM,CAAC;YACjD,SAAS,CAAC,uBAAuB,GAAG,sBAAsB,CAAC,uBAAuB,CAAC;YACnF,SAAS,CAAC,QAAQ,GAAG,sBAAsB,CAAC,QAAQ,CAAC;YACrD,SAAS,CAAC,YAAY,GAAG,sBAAsB,CAAC,YAAY,CAAC;YAC7D,SAAS,CAAC,kBAAkB,GAAG,sBAAsB,CAAC,kBAAkB,CAAC;YACzE,SAAS,CAAC,aAAa,GAAG,sBAAsB,CAAC,aAAa,CAAC;YAC/D,SAAS,CAAC,WAAW,GAAG,sBAAsB,CAAC,WAAW,CAAC;YAC3D,SAAS,CAAC,QAAQ,GAAG,sBAAsB,CAAC,QAAQ,CAAC;YACrD,SAAS,CAAC,YAAY,GAAG,sBAAsB,CAAC,YAAY,CAAC;YAC7D,SAAS,CAAC,aAAa,GAAG,sBAAsB,CAAC,aAAa,CAAC;YAC/D,SAAS,CAAC,mBAAmB,GAAG,sBAAsB,CAAC,mBAAmB,CAAC;YAC3E,SAAS,CAAC,SAAS,GAAG,sBAAsB,CAAC,SAAS,CAAC;YACvD,SAAS,CAAC,iBAAiB,GAAG,sBAAsB,CAAC,iBAAiB,CAAC;YACvE,SAAS,CAAC,wBAAwB,GAAG,sBAAsB,CAAC,wBAAwB,CAAC;YACrF,SAAS,CAAC,gBAAgB,GAAG,sBAAsB,CAAC,gBAAgB,CAAC;YACrE,SAAS,CAAC,qBAAqB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC;YAC/E,SAAS,CAAC,UAAU,GAAG,sBAAsB,CAAC,UAAU,CAAC;YACzD,SAAS,CAAC,KAAK,GAAG,sBAAsB,CAAC,KAAK,CAAC;YAC/C,SAAS,CAAC,UAAU,GAAG,sBAAsB,CAAC,UAAU,CAAC;YACzD,SAAS,CAAC,QAAQ,GAAG,sBAAsB,CAAC,QAAQ,CAAC;YACrD,SAAS,CAAC,OAAO,GAAG,sBAAsB,CAAC,OAAO,CAAC;YACnD,SAAS,CAAC,mBAAmB,GAAG,sBAAsB,CAAC,mBAAmB,CAAC;YAE3E,SAAS,CAAC,mBAAmB,GAAG,sBAAsB,CAAC,mBAAmB,CAAC;YAE3E,SAAS,CAAC,cAAc,GAAG,SAAS,CAAC,mBAAmB,KAAK,yCAAmB,CAAC,GAAG,CAAC;YACrF,SAAS,CAAC,yBAAyB,GAAG,wBAAwB,CAAC,QAAQ,KAAK,uCAAuC,CAAC;YACpH,SAAS,CAAC,cAAc,GAAG,wBAAwB,CAAC,WAAW,KAAK,uBAAuB,CAAC;YAC5F,SAAS,CAAC,iBAAiB,GAAG,SAAS,CAAC,OAAO,KAAK,IAAI,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS,CAAC;YAC5F,SAAS,CAAC,kBAAkB,GAAG,SAAS,CAAC,QAAQ,KAAK,IAAI,IAAI,SAAS,CAAC,QAAQ,KAAK,SAAS,IAAI,SAAS,CAAC,QAAQ,KAAK,SAAS,CAAC,EAAE,CAAC;YAEtI,EAAE,CAAC,CAAC,SAAS,CAAC,kBAAkB,IAAI,4BAA4B,CAAC,CAAC,CAAC;gBAC/D,SAAS,CAAC,mBAAmB,GAAG,4BAA4B,CAAC,aAAa,CAAC;YAC/E,CAAC;YAED,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAEM,gEAAqC,GAA5C,UAA6C,kBAAsC,EAAE,aAAqB,EAAE,wBAAqC,EACpG,uCAA+C,EAAE,uBAA+B,EAChF,wBAAgC,EAAE,qBAA6B;YAExG,IAAI,iCAA+D,CAAC;YAEpE,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBAC3B,iCAAiC,GAAG,IAAI,CAAC,4BAA4B,CAAC,aAAa,EAAE,qBAAqB,CAAC,CAAC;YAChH,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,iCAAiC,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACnE,CAAC;YAED,MAAM,CAAC,iCAAiC;iBACnC,IAAI,CAAC,UAAC,mBAAmB;gBACtB,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;oBAC3B,kBAAkB,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;oBAC7D,kBAAkB,CAAC,cAAc,GAAG,kBAAkB,CAAC,mBAAmB,KAAK,yCAAmB,CAAC,GAAG,CAAC;oBACvG,kBAAkB,CAAC,yBAAyB,GAAG,wBAAwB,CAAC,QAAQ,KAAK,uCAAuC,CAAC;oBAC7H,kBAAkB,CAAC,cAAc,GAAG,wBAAwB,CAAC,WAAW,KAAK,uBAAuB,CAAC;oBAErG,gFAAgF;oBAChF,6CAA6C;oBAC7C,kBAAkB,CAAC,kBAAkB,GAAG,KAAK,CAAC;oBAC9C,kBAAkB,CAAC,mBAAmB,GAAG,SAAS,CAAC;oBACnD,kBAAkB,CAAC,iBAAiB,GAAG,CAAC,wBAAwB,CAAC,WAAW,KAAK,wBAAwB,CAAC,CAAC;gBAC/G,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,kBAAkB,CAAC,mBAAmB,GAAG,SAAS,CAAC;oBACnD,kBAAkB,CAAC,cAAc,GAAG,KAAK,CAAC;oBAC1C,kBAAkB,CAAC,yBAAyB,GAAG,KAAK,CAAC;oBACrD,kBAAkB,CAAC,cAAc,GAAG,SAAS,CAAC;oBAE9C,iFAAiF;oBACjF,6CAA6C;oBAC7C,kBAAkB,CAAC,kBAAkB,GAAG,KAAK,CAAC;oBAC9C,kBAAkB,CAAC,mBAAmB,GAAG,SAAS,CAAC;oBACnD,kBAAkB,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBACjD,CAAC;YACL,CAAC,CAAC,CAAC;QACX,CAAC;QAEM,oEAAyC,GAAhD,UAAiD,kBAAsC,EAAE,GAAQ,EAAE,qBAA6B;YAAhI,iBAgCC;YA9BG,IAAI,sBAAsB,GAA2B,IAAI,qBAAsB,EAAE,CAAC;YAElF,sBAAsB,CAAC,EAAE,GAAG,kBAAkB,CAAC,EAAE,CAAC;YAClD,sBAAsB,CAAC,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC;YAC9D,sBAAsB,CAAC,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC;YAC1D,sBAAsB,CAAC,uBAAuB,GAAG,kBAAkB,CAAC,uBAAuB,CAAC;YAC5F,sBAAsB,CAAC,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC;YAC9D,sBAAsB,CAAC,YAAY,GAAG,kBAAkB,CAAC,YAAY,CAAC;YACtE,sBAAsB,CAAC,kBAAkB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC;YAClF,sBAAsB,CAAC,aAAa,GAAG,kBAAkB,CAAC,aAAa,CAAC;YACxE,sBAAsB,CAAC,WAAW,GAAG,kBAAkB,CAAC,WAAW,CAAC;YACpE,sBAAsB,CAAC,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC;YAC9D,sBAAsB,CAAC,YAAY,GAAG,kBAAkB,CAAC,YAAY,CAAC;YACtE,sBAAsB,CAAC,aAAa,GAAG,kBAAkB,CAAC,aAAa,CAAC;YACxE,sBAAsB,CAAC,mBAAmB,GAAG,kBAAkB,CAAC,mBAAmB,CAAC;YACpF,sBAAsB,CAAC,SAAS,GAAG,kBAAkB,CAAC,SAAS,CAAC;YAChE,sBAAsB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,iBAAiB,CAAC;YAChF,sBAAsB,CAAC,wBAAwB,GAAG,kBAAkB,CAAC,wBAAwB,CAAC;YAC9F,sBAAsB,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,gBAAgB,CAAC;YAC9E,sBAAsB,CAAC,qBAAqB,GAAG,kBAAkB,CAAC,qBAAqB,CAAC;YACxF,sBAAsB,CAAC,UAAU,GAAG,kBAAkB,CAAC,UAAU,CAAC;YAClE,sBAAsB,CAAC,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC;YACxD,sBAAsB,CAAC,UAAU,GAAG,kBAAkB,CAAC,UAAU,CAAC;YAClE,2FAA2F;YAC3F,sBAAsB,CAAC,iBAAiB,GAAG,SAAS,CAAC;YACrD,sBAAsB,CAAC,mBAAmB,GAAG,kBAAkB,CAAC,mBAAmB,CAAC;YAEpF,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,sBAAsB,EAAE,qBAAqB,CAAC;iBACjF,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,sBAAsB,EAAE,GAAG,CAAC,EAA5E,CAA4E,CAAC;iBACxF,IAAI,CAAC,cAAM,OAAA,sBAAsB,EAAtB,CAAsB,CAAC,CAAC;QAC5C,CAAC;QAEM,oEAAyC,GAAhD,UAAiD,kBAAsC,EAAE,sBAA8C;YAEnI,sBAAsB,CAAC,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC;YAC9D,sBAAsB,CAAC,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC;YAC1D,sBAAsB,CAAC,uBAAuB,GAAG,kBAAkB,CAAC,uBAAuB,CAAC;YAC5F,sBAAsB,CAAC,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC;YAC9D,sBAAsB,CAAC,aAAa,GAAG,kBAAkB,CAAC,aAAa,CAAC;YACxE,sBAAsB,CAAC,WAAW,GAAG,kBAAkB,CAAC,WAAW,CAAC;YACpE,sBAAsB,CAAC,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC;YAC9D,sBAAsB,CAAC,YAAY,GAAG,kBAAkB,CAAC,YAAY,CAAC;YACtE,sBAAsB,CAAC,aAAa,GAAG,kBAAkB,CAAC,aAAa,CAAC;YACxE,sBAAsB,CAAC,mBAAmB,GAAG,kBAAkB,CAAC,mBAAmB,CAAC;YACpF,sBAAsB,CAAC,SAAS,GAAG,kBAAkB,CAAC,SAAS,CAAC;YAChE,sBAAsB,CAAC,iBAAiB,GAAG,kBAAkB,CAAC,iBAAiB,CAAC;YAChF,sBAAsB,CAAC,wBAAwB,GAAG,kBAAkB,CAAC,wBAAwB,CAAC;YAC9F,sBAAsB,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,gBAAgB,CAAC;YAC9E,sBAAsB,CAAC,qBAAqB,GAAG,kBAAkB,CAAC,qBAAqB,CAAC;YACxF,sBAAsB,CAAC,UAAU,GAAG,kBAAkB,CAAC,UAAU,CAAC;YAClE,sBAAsB,CAAC,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC;YACxD,sBAAsB,CAAC,UAAU,GAAG,kBAAkB,CAAC,UAAU,CAAC;YAClE,2FAA2F;YAC3F,sBAAsB,CAAC,mBAAmB,GAAG,kBAAkB,CAAC,mBAAmB,CAAC;YAEpF,sBAAsB,CAAC,SAAS,GAAG,kBAAkB,CAAC,SAAS,CAAC;YAEhE,MAAM,CAAC,sBAAsB,CAAC;QAClC,CAAC;QAzKQ,gBAAgB;YAD5B,qCAAM,CAAC,yCAAmB,EAAE,+BAAc,EAAE,mCAAgB,CAAC;;WACjD,gBAAgB,CA0K5B;QAAD,uBAAC;KA1KD,AA0KC,CA1KqC,2CAAoB,GA0KzD;IA1KY,4CAAgB","file":"applianceFactory.js","sourcesContent":["import {Appliance as ApplianceBusinessModel} from \"../../business/models/appliance\";\nimport {ApplianceViewModel} from \"../modules/appliances/viewModels/applianceViewModel\";\nimport {IApplianceFactory} from \"./interfaces/IApplianceFactory\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport {IObjectType} from \"../../business/models/reference/IObjectType\";\nimport {Guid} from \"../../../common/core/guid\";\nimport {BaseApplianceFactory} from \"../../common/factories/baseApplianceFactory\";\nimport {BusinessRuleService} from \"../../business/services/businessRuleService\";\nimport {CatalogService} from \"../../business/services/catalogService\";\nimport {IBusinessRuleService} from \"../../business/services/interfaces/IBusinessRuleService\";\nimport {ICatalogService} from \"../../business/services/interfaces/ICatalogService\";\nimport {ApplianceSafetyType} from \"../../business/models/applianceSafetyType\";\nimport { Job } from \"../../business/models/job\";\nimport { DataStateManager } from \"../../common/dataStateManager\";\nimport { IDataStateManager } from \"../../common/IDataStateManager\";\n\n@inject(BusinessRuleService, CatalogService, DataStateManager)\nexport class ApplianceFactory extends BaseApplianceFactory implements IApplianceFactory {\n    private _dataStateManager: IDataStateManager;\n\n    constructor(businessRuleService: IBusinessRuleService, catalogService: ICatalogService, dataStateManager: IDataStateManager) {\n        super(businessRuleService, catalogService);\n        this._dataStateManager = dataStateManager;\n    }\n\n    public createNewApplianceViewModel(): ApplianceViewModel {\n        let viewModel: ApplianceViewModel = new ApplianceViewModel();\n\n        viewModel.id = Guid.newGuid();\n        viewModel.dataStateGroup = \"appliances\";\n\n        viewModel.hasChildAppliance = false;\n        viewModel.hasParentAppliance = false;\n\n        return viewModel;\n    }\n\n    public createApplianceViewModelFromBusinessModel(applianceBusinessModel: ApplianceBusinessModel, applianceTypeCatalogItem: IObjectType,\n                                                     centralHeatingApplianceHardwareCategory: string, applianceRequiresGcCode: string,\n                                                     parentApplianceBusinessModel: ApplianceBusinessModel) : ApplianceViewModel {\n        let viewModel: ApplianceViewModel = new ApplianceViewModel();\n\n        viewModel.dataStateGroup = applianceBusinessModel.dataStateGroup;\n        viewModel.dataState = applianceBusinessModel.dataState;\n        viewModel.dataStateId = applianceBusinessModel.dataStateId;\n\n        viewModel.id = applianceBusinessModel.id;\n        viewModel.serialId = applianceBusinessModel.serialId;\n        viewModel.gcCode = applianceBusinessModel.gcCode;\n        viewModel.bgInstallationIndicator = applianceBusinessModel.bgInstallationIndicator;\n        viewModel.category = applianceBusinessModel.category;\n        viewModel.contractType = applianceBusinessModel.contractType;\n        viewModel.contractExpiryDate = applianceBusinessModel.contractExpiryDate;\n        viewModel.applianceType = applianceBusinessModel.applianceType;\n        viewModel.description = applianceBusinessModel.description;\n        viewModel.flueType = applianceBusinessModel.flueType;\n        viewModel.cylinderType = applianceBusinessModel.cylinderType;\n        viewModel.energyControl = applianceBusinessModel.energyControl;\n        viewModel.locationDescription = applianceBusinessModel.locationDescription;\n        viewModel.condition = applianceBusinessModel.condition;\n        viewModel.numberOfRadiators = applianceBusinessModel.numberOfRadiators;\n        viewModel.numberOfSpecialRadiators = applianceBusinessModel.numberOfSpecialRadiators;\n        viewModel.installationYear = applianceBusinessModel.installationYear;\n        viewModel.systemDesignCondition = applianceBusinessModel.systemDesignCondition;\n        viewModel.systemType = applianceBusinessModel.systemType;\n        viewModel.notes = applianceBusinessModel.notes;\n        viewModel.boilerSize = applianceBusinessModel.boilerSize;\n        viewModel.parentId = applianceBusinessModel.parentId;\n        viewModel.childId = applianceBusinessModel.childId;\n        viewModel.isInstPremAppliance = applianceBusinessModel.isInstPremAppliance;\n\n        viewModel.applianceSafetyType = applianceBusinessModel.applianceSafetyType;\n\n        viewModel.isGasAppliance = viewModel.applianceSafetyType === ApplianceSafetyType.gas;\n        viewModel.isCentralHeatingAppliance = applianceTypeCatalogItem.category === centralHeatingApplianceHardwareCategory;\n        viewModel.requiresGcCode = applianceTypeCatalogItem.fetchGCCode === applianceRequiresGcCode;\n        viewModel.hasChildAppliance = viewModel.childId !== null && viewModel.childId !== undefined;\n        viewModel.hasParentAppliance = viewModel.parentId !== null && viewModel.parentId !== undefined && viewModel.parentId !== viewModel.id;\n\n        if (viewModel.hasParentAppliance && parentApplianceBusinessModel) {\n            viewModel.parentApplianceType = parentApplianceBusinessModel.applianceType;\n        }\n\n        return viewModel;\n    }\n\n    public updateApplianceViewModelApplianceType(applianceViewModel: ApplianceViewModel, applianceType: string, applianceTypeCatalogItem: IObjectType,\n                                                 centralHeatingApplianceHardwareCategory: string, applianceRequiresGcCode: string,\n                                                 parentApplianceIndicator: string, engineerWorkingSector: string): Promise<void> {\n\n        let calculateApplianceSafeTypePromise: Promise<ApplianceSafetyType>;\n\n        if (applianceTypeCatalogItem) {\n            calculateApplianceSafeTypePromise = this.calculateApplianceSafetyType(applianceType, engineerWorkingSector);\n        } else {\n            calculateApplianceSafeTypePromise = Promise.resolve(undefined);\n        }\n\n        return calculateApplianceSafeTypePromise\n            .then((applianceSafetyType) => {\n                if (applianceTypeCatalogItem) {\n                    applianceViewModel.applianceSafetyType = applianceSafetyType;\n                    applianceViewModel.isGasAppliance = applianceViewModel.applianceSafetyType === ApplianceSafetyType.gas;\n                    applianceViewModel.isCentralHeatingAppliance = applianceTypeCatalogItem.category === centralHeatingApplianceHardwareCategory;\n                    applianceViewModel.requiresGcCode = applianceTypeCatalogItem.fetchGCCode === applianceRequiresGcCode;\n\n                    // you cannot change the applianceType on a child and only in new appliance mode\n                    // just to be safe clear out any parent stuff\n                    applianceViewModel.hasParentAppliance = false;\n                    applianceViewModel.parentApplianceType = undefined;\n                    applianceViewModel.hasChildAppliance = (applianceTypeCatalogItem.association === parentApplianceIndicator);\n                } else {\n                    applianceViewModel.applianceSafetyType = undefined;\n                    applianceViewModel.isGasAppliance = false;\n                    applianceViewModel.isCentralHeatingAppliance = false;\n                    applianceViewModel.requiresGcCode = undefined;\n\n                    // you cannot change the applianceType on a child so only the has child is needed\n                    // just to be safe clear out any parent stuff\n                    applianceViewModel.hasParentAppliance = false;\n                    applianceViewModel.parentApplianceType = undefined;\n                    applianceViewModel.hasChildAppliance = false;\n                }\n            });\n    }\n\n    public createApplianceBusinessModelFromViewModel(applianceViewModel: ApplianceViewModel, job: Job, engineerWorkingSector: string)\n        : Promise<ApplianceBusinessModel> {\n        let applianceBusinessModel: ApplianceBusinessModel = new ApplianceBusinessModel();\n\n        applianceBusinessModel.id = applianceViewModel.id;\n        applianceBusinessModel.serialId = applianceViewModel.serialId;\n        applianceBusinessModel.gcCode = applianceViewModel.gcCode;\n        applianceBusinessModel.bgInstallationIndicator = applianceViewModel.bgInstallationIndicator;\n        applianceBusinessModel.category = applianceViewModel.category;\n        applianceBusinessModel.contractType = applianceViewModel.contractType;\n        applianceBusinessModel.contractExpiryDate = applianceViewModel.contractExpiryDate;\n        applianceBusinessModel.applianceType = applianceViewModel.applianceType;\n        applianceBusinessModel.description = applianceViewModel.description;\n        applianceBusinessModel.flueType = applianceViewModel.flueType;\n        applianceBusinessModel.cylinderType = applianceViewModel.cylinderType;\n        applianceBusinessModel.energyControl = applianceViewModel.energyControl;\n        applianceBusinessModel.locationDescription = applianceViewModel.locationDescription;\n        applianceBusinessModel.condition = applianceViewModel.condition;\n        applianceBusinessModel.numberOfRadiators = applianceViewModel.numberOfRadiators;\n        applianceBusinessModel.numberOfSpecialRadiators = applianceViewModel.numberOfSpecialRadiators;\n        applianceBusinessModel.installationYear = applianceViewModel.installationYear;\n        applianceBusinessModel.systemDesignCondition = applianceViewModel.systemDesignCondition;\n        applianceBusinessModel.systemType = applianceViewModel.systemType;\n        applianceBusinessModel.notes = applianceViewModel.notes;\n        applianceBusinessModel.boilerSize = applianceViewModel.boilerSize;\n        // applianceBusinessModel.applianceCategoryType = applianceViewModel.applianceCategoryType;\n        applianceBusinessModel.preVisitChirpCode = undefined;\n        applianceBusinessModel.applianceSafetyType = applianceViewModel.applianceSafetyType;\n\n        return this.populateBusinessModelFields(applianceBusinessModel, engineerWorkingSector)\n            .then(() => this._dataStateManager.updateApplianceDataState(applianceBusinessModel, job))\n            .then(() => applianceBusinessModel);\n    }\n\n    public updateApplianceBusinessModelFromViewModel(applianceViewModel: ApplianceViewModel, applianceBusinessModel: ApplianceBusinessModel): ApplianceBusinessModel {\n\n        applianceBusinessModel.serialId = applianceViewModel.serialId;\n        applianceBusinessModel.gcCode = applianceViewModel.gcCode;\n        applianceBusinessModel.bgInstallationIndicator = applianceViewModel.bgInstallationIndicator;\n        applianceBusinessModel.category = applianceViewModel.category;\n        applianceBusinessModel.applianceType = applianceViewModel.applianceType;\n        applianceBusinessModel.description = applianceViewModel.description;\n        applianceBusinessModel.flueType = applianceViewModel.flueType;\n        applianceBusinessModel.cylinderType = applianceViewModel.cylinderType;\n        applianceBusinessModel.energyControl = applianceViewModel.energyControl;\n        applianceBusinessModel.locationDescription = applianceViewModel.locationDescription;\n        applianceBusinessModel.condition = applianceViewModel.condition;\n        applianceBusinessModel.numberOfRadiators = applianceViewModel.numberOfRadiators;\n        applianceBusinessModel.numberOfSpecialRadiators = applianceViewModel.numberOfSpecialRadiators;\n        applianceBusinessModel.installationYear = applianceViewModel.installationYear;\n        applianceBusinessModel.systemDesignCondition = applianceViewModel.systemDesignCondition;\n        applianceBusinessModel.systemType = applianceViewModel.systemType;\n        applianceBusinessModel.notes = applianceViewModel.notes;\n        applianceBusinessModel.boilerSize = applianceViewModel.boilerSize;\n        // applianceBusinessModel.applianceCategoryType = applianceViewModel.applianceCategoryType;\n        applianceBusinessModel.applianceSafetyType = applianceViewModel.applianceSafetyType;\n\n        applianceBusinessModel.dataState = applianceViewModel.dataState;\n\n        return applianceBusinessModel;\n    }\n}\n"],"sourceRoot":"../../.."}