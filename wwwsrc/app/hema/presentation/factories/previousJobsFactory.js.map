{"version":3,"sources":["hema/presentation/factories/previousJobsFactory.ts"],"names":[],"mappings":"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","file":"previousJobsFactory.js","sourcesContent":["import { inject } from \"aurelia-framework\";\nimport { IPreviousJobsFactory } from \"./interfaces/IPreviousJobsFactory\";\nimport { Job as JobBusinessModel } from \"../../business/models/job\";\nimport { PreviousJobViewModel } from \"../modules/previousJobs/viewModels/previousJobViewModel\";\nimport * as moment from \"moment\";\nimport { ArrayHelper } from \"../../../common/core/arrayHelper\";\nimport { DateHelper } from \"../../core/dateHelper\";\nimport { Task } from \"../../business/models/task\";\nimport { IBusinessRuleService } from \"../../business/services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../../business/services/businessRuleService\";\n\n/**\n * The objective of this view model is to 'group' the tasks received from the api into their respective worklist\n * The grouping is achieved by taking the first 10 characters from the task id\n *\n * The other job is to establish the job date, this is derived by getting the earliest visit from all the tasks\n */\n\n@inject(BusinessRuleService)\nexport class PreviousJobsFactory implements IPreviousJobsFactory {\n\n    private _businessRuleService: IBusinessRuleService;\n\n    constructor(businessRuleService: IBusinessRuleService) {\n        this._businessRuleService = businessRuleService;\n    }\n\n    public createPreviousJobsViewModel(job: JobBusinessModel): Promise<PreviousJobViewModel[]> {\n        let previousJobsLookup: { [id: string]: PreviousJobViewModel; } = {};\n        let previousJobs: PreviousJobViewModel[] = [];\n       \n        return this._businessRuleService.getQueryableRuleGroup(\"previousJobsFactory\").then(jobFactoryRuleGroup => {\n            const previousJobsAllowedInMonths = jobFactoryRuleGroup.getBusinessRule<number>(\"previousJobsAllowedInMonths\");\n            let oldestAllowed: Date = moment(new Date()).subtract(previousJobsAllowedInMonths, \"months\").toDate();\n\n            return this._businessRuleService.getQueryableRuleGroup(\"chargeService\").then(ruleGroup => {\n\n                const noChargePrefix = ruleGroup.getBusinessRule<string>(\"noChargePrefix\");\n\n                if (job && job.history && job.history.tasks) {\n\n                    job.history.tasks.forEach(task => {\n                        let visitDates: Date[] = task.activities\n                            .map(a => a.date ? new Date(<any>a.date) : null)\n                            .filter(d => d instanceof Date);\n\n                        let mostRecent: Date = null;\n                        if (visitDates.length > 0) {\n                            mostRecent = new Date(Math.max.apply(null, visitDates));\n                        }\n\n                        let jobId = task.id.substring(0, 10);\n                        if (previousJobsLookup[jobId]) {\n                            previousJobsLookup[jobId].tasks.push(task);\n\n                            if (DateHelper.isDate(previousJobsLookup[jobId].date) && DateHelper.isValidDate(previousJobsLookup[jobId].date) && previousJobsLookup[jobId].date < mostRecent) {\n                                previousJobsLookup[jobId].date = mostRecent;\n                            }\n\n                        } else {\n                            previousJobsLookup[jobId] = new PreviousJobViewModel(jobId, mostRecent, undefined, [task]); // undefined because we are populating description later\n                        }\n                    });\n\n                    for (let jobId in previousJobsLookup) {\n                        previousJobs.push(previousJobsLookup[jobId]);\n                    }\n\n                    let jobs = ArrayHelper.sortByColumnDescending(previousJobs, \"date\");\n                    previousJobs = [];\n\n                    for (let i = 0; i < jobs.length; i++) {\n                        // a single job can contain many tasks\n                        // populating description in a way so it contains details of every task\n\n                        // earlier it was displayed with 2 Years and later it changed to last 10 visits. \n                        // as per the new request in part of this incident - INC09871740, It changed to display the previous visits for last 60 Months (5 Years) irrespective of the visits.\n\n                        let isNewerThanLimit = jobs[i].date && jobs[i].date >= oldestAllowed;\n                        if (isNewerThanLimit) {\n\n                            jobs[i].isCharge = jobs[i].tasks.some(t => Task.isChargeableTask(t.chargeType, noChargePrefix));\n\n                            previousJobs.push(jobs[i]);\n                        }\n                    }\n                }\n                return previousJobs;\n            });\n        });\n    }\n}\n"],"sourceRoot":"../../.."}