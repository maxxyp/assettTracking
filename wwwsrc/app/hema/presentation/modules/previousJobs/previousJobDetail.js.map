{"version":3,"sources":["hema/presentation/modules/previousJobs/previousJobDetail.ts"],"names":[],"mappings":"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","file":"previousJobDetail.js","sourcesContent":["import { PreviousJobViewModel } from \"./viewModels/previousJobViewModel\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { Router } from \"aurelia-router\";\nimport { Task } from \"../../../business/models/task\";\nimport { Job } from \"../../../business/models/job\";\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\nimport { JobService } from \"../../../business/services/jobService\";\nimport { BaseViewModel } from \"../../models/baseViewModel\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { IPreviousJobsFactory } from \"../../factories/interfaces/IPreviousJobsFactory\";\nimport { PreviousJobsFactory } from \"../../factories/previousJobsFactory\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { AnimationService } from \"../../../../common/ui/services/animationService\";\nimport { IAnimationService } from \"../../../../common/ui/services/IAnimationService\";\n\n@inject(JobService, PreviousJobsFactory, LabelService, EventAggregator, DialogService, AnimationService, Router)\nexport class PreviousJobDetail extends BaseViewModel {\n    public router: Router;\n    public previousJobViewModel: PreviousJobViewModel;\n    public tasks: Task[];\n    public job: Job;\n    public previousJobIds: string[];\n    public previousJobs: PreviousJobViewModel[];\n    public card: HTMLElement;\n\n    private _jobService: IJobService;\n    private _previousJobsFactory: IPreviousJobsFactory;\n    private _itemPosition: number;\n    private _animationService: IAnimationService;\n    private _router: Router;\n\n    constructor(jobService: IJobService,\n        previousJobsFactory: IPreviousJobsFactory,\n        labelService: ILabelService,\n        eventAggregator: EventAggregator,\n        dialogService: DialogService,\n        animationService: IAnimationService,\n        router: Router) {\n        super(labelService, eventAggregator, dialogService);\n        this._animationService = animationService;\n        this.tasks = [];\n        this.previousJobs = [];\n        this._jobService = jobService;\n        this._previousJobsFactory = previousJobsFactory;\n        this._router = router;\n    }\n\n    public activateAsync(params: { jobId: string, previousJobId: string }): Promise<void> {\n        return this._jobService.getJob(params.jobId).then((job) => {\n            this.job = job;\n\n            if (this.job && this.job.history && this.job.history.tasks) {\n                this.tasks = this.job.history.tasks;\n                this.previousJobs = [];\n                this._previousJobsFactory.createPreviousJobsViewModel(this.job)\n                    .then((previousJobs) => {\n                        this.previousJobs = previousJobs;\n                        this.previousJobViewModel = this.previousJobs.find(j => j.id === params.previousJobId);\n                        this.previousJobIds = this.previousJobs.map(pj => pj.id);\n                        this._itemPosition = this.previousJobs.map((x) => { return x.id; }).indexOf(params.previousJobId);\n                    });\n            }\n\n            this.showContent();\n        });\n    }\n    public swipeFunction(swipeDirection: string): void {\n        if (swipeDirection === \"left\") {\n            this._animationService.swipe(this.card, this.previousJobs, this._itemPosition, swipeDirection, \"slide-in-right\", \"slide-out-left\", 300).then((position) => {\n                this._router.parent.navigate(this._router.parent.currentInstruction.fragment.replace(this.previousJobs[this._itemPosition].id, this.previousJobs[position].id));\n                this._itemPosition = position;\n            })\n                .catch();\n        } else {\n            this._animationService.swipe(this.card, this.previousJobs, this._itemPosition, swipeDirection, \"slide-in-left\", \"slide-out-right\", 300).then((position) => {\n                this._router.parent.navigate(this._router.parent.currentInstruction.fragment.replace(this.previousJobs[this._itemPosition].id, this.previousJobs[position].id));\n                this._itemPosition = position;\n            })\n                .catch();\n        }\n    }\n}\n"],"sourceRoot":"../../../.."}