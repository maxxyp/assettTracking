{"version":3,"sources":["hema/presentation/modules/archives/archives.ts"],"names":[],"mappings":"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","file":"archives.js","sourcesContent":["import { Archive, ARCHIVE_DATE_FORMAT } from \"../../../business/models/archive\";\nimport { inject, observable } from \"aurelia-framework\";\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\nimport { JobService } from \"../../../business/services/jobService\";\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\nimport { ValidationService } from \"../../../business/services/validationService\";\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\nimport { CatalogService } from \"../../../business/services/catalogService\";\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\nimport { EditableViewModel } from \"../../models/editableViewModel\";\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\nimport { EngineerService } from \"../../../business/services/engineerService\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { ArchiveService } from \"../../../business/services/archiveService\";\nimport * as moment from \"moment\";\nimport { ArchiveModel } from \"./viewModels/archiveModel\";\nimport { JobState } from \"../../../business/models/jobState\";\nimport { StringHelper } from \"../../../../common/core/stringHelper\";\nimport { ObjectHelper } from \"../../../../common/core/objectHelper\";\nimport { EngineerState } from \"../../elements/engineerState\";\nimport { IActivityCmpnentVstStatus } from \"../../../business/models/reference/IActivityCmpnentVstStatus\";\nimport { IArchiveService } from \"../../../business/services/interfaces/IArchiveService\";\nimport { ArchiveJobStateModel } from \"./viewModels/archiveJobStateModel\";\nimport { ArchiveConstants } from \"../../../business/services/constants/archiveConstants\";\nimport { DateHelper } from \"../../../core/dateHelper\";\n\n@inject(JobService, EngineerService, LabelService, EventAggregator, ValidationService, BusinessRuleService,\n    CatalogService, DialogService, ArchiveService)\nexport class Archives extends EditableViewModel {\n\n    public minDate: Date;\n    public maxDate: Date;\n    @observable\n    public archiveDate: Date;\n    public archiveModel: ArchiveModel[];\n    public engineerStateLabels: { [key: string]: string };\n    public engineerStateBusinessRules: { [key: string]: string };\n    private _archiveService: IArchiveService;\n    private _taskStates: IActivityCmpnentVstStatus[];\n    private _subscription: Subscription;\n\n    public constructor(jobService: IJobService,\n        engineerService: IEngineerService,\n        labelService: ILabelService,\n        eventAggregator: EventAggregator,\n        validationService: IValidationService,\n        businessRulesService: IBusinessRuleService,\n        catalogService: ICatalogService,\n        dialogService: DialogService,\n        archiveService: IArchiveService) {\n\n        super(jobService, engineerService, labelService, eventAggregator, dialogService, validationService, businessRulesService, catalogService);\n        this._archiveService = archiveService;\n        this.archiveModel = [];\n        this.minDate = new Date();\n        this.maxDate = new Date();\n    }\n\n    public activateAsync(): Promise<any> {\n        return this.populateTaskStates()\n            .then(() => this.populateEngineerLabels())\n            .then(() => this.populateEngineerBusinessRules())\n            .then(() => this.setInitialDates())\n            .then(() => this.getTimesheetData(new Date()))\n            .then(archives => this.mapToModel(this.archiveDate, archives))\n            .then(() => this._subscription = this._eventAggregator.subscribe(ArchiveConstants.ARCHIVE_UPDATED, () => this.rePopulate()))\n            .then(() => this.showContent());\n    }\n\n    public deactivateAsync(): Promise<void> {\n        if (this._subscription) {\n            this._subscription.dispose();\n            this._subscription = undefined;\n        }\n        return Promise.resolve();\n    }\n\n    public archiveDateChanged(newDate: Date, oldDate: Date): Promise<void> {\n        if (newDate) {\n            return this.getTimesheetData(newDate).then((archive) => {\n                return this.mapToModel(newDate, archive);\n            });\n        }\n\n        this.archiveModel = [];\n        return Promise.resolve();\n    }\n\n    public toggleJobs(archive: ArchiveModel): void {\n        if (archive) {\n            archive.showJobs = !archive.showJobs;\n        }\n    }\n\n    private rePopulate(): Promise<void> {\n        this.archiveDate = new Date();\n        this.archiveModel = [];\n        return this.getTimesheetData(this.archiveDate).then(archives =>\n            this.mapToModel(this.archiveDate, archives));\n    }\n\n    private async getTimesheetData(date: Date): Promise<Archive[]> {\n        // tslint:disable-next-line:no-unnecessary-local-variable\n        const result = await this._archiveService.getArchiveByDate(moment(date).format(ARCHIVE_DATE_FORMAT));\n        return result;\n    }\n\n    private setInitialDates(): Promise<void> {\n        return this._archiveService.getEarliestDate().then((date) => {\n            this.minDate = date;\n            this.archiveDate = new Date();\n            return;\n        });\n\n    }\n\n    private populateTaskStates(): Promise<void> {\n        return this._catalogService.getActivityComponentVisitStatuses().then(states => {\n            this._taskStates = states;\n        });\n    }\n\n    private populateEngineerLabels(): Promise<void> {\n        return this._labelService.getGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(EngineerState)))\n            .then(labels => {\n                this.engineerStateLabels = labels;\n            });\n    }\n\n    private populateEngineerBusinessRules(): Promise<void> {\n        return this._businessRuleService.getRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(EngineerService)))\n            .then(rules => {\n                this.engineerStateBusinessRules = rules;\n            });\n    }\n\n    private mapToModel(currentDate: Date, archives: Archive[]): void {\n        this.archiveModel = [];\n\n        if (!archives) {\n            return;\n        }\n\n        for (let i: number = 0; i < archives.length; i++) {\n\n            const businessModel = archives[i];\n\n            if (!businessModel) {\n                break;\n            }\n\n            const viewModel: ArchiveModel = new ArchiveModel();\n\n            viewModel.id = businessModel.id;\n            viewModel.engineerId = businessModel.engineerId;\n            viewModel.jobId = businessModel.jobId;\n            viewModel.details = businessModel.details;\n            viewModel.customerName = businessModel.customerName;\n            viewModel.shortAddress = businessModel.address;\n\n            const nextBusinessModel = archives[i + 1];\n\n            this.setEngineerStates(viewModel, businessModel, nextBusinessModel);\n            this.setJobStates(viewModel, businessModel);\n            this.archiveModel.push(viewModel);\n        }\n    }\n\n    /**\n     * calculating time duration from start of first status and end of previous status\n     */\n\n    private async setEngineerStates(viewModel: ArchiveModel, archiveCurrent: Archive, archiveNext: Archive): Promise<void> {\n\n        if (!archiveCurrent) {\n            return;\n        }\n\n        viewModel.engineerStatus = await this._engineerService.getEngineerStateText(archiveCurrent.engineerStatus);\n        viewModel.start = DateHelper.getHourMinutes(archiveCurrent.timestamp);\n\n        // if this is the last state then use completed time to calculate duration\n        if (archiveCurrent.jobStates) {\n            const completedTime = archiveCurrent.jobStates.find(x => x.state === JobState.complete);\n            if (completedTime) {\n                viewModel.end = DateHelper.getHourMinutes(completedTime.timestamp);\n                viewModel.duration = DateHelper.getDurationMinutes(archiveCurrent.timestamp, completedTime.timestamp, 0);\n            } else {\n                if (archiveNext && archiveNext.timestamp) {\n                    viewModel.end = DateHelper.getHourMinutes(archiveNext.timestamp);\n                    viewModel.duration = DateHelper.getDurationMinutes(archiveCurrent.timestamp, archiveNext.timestamp, 0);\n                }\n            }\n        } else {\n            if (archiveNext && archiveNext.timestamp) {\n                viewModel.end = DateHelper.getHourMinutes(archiveNext.timestamp);\n                viewModel.duration = DateHelper.getDurationMinutes(archiveCurrent.timestamp, archiveNext.timestamp, 0);\n            }\n        }\n    }\n\n    /*\n    converting business data into presentation data.For persenation it requires start time, end time,\n    total duration and job status text (not enum).\n     */\n    private setJobStates(viewModel: ArchiveModel, businessModel: Archive): void {\n\n        if (!businessModel.jobStates || businessModel.jobStates.length === 0) {\n            return;\n        }\n\n        if ((businessModel.jobStates.find(x => x.state === JobState.done))\n            || (businessModel.jobStates.find(x => x.state === JobState.complete))) {\n            viewModel.start = DateHelper.getHourMinutes(businessModel.jobStates[0].timestamp);\n            viewModel.end = DateHelper.getHourMinutes(businessModel.jobStates[businessModel.jobStates.length - 1].timestamp);\n            viewModel.duration = DateHelper.getDurationMinutes(moment(viewModel.start, \"HH:mm\").toDate(),\n                moment(viewModel.end, \"HH:mm\").toDate(), 0);\n        }\n\n        viewModel.jobStates = [];\n\n        for (let i: number = 0; i < businessModel.jobStates.length; i++) {\n\n            const currentJobState = businessModel.jobStates[i];\n            if (currentJobState.state === JobState.done || currentJobState.state === JobState.complete) {\n                break;\n            }\n\n            const { timestamp: prevTimestamp, state } = currentJobState;\n\n            let jobStatus = new ArchiveJobStateModel();\n            jobStatus.state = this.mapToJobState(state);\n            jobStatus.start = DateHelper.getHourMinutes(prevTimestamp);\n\n            const nextJobState = businessModel.jobStates[i + 1];\n\n            if (nextJobState && nextJobState.timestamp) {\n                const { timestamp: nextTimestamp } = nextJobState;\n                // when engineer do not finish the job on same day and finished next day or day after\n                const isEndSameDay = DateHelper.isSameDay(prevTimestamp, nextTimestamp);\n                if (isEndSameDay) {\n                    jobStatus.end = DateHelper.getHourMinutes(nextTimestamp);\n                } else {\n                    jobStatus.end = DateHelper.getHourMinutes(nextTimestamp) + ` (${moment(nextTimestamp).format(\"DD-MMM\")})`;\n                }\n\n                jobStatus.duration = DateHelper.getDurationMinutes(moment(jobStatus.start, \"HH:mm\").toDate(), moment(jobStatus.end, \"HH:mm\").toDate(), 0);\n            }\n\n            viewModel.jobStates.push(jobStatus);\n        }\n\n        // map tasks\n        this.setTaskItems(viewModel, businessModel);\n    }\n\n    private setTaskItems(viewModel: ArchiveModel, businessModel: Archive): void {\n        if (!businessModel.taskItems) {\n            return;\n        }\n        viewModel.taskItems = [];\n        businessModel.taskItems.forEach(task => {\n            task.visitStatus = this.mapToTaskState(task.visitStatus);\n            viewModel.taskItems.push(task);\n        });\n    }\n\n    private mapToJobState(jobState: JobState): string {\n        switch (jobState) {\n            case JobState.arrived:\n                return this.getLabel(\"jobStatusArrived\");\n            case JobState.complete:\n                return this.getLabel(\"jobStatusCompleted\");\n            case JobState.deSelect:\n                return this.getLabel(\"jobStatusDeSelected\");\n            case JobState.done:\n                return this.getLabel(\"jobStatusDone\");\n            case JobState.enRoute:\n                return this.getLabel(\"jobStatusEnRoute\");\n            case JobState.idle:\n                return \"\";\n        }\n    }\n\n    private mapToTaskState(tstate: string): string {\n        let state = this._taskStates.find(x => x.status === tstate);\n        if (state) {\n            return state.statusDescription;\n        }\n        return tstate;\n    }\n}\n"],"sourceRoot":"../../../.."}