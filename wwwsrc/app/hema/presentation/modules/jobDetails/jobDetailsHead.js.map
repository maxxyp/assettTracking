{"version":3,"sources":["hema/presentation/modules/jobDetails/jobDetailsHead.ts"],"names":[],"mappings":"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","file":"jobDetailsHead.js","sourcesContent":["import { IIaciCode } from \"../../../business/models/reference/IIaciCode\";\r\nimport { inject } from \"aurelia-dependency-injection\";\r\nimport { Router } from \"aurelia-router\";\r\nimport {DOM} from \"aurelia-pal\";\r\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\r\nimport { JobService } from \"../../../business/services/jobService\";\r\nimport { Job } from \"../../../business/models/job\";\r\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\r\nimport * as moment from \"moment\";\r\nimport {Threading} from \"../../../../common/core/threading\";\r\nimport {JobSummaryViewModel} from \"../../models/jobSummaryViewModel\";\r\nimport {BaseViewModel} from \"../../models/baseViewModel\";\r\nimport {LabelService} from \"../../../business/services/labelService\";\r\nimport {ILabelService} from \"../../../business/services/interfaces/ILabelService\";\r\nimport {JobState} from \"../../../business/models/jobState\";\r\nimport {Notice} from \"../notice/notice\";\r\nimport {DialogService} from \"aurelia-dialog\";\r\nimport {JobServiceConstants} from \"../../../business/services/constants/jobServiceConstants\";\r\nimport {LandlordDetail} from \"../landlord/landlordDetail\";\r\nimport {IConfigurationService} from \"../../../../common/core/services/IConfigurationService\";\r\nimport {ConfigurationService} from \"../../../../common/core/services/configurationService\";\r\nimport {IToastItem} from \"../../../../common/ui/elements/models/IToastItem\";\r\nimport {Guid} from \"../../../../common/core/guid\";\r\nimport {AppConstants} from \"../../../../appConstants\";\r\nimport {Appliance} from \"../../../business/models/appliance\";\r\nimport {CatalogService} from \"../../../business/services/catalogService\";\r\nimport {ICatalogService} from \"../../../business/services/interfaces/ICatalogService\";\r\nimport {IBridgeBusinessService} from \"../../../business/services/interfaces/IBridgeBusinessService\";\r\nimport {BridgeBusinessService} from \"../../../business/services/bridgeBusinessService\";\r\nimport { ICustomerInfoService } from \"../../../business/services/interfaces/ICustomerInfoService\";\r\nimport { CustomerInfoService } from \"../../../business/services/customerInfoService\";\r\nimport { ITrainingModeConfiguration } from \"../../../business/services/interfaces/ITrainingModeConfiguration\";\r\n\r\n@inject(LabelService, JobService, EventAggregator, DialogService,\r\n    Router, ConfigurationService, CatalogService, BridgeBusinessService, CustomerInfoService)\r\nexport class JobDetailsHead extends BaseViewModel {\r\n    public viewModel: JobSummaryViewModel;\r\n    public landlordDialogOpen: boolean;\r\n\r\n    public clickable: boolean;\r\n\r\n    public timeToJobAddressText: string;\r\n    public timeToJobAddress: number;\r\n\r\n    public startTime: Date;\r\n    public elapsedTime: number;\r\n    public isActiveJob: boolean;\r\n    public jobState: string;\r\n    public isDone: boolean;\r\n    public trainingMode: boolean;\r\n    public safetyStatusCssClass: \"alert\" | \"critical\";\r\n\r\n    public job: Job;\r\n    private _jobService: IJobService;\r\n    private _subscriptions: Subscription[];\r\n    private _timerId: number;\r\n    private _router: Router;\r\n    private _configurationService: IConfigurationService;\r\n    private _iaciCodes: IIaciCode[];\r\n    private _catalogService: ICatalogService;\r\n    private _adaptBusinessService: IBridgeBusinessService;\r\n    private _customerInfoService: ICustomerInfoService;\r\n\r\n    constructor(labelService: ILabelService,\r\n        jobService: IJobService,\r\n        eventAggregator: EventAggregator,\r\n        dialogService: DialogService,\r\n        router: Router,\r\n        configurationService: IConfigurationService,\r\n        catalogService: ICatalogService,\r\n        adaptBusinessService: IBridgeBusinessService,\r\n        customerInfoService: ICustomerInfoService) {\r\n\r\n        super(labelService, eventAggregator, dialogService);\r\n\r\n        this._jobService = jobService;\r\n        this._dialogService = dialogService;\r\n        this._router = router;\r\n        this._configurationService = configurationService;\r\n        this._adaptBusinessService = adaptBusinessService;\r\n        this._customerInfoService = customerInfoService;\r\n\r\n        this.startTime = null;\r\n        this.elapsedTime = -1;\r\n        this._timerId = -1;\r\n        this.isActiveJob = false;\r\n        this.isDone = false;\r\n        this.trainingMode = false;\r\n\r\n        this.landlordDialogOpen = false;\r\n        this._catalogService = catalogService;\r\n        this._subscriptions = [];\r\n    }\r\n\r\n    public attachedAsync(): Promise<void> {\r\n        this._subscriptions.push(this._eventAggregator.subscribe(JobServiceConstants.JOB_STATE_CHANGED, () => {\r\n            this.updateState();\r\n            this.showNotices();\r\n            this.showChirpCodeWarning();\r\n        }));\r\n        this._subscriptions.push(this._eventAggregator.subscribe(JobServiceConstants.JOB_DATA_STATE_CHANGED, () => this.updateRiskIndicator()));\r\n\r\n        this._timerId = Threading.startTimer(() => this.updateState(), 10 * 1000);\r\n        if (this.viewModel) {\r\n            this.viewModel.viewCount++;\r\n        }\r\n        this.trainingMode = !!this._configurationService\r\n            .getConfiguration<ITrainingModeConfiguration>()\r\n            .trainingMode;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public detachedAsync(): Promise<void> {\r\n        if (this._timerId !== -1) {\r\n            Threading.stopTimer(this._timerId);\r\n            this._timerId = -1;\r\n        }\r\n        this._subscriptions.forEach(subscription => subscription.dispose());\r\n        this._subscriptions = null;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public activateAsync(params: { clickable: boolean, job: Job, jobSummary: JobSummaryViewModel }): Promise<void> {\r\n        if (params.jobSummary) {\r\n            this.job = params.job;\r\n            this.viewModel = params.jobSummary;\r\n            this.clickable = params.clickable;\r\n            this.updateState();\r\n            this.updateRiskIndicator();\r\n        }\r\n\r\n        return this._catalogService.getIaciCode().then((iaciCodes) => {\r\n            this._iaciCodes = iaciCodes;\r\n        });\r\n    }\r\n\r\n    public headerClicked(): void {\r\n        if (this.clickable) {\r\n            const routeName = this.job.state === JobState.done ? \"doneJob\" : \"job\";\r\n            this._router.navigateToRoute(routeName, { jobId: this.viewModel.jobNumber });\r\n        }\r\n    }\r\n\r\n    public navigateToAppointmentBooking(event: Event): void {\r\n        this._router.navigate(\"/customers/to-do/\" + this.job.id + \"/appointment/book-an-appointment\");\r\n        this.dispatchClickEvent(event);\r\n    }\r\n\r\n    public showRisks(jobId: string, event: Event): void {\r\n        this._dialogService.open({ viewModel: Notice, model: { jobId: jobId } });\r\n        this.dispatchClickEvent(event);\r\n    }\r\n\r\n    public showLandlordDetails(jobId: string, event: Event): void {\r\n        this._dialogService.open({ viewModel: LandlordDetail, model: { jobId: jobId } });\r\n        this.dispatchClickEvent(event);\r\n    }\r\n\r\n    public launchCustomerInfo(event: Event): void {\r\n        this._customerInfoService.openApp(this.job.premises.id);\r\n        this.dispatchClickEvent(event);\r\n    }\r\n\r\n    public exportCustomerDetails(event: Event, jobId: string): Promise<string> {\r\n        this.dispatchClickEvent(event);\r\n\r\n        return this._adaptBusinessService.exportCustomerDetails(jobId, false).then(\r\n            () => {\r\n                return this.showInfo(\"Exported data\", \"Successfully exported customer details\");\r\n            });\r\n    }\r\n\r\n    private showNotices(): void {\r\n        this._jobService.getJob(this.viewModel.jobNumber)\r\n            .then((job) => {\r\n                if (job.state === JobState.enRoute && job.risks && job.risks.length > 0) {\r\n                    this.showRisks(this.viewModel.jobNumber, null);\r\n                }\r\n            });\r\n    }\r\n\r\n    private updateState(): void {\r\n\r\n        if (this.job) {\r\n            this.jobState = JobState[this.job.state];\r\n            this.isActiveJob = this.job.state === JobState.arrived;\r\n            this.isDone = this.job.state === JobState.done;\r\n\r\n            if (this.isActiveJob) {\r\n                this.startTime = this.job.onsiteTime;\r\n                let endTime = this.job.completionTime;\r\n\r\n                if (this.startTime) {\r\n                    if (endTime) {\r\n                        this.elapsedTime = moment(endTime).diff(moment(this.startTime), \"minutes\");\r\n                    } else {\r\n                        this.elapsedTime = moment(new Date()).diff(moment(this.startTime), \"minutes\");\r\n                    }\r\n                    if (this.elapsedTime < 5) {\r\n                        this.elapsedTime = 0;\r\n                    } else {\r\n                        this.elapsedTime = Math.ceil(Math.max(this.elapsedTime, 1) / 5) * 5;\r\n                    }\r\n                } else {\r\n                    this.startTime = null;\r\n                    this.elapsedTime = -1;\r\n                }\r\n            } else {\r\n                this.startTime = null;\r\n                this.elapsedTime = -1;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private updateRiskIndicator(): void {\r\n        if (this.job) {\r\n            let hasHazardAndRisk = Job.hasHazardAndRisk(this.job);\r\n            this.safetyStatusCssClass = hasHazardAndRisk.hasHazard\r\n                                        ? \"critical\"\r\n                                        : hasHazardAndRisk.hasRisk\r\n                                            ? \"alert\"\r\n                                            : null;\r\n        }\r\n    }\r\n\r\n    private showChirpCodeWarning(): void {\r\n        if (this.job) {\r\n            this.jobState = JobState[this.job.state];\r\n            if (this.job.state === JobState.arrived) {\r\n                let chirpCodes = this.previousChirpCode();\r\n                if (chirpCodes) {\r\n                    chirpCodes.forEach(code => {\r\n                        if (code) {\r\n                            let iaciDescription = this._iaciCodes.find(x => x.iaciCode === code.code);\r\n                            if (iaciDescription) {\r\n                                let toastItem: IToastItem = {\r\n                                    id: Guid.newGuid(),\r\n                                    title: this.getLabel(\"previousChirpCodeWarningTitle\"),\r\n                                    content: this.getParameterisedLabel(\"previousChirpCodeWarning\",\r\n                                        [iaciDescription.iaciDescription, code.applinace.applianceType, code.applinace.locationDescription]),\r\n                                    style: \"warning\",\r\n                                    dismissTime: 0\r\n                                };\r\n\r\n                                this._eventAggregator.publish(AppConstants.APP_TOAST_ADDED, toastItem);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private previousChirpCode(): { code: string, applinace: Appliance }[] {\r\n        let codes: any = [];\r\n        if (this.job && this.job.history && this.job.history.appliances) {\r\n            this.job.history.appliances.forEach(appliance => {\r\n                if (appliance && appliance.preVisitChirpCode) {\r\n                    codes.push({ code: appliance.preVisitChirpCode.code, applinace: appliance });\r\n                }\r\n            });\r\n        }\r\n        return codes;\r\n    }\r\n\r\n    private dispatchClickEvent(event: Event): void {\r\n        if (event !== null) {\r\n            event.stopPropagation();\r\n            DOM.dispatchEvent(new Event(\"click\"));\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../../../.."}