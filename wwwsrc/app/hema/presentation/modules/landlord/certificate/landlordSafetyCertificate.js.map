{"version":3,"sources":["hema/presentation/modules/landlord/certificate/landlordSafetyCertificate.ts"],"names":[],"mappings":"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","file":"landlordSafetyCertificate.js","sourcesContent":["import {inject} from \"aurelia-dependency-injection\";\r\nimport {EventAggregator} from \"aurelia-event-aggregator\";\r\nimport {DialogController, DialogService} from \"aurelia-dialog\";\r\n\r\nimport {BusinessRulesViewModel} from \"../../../models/businessRulesViewModel\";\r\nimport {ILabelService} from \"../../../../business/services/interfaces/ILabelService\";\r\nimport {LabelService} from \"../../../../business/services/labelService\";\r\nimport {IBusinessRuleService} from \"../../../../business/services/interfaces/IBusinessRuleService\";\r\nimport {BusinessRuleService} from \"../../../../business/services/businessRuleService\";\r\nimport {ICatalogService} from \"../../../../business/services/interfaces/ICatalogService\";\r\nimport {CatalogService} from \"../../../../business/services/catalogService\";\r\nimport {IAssetService} from \"../../../../../common/core/services/IAssetService\";\r\nimport {AssetService} from \"../../../../../common/core/services/assetService\";\r\nimport {LandlordFactory} from \"../../../factories/landlordFactory\";\r\nimport {ILandlordFactory} from \"../../../factories/interfaces/ILandlordFactory\";\r\nimport {IValidationService} from \"../../../../business/services/interfaces/IValidationService\";\r\nimport {ValidationService} from \"../../../../business/services/validationService\";\r\n\r\nimport {LandlordSafetyCertificateViewModel} from \"../../../models/landlordSafetyCertificateViewModel\";\r\nimport {InlineViewStrategy} from \"aurelia-framework\";\r\nimport {CatalogConstants} from \"../../../../business/services/constants/catalogConstants\";\r\nimport {LandlordService} from \"../../../../business/services/landlordService\";\r\nimport {ILandlordService} from \"../../../../business/services/interfaces/ILandlordService\";\r\n\r\n@inject(LabelService, EventAggregator, DialogService,\r\n    CatalogService, BusinessRuleService,\r\n    LandlordFactory, AssetService, DialogController, ValidationService,\r\n    LandlordService)\r\n\r\nexport class LandlordSafetyCertificate extends BusinessRulesViewModel {\r\n\r\n    public model: LandlordSafetyCertificateViewModel;\r\n    public viewHtml: InlineViewStrategy;\r\n    public controller: DialogController;\r\n\r\n    private _assetService: IAssetService;\r\n    private _landlordService: ILandlordService;\r\n    private _landlordFactory: ILandlordFactory;\r\n    private _jobId: string;\r\n\r\n    constructor(labelService: ILabelService,\r\n                eventAggregator: EventAggregator,\r\n                dialogService: DialogService,\r\n                catalogService: ICatalogService,\r\n                businessRulesService: IBusinessRuleService,\r\n                landlordFactory: ILandlordFactory,\r\n                assetService: IAssetService,\r\n                controller: DialogController,\r\n                validationService: IValidationService,\r\n                landlordService: ILandlordService) {\r\n\r\n        super(labelService, eventAggregator, dialogService, validationService, businessRulesService, catalogService);\r\n\r\n        this._catalogService = catalogService;\r\n        this._landlordFactory = landlordFactory;\r\n        this._assetService = assetService;\r\n        this.controller = controller;\r\n        this._landlordService = landlordService;\r\n    }\r\n\r\n    public activateAsync(params: { jobId: string }): Promise<void> {\r\n        this._jobId = params.jobId;\r\n\r\n        return this.loadBusinessRules()\r\n            .then(() => {\r\n\r\n                return Promise.all([\r\n                    this._landlordService.getLandlordSafetyCertificate(this._jobId),\r\n                    this._assetService.loadText(this.getBusinessRule<string>(\"templateAssetPath\"))\r\n                ]).then(([landlordCertificateBusinessModel, viewHtml]) => {\r\n\r\n                    this.model = this._landlordFactory.createLandlordSafetyCertificateViewModel(landlordCertificateBusinessModel, this.labels);\r\n                    // this.model = LandlordSafetyCertificateViewModel.dummy();\r\n                    return this.getRequiredCatalogValues(this.model)\r\n                        .then(() => {\r\n                            this.padTableRows(this.model, this.getBusinessRule<number>(\"minApplianceLines\"));\r\n                            this.viewHtml = new InlineViewStrategy(viewHtml);\r\n                            this.showContent();\r\n                        });\r\n                });\r\n            });\r\n    }\r\n\r\n    private getRequiredCatalogValues(viewModel: LandlordSafetyCertificateViewModel): Promise<void> {\r\n        let catalogValueLookupPromises: Promise<void>[] = [];\r\n\r\n        // get all the flue types\r\n        if (viewModel && viewModel.appliances && viewModel.appliances.length > 0) {\r\n\r\n            viewModel.appliances.forEach(appliance => {\r\n                if (appliance.flueType !== this.getLabel(\"incomplete\")) {\r\n                    catalogValueLookupPromises.push(\r\n                        this._catalogService.getItemDescription(CatalogConstants.APPLIANCE_FLUE_TYPES,\r\n                            [CatalogConstants.APPLIANCE_FLUE_TYPES_ID],\r\n                            [appliance.flueType],\r\n                            CatalogConstants.APPLIANCE_FLUE_TYPES_DESCRIPTION)\r\n                            .then(lookupValue => {\r\n                                appliance.flueType = lookupValue;\r\n                            })\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        if (viewModel && viewModel.defects && viewModel.defects.length > 0) {\r\n\r\n            // todo: when a lookup value is null or undefined, then what should the value be?\r\n\r\n            viewModel.defects.forEach((defect) => {\r\n                if ((defect.actionTaken !== this.getLabel(\"notApplicable\")) && (defect.actionTaken !== this.getLabel(\"incomplete\"))) {\r\n                    catalogValueLookupPromises.push(\r\n                        this._catalogService.getItemDescription(CatalogConstants.SAFETY_ACTION,\r\n                            [CatalogConstants.SAFETY_ACTION_ID],\r\n                            [defect.actionTaken],\r\n                            CatalogConstants.SAFETY_ACTION_DESCRIPTION)\r\n                            .then(lookupValue => {\r\n                                defect.actionTaken = lookupValue;\r\n                            }));\r\n                }\r\n\r\n                if ((defect.conditionOfAppliance !== this.getLabel(\"notApplicable\")) && (defect.conditionOfAppliance !== this.getLabel(\"incomplete\"))) {\r\n                    catalogValueLookupPromises.push(\r\n                        this._catalogService.getItemDescription(CatalogConstants.SAFETY_NOTICE_TYPE,\r\n                            [CatalogConstants.SAFETY_NOTICE_TYPE_ID],\r\n                            [defect.conditionOfAppliance],\r\n                            CatalogConstants.SAFETY_NOTICE_TYPE_DESCRIPTION)\r\n                            .then(lookupValue => {\r\n                                defect.conditionOfAppliance = lookupValue;\r\n                            }));\r\n                }\r\n            });\r\n        }\r\n\r\n        if (viewModel && viewModel.instPremDefect) {\r\n            if ((viewModel.instPremDefect.actionTaken !== this.getLabel(\"notApplicable\")) && (viewModel.instPremDefect.actionTaken !== this.getLabel(\"incomplete\"))) {\r\n                catalogValueLookupPromises.push(\r\n                    this._catalogService.getItemDescription(CatalogConstants.SAFETY_ACTION,\r\n                        [CatalogConstants.SAFETY_ACTION_ID],\r\n                        [viewModel.instPremDefect.actionTaken],\r\n                        CatalogConstants.SAFETY_ACTION_DESCRIPTION)\r\n                        .then(lookupValue => {\r\n                            viewModel.instPremDefect.actionTaken = lookupValue;\r\n                        }));\r\n            }\r\n\r\n            if ((viewModel.instPremDefect.conditionOfAppliance !== this.getLabel(\"notApplicable\")) && (viewModel.instPremDefect.conditionOfAppliance !== this.getLabel(\"incomplete\"))) {\r\n                catalogValueLookupPromises.push(\r\n                    this._catalogService.getItemDescription(CatalogConstants.SAFETY_NOTICE_TYPE,\r\n                        [CatalogConstants.SAFETY_NOTICE_TYPE_ID],\r\n                        [viewModel.instPremDefect.conditionOfAppliance],\r\n                        CatalogConstants.SAFETY_NOTICE_TYPE_DESCRIPTION)\r\n                        .then(lookupValue => {\r\n                            viewModel.instPremDefect.conditionOfAppliance = lookupValue;\r\n                        }));\r\n            }\r\n        }\r\n\r\n        return Promise.all(catalogValueLookupPromises).then(() => Promise.resolve());\r\n    }\r\n\r\n    private padTableRows(model: LandlordSafetyCertificateViewModel, minLines: number): void {\r\n        if (model && model.appliances && model.appliances.length > 0) {\r\n            while (model.appliances.length < minLines) {\r\n                model.appliances.push(null);\r\n            }\r\n        }\r\n\r\n        if (model && model.defects && model.defects.length > 0) {\r\n            while (model.defects.length < minLines) {\r\n                model.defects.push(null);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../../../../.."}