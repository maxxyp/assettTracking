{"version":3,"sources":["hema/presentation/modules/charges/viewModels/chargeTaskViewModel.ts"],"names":[],"mappings":";;;;;;;;;;;;IAMA;QAAA;QAuDA,CAAC;QAhCG,sBAAW,iDAAgB;iBAA3B;gBACI,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,sBAAsB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACxG,CAAC;;;WAAA;QAGD,sBAAW,uDAAsB;iBAAjC;gBACI,MAAM,CAAC,IAAI,CAAC,yBAAyB,IAAI,IAAI,CAAC,yBAAyB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC3F,CAAC;;;WAAA;QAGD,sBAAW,sDAAqB;iBAAhC;gBACI,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC5D,MAAM,CAAC,YAAK,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAG,CAAC;gBACjD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,EAAE,CAAC;gBACd,CAAC;YACL,CAAC;;;WAAA;QAGD,sBAAW,0DAAyB;iBAApC;gBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;oBACvB,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAE1B,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;oBACV,KAAK,GAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;gBAChE,CAAC;gBAED,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAClD,CAAC;;;WAAA;QA/BD;YADC,8BAAY,CAAC,OAAO,EAAE,wBAAwB,EAAE,UAAU,CAAC;;;mEAG3D;QAGD;YADC,8BAAY,CAAC,2BAA2B,CAAC;;;yEAGzC;QAGD;YADC,8BAAY,CAAC,gBAAgB,CAAC;;;wEAO9B;QAGD;YADC,8BAAY,CAAC,gBAAgB,EAAE,UAAU,EAAE,KAAK,CAAC;;;4EAajD;QACL,0BAAC;KAvDD,AAuDC,IAAA;IAvDY,kDAAmB","file":"chargeTaskViewModel.js","sourcesContent":["import * as bignumber from \"bignumber\";\nimport { Task } from \"../../../../business/models/task\";\nimport { ChargeItemPartViewModel } from \"./chargeItemPartViewModel\";\nimport { ChargeItemLabourViewModel } from \"./chargeItemLabourViewModel\";\nimport { computedFrom } from \"aurelia-binding\";\n\nexport class ChargeTaskViewModel {\n    public id: string;\n    public chargeType: string;\n    public chargeDescription: string;\n    public vat: bignumber.BigNumber;\n    public vatCode: string;\n    public grossTotal: bignumber.BigNumber;\n    public netTotal: bignumber.BigNumber;\n    public discountCode: string;\n    public discountAmount: bignumber.BigNumber;\n    public discountText: string;\n    public fixedPriceQuotationAmount: bignumber.BigNumber;\n    public show: boolean;\n    public partItems: ChargeItemPartViewModel[];\n    public labourItem: ChargeItemLabourViewModel;\n    public task: Task;\n    public isLabour: boolean;\n    public isParts: boolean;\n    public error: boolean;\n    public errorDescription: string;\n    public isSubsequent: boolean;\n\n    @computedFrom(\"error\", \"hasFixedPriceQuotation\", \"netTotal\")\n    public get canApplyDiscount(): boolean {\n        return !this.error && !this.hasFixedPriceQuotation && this.netTotal && this.netTotal.greaterThan(0);\n    }\n\n    @computedFrom(\"fixedPriceQuotationAmount\")\n    public get hasFixedPriceQuotation(): boolean {\n        return this.fixedPriceQuotationAmount && this.fixedPriceQuotationAmount.greaterThan(0);\n    }\n\n    @computedFrom(\"discountAmount\")\n    public get displayDiscountAmount(): string {\n        if (this.discountAmount && this.discountAmount.greaterThan(0)) {\n            return `-Â£${this.discountAmount.toFixed(2)}`;\n        } else {\n            return \"\";\n        }\n    }\n\n    @computedFrom(\"discountAmount\", \"netTotal\", \"vat\")\n    public get discountGreaterThanAmount(): boolean {\n        if (!this.discountAmount) {\n            return false;\n        }\n\n        let total = this.netTotal;\n\n        if (this.vat) {\n             total =  total.plus(total.times(this.vat).dividedBy(1000));\n        }\n\n        return this.discountAmount.greaterThan(total);\n    }\n}\n"],"sourceRoot":"../../../../.."}