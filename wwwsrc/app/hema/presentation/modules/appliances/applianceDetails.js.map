{"version":3,"sources":["hema/presentation/modules/appliances/applianceDetails.ts"],"names":[],"mappings":"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","file":"applianceDetails.js","sourcesContent":["import { inject, BindingEngine, observable } from \"aurelia-framework\";\nimport { Router } from \"aurelia-router\";\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\nimport { JobService } from \"../../../business/services/jobService\";\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\nimport { ValidationService } from \"../../../business/services/validationService\";\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\nimport { IApplianceService } from \"../../../business/services/interfaces/IApplianceService\";\nimport { ApplianceService } from \"../../../business/services/applianceService\";\nimport { CatalogService } from \"../.././../business/services/catalogService\";\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\nimport { Job } from \"../../../business/models/job\";\nimport { Appliance as ApplianceBusinessModel } from \"../../../business/models/appliance\";\nimport { EditableViewModel } from \"../../models/editableViewModel\";\nimport { ButtonListItem } from \"../../../../common/ui/elements/models/buttonListItem\";\nimport { Guid } from \"../../../../common/core/guid\";\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\nimport { EngineerService } from \"../../../business/services/engineerService\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { ApplianceFactory } from \"../../factories/applianceFactory\";\nimport { IApplianceFactory } from \"../../factories/interfaces/IApplianceFactory\";\nimport { ApplianceViewModel } from \"./viewModels/applianceViewModel\";\nimport { IObjectType } from \"../../../business/models/reference/IObjectType\";\nimport { IGcCode } from \"../../../business/models/reference/IGcCode\";\nimport { ApplianceDetailsConstants } from \"../../constants/applianceDetailsConstants\";\nimport { IApplianceFlueTypes } from \"../../../business/models/reference/IApplianceFlueTypes\";\nimport { IApplianceCondition } from \"../../../business/models/reference/IApplianceCondition\";\nimport { IApplianceSystemType } from \"../../../business/models/reference/IApplianceSystemType\";\nimport { ISystemDesignAndCondition } from \"../../../business/models/reference/ISystemDesignAndCondition\";\nimport { IApplianceCylinderType } from \"../../../business/models/reference/IApplianceCylinderType\";\nimport { IEnergyControls } from \"../../../business/models/reference/IEnergyControls\";\nimport { CatalogConstants } from \"../../../business/services/constants/catalogConstants\";\nimport { IStorageService } from \"../../../business/services/interfaces/IStorageService\";\nimport { StorageService } from \"../../../business/services/storageService\";\nimport { BusinessException } from \"../../../business/models/businessException\";\nimport { ObjectHelper } from \"../../../../common/core/objectHelper\";\n\n@inject(JobService, EngineerService, LabelService, ApplianceService, ApplianceFactory, Router,\n    EventAggregator, DialogService, ValidationService, BusinessRuleService, CatalogService, BindingEngine, StorageService)\nexport class ApplianceDetails extends EditableViewModel {\n\n    public viewModel: ApplianceViewModel;\n\n    // below here are the old vars\n\n    public parentApplianceType: string;\n\n    public bgInstallationYesNoLookup: ButtonListItem[];\n    public applianceTypeCatalog: IObjectType[];\n    public creatableApplianceTypesCatalog: IObjectType[];\n\n    public flueTypesCatalog: IApplianceFlueTypes[];\n    public applianceConditionCatalog: IApplianceCondition[];\n    public systemTypeCatalog: IApplianceSystemType[];\n    public systemDesignAndConditionCatalog: ISystemDesignAndCondition[];\n    public cylinderTypeCatalog: IApplianceCylinderType[];\n    public energyControlsCatalog: IEnergyControls[];\n\n    public isDefaultGcCodeOptionAvailable: boolean;\n    public defaultGcCodeCatalogItems: IGcCode[];\n    @observable\n    public selectedDefaultGcCode: string;\n    // public isEditingChildAppliance: boolean;\n    // public isChildApplianceRequired: boolean;\n    public isKnownGcCodeSelected: boolean;\n    // .DF_1681 we need to stop multiple submissions of the same new record\n    public isCompleteTriggeredAlready: boolean;\n    public replaceAppliance: boolean;\n    public contractTypeDescription: string;\n    private _applianceId: string;\n    private _applianceService: IApplianceService;\n    private _router: Router;\n    private _bindingEngine: BindingEngine;\n    private _propertySubscriptions: Subscription[];\n    private _storageService: IStorageService;\n    private _applianceFactory: IApplianceFactory;\n\n    // business rule vars\n    private _centralHeatingApplianceHardwareCategory: string;\n    private _applianceRequiresGcCode: string;\n    private _isDefaultGcCode: string;\n    private _applianceTyepAllowsCreation: string;\n    private _parentApplianceIndicator: string;\n    private _instPremApplianceType: string;\n    // private _childApplianceIndicator: string;\n    private _applianceTypeCatalogExclusions: string[];\n    private _job: Job;\n    private _engineerWorkingSector: string;\n    private _gcCodeChanged: boolean;\n    private _newGcCode: string;\n    private _savedGcCode: string;\n    private _isGcCodeChangedConfirmationShown: boolean;\n    private _isLoading: boolean;\n    private _oldApplianceId: string;\n\n    public constructor(\n        jobService: IJobService,\n        engineerService: IEngineerService,\n        labelService: ILabelService,\n        applianceService: IApplianceService,\n        applianceFactory: IApplianceFactory,\n        router: Router,\n        eventAggregator: EventAggregator,\n        dialogService: DialogService,\n        validationService: IValidationService,\n        businessRulesService: IBusinessRuleService,\n        catalogService: ICatalogService,\n        bindingEngine: BindingEngine,\n        storageService: IStorageService) {\n        super(jobService, engineerService, labelService, eventAggregator, dialogService, validationService, businessRulesService, catalogService);\n        this._applianceService = applianceService;\n        this._applianceFactory = applianceFactory;\n        this._router = router;\n        this._bindingEngine = bindingEngine;\n        this._propertySubscriptions = [];\n        this._storageService = storageService;\n        this._gcCodeChanged = false;\n        this._isGcCodeChangedConfirmationShown = false;\n    }\n\n    public activateAsync(params: { applianceId: string, newGcCode: string, oldApplianceId: string }): Promise<any> {\n        this._applianceId = params.applianceId;\n        this.isNew = this._applianceId === Guid.empty;\n        this._newGcCode = params.newGcCode || undefined;\n        this._oldApplianceId = params.oldApplianceId;\n        this.replaceAppliance = (this.isNew && this._newGcCode !== undefined && this._oldApplianceId !== undefined);\n        this.isCompleteTriggeredAlready = false;\n        if (this._isCleanInstance) {\n            return this.loadBusinessRules()\n                .then(() => this.buildBusinessRules())\n                .then(() => this.buildValidationRules())\n                .then(() => this.loadCatalogs())\n                .then(() => this.load())\n                .then(() => this.showContent());\n        } else {\n            return this.load();\n        }\n    }\n\n    public completeOk(): Promise<boolean> {\n        if (this.isCompleteTriggeredAlready) {\n            return Promise.resolve(false);\n        }\n        this.isCompleteTriggeredAlready = true;\n        return this.save()\n            .then((success) => {\n                if (success) {\n                    return this._router.navigateToRoute(\"appliances\");\n                } else {\n                    return false;\n                }\n            });\n    }\n\n    public completeCancel(): void {\n        this._router.navigateToRoute(\"appliances\");\n    }\n\n    public selectDefaultGcCodes(): void {\n        this._catalogService.getGCCodes(this.viewModel.applianceType)\n            .then((gcCodes) => {\n                if (gcCodes) {\n                    this.defaultGcCodeCatalogItems = gcCodes.filter(x => x.defaultIndicator === this._isDefaultGcCode);\n                    this.isDefaultGcCodeOptionAvailable = true;\n                    this.selectedDefaultGcCode = \"\";\n                }\n            })\n            .catch(error => this.showError(error));\n    }\n\n    public hideDefaultGcCodes(): void {\n        this.isDefaultGcCodeOptionAvailable = false;\n    }\n\n    public loadParentAppliance(): void {\n        this._router.navigateToRoute(\"appliance\", { \"applianceId\": this.viewModel.parentId });\n    }\n\n    public loadChildAppliance(): void {\n        if (this.isNew) {\n            if (this.isCompleteTriggeredAlready) {\n                return;\n            }\n            this.isCompleteTriggeredAlready = true;\n            this.save()\n                .then(() => {\n                    return this._applianceService.getChildApplianceId(this.jobId, this.viewModel.id)\n                        .then((childApplianceId) => {\n                            this._router.navigateToRoute(\"appliance\", { \"applianceId\": childApplianceId });\n                        });\n                });\n        } else {\n            this._router.navigateToRoute(\"appliance\", { \"applianceId\": this.viewModel.childId });\n        }\n    }\n\n    public applianceTypeChanged(newValue: string, oldValue: string): void {\n        if (!this._isLoading) {\n            this.viewModel.gcCode = undefined;\n            this.isKnownGcCodeSelected = false;\n            this.viewModel.description = undefined;\n        }\n\n        this.hideDefaultGcCodes();\n\n        let applianceTypeCatalogItem = this.applianceTypeCatalog.find(a => a.applianceType === this.viewModel.applianceType);\n\n        this._applianceFactory.updateApplianceViewModelApplianceType(this.viewModel, this.viewModel.applianceType, applianceTypeCatalogItem,\n            this._centralHeatingApplianceHardwareCategory, this._applianceRequiresGcCode,\n            this._parentApplianceIndicator, this._engineerWorkingSector);\n    }\n\n    public async gcCodeChanged(newValue: string, oldValue: string): Promise<void> {\n        this.isKnownGcCodeSelected = false;\n        this.viewModel.description = undefined;\n        this.isDefaultGcCodeOptionAvailable = false;\n        this._gcCodeChanged = true;\n\n        if (this.viewModel.requiresGcCode\n            && this.viewModel.gcCode\n            && this.viewModel.gcCode.length === this.getValidationRule(\"viewModel.gcCode\").maxLength) {\n            // because the gccode is correct size, do the lookup\n            if (!this._isGcCodeChangedConfirmationShown && !this.isNew && !this._isLoading && this.viewModel.gcCode !== this._savedGcCode) {\n                this._isGcCodeChangedConfirmationShown = true;\n                return this.checkIfApplianceReplacementOrAmendmentRequired();\n            } else {\n                this._isGcCodeChangedConfirmationShown = false;\n                return this.getGCCodeDescription();\n            }\n        } else {\n            this._isGcCodeChangedConfirmationShown = false;\n            this.publishApplianceDetailsChangedEvent();\n            return Promise.resolve();\n        }\n    }\n\n    public applianceDescriptionChanged(newValue: string, oldValue: string): void {\n        if (newValue !== oldValue) {\n            this.publishApplianceDetailsChangedEvent();\n        }\n    }\n\n    public selectedDefaultGcCodeChanged(newValue: string, oldValue: string): void {\n        if (newValue) {\n            this.viewModel.gcCode = newValue;\n            this.isDefaultGcCodeOptionAvailable = false;\n\n            this.publishApplianceDetailsChangedEvent();\n        }\n    }\n\n    public deactivateAsync(): Promise<void> {\n        this.disposeSubscriptions();\n        return Promise.resolve();\n    }\n\n    public navigateToReadings(): void {\n        this._router.navigateToRoute(\"notyetimplemented\");\n    }\n\n    public navigateToSafety(): void {\n        this._router.navigateToRoute(\"appliancesafety\", {\n            jobId: this.jobId,\n            applianceId: this.viewModel.id\n        });\n    }\n\n    protected loadModel(): Promise<void> {\n        this.isDefaultGcCodeOptionAvailable = false;\n        this.isKnownGcCodeSelected = false;\n        this._isLoading = true;\n\n        return this._storageService.getWorkingSector()\n            .then((engineerWorkingSector) => {\n                if (engineerWorkingSector) {\n                    this._engineerWorkingSector = engineerWorkingSector;\n                } else {\n                    throw new BusinessException(this, \"loadModel\", \"Required engineer working sector not found\", null, null);\n                }\n            })\n            .then(() => this._jobService.getJob(this.jobId))\n            .then((job) => { this._job = job; })\n            .then(() => {\n                if (this.isNew) {\n                    return this._applianceFactory.createNewApplianceViewModel();\n                } else {\n                    return this._applianceService.getAppliance(this.jobId, this._applianceId)\n                        .then((applianceBusinessModel) => {\n\n                            let getParentAppliancePromise: Promise<ApplianceBusinessModel>;\n\n                            if (applianceBusinessModel.parentId) {\n                                getParentAppliancePromise = this._applianceService.getAppliance(this.jobId, applianceBusinessModel.parentId);\n                            } else {\n                                getParentAppliancePromise = Promise.resolve(null);\n                            }\n\n                            return getParentAppliancePromise\n                                .then((parentAppliance) => {\n                                    let applianceTypeCatalogItem = this.applianceTypeCatalog.find(a => a.applianceType === applianceBusinessModel.applianceType);\n                                    return this._applianceFactory\n                                        .createApplianceViewModelFromBusinessModel(applianceBusinessModel, applianceTypeCatalogItem,\n                                        this._centralHeatingApplianceHardwareCategory, this._applianceRequiresGcCode,\n                                        parentAppliance);\n                                });\n                        });\n                }\n            })\n            .then((applianceViewModel) => {\n                this.viewModel = applianceViewModel;\n                this.viewModel.gcCode = (this.replaceAppliance) ? this._newGcCode : this.viewModel.gcCode;\n                this._savedGcCode = this.viewModel.gcCode;                \n\n                let p: Promise<void> = Promise.resolve();\n                if (this.replaceAppliance) {\n                    p = this._catalogService.getGCCode(this.viewModel.gcCode)\n                        .then((catalogItem) => {\n                            if (catalogItem) {\n                                this.viewModel.description = catalogItem.gcCodeDescription.substr(0, this.getValidationRule(\"viewModel.description\").maxLength);\n                                this.viewModel.applianceType = catalogItem.applianceTypeCode;\n\n                                this.applianceTypeChanged(this.viewModel.applianceType, undefined);\n                            }\n                        });\n                }\n\n                return p.then(() => {\n                    if (this.isNew) {\n                        this.setNewDataState(this.viewModel.dataStateGroup);\n                    } else {\n                        this.setInitialDataState(this.viewModel.dataStateId, this.viewModel.dataState);\n                    }\n                    // if we are hitting undo, we need to transmit the gcCode/description change\n                    this.publishApplianceDetailsChangedEvent();   \n\n                    if (!!this.viewModel.contractType) {\n                        return this._catalogService.getApplianceContractType(this.viewModel.contractType).then(applianceContractType => {\n                            this.contractTypeDescription = applianceContractType.applianceContractTypeDescription || undefined;\n                        });  \n                    }  \n                    return Promise.resolve();         \n                }); \n            })\n            // call setPropertyChangeHandlers() in a subsequent \"then\" after a delay to avoid the bug described in the comments in #17576\n            .delay(1)\n            .then(() => {\n                this.setPropertyChangeHandlers();     \n                this._isLoading = false;           \n            });               \n    }\n\n    protected saveModel(): Promise<void> {\n\n        if (this.isNew) {\n            // this.isNew = false;\n            return this._applianceFactory.createApplianceBusinessModelFromViewModel(this.viewModel, this._job, this._engineerWorkingSector)\n                .then((applianceBusinessModel) => {\n                    applianceBusinessModel.dataState = this.getFinalDataState();\n                    if (this.replaceAppliance) {\n                        return this._applianceService.replaceAppliance(this._job.id, applianceBusinessModel, this._oldApplianceId);\n                    }\n                    return this._applianceService.createAppliance(this._job.id, applianceBusinessModel);\n                });\n        } else {\n            // get the existing appliance business model first\n            return this._applianceService.getAppliance(this._job.id, this.viewModel.id)\n                .then((applianceBusinessModel) => this._applianceFactory.updateApplianceBusinessModelFromViewModel(this.viewModel, ObjectHelper.clone(applianceBusinessModel)))\n                .then((applianceBusinessModel) => {\n                    applianceBusinessModel.dataState = this.getFinalDataState();\n                    return this._applianceService.updateAppliance(this._job.id, applianceBusinessModel, this._isDirty, this._gcCodeChanged);\n                });\n        }\n    }\n\n    protected clearModel(): Promise<void> {\n        this.viewModel.gcCode = undefined;\n        this.viewModel.description = undefined;\n        this.viewModel.locationDescription = undefined;\n        this.viewModel.installationYear = undefined;\n        this.viewModel.serialId = undefined;\n        this.viewModel.flueType = undefined;\n        this.viewModel.bgInstallationIndicator = undefined;\n        this.viewModel.condition = undefined;\n        this.viewModel.systemType = undefined;\n        this.viewModel.systemDesignCondition = undefined;\n        this.viewModel.numberOfRadiators = undefined;\n        this.viewModel.numberOfSpecialRadiators = undefined;\n        this.viewModel.boilerSize = undefined;\n        this.viewModel.cylinderType = undefined;\n        this.viewModel.energyControl = undefined;\n        return Promise.resolve();\n    }\n\n    private publishApplianceDetailsChangedEvent(): void {\n        this._eventAggregator.publish(ApplianceDetailsConstants.DETAILS_CHANGED,\n            {\n                description: this.viewModel.description,\n                gccode: this.viewModel.gcCode\n            });\n    }\n\n    private setPropertyChangeHandlers(): void {\n        this.disposeSubscriptions();\n\n        let applianceTypeSubscription = this._bindingEngine\n            .propertyObserver(this.viewModel, \"applianceType\")\n            .subscribe((newValue, oldValue) => this.applianceTypeChanged(newValue, oldValue));\n        this._propertySubscriptions.push(applianceTypeSubscription);\n\n        let gcCodeSubscription = this._bindingEngine\n            .propertyObserver(this.viewModel, \"gcCode\")\n            .subscribe((newValue, oldValue) => this.gcCodeChanged(newValue, oldValue));\n        this._propertySubscriptions.push(gcCodeSubscription);\n\n        let applianceDescription = this._bindingEngine\n            .propertyObserver(this.viewModel, \"description\")\n            .subscribe((newValue, oldValue) => this.applianceDescriptionChanged(newValue, oldValue));\n        this._propertySubscriptions.push(applianceDescription);\n    }\n\n    private disposeSubscriptions(): void {\n        if (this._propertySubscriptions) {\n            this._propertySubscriptions.forEach(subscription => subscription.dispose());\n            this._propertySubscriptions = [];\n        }\n    }\n\n    private buildBusinessRules(): Promise<void> {\n        this._centralHeatingApplianceHardwareCategory = this.getBusinessRule<string>(\"centralHeatingApplianceHardwareCategory\");\n        this._applianceRequiresGcCode = this.getBusinessRule<string>(\"applianceRequiresGcCode\");\n        this._isDefaultGcCode = this.getBusinessRule<string>(\"isDefaultGcCode\");\n        this._applianceTyepAllowsCreation = this.getBusinessRule<string>(\"applianceTypeAllowsCreation\");\n        this._applianceTypeCatalogExclusions = this.getBusinessRule<string>(\"applianceTypeCatalogExclusions\").split(\";\");\n        this._parentApplianceIndicator = this.getBusinessRule<string>(\"parentApplianceIndicator\");\n\n        return this._businessRuleService.getQueryableRuleGroup(\"applianceFactory\").then(applianceFactoryBusinessRules => {\n            this._instPremApplianceType = applianceFactoryBusinessRules.getBusinessRule<string>(\"instPremApplianceType\");\n        });\n    }\n\n    private loadCatalogs(): Promise<void> {\n        return Promise.all([\n            this.buildNoYesList(),\n            this._catalogService.getObjectTypes(),\n            this._catalogService.getFlueTypes(),\n            this._catalogService.getApplianceConditions(),\n            this._catalogService.getApplianceSystemTypes(),\n            this._catalogService.getSystemDesignAndCondition(),\n            this._catalogService.getApplianceCylinderTypes(),\n            this._catalogService.getEnergyControls(),\n            this._applianceService.getAppliances(this.jobId)]\n        )\n            .then(([\n                bgInstallationYesNo,\n                applianceTypesCatalog,\n                flueTypesCatalog,\n                applianceConditionCatalog,\n                systemTypeCatalog,\n                systemDesignAndConditionCatalog,\n                cylinderTypeCatalog,\n                energyControlsCatalog,\n                appliances\n            ]) => {\n                this.bgInstallationYesNoLookup = bgInstallationYesNo;\n                this.applianceTypeCatalog = applianceTypesCatalog;\n                let isINSApplianceExists: boolean = appliances.some(a => a.applianceType === this._instPremApplianceType);\n                this.creatableApplianceTypesCatalog = applianceTypesCatalog\n                    .filter(c => c.allowCreateInField === this._applianceTyepAllowsCreation)\n                    .filter(c => (this._applianceTypeCatalogExclusions || []).indexOf(c.applianceType) === -1)\n                    .filter(c => isINSApplianceExists ? c.applianceType !== this._instPremApplianceType : true);\n\n                this.flueTypesCatalog = flueTypesCatalog;\n                this.applianceConditionCatalog = applianceConditionCatalog;\n                this.systemTypeCatalog = systemTypeCatalog;\n                this.systemDesignAndConditionCatalog = systemDesignAndConditionCatalog;\n                this.cylinderTypeCatalog = cylinderTypeCatalog;\n                this.energyControlsCatalog = this.toSortedArray(energyControlsCatalog, CatalogConstants.ENERGY_CONTROLS_ID);\n            });\n    }\n\n    private buildValidationRules(): Promise<void> {\n\n        return this.buildValidation([\n            {\n                property: \"viewModel.installationYear\",\n                passes: [\n                    {\n                        test: () => this.viewModel.installationYear && this.viewModel.installationYear.toString().length === 4 ?\n                            this.viewModel.installationYear <= new Date().getFullYear() : true,\n                        message: this.getLabel(\"invalidYear\")\n                    }\n                ]\n            }, {\n                property: \"viewModel.flueType\",\n                condition: () => this.viewModel.isGasAppliance && this.viewModel.applianceType !== \"INS\",\n            }, { property: \"viewModel.condition\", condition: () => this.viewModel.isCentralHeatingAppliance },\n            { property: \"viewModel.systemType\", condition: () => this.viewModel.isCentralHeatingAppliance },\n            { property: \"viewModel.serialId\", condition: () => this.viewModel.serialId !== null && this.viewModel.serialId !== undefined && this.viewModel.serialId !== \"\" },\n            { property: \"viewModel.systemDesignCondition\", condition: () => this.viewModel.isCentralHeatingAppliance },\n            { property: \"viewModel.numberOfRadiators\", condition: () => this.viewModel.isCentralHeatingAppliance },\n            {\n                property: \"viewModel.numberOfSpecialRadiators\",\n                condition: () => this.viewModel.isCentralHeatingAppliance,\n                passes: [\n                    {\n                        test: () => this.viewModel.numberOfSpecialRadiators > 0\n                            ? +this.viewModel.numberOfRadiators >= +this.viewModel.numberOfSpecialRadiators\n                            : true,\n                        message: this.getLabel(\"invalidNumberOfSpecialRadiators\")\n                    }\n                ]\n            },\n            { property: \"viewModel.boilerSize\", condition: () => this.viewModel.isCentralHeatingAppliance },\n            { property: \"viewModel.cylinderType\", condition: () => this.viewModel.isCentralHeatingAppliance },\n            { property: \"viewModel.energyControl\", condition: () => this.viewModel.isCentralHeatingAppliance },\n            { property: \"viewModel.description\", condition: () => !this.viewModel.requiresGcCode },\n            {\n                property: \"viewModel.gcCode\",\n                // validate gcCode rules (maxLength etc.) if type is requiresGcCode, or the user has entered some text\n                // remember that condition() turns on/off all of the standard rules as well as the custom \"passes\" rules\n                // #18271 removed condition to make all GC Codes required, but still check validity when requiresGcCode = true\n                condition: () => true,\n                passes: [\n                    {\n                        // but if not a requiresGcCode type, then do not check the reference data as it will never be in there.\n                        // remember that this rule only kicks in only if all other previously tested rules for this property have passed\n                        test: () => !this.viewModel.requiresGcCode\n                            || this.hasValidGcCode(),\n\n                        message: this.getLabel(\"invalidGcCode\")\n                    }\n                ]\n            }\n        ]);\n    }\n\n    private hasValidGcCode(): Promise<boolean> {\n        return this._catalogService.getGCCode(this.viewModel.gcCode)\n            .then((catalogItem) => catalogItem && catalogItem.applianceTypeCode === this.viewModel.applianceType);\n    }\n\n    private async getGCCodeDescription(): Promise<void> {\n        return this._catalogService.getGCCode(this.viewModel.gcCode)\n            .then((catalogItem) => {\n                if (catalogItem && (catalogItem.applianceTypeCode === this.viewModel.applianceType)) {\n                    this.viewModel.description = catalogItem.gcCodeDescription.substr(0, this.getValidationRule(\"viewModel.description\").maxLength);\n                    this.isKnownGcCodeSelected = true;\n                }\n                this.publishApplianceDetailsChangedEvent();\n            });\n    }\n\n    private async checkIfApplianceReplacementOrAmendmentRequired(): Promise<void> {\n        let isGCCodeValid = await this.hasValidGcCode();\n        if (isGCCodeValid) {\n            let applianceReplacementConfirmation = await this.showConfirmation(this.getLabel(\"confirmation\"), this.getLabel(\"replaceApplianceQuestion\"));\n            if (applianceReplacementConfirmation.wasCancelled) {\n                let applianceAmendmentConfirmation = await this.showConfirmation(this.getLabel(\"confirmation\"), this.getLabel(\"amendApplianceQuestion\"));\n                if (applianceAmendmentConfirmation.wasCancelled) {\n                    this.viewModel.gcCode = this._savedGcCode;\n                    return Promise.resolve();\n                } else {\n                    return this.getGCCodeDescription();\n                }\n            } else {\n                let newApplianceGcCode = this.viewModel.gcCode;\n                this.viewModel.gcCode = this._savedGcCode;\n                this._router.navigateToRoute(\"appliance\", { applianceId: Guid.empty, newGcCode: newApplianceGcCode, oldApplianceId: this.viewModel.id });\n            }\n        }\n    }\n}\n"],"sourceRoot":"../../../.."}