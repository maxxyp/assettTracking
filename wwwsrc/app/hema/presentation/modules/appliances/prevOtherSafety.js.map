{"version":3,"sources":["hema/presentation/modules/appliances/prevOtherSafety.ts"],"names":[],"mappings":"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","file":"prevOtherSafety.js","sourcesContent":["import { inject } from \"aurelia-framework\";\nimport { IApplianceService } from \"../../../business/services/interfaces/IApplianceService\";\nimport { ApplianceService } from \"../../../business/services/applianceService\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { CatalogService } from \"../../../business/services/catalogService\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\nimport { BusinessRulesViewModel } from \"../../models/businessRulesViewModel\";\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\nimport { ValidationService } from \"../../../business/services/validationService\";\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport { ButtonListItem } from \"../../../../common/ui/elements/models/buttonListItem\";\nimport { Appliance } from \"../../../business/models/appliance\";\nimport { PreviousApplianceUnsafeDetail } from \"../../../business/models/previousApplianceUnsafeDetail\";\nimport { ISafetyNoticeType } from \"../../../business/models/reference/ISafetyNoticeType\";\nimport { ISafetyAction } from \"../../../business/models/reference/ISafetyAction\";\nimport { ISafetyNoticeStatus } from \"../../../business/models/reference/ISafetyNoticeStatus\";\nimport {AppliancePageHelper} from \"./appliancePageHelper\";\nimport { Redirect } from \"aurelia-router\";\n\n@inject(LabelService, ApplianceService, EventAggregator, DialogService, ValidationService, BusinessRuleService, CatalogService)\nexport class PrevOtherSafety extends BusinessRulesViewModel {\n\n    public safety: PreviousApplianceUnsafeDetail;\n\n    public applianceSafeLookup: ButtonListItem[];\n    public installationSafeLookup: ButtonListItem[];\n    public safetyActionTypeCatalog: ISafetyAction[];\n    public noticeStatusCatalog: ISafetyNoticeStatus[];\n    public noticeTypeCatalog: ISafetyNoticeType[];\n    public isEmpty: boolean;\n\n    private _applianceService: IApplianceService;\n    private _jobId: string;\n    private _applianceId: string;\n\n    public constructor(\n        labelService: ILabelService,\n        applianceService: IApplianceService,\n        eventAggregator: EventAggregator,\n        dialogService: DialogService,\n        validationService: IValidationService,\n        businessRuleService: IBusinessRuleService,\n        catalogService: ICatalogService) {\n        super(labelService, eventAggregator, dialogService, validationService, businessRuleService, catalogService);\n        this._applianceService = applianceService;\n        this._catalogService = catalogService;\n        this.isEmpty = false;\n    }\n\n    public canActivateAsync(...rest: any[]): Promise<boolean | Redirect> {\n        return AppliancePageHelper.checkApplianceSafetyType(this._applianceService, rest);\n    }\n\n    public activateAsync(params: { jobId: string, applianceId: string }): Promise<any> {\n        this._jobId = params.jobId;\n        this._applianceId = params.applianceId;\n        if (this._isCleanInstance) {\n            return this.loadCatalogs()\n                .then(() => this.loadModel())\n                .then(() => this.showContent());\n        } else {\n            return this.loadModel();\n        }\n    }\n\n    protected loadModel(): Promise<void> {\n\n        return this._applianceService.getAppliance(this._jobId, this._applianceId)\n            .then((appliance: Appliance) => {\n                if (appliance) {\n                    this.isEmpty = this.isModelEmpty(appliance.safety.previousApplianceUnsafeDetail);\n                    this.safety = appliance.safety.previousApplianceUnsafeDetail;\n                }\n            });\n    }\n\n    private loadCatalogs(): Promise<void> {\n\n        let catalogPromises = [\n            this.buildYesNoList()\n                .then(btns => this.applianceSafeLookup = btns),\n            this.buildYesNoList()\n                .then(btns => this.installationSafeLookup = btns),\n            this._catalogService.getSafetyNoticeTypes()\n                .then(safetyNoticeTypes => { this.noticeTypeCatalog = safetyNoticeTypes; }),\n\n            this._catalogService.getSafetyActions()\n                .then(safetyActions => { this.safetyActionTypeCatalog = safetyActions; }),\n\n            this._catalogService.getSafetyNoticeStatuses()\n                .then(safetyNoticeStatus => { this.noticeStatusCatalog = safetyNoticeStatus; })\n\n        ];\n\n        return Promise.all(catalogPromises).then(() => { });\n    }\n\n    private isModelEmpty(previous: PreviousApplianceUnsafeDetail): boolean {\n        let isEmpty: boolean = false;\n        if (previous) {\n            if (!previous.actionCode &&\n                !previous.applianceSafe &&\n                !previous.date &&\n                !previous.installationSafe &&\n                !previous.noticeStatus &&\n                !previous.noticeType &&\n                !previous.progress &&\n                !previous.report) {\n                isEmpty = true;\n            }\n        } else {\n            isEmpty = true;\n        }\n        return isEmpty;\n    }\n}\n"],"sourceRoot":"../../../.."}