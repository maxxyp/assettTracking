{"version":3,"sources":["hema/presentation/modules/appliances/previousElectricalUnsafeDetail.ts"],"names":[],"mappings":"AAAA,0DAA0D;;;;;;;;;;;;;;;;;;;;;;;IAyB1D;QAAoD,kDAAsB;QAgBtE,wCACY,YAA2B,EAC3B,eAAgC,EAChC,aAA4B,EAC5B,gBAAmC,EACnC,iBAAqC,EACrC,mBAAyC,EACzC,cAA+B;YAP3C,YAQI,kBAAM,YAAY,EAAE,eAAe,EAAE,aAAa,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,cAAc,CAAC,SAM9G;YAJG,KAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;YAC1C,KAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YAEtC,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;QAC1B,CAAC;QAEM,yDAAgB,GAAvB;YAAwB,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAClC,MAAM,CAAC,yCAAmB,CAAC,wBAAwB,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QACtF,CAAC;QAEM,sDAAa,GAApB,UAAqB,MAA8C;YAAnE,iBAWC;YAVG,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,WAAW,CAAC;YAEvC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE;qBACrB,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,CAAC;qBAC5B,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,EAAE,EAAlB,CAAkB,CAAC,CAAC;YACxC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAC5B,CAAC;QACL,CAAC;QAES,kDAAS,GAAnB;YAAA,iBAUC;YARG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC;iBAClF,IAAI,CAAC,UAAC,eAAe;gBAClB,EAAE,CAAC,CAAC,eAAe,IAAI,eAAe,CAAC,6BAA6B,CAAC,CAAC,CAAC;oBACnE,uDAAuD;oBACvD,KAAI,CAAC,SAAS,GAAG,eAAe,CAAC,6BAA6B,CAAC;oBAC/D,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,6BAA6B,CAAC,CAAC;gBACpF,CAAC;YACL,CAAC,CAAC,CAAC;QACX,CAAC;QAEO,qDAAY,GAApB;YAAA,iBAoBC;YAlBG,IAAI,eAAe,GAAG;gBAClB,IAAI,CAAC,cAAc,EAAE;qBAChB,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,mBAAmB,GAAG,IAAI,EAA/B,CAA+B,CAAC;gBAClD,IAAI,CAAC,cAAc,EAAE;qBAChB,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,sBAAsB,GAAG,IAAI,EAAlC,CAAkC,CAAC;gBAErD,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE;qBACtC,IAAI,CAAC,UAAA,iBAAiB,IAAM,KAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAE/E,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE;qBAClC,IAAI,CAAC,UAAA,aAAa,IAAM,KAAI,CAAC,uBAAuB,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;gBAE7E,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAAE;qBACzC,IAAI,CAAC,UAAA,kBAAkB,IAAM,KAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;aACtF,CAAC;YAEF,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;YACzC,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,qDAAY,GAApB,UAAqB,QAAuC;YACxD,IAAI,OAAO,GAAY,KAAK,CAAC;YAC7B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU;oBACpB,CAAC,QAAQ,CAAC,aAAa;oBACvB,CAAC,QAAQ,CAAC,IAAI;oBACd,CAAC,QAAQ,CAAC,gBAAgB;oBAC1B,CAAC,QAAQ,CAAC,YAAY;oBACtB,CAAC,QAAQ,CAAC,UAAU;oBACpB,CAAC,QAAQ,CAAC,QAAQ;oBAClB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;oBACnB,OAAO,GAAG,IAAI,CAAC;gBACnB,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,GAAG,IAAI,CAAC;YACnB,CAAC;YACD,MAAM,CAAC,OAAO,CAAC;QACnB,CAAC;QApGQ,8BAA8B;YAD1C,0BAAM,CAAC,2BAAY,EAAE,0CAAe,EAAE,8BAAa,EAAE,mCAAgB,EAAE,qCAAiB,EAAE,yCAAmB,EAAE,+BAAc,CAAC;qDAmB9F,0CAAe;gBACjB,8BAAa;WAnB/B,8BAA8B,CAqG1C;QAAD,qCAAC;KArGD,AAqGC,CArGmD,+CAAsB,GAqGzE;IArGY,wEAA8B","file":"previousElectricalUnsafeDetail.js","sourcesContent":["/// <reference path=\"./../../../../../typings/app.d.ts\" />\n\nimport {inject} from \"aurelia-framework\";\nimport {Redirect } from \"aurelia-router\";\nimport {IApplianceService} from \"../../../business/services/interfaces/IApplianceService\";\nimport {ApplianceService} from \"../../../business/services/applianceService\";\nimport {LabelService} from \"../../../business/services/labelService\";\nimport {ILabelService} from \"../../../business/services/interfaces/ILabelService\";\nimport {BusinessRulesViewModel} from \"../../models/businessRulesViewModel\";\nimport {EventAggregator} from \"aurelia-event-aggregator\";\nimport {PreviousApplianceUnsafeDetail} from \"../../../business/models/previousApplianceUnsafeDetail\";\nimport {CatalogService} from \"../../../business/services/catalogService\";\nimport {ICatalogService} from \"../../../business/services/interfaces/ICatalogService\";\nimport {ButtonListItem} from \"../../../../common/ui/elements/models/buttonListItem\";\nimport {ValidationService} from \"../../../business/services/validationService\";\nimport {IValidationService} from \"../../../business/services/interfaces/IValidationService\";\nimport {IBusinessRuleService} from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport {BusinessRuleService} from \"../../../business/services/businessRuleService\";\nimport {DialogService} from \"aurelia-dialog\";\nimport {ISafetyAction} from \"../../../business/models/reference/ISafetyAction\";\nimport {ISafetyNoticeType} from \"../../../business/models/reference/ISafetyNoticeType\";\nimport {ISafetyNoticeStatus} from \"../../../business/models/reference/ISafetyNoticeStatus\";\nimport {AppliancePageHelper} from \"./appliancePageHelper\";\n\n@inject(LabelService, EventAggregator, DialogService, ApplianceService, ValidationService, BusinessRuleService, CatalogService)\nexport class PreviousElectricalUnsafeDetail extends BusinessRulesViewModel {\n\n    public viewModel: PreviousApplianceUnsafeDetail;\n\n    public applianceSafeLookup: ButtonListItem[];\n    public installationSafeLookup: ButtonListItem[];\n\n    public safetyActionTypeCatalog: ISafetyAction[];\n    public noticeStatusCatalog: ISafetyNoticeStatus[];\n    public noticeTypeCatalog: ISafetyNoticeType[];\n    public isEmpty: boolean;\n\n    private _applianceService: IApplianceService;\n    private _applianceId: string;\n    private _jobId: string;\n\n    constructor(\n                labelService: ILabelService,\n                eventAggregator: EventAggregator,\n                dialogService: DialogService,\n                applianceService: IApplianceService,\n                validationService: IValidationService,\n                businessRuleService: IBusinessRuleService,\n                catalogService: ICatalogService) {\n        super(labelService, eventAggregator, dialogService, validationService, businessRuleService, catalogService);\n\n        this._applianceService = applianceService;\n        this._catalogService = catalogService;\n\n        this.viewModel = null;\n    }\n\n    public canActivateAsync(...rest: any[]): Promise<boolean | Redirect> {\n        return AppliancePageHelper.checkApplianceSafetyType(this._applianceService, rest);\n    }\n\n    public activateAsync(params: { jobId: string, applianceId: string }): Promise<any> {\n        this._jobId = params.jobId;\n        this._applianceId = params.applianceId;\n\n        if (this._isCleanInstance) {\n            return this.loadCatalogs()\n                .then(() => this.loadModel())\n                .then(() => this.showContent());\n        } else {\n            return this.loadModel();\n        }\n    }\n\n    protected loadModel(): Promise<void> {\n\n        return this._applianceService.getApplianceSafetyDetails(this._jobId, this._applianceId)\n            .then((applianceSafety) => {\n                if (applianceSafety && applianceSafety.previousApplianceUnsafeDetail) {\n                    // there are some safety info already there, load those\n                    this.viewModel = applianceSafety.previousApplianceUnsafeDetail;\n                    this.isEmpty = this.isModelEmpty(applianceSafety.previousApplianceUnsafeDetail);\n                }\n            });\n    }\n\n    private loadCatalogs(): Promise<void> {\n\n        let catalogPromises = [\n            this.buildYesNoList()\n                .then(btns => this.applianceSafeLookup = btns),\n            this.buildYesNoList()\n                .then(btns => this.installationSafeLookup = btns),\n\n            this._catalogService.getSafetyNoticeTypes()\n                .then(safetyNoticeTypes => { this.noticeTypeCatalog = safetyNoticeTypes; }),\n\n            this._catalogService.getSafetyActions()\n                .then(safetyActions => { this.safetyActionTypeCatalog = safetyActions; }),\n\n            this._catalogService.getSafetyNoticeStatuses()\n                .then(safetyNoticeStatus => { this.noticeStatusCatalog = safetyNoticeStatus; })\n        ];\n\n        return Promise.all(catalogPromises).then(() => {\n        });\n    }\n\n    private isModelEmpty(previous: PreviousApplianceUnsafeDetail): boolean {\n        let isEmpty: boolean = false;\n        if (previous) {\n            if (!previous.actionCode &&\n                !previous.applianceSafe &&\n                !previous.date &&\n                !previous.installationSafe &&\n                !previous.noticeStatus &&\n                !previous.noticeType &&\n                !previous.progress &&\n                !previous.report) {\n                isEmpty = true;\n            }\n        } else {\n            isEmpty = true;\n        }\n        return isEmpty;\n    }\n}\n"],"sourceRoot":"../../../.."}