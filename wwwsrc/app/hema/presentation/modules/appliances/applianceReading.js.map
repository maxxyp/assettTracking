{"version":3,"sources":["hema/presentation/modules/appliances/applianceReading.ts"],"names":[],"mappings":"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","file":"applianceReading.js","sourcesContent":["import { inject } from \"aurelia-framework\";\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { EditableViewModel } from \"../../models/editableViewModel\";\nimport { IApplianceService } from \"../../../business/services/interfaces/IApplianceService\";\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\nimport { JobService } from \"../../../business/services/jobService\";\nimport { ValidationService } from \"../../../business/services/validationService\";\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\nimport { CatalogService } from \"../../../business/services/catalogService\";\nimport { ApplianceService } from \"../../../business/services/applianceService\";\nimport { GasApplianceReadingViewModel } from \"./viewModels/gasApplianceReadingViewModel\";\nimport { IApplianceGasSafetyFactory } from \"../../factories/interfaces/IApplianceGasSafetyFactory\";\nimport { ApplianceGasSafetyFactory } from \"../../factories/applianceGasSafetyFactory\";\nimport { ApplianceGasSafety } from \"../../../business/models/applianceGasSafety\";\nimport { ApplianceGasUnsafeDetail } from \"../../../business/models/applianceGasUnsafeDetail\";\nimport { BindingEngine } from \"aurelia-binding\";\nimport { ButtonListItem } from \"../../../../common/ui/elements/models/buttonListItem\";\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\nimport { EngineerService } from \"../../../business/services/engineerService\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { GasApplianceReadingsMasterViewModel } from \"./viewModels/gasApplianceReadingsMasterViewModel\";\nimport { AppliancePageHelper } from \"./appliancePageHelper\";\nimport { BetweenValueValidationRule } from \"aurelia-validation\";\nimport { Redirect } from \"aurelia-router\";\n\n@inject(JobService, EngineerService, LabelService, EventAggregator, DialogService, ValidationService,\n    BusinessRuleService, CatalogService, ApplianceService, ApplianceGasSafetyFactory, BindingEngine)\nexport class ApplianceReading extends EditableViewModel {\n\n    public showSupplementaryBurner: boolean;\n    public applianceId: string;\n\n    public gasReadings: GasApplianceReadingsMasterViewModel;\n    public gasIsLpgButtons: ButtonListItem[];\n    public suppIsLpgButtons: ButtonListItem[];\n    public summaryLpgWarningTrigger: boolean;\n\n    private _applianceGasSafetyFactory: IApplianceGasSafetyFactory;\n    private _applianceService: IApplianceService;\n\n    private _bindingEngine: BindingEngine;\n    private _localSubscriptions: Subscription[];\n    private _supplementarySubscriptions: Subscription[];\n\n    // business rule values\n    private _burnerPressureUnsafeValue: number;\n    private _gasRateUnsafeValue: number;\n    private _finalRatioUnsafeThreshold: number;\n    private _firstRatioWarningThreshold: number;\n    private _unsafeToastDismissTime: number;\n    private _unsafeToastTitle: string;\n    private _haveCleared: boolean;\n    private _isGasSafetyWorkedOn: boolean;\n\n    public constructor(jobService: IJobService,\n                       engineerService: IEngineerService,\n                       labelService: ILabelService,\n                       eventAggregator: EventAggregator,\n                       dialogService: DialogService,\n                       validationService: IValidationService,\n                       businessRuleService: IBusinessRuleService,\n                       catalogService: ICatalogService,\n                       applianceService: IApplianceService,\n                       applianceGasSafetyFactory: IApplianceGasSafetyFactory,\n                       bindingEngine: BindingEngine) {\n\n        super(jobService, engineerService, labelService, eventAggregator, dialogService, validationService, businessRuleService, catalogService);\n        this._applianceService = applianceService;\n        this._applianceGasSafetyFactory = applianceGasSafetyFactory;\n        this._bindingEngine = bindingEngine;\n        this.showSupplementaryBurner = false;\n        this._localSubscriptions = [];\n        this._supplementarySubscriptions = [];\n    }\n\n    public canActivateAsync(...rest: any[]): Promise<boolean | Redirect> {\n        return AppliancePageHelper.checkApplianceSafetyType(this._applianceService, rest);\n    }\n\n    public activateAsync(params: { applianceId: string }): Promise<any> {\n        this.applianceId = params.applianceId;\n        this._unsafeToastTitle = this.getLabel(\"unsafeSituation\");\n\n        if (this._isCleanInstance) {\n            return this.loadBusinessRules()\n                .then(() => this.buildBusinessRules())\n                .then(() => this._labelService.getGroupWithoutCommon(\"validationRules\"))\n                .then(labels => this.attachLabels(labels))\n                .then(() => this.buildValidationRules())\n                .then(() => this.loadCatalogs())\n                .then(() => this.load())\n                .then(() => this.showContent());\n        } else {\n            return this.load();\n        }\n    }\n\n    public deactivateAsync(): Promise<void> {\n        this.clearSubscriptions();\n        return Promise.resolve();\n    }\n\n    public addSupplementaryBurner(): void {\n        this.toggleAddBurnerButton();\n    }\n\n    public removeSupplementaryBurner(): void {\n        this.toggleAddBurnerButton();\n    }\n\n    public burnerPressureChanged(newValue: number, vm: GasApplianceReadingViewModel, isSupp: boolean): void {\n        vm.burnerPressureUnsafe = newValue === this._burnerPressureUnsafeValue;\n\n        if (vm.burnerPressureUnsafe) {\n            let unsafeWarningMessage = isSupp ? this.getLabel(\"supplementaryBurnerPressureUnsafe\") : this.getLabel(\"burnerPressureUnsafe\");\n            this.showWarning(this._unsafeToastTitle, unsafeWarningMessage, null, this._unsafeToastDismissTime);\n        }\n\n        this.updateSummary(vm);\n        this.populatePreliminarySupplementaryIsLpg();\n    }\n\n    public gasRateReadingChanged(newValue: number, vm: GasApplianceReadingViewModel, isSupp: boolean): void {\n        vm.gasReadingUnsafe = newValue === this._gasRateUnsafeValue;\n\n        if (vm.gasReadingUnsafe) {\n            let unsafeWarningMessage = isSupp ? this.getLabel(\"supplementaryGasReadingUnsafe\") : this.getLabel(\"gasReadingUnsafe\");\n            this.showWarning(this._unsafeToastTitle, unsafeWarningMessage, null, this._unsafeToastDismissTime);\n        }\n\n        this.updateSummary(vm);\n        this.populatePreliminarySupplementaryIsLpg();\n    }\n\n    public isLpgChanged(newValue: boolean, vm: GasApplianceReadingViewModel, isSupp: boolean): void {\n        vm.isLpg = newValue;\n\n        if (vm.isLpg === false) {\n            this.showWarning(this._unsafeToastTitle, this.getLabel(\"isLpg\"), null, this._unsafeToastDismissTime);\n        }\n\n        this.updateSummary(vm);\n        this.populatePreliminarySupplementaryIsLpg();\n    }\n\n    public readingFirstRatioChanged(newValue: number, vm: GasApplianceReadingViewModel, isSupp: boolean): void {\n        vm.showWarningFirstRatio = newValue > this._firstRatioWarningThreshold;\n        this.updatePerformanceReadings(vm, isSupp);\n    }\n\n    public readingFinalRatioChanged(newValue: number, vm: GasApplianceReadingViewModel, isSupp: boolean): void {\n        let valRule = this.getValidationRule(isSupp ? \"gasReadings.supplementaryReadings.readingFinalRatio\" : \"gasReadings.preliminaryReadings.readingFinalRatio\");\n\n        vm.finalRatioUnsafe = newValue <= valRule.max && newValue >= valRule.min && newValue > this._finalRatioUnsafeThreshold;\n        if (vm.finalRatioUnsafe) {\n            let unsafeWarningMessage = isSupp ?\n                this.getLabel(\"supplementaryFinalRatioUnsafe\") :\n                this.getLabel(\"finalRatioUnsafe\");\n            this.showWarning(this._unsafeToastTitle, unsafeWarningMessage, null, this._unsafeToastDismissTime);\n        }\n\n        this.updatePerformanceReadings(vm, isSupp);\n    }\n\n    public updatePerformanceReadings(vm: GasApplianceReadingViewModel, isSupp: boolean): void {\n        let workedOnReadings: boolean;\n        if (vm) {\n            if (vm.readingFirstRatio === undefined && vm.readingMinRatio === undefined && vm.readingMaxRatio === undefined && vm.readingFinalRatio === undefined &&\n                vm.readingFirstCO === undefined && vm.readingMinCO === undefined && vm.readingMaxCO === undefined && vm.readingFinalCO === undefined &&\n                vm.readingFirstCO2 === undefined && vm.readingMinCO2 === undefined && vm.readingMaxCO2 === undefined && vm.readingFinalCO2 === undefined) {\n                workedOnReadings = false;\n            } else {\n                workedOnReadings = true;\n            }\n\n            if (isSupp) {\n                this.gasReadings.workedOnSupplementaryPerformanceReadings = workedOnReadings;\n            } else {\n                this.gasReadings.workedOnPreliminaryPerformanceReadings = workedOnReadings;\n            }\n            this.updateSummary(vm);\n        }\n    }\n\n    protected loadModel(): Promise<void> {\n        return this._applianceService.getApplianceSafetyDetails(this.jobId, this.applianceId).then(applianceSafety => {\n            this._isGasSafetyWorkedOn = applianceSafety.applianceGasSafety.workedOnAppliance;\n            this.gasReadings = this._applianceGasSafetyFactory.createApplianceGasReadingsViewModel(applianceSafety.applianceGasReadingsMaster);\n            this.showSupplementaryBurner = applianceSafety.applianceGasReadingsMaster.supplementaryBurnerFitted;\n            if (applianceSafety.applianceGasSafety.overrideWorkedOnAppliance === true) {\n                // gas safety can set this to yes, in which chase make main readings mandatory, see validation below\n                this.gasReadings.workedOnMainReadings = applianceSafety.applianceGasSafety.workedOnAppliance;\n                if (!this.gasReadings.workedOnMainReadings) {\n                    this.gasReadings.preliminaryReadings.burnerPressure = undefined;\n                    this.gasReadings.preliminaryReadings.gasRateReading = undefined;\n                    this.gasReadings.supplementaryReadings.burnerPressure = undefined;\n                    this.gasReadings.supplementaryReadings.gasRateReading = undefined;\n                    this.showSupplementaryBurner = false;\n                }\n\n                if (!this.gasReadings.workedOnPreliminaryPerformanceReadings) {\n                    this.resetPerformanceReadings(this.gasReadings.preliminaryReadings);\n                }\n\n                if (!this.gasReadings.supplementaryReadings) {\n                    this.resetPerformanceReadings(this.gasReadings.supplementaryReadings);\n                }\n            }\n\n            this.setInitialDataState(applianceSafety.applianceGasReadingsMaster.dataStateId, applianceSafety.applianceGasReadingsMaster.dataState);\n            this.resetSubscriptions();\n            this._haveCleared = false;\n        });\n    }\n\n    protected saveModel(): Promise<void> {\n        return this._applianceService.getApplianceSafetyDetails(this.jobId, this.applianceId).then(applianceSafety => {\n\n            this.updatePerformanceReadings(this.gasReadings.preliminaryReadings, false);\n            this.updatePerformanceReadings(this.gasReadings.supplementaryReadings, true);\n            let gasReadingsBusinessModel = this._applianceGasSafetyFactory.createApplianceGasReadingsBusinessModel(this.gasReadings);\n            gasReadingsBusinessModel.dataState = this.getFinalDataState();\n\n            applianceSafety.applianceGasReadingsMaster = gasReadingsBusinessModel;\n            applianceSafety.applianceGasReadingsMaster.supplementaryBurnerFitted = this.showSupplementaryBurner;\n\n            if (this._haveCleared) {\n                applianceSafety.applianceGasSafety = new ApplianceGasSafety();\n                applianceSafety.applianceGasUnsafeDetail = new ApplianceGasUnsafeDetail();\n            } else {\n                applianceSafety.applianceGasSafety.summaryPrelimLpgWarningTrigger = this.getSummaryPrelimLpgWarningTrigger();\n                applianceSafety.applianceGasSafety.summarySuppLpgWarningTrigger = this.getSummarySuppLpgWarningTrigger();\n                applianceSafety.applianceGasSafety.overrideWorkedOnAppliance = false;\n                applianceSafety.applianceGasSafety.performanceTestsNotDoneReason = this.gasReadings.workedOnPreliminaryPerformanceReadings ?\n                    undefined : applianceSafety.applianceGasSafety.performanceTestsNotDoneReason;\n                applianceSafety.applianceGasSafety.performanceTestsNotDoneReasonForSupplementary = this.gasReadings.workedOnSupplementaryPerformanceReadings ?\n                    undefined : applianceSafety.applianceGasSafety.performanceTestsNotDoneReasonForSupplementary;\n            }\n\n            return this._applianceService.saveApplianceSafetyDetails(this.jobId, this.applianceId, applianceSafety, false, false);\n        });\n    }\n\n    protected clearModel(): Promise<void> {\n        this.gasReadings = this._applianceGasSafetyFactory.createApplianceGasReadingsViewModel(null);\n        this.gasReadings.preliminaryReadings = new GasApplianceReadingViewModel();\n        this.gasReadings.preliminaryReadings.askIfLpg = true;\n        this.showSupplementaryBurner = false;\n\n        this._haveCleared = true;\n        this._isGasSafetyWorkedOn = false;\n        this.resetSubscriptions();\n\n        return Promise.resolve();\n    }\n\n    private toggleAddBurnerButton(): void {\n        this.gasReadings.supplementaryReadings = new GasApplianceReadingViewModel();\n        this.showSupplementaryBurner = !this.showSupplementaryBurner;\n        if (this.showSupplementaryBurner) {\n            this.gasReadings.supplementaryReadings.isLpg = this.gasReadings.preliminaryReadings.isLpg;\n            this.updateSummary(this.gasReadings.supplementaryReadings);\n        }\n        this.resetSubscriptions(true);\n    }\n\n    private loadCatalogs(): Promise<void> {\n        return Promise.all([this.buildNoYesList(), this.buildNoYesList()])\n            .then(([yesNoGas, yesNoSupp]) => {\n                this.gasIsLpgButtons = yesNoGas;\n                this.suppIsLpgButtons = yesNoSupp;\n            });\n    }\n\n    private setObservables(vm: GasApplianceReadingViewModel, subscriptions: Subscription[], supp: boolean): void {\n        let sub1 = this._bindingEngine.propertyObserver(vm, \"burnerPressure\")\n            .subscribe(newValue => this.burnerPressureChanged(newValue, vm, supp));\n        subscriptions.push(sub1);\n\n        let sub2 = this._bindingEngine.propertyObserver(vm, \"gasRateReading\")\n            .subscribe(newValue => this.gasRateReadingChanged(newValue, vm, supp));\n        subscriptions.push(sub2);\n\n        if (supp === false) {\n            let sub3 = this._bindingEngine.propertyObserver(vm, \"isLpg\")\n                .subscribe(newValue => this.isLpgChanged(newValue, vm, supp));\n            subscriptions.push(sub3);\n        }\n\n        let sub4 = this._bindingEngine.propertyObserver(vm, \"readingFirstRatio\")\n            .subscribe(newValue => this.readingFirstRatioChanged(newValue, vm, supp));\n        subscriptions.push(sub4);\n\n        let sub5 = this._bindingEngine.propertyObserver(vm, \"readingMaxRatio\")\n            .subscribe(newValue => this.updatePerformanceReadings(vm, supp));\n        subscriptions.push(sub5);\n\n        let sub6 = this._bindingEngine.propertyObserver(vm, \"readingMinRatio\")\n            .subscribe(newValue => this.updatePerformanceReadings(vm, supp));\n        subscriptions.push(sub6);\n\n        let sub7 = this._bindingEngine.propertyObserver(vm, \"readingFinalRatio\")\n            .subscribe(newValue => this.readingFinalRatioChanged(newValue, vm, supp));\n        subscriptions.push(sub7);\n\n        let sub8 = this._bindingEngine.propertyObserver(vm, \"readingFirstCO\")\n            .subscribe(newValue => this.updatePerformanceReadings(vm, supp));\n        subscriptions.push(sub8);\n\n        let sub9 = this._bindingEngine.propertyObserver(vm, \"readingMaxCO\")\n            .subscribe(newValue => this.updatePerformanceReadings(vm, supp));\n        subscriptions.push(sub9);\n\n        let sub10 = this._bindingEngine.propertyObserver(vm, \"readingMinCO\")\n            .subscribe(newValue => this.updatePerformanceReadings(vm, supp));\n        subscriptions.push(sub10);\n\n        let sub11 = this._bindingEngine.propertyObserver(vm, \"readingFinalCO\")\n            .subscribe(newValue => this.updatePerformanceReadings(vm, supp));\n        subscriptions.push(sub11);\n\n        let sub12 = this._bindingEngine.propertyObserver(vm, \"readingFirstCO2\")\n            .subscribe(newValue => this.updatePerformanceReadings(vm, supp));\n        subscriptions.push(sub12);\n\n        let sub13 = this._bindingEngine.propertyObserver(vm, \"readingMaxCO2\")\n            .subscribe(newValue => this.updatePerformanceReadings(vm, supp));\n        subscriptions.push(sub13);\n\n        let sub14 = this._bindingEngine.propertyObserver(vm, \"readingMinCO2\")\n            .subscribe(newValue => this.updatePerformanceReadings(vm, supp));\n        subscriptions.push(sub14);\n\n        let sub15 = this._bindingEngine.propertyObserver(vm, \"readingFinalCO2\")\n            .subscribe(newValue => this.updatePerformanceReadings(vm, supp));\n        subscriptions.push(sub15);\n    }\n\n    private buildBusinessRules(): Promise<void> {\n        this._burnerPressureUnsafeValue = this.getBusinessRule<number>(\"burnerPressureUnsafeValue\");\n        this._gasRateUnsafeValue = this.getBusinessRule<number>(\"gasRateUnsafeValue\");\n        this._firstRatioWarningThreshold = this.getBusinessRule<number>(\"firstRatioWarningThreshold\");\n        this._finalRatioUnsafeThreshold = this.getBusinessRule<number>(\"finalRatioUnsafeThreshold\");\n        this._unsafeToastDismissTime = this.getBusinessRule<number>(\"unsafeToastDismissTime\");\n        return Promise.resolve();\n    }\n\n    private buildValidationRules(): Promise<void> {\n        let isFinalRatioRequired = (readings: GasApplianceReadingViewModel) : boolean => {\n            return readings && (\n                readings.readingFinalRatio !== undefined\n                || readings.readingFirstRatio !== undefined\n                || readings.readingMinRatio !== undefined\n                || readings.readingMaxRatio !== undefined\n                || readings.readingFirstCO !== undefined\n                || readings.readingMinCO !== undefined\n                || readings.readingMaxCO !== undefined\n                || readings.readingFinalCO !== undefined\n                || readings.readingFirstCO2 !== undefined\n                || readings.readingMinCO2 !== undefined\n                || readings.readingMaxCO2 !== undefined\n                || readings.readingFinalCO2 !== undefined);\n        };\n\n        return this.buildValidation([\n            {\n                property: \"gasReadings.preliminaryReadings.burnerPressure\",\n                groups: [\"readingsRequired\"],\n                required: () => (this._isGasSafetyWorkedOn || this.gasReadings.workedOnPreliminaryPerformanceReadings || this.gasReadings.workedOnMainReadings)\n                    && (this.gasReadings.preliminaryReadings.isLpg === undefined\n                        || this.gasReadings.preliminaryReadings.isLpg === null)\n                    && (this.gasReadings.preliminaryReadings.gasRateReading === undefined\n                        || this.gasReadings.preliminaryReadings.gasRateReading === null),\n                passes: [\n                    {\n                        test: () => {\n                            // this tests the min & max value\n                            if ((this.gasReadings.preliminaryReadings.burnerPressure !== null\n                                    && (this.gasReadings.preliminaryReadings.burnerPressure !== undefined))) {\n\n                                let minValue = this.validationRules[\"gasReadings.preliminaryReadings.burnerPressure\"].min;\n                                let maxValue = this.validationRules[\"gasReadings.preliminaryReadings.burnerPressure\"].max;\n\n                                let betweenValueRule = new BetweenValueValidationRule(minValue, maxValue);\n\n                                return betweenValueRule.validate(this.gasReadings.preliminaryReadings.burnerPressure, undefined);\n\n                            } else {\n                                return true;\n                            }\n                        },\n                        message: () => {\n                            let minValue = this.validationRules[\"gasReadings.preliminaryReadings.burnerPressure\"].min;\n                            let maxValue = this.validationRules[\"gasReadings.preliminaryReadings.burnerPressure\"].max;\n\n                            return this.getParameterisedLabel(\"isBetween\", [minValue, maxValue]);\n                        }\n                    }],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.gasRateReading\",\n                groups: [\"readingsRequired\"],\n                required: () => (this._isGasSafetyWorkedOn || this.gasReadings.workedOnPreliminaryPerformanceReadings || this.gasReadings.workedOnMainReadings)\n                    && (this.gasReadings.preliminaryReadings.isLpg === undefined\n                        || this.gasReadings.preliminaryReadings.isLpg === null)\n                    && (this.gasReadings.preliminaryReadings.burnerPressure === undefined\n                        || this.gasReadings.preliminaryReadings.burnerPressure === null),\n                passes: [\n                    {\n                        test: () => {\n                            // this tests the min & max value\n                            if ((this.gasReadings.preliminaryReadings.gasRateReading !== null\n                                    && (this.gasReadings.preliminaryReadings.gasRateReading !== undefined))) {\n\n                                let minValue = this.validationRules[\"gasReadings.preliminaryReadings.gasRateReading\"].min;\n                                let maxValue = this.validationRules[\"gasReadings.preliminaryReadings.gasRateReading\"].max;\n\n                                let betweenValueRule = new BetweenValueValidationRule(minValue, maxValue);\n\n                                return betweenValueRule.validate(this.gasReadings.preliminaryReadings.gasRateReading, undefined);\n\n                            } else {\n                                return true;\n                            }\n                        },\n                        message: () => {\n                            let minValue = this.validationRules[\"gasReadings.preliminaryReadings.gasRateReading\"].min;\n                            let maxValue = this.validationRules[\"gasReadings.preliminaryReadings.gasRateReading\"].max;\n\n                            return this.getParameterisedLabel(\"isBetween\", [minValue, maxValue]);\n                        }\n                    }],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.isLpg\",\n                groups: [\"readingsRequired\"],\n                required: () => (this._isGasSafetyWorkedOn || this.gasReadings.workedOnPreliminaryPerformanceReadings || this.gasReadings.workedOnMainReadings)\n                    && (this.gasReadings.preliminaryReadings.gasRateReading === undefined\n                        || this.gasReadings.preliminaryReadings.gasRateReading === null)\n                    && (this.gasReadings.preliminaryReadings.burnerPressure === undefined\n                        || this.gasReadings.preliminaryReadings.burnerPressure === null)\n                    && !this.checkIfSupplementaryMainReadingsExists(),\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingFirstRatio\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.readingFirstRatio !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingMinRatio\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.readingMinRatio !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingMaxRatio\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.readingMaxRatio !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingFirstCO\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.readingFirstCO !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingMinCO\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.readingMinCO !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingMaxCO\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.readingMaxCO !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingFinalCO\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.readingFinalCO !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingFirstCO2\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.readingFirstCO2 !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingMinCO2\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.readingMinCO2 !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingMaxCO2\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.readingMaxCO2 !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingFinalCO2\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.readingFinalCO2 !== undefined\n            },\n\n            {\n                property: \"gasReadings.supplementaryReadings.burnerPressure\",\n                groups: [\"readingsRequired\"],\n                required: () => this.showSupplementaryBurner\n                    && (this._isGasSafetyWorkedOn || this.gasReadings.workedOnSupplementaryPerformanceReadings || this.gasReadings.workedOnMainReadings)\n                    && (this.gasReadings.supplementaryReadings.isLpg === undefined\n                        || this.gasReadings.supplementaryReadings.isLpg === null)\n                    && (this.gasReadings.supplementaryReadings.gasRateReading === undefined\n                        || this.gasReadings.supplementaryReadings.gasRateReading === null),\n                passes: [\n                    {\n                        test: () => {\n                            // this tests the min & max value\n                            if ((this.gasReadings.supplementaryReadings.burnerPressure !== null\n                                    && (this.gasReadings.supplementaryReadings.burnerPressure !== undefined))) {\n\n                                let minValue = this.validationRules[\"gasReadings.supplementaryReadings.burnerPressure\"].min;\n                                let maxValue = this.validationRules[\"gasReadings.supplementaryReadings.burnerPressure\"].max;\n\n                                let betweenValueRule = new BetweenValueValidationRule(minValue, maxValue);\n\n                                return betweenValueRule.validate(this.gasReadings.supplementaryReadings.burnerPressure, undefined);\n\n                            } else {\n                                return true;\n                            }\n                        },\n                        message: () => {\n                            let minValue = this.validationRules[\"gasReadings.supplementaryReadings.burnerPressure\"].min;\n                            let maxValue = this.validationRules[\"gasReadings.supplementaryReadings.burnerPressure\"].max;\n\n                            return this.getParameterisedLabel(\"isBetween\", [minValue, maxValue]);\n                        }\n                    }],\n                condition: () => this.showSupplementaryBurner === true && this.gasReadings !== undefined && this.gasReadings.supplementaryReadings !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.gasRateReading\",\n                groups: [\"readingsRequired\"],\n                required: () => this.showSupplementaryBurner\n                    && (this._isGasSafetyWorkedOn || this.gasReadings.workedOnSupplementaryPerformanceReadings || this.gasReadings.workedOnMainReadings)\n                    && (this.gasReadings.supplementaryReadings.isLpg === undefined\n                        || this.gasReadings.supplementaryReadings.isLpg === null)\n                    && (this.gasReadings.supplementaryReadings.burnerPressure === undefined\n                        || this.gasReadings.supplementaryReadings.burnerPressure === null),\n                passes: [\n                    {\n                        test: () => {\n                            // this tests the min & max value\n                            if ((this.gasReadings.supplementaryReadings.gasRateReading !== null\n                                    && (this.gasReadings.supplementaryReadings.gasRateReading !== undefined))) {\n\n                                let minValue = this.validationRules[\"gasReadings.supplementaryReadings.gasRateReading\"].min;\n                                let maxValue = this.validationRules[\"gasReadings.supplementaryReadings.gasRateReading\"].max;\n\n                                let betweenValueRule = new BetweenValueValidationRule(minValue, maxValue);\n\n                                return betweenValueRule.validate(this.gasReadings.supplementaryReadings.gasRateReading, undefined);\n\n                            } else {\n                                return true;\n                            }\n                        },\n                        message: () => {\n                            let minValue = this.validationRules[\"gasReadings.supplementaryReadings.gasRateReading\"].min;\n                            let maxValue = this.validationRules[\"gasReadings.supplementaryReadings.gasRateReading\"].max;\n\n                            return this.getParameterisedLabel(\"isBetween\", [minValue, maxValue]);\n                        }\n                    }],\n                condition: () => this.showSupplementaryBurner === true && this.gasReadings !== undefined && this.gasReadings.supplementaryReadings !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.readingFirstRatio\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true &&\n                    this.gasReadings !== undefined && this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.readingFirstRatio !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.readingMinRatio\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true &&\n                    this.gasReadings !== undefined && this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.readingMinRatio !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.readingMaxRatio\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true &&\n                    this.gasReadings !== undefined && this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.readingMaxRatio !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.readingFirstCO\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true &&\n                    this.gasReadings !== undefined && this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.readingFirstCO !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.readingMinCO\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true &&\n                    this.gasReadings !== undefined && this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.readingMinCO !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.readingMaxCO\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true &&\n                    this.gasReadings !== undefined && this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.readingMaxCO !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.readingFinalCO\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true &&\n                    this.gasReadings !== undefined && this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.readingFinalCO !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.readingFirstCO2\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true &&\n                    this.gasReadings !== undefined && this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.readingFirstCO2 !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.readingMinCO2\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true &&\n                    this.gasReadings !== undefined && this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.readingMinCO2 !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.readingMaxCO2\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true &&\n                    this.gasReadings !== undefined && this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.readingMaxCO2 !== undefined\n            },\n            {\n                property: \"gasReadings.supplementaryReadings.readingFinalCO2\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true &&\n                    this.gasReadings !== undefined && this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.readingFinalCO2 !== undefined\n            },\n            {\n                property: \"gasReadings.preliminaryReadings.readingFinalRatio\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.gasReadings !== undefined && isFinalRatioRequired(this.gasReadings.preliminaryReadings)\n            }, // validate if something entered or if first, min or max ratio entered\n            {\n                property: \"gasReadings.supplementaryReadings.readingFinalRatio\",\n                groups: [\"readingsRequired\"],\n                condition: () => this.showSupplementaryBurner === true && isFinalRatioRequired(this.gasReadings.supplementaryReadings)\n            } // validate if something entered or if first, min or max ratio entered\n        ]);\n    }\n\n    private init(vm: GasApplianceReadingViewModel): void {\n        // required on first load to set viewModel related props\n        vm.burnerPressureUnsafe = vm.burnerPressure === this._burnerPressureUnsafeValue;\n        vm.gasReadingUnsafe = vm.gasRateReading === this._gasRateUnsafeValue;\n        vm.showWarningFirstRatio = vm.readingFirstRatio > this._firstRatioWarningThreshold;\n        vm.finalRatioUnsafe = vm.readingFinalRatio > this._finalRatioUnsafeThreshold;\n        this.updateSummary(vm);\n    }\n\n    private updateSummary(vm: GasApplianceReadingViewModel): void {\n        if (vm) {\n            // is it unsafe\n            vm.isUnsafeReadings =\n                vm.burnerPressureUnsafe ||\n                vm.gasReadingUnsafe ||\n                vm.isLpg === false ||\n                vm.finalRatioUnsafe;\n\n            let isAPreliminaryReadingTaken = this.gasReadings && this.gasReadings.preliminaryReadings\n                && (this.gasReadings.preliminaryReadings.burnerPressure !== undefined ||\n                    this.gasReadings.preliminaryReadings.gasRateReading !== undefined ||\n                    this.gasReadings.preliminaryReadings.isLpg !== undefined);\n\n            let isASupplementaryReadingTaken = this.gasReadings && this.gasReadings.supplementaryReadings\n                && (this.gasReadings.supplementaryReadings.burnerPressure !== undefined ||\n                    this.gasReadings.supplementaryReadings.gasRateReading !== undefined ||\n                    this.gasReadings.supplementaryReadings.isLpg !== undefined);\n\n            this.gasReadings.workedOnMainReadings = isAPreliminaryReadingTaken || isASupplementaryReadingTaken;\n        }\n    }\n\n    // despite show.bind still need to reset observables, not sure why\n    private setupSubscriptions(onlySupp: boolean = false): void {\n\n        if (this.gasReadings && this.gasReadings.preliminaryReadings && !onlySupp) {\n            this.setObservables(this.gasReadings.preliminaryReadings, this._localSubscriptions, false);\n            this.init(this.gasReadings.preliminaryReadings);\n        }\n\n        if (this.gasReadings && this.gasReadings.supplementaryReadings) {\n            this.setObservables(this.gasReadings.supplementaryReadings, this._supplementarySubscriptions, true);\n            this.init(this.gasReadings.supplementaryReadings);\n        }\n        this.populatePreliminarySupplementaryIsLpg();\n    }\n\n    private clearSubscriptions(onlySupp: boolean = false): void {\n\n        if (this._localSubscriptions && !onlySupp) {\n            this._localSubscriptions.forEach(x => {\n                x.dispose();\n                x = null;\n            });\n        }\n\n        if (this._supplementarySubscriptions && this._supplementarySubscriptions.length > 0) {\n            this._supplementarySubscriptions.forEach(x => {\n                x.dispose();\n                x = null;\n            });\n        }\n\n        this._localSubscriptions = [];\n        this._supplementarySubscriptions = [];\n    }\n\n    private resetSubscriptions(onlySupp: boolean = false): void {\n        this.clearSubscriptions(onlySupp);\n        this.setupSubscriptions(onlySupp);\n    }\n\n    private getSummaryPrelimLpgWarningTrigger(): boolean {\n\n        if (this.gasReadings.preliminaryReadings && this.gasReadings.preliminaryReadings.isLpg === false) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private getSummarySuppLpgWarningTrigger(): boolean {\n\n        if (this.gasReadings.supplementaryReadings && this.gasReadings.supplementaryReadings.isLpg === false) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // todo some refactor work required here, conditional iffs need reviewing/removing,\n    // todo using deconstruction and variables to break up and improve readability\n    // todo bothReadingsExist and burnerGasPremDoesNotExist are used more than once, maybe replace with get method\n    private populatePreliminarySupplementaryIsLpg(): void {\n\n        let {preliminaryReadings: pr, supplementaryReadings: sr} = this.gasReadings;\n\n        const noPreliminaryReadings = pr.burnerPressure === undefined && pr.gasRateReading === undefined;\n        const noPreliminaryIsLpg = pr.isLpg === undefined;\n\n        const noSupplementaryReadings = sr.burnerPressure === undefined && sr.gasRateReading === undefined;\n\n        sr.isLpg = (!noPreliminaryIsLpg && this.showSupplementaryBurner && noPreliminaryReadings) ? pr.isLpg : undefined;\n\n        const bothReadingsExist = (this.showSupplementaryBurner && !noSupplementaryReadings && noPreliminaryReadings);\n\n        pr.askIfLpg = bothReadingsExist ? false : noPreliminaryReadings;\n\n        if (pr.askIfLpg === false) {\n            pr.isLpg = undefined;\n        }\n    }\n\n    private resetPerformanceReadings(vm: GasApplianceReadingViewModel): void {\n        vm.readingFirstCO = undefined;\n        vm.readingFirstCO2 = undefined;\n        vm.readingFirstRatio = undefined;\n        vm.readingMaxCO = undefined;\n        vm.readingMaxCO2 = undefined;\n        vm.readingMaxRatio = undefined;\n        vm.readingMinCO = undefined;\n        vm.readingMinCO2 = undefined;\n        vm.readingMinRatio = undefined;\n        vm.readingFinalCO = undefined;\n        vm.readingFinalCO2 = undefined;\n        vm.readingFinalRatio = undefined;\n    }\n\n    private checkIfSupplementaryMainReadingsExists(): boolean {\n        return this.gasReadings.supplementaryReadings && !!this.gasReadings.supplementaryReadings.burnerPressure || !!this.gasReadings.supplementaryReadings.gasRateReading;\n    }\n}\n"],"sourceRoot":"../../../.."}