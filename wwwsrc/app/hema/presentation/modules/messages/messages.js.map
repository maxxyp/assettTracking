{"version":3,"sources":["hema/presentation/modules/messages/messages.ts"],"names":[],"mappings":"AAAA,wDAAwD;;;;;;;;;;;;;;;;;;;;;;;IAcxD;QAA8B,4BAAa;QAOvC,kBAAY,YAA2B,EACnC,eAAgC,EAChC,aAA4B,EAC5B,cAA+B;YAHnC,YAII,kBAAM,YAAY,EAAE,eAAe,EAAE,aAAa,CAAC,SAItD;YAFG,KAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,iDAAuB,CAAC,uBAAuB,EAAE,UAAC,KAAa,IAAK,OAAA,KAAI,CAAC,cAAc,EAAE,EAArB,CAAqB,CAAC,CAAC;;QACpJ,CAAC;QAEM,gCAAa,GAApB;YACI,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QACjC,CAAC;QAEM,gCAAa,GAApB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;YACjC,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAEM,6BAAU,GAAjB,UAAkB,OAAgB;YAC9B,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC7C,CAAC;QAEM,yBAAM,GAAb,UAAc,OAAgB;YAC1B,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC;QAEM,6BAAU,GAAjB;YACI,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,CAAC;QACtC,CAAC;QAEO,iCAAc,GAAtB;YAAA,iBAKC;YAJG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE;iBACxC,IAAI,CAAC,UAAA,QAAQ,IAAM,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;iBAC/C,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,EAAE,EAAlC,CAAkC,CAAC;iBAC9C,IAAI,CAAC,UAAA,WAAW,IAAM,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAClE,CAAC;QA7CQ,QAAQ;YADpB,0BAAM,CAAC,2BAAY,EAAE,0CAAe,EAAE,8BAAa,EAAE,+BAAc,CAAC;qDAS5C,0CAAe;gBACjB,8BAAa;WATvB,QAAQ,CA8CpB;QAAD,eAAC;KA9CD,AA8CC,CA9C6B,6BAAa,GA8C1C;IA9CY,4BAAQ","file":"messages.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\n\nimport { inject } from \"aurelia-framework\";\nimport { BaseViewModel } from \"../../models/baseViewModel\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { MessageService } from \"../../../business/services/messageService\";\nimport { IMessageService } from \"../../../business/services/interfaces/IMessageService\";\nimport { Message } from \"../../../business/models/message\";\nimport { MessageServiceConstants } from \"../../../business/services/constants/messageServiceConstants\";\n\n@inject(LabelService, EventAggregator, DialogService, MessageService)\nexport class Messages extends BaseViewModel {\n    public messages: Message[];\n    public lastUpdated: Date;\n\n    private _messageService: IMessageService;\n    private _subscription: Subscription;\n\n    constructor(labelService: ILabelService,\n        eventAggregator: EventAggregator,\n        dialogService: DialogService,\n        messageService: IMessageService) {\n        super(labelService, eventAggregator, dialogService);\n\n        this._messageService = messageService;\n        this._subscription = this._eventAggregator.subscribe(MessageServiceConstants.MESSAGE_SERVICE_UPDATED, (count: number) => this.updateMessages());\n    }\n\n    public attachedAsync(): Promise<any> {\n        return this.updateMessages();\n    }\n\n    public detachedAsync(): Promise<void> {\n        if (this._subscription) {\n            this._subscription.dispose();\n        }\n        return Promise.resolve();\n    }\n\n    public markAsRead(message: Message): void {\n        this._messageService.markAsRead(message);\n    }\n\n    public delete(message: Message): void {\n        this._messageService.delete(message);\n    }\n\n    public deleteRead(): void {\n        this._messageService.deleteRead();\n    }\n\n    private updateMessages(): Promise<void> {\n        return this._messageService.getLiveMessages()\n            .then(messages => { this.messages = messages; })\n            .then(() => this._messageService.lastUpdated())\n            .then(lastUpdated => { this.lastUpdated = lastUpdated; });\n    }\n}\n"],"sourceRoot":"../../../.."}