{"version":3,"sources":["hema/presentation/modules/notice/notice.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;IAcA;QAA4B,0BAAa;QAWrC,gBAAY,YAA2B,EAC3B,eAAgC,EAChC,aAA4B,EAC5B,WAAyB,EACzB,UAA4B;YAJxC,YAKI,kBAAM,YAAY,EAAE,eAAe,EAAE,aAAa,CAAC,SAQtD;YANG,KAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAE7B,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YAChB,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,KAAI,CAAC,WAAW,GAAG,EAAE,CAAC;;QAC1B,CAAC;QAEM,8BAAa,GAApB,UAAqB,MAAuB;YAA5C,iBAYC;YAXG,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAE1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;gBACtD,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,KAAK,KAAK,EAApB,CAAoB,CAAC,CAAC;gBACrD,uGAAuG;gBACvG,KAAI,CAAC,MAAM,GAAG,2BAAY,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,KAAK,IAAI,EAAnB,CAAmB,CAAC,CAAC,CAAC;gBACvE,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACd,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAC/C,CAAC;gBACD,KAAI,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,wBAAO,GAAd,UAAe,EAAQ;YACnB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrC,CAAC;QA1CQ,MAAM;YADlB,qCAAM,CAAC,2BAAY,EAAE,0CAAe,EAAE,8BAAa,EAAE,yBAAW,EAAE,iCAAgB,CAAC;qDAanD,0CAAe;gBACjB,8BAAa,UAEhB,iCAAgB;WAf/B,MAAM,CA2ClB;QAAD,aAAC;KA3CD,AA2CC,CA3C2B,6BAAa,GA2CxC;IA3CY,wBAAM","file":"notice.js","sourcesContent":["import {BaseViewModel} from \"../../models/baseViewModel\";\nimport {ILabelService} from \"../../../business/services/interfaces/ILabelService\";\nimport {LabelService} from \"../../../business/services/labelService\";\nimport {inject} from \"aurelia-dependency-injection\";\nimport {Risk} from \"../../../business/models/risk\";\nimport {Appliance} from \"../../../business/models/appliance\";\nimport {IRiskService} from \"../../../business/services/interfaces/IRiskService\";\nimport {RiskService} from \"../../../business/services/riskService\";\nimport * as moment from \"moment\";\nimport {DialogController, DialogService} from \"aurelia-dialog\";\nimport {EventAggregator} from \"aurelia-event-aggregator\";\nimport {ObjectHelper} from \"../../../../common/core/objectHelper\";\n\n@inject(LabelService, EventAggregator, DialogService, RiskService, DialogController)\nexport class Notice extends BaseViewModel {\n\n    public risks: Risk[];\n    public hazard: Risk;\n    public hazardTitle: string;\n    public appliance: Appliance;\n    public jobId: string;\n    public controller: DialogController;\n\n    private _riskService: IRiskService;\n\n    constructor(labelService: ILabelService,\n                eventAggregator: EventAggregator,\n                dialogService: DialogService,\n                riskService: IRiskService,\n                controller: DialogController) {\n        super(labelService, eventAggregator, dialogService);\n\n        this._riskService = riskService;\n        this.controller = controller;\n\n        this.risks = [];\n        this.hazard = null;\n        this.hazardTitle = \"\";\n    }\n\n    public activateAsync(params: {jobId: string}): Promise<void> {\n        this.jobId = params.jobId;\n\n        return this._riskService.getRisks(params.jobId).then(risks => {\n            this.risks = risks.filter(r => r.isHazard === false);\n            /* clone the object as we modify it later with label lookup, but we dont want to break original data */\n            this.hazard = ObjectHelper.clone(risks.find(r => r.isHazard === true));\n            if (this.hazard) {\n                this.hazardTitle = this.getLabel(\"hazard\");\n            }\n            this.showContent();\n        });\n    }\n\n    public getYear(dt: Date): string {\n        return moment(dt).format(\"YYYY\");\n    }\n}\n"],"sourceRoot":"../../../.."}