{"version":3,"sources":["hema/presentation/modules/jobsList/todo.ts"],"names":[],"mappings":"AAAA,wDAAwD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmBxD;QAA0B,wBAAa;QAQnC,cAAY,YAA2B,EAC3B,eAAgC,EAChC,aAA4B,EAC5B,UAAuB,EACvB,oBAA2C;YAJvD,YAKI,kBAAM,YAAY,EAAE,eAAe,EAAE,aAAa,CAAC,SAKtD;YAHG,KAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,KAAI,CAAC,cAAc,GAAG,EAAE,CAAC;YACzB,KAAI,CAAC,cAAc,GAAG,oBAAoB,CAAC,sBAAsB,EAAE,CAAC;;QACxE,CAAC;QAEY,4BAAa,GAA1B;;;;oBACI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,yCAAmB,CAAC,sBAAsB,EAAE,cAAM,OAAA,KAAI,CAAC,UAAU,EAAE,EAAjB,CAAiB,CAAC,CAAC,CAAC;oBAC/H,IAAI,CAAC,WAAW,EAAE,CAAC;;;;SACtB;QAEM,8BAAe,GAAtB;YACI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAE,EAAX,CAAW,CAAC,CAAC;YAC9C,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;YAEzB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAEY,yBAAU,GAAvB;;;;;gCACqC,qBAAM,OAAO,CAAC,GAAG,CAAyB;gCACvE,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;gCAC9B,IAAI,CAAC,WAAW,CAAC,yBAAyB,EAAE;6BAC/C,CAAC,EAAA;;4BAHE,KAA6B,SAG/B,EAHG,QAAQ,QAAA,EAAE,cAAc,QAAA;4BAKzB,UAAU,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC;iCACZ,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,KAAK,mBAAQ,CAAC,IAAI,EAAzB,CAAyB,CAAC;iCACtC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,EAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;4BAE3D,SAAS,GAAG,CAAC,cAAc,IAAI,EAAE,CAAC;iCACjB,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,EAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC,EAA9B,CAA8B,CAAC,CAAC;4BAElE,IAAI,CAAC,IAAI,GAAO,UAAU,QAAK,SAAS,EACvB,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAA1C,CAA0C,CAAC,CAAC;;;;;SAE/E;QAhDQ,IAAI;YADhB,0BAAM,CAAC,2BAAY,EAAE,0CAAe,EAAE,8BAAa,EAAE,uBAAU,EAAE,2CAAoB,CAAC;qDAUtD,0CAAe;gBACjB,8BAAa;WAV/B,IAAI,CAiDhB;QAAD,WAAC;KAjDD,AAiDC,CAjDyB,6BAAa,GAiDtC;IAjDY,oBAAI","file":"todo.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\r\n\r\nimport {inject} from \"aurelia-framework\";\r\n\r\nimport {BaseViewModel} from \"../../models/baseViewModel\";\r\nimport {IJobService} from \"../../../business/services/interfaces/IJobService\";\r\nimport {JobService} from \"../../../business/services/jobService\";\r\nimport {Job} from \"../../../business/models/job\";\r\nimport {ILabelService} from \"../../../business/services/interfaces/ILabelService\";\r\nimport {LabelService} from \"../../../business/services/labelService\";\r\nimport {EventAggregator, Subscription} from \"aurelia-event-aggregator\";\r\nimport {DialogService} from \"aurelia-dialog\";\r\nimport {JobState} from \"../../../business/models/jobState\";\r\nimport { JobApiFailure } from \"../../../business/models/jobApiFailure\";\r\nimport {FeatureToggleService} from \"../../../business/services/featureToggleService\";\r\nimport {IFeatureToggleService} from \"../../../business/services/interfaces/IFeatureToggleService\";\r\nimport { JobServiceConstants } from \"../../../business/services/constants/jobServiceConstants\";\r\n\r\n@inject(LabelService, EventAggregator, DialogService, JobService, FeatureToggleService)\r\nexport class Todo extends BaseViewModel {\r\n\r\n    public jobs: {isError: boolean, data: Job | JobApiFailure}[];\r\n    public isAssetTracked: boolean;\r\n\r\n    private _jobService: IJobService;\r\n    private _subscriptions: Subscription[];\r\n\r\n    constructor(labelService: ILabelService,\r\n                eventAggregator: EventAggregator,\r\n                dialogService: DialogService,\r\n                jobService: IJobService,\r\n                featureToggleService: IFeatureToggleService) {\r\n        super(labelService, eventAggregator, dialogService);\r\n\r\n        this._jobService = jobService;\r\n        this._subscriptions = [];\r\n        this.isAssetTracked = featureToggleService.isAssetTrackingEnabled();\r\n    }\r\n\r\n    public async activateAsync(): Promise<void> {\r\n        this._subscriptions.push(this._eventAggregator.subscribe(JobServiceConstants.JOB_COMPLETION_REFRESH, () => this.updateJobs()));\r\n        this.showContent();\r\n    }\r\n\r\n    public deactivateAsync(): Promise<void> {\r\n        this._subscriptions.forEach(s => s.dispose());\r\n        this._subscriptions = [];\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public async updateJobs(): Promise<void> {\r\n        let [jobsToDo, jobApiFailures] = await Promise.all<Job[], JobApiFailure[]>([\r\n            this._jobService.getJobsToDo(),\r\n            this._jobService.getWorkListJobApiFailures()\r\n        ]);\r\n\r\n        let activeJobs = (jobsToDo || [])\r\n                            .filter(j => j.state !== JobState.done)\r\n                            .map(job => ({isError: false, data: job}));\r\n\r\n        let errorJobs = (jobApiFailures || [])\r\n                            .map(error => ({isError: true, data: error}));\r\n\r\n        this.jobs = [...activeJobs, ...errorJobs]\r\n                        .sort((a, b) => a.data.position < b.data.position ? -1 : 1);\r\n\r\n    }\r\n}\r\n"],"sourceRoot":"../../../.."}