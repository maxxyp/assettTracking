{"version":3,"sources":["hema/presentation/modules/jobsList/jobSummary.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;IAaA;QAAgC,8BAAa;QAKzC,oBAAY,YAA2B,EAC3B,MAAc,EACd,eAAgC,EAChC,aAA4B;YAHxC,YAII,kBAAM,YAAY,EAAE,eAAe,EAAE,aAAa,CAAC,SAGtD;YADG,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;;QAC1B,CAAC;QAEM,kCAAa,GAApB,UAAqB,UAA+B;YAChD,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;YAE5B,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAEM,kCAAa,GAApB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;YAC/B,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAEM,sCAAiB,GAAxB;YACI,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,KAAK,mBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;YAChF,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,EAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAC,CAAC,CAAC;QAC/E,CAAC;QA9BQ,UAAU;YADtB,qCAAM,CAAC,2BAAY,EAAE,uBAAM,EAAE,0CAAe,EAAE,8BAAa,CAAC;qDAOrC,uBAAM;gBACG,0CAAe;gBACjB,8BAAa;WAR/B,UAAU,CA+BtB;QAAD,iBAAC;KA/BD,AA+BC,CA/B+B,6BAAa,GA+B5C;IA/BY,gCAAU","file":"jobSummary.js","sourcesContent":["import {inject} from \"aurelia-dependency-injection\";\nimport {Router} from \"aurelia-router\";\n\nimport {BaseViewModel} from \"../../models/baseViewModel\";\n\nimport {JobSummaryViewModel} from \"../../models/jobSummaryViewModel\";\nimport {ILabelService} from \"../../../business/services/interfaces/ILabelService\";\nimport {LabelService} from \"../../../business/services/labelService\";\nimport {EventAggregator} from \"aurelia-event-aggregator\";\nimport {DialogService} from \"aurelia-dialog\";\nimport { JobState } from \"../../../business/models/jobState\";\n\n@inject(LabelService, Router, EventAggregator, DialogService)\nexport class JobSummary extends BaseViewModel {\n    public viewModel: JobSummaryViewModel;\n\n    private _router: Router;\n\n    constructor(labelService: ILabelService,\n                router: Router,\n                eventAggregator: EventAggregator,\n                dialogService: DialogService) {\n        super(labelService, eventAggregator, dialogService);\n\n        this._router = router;\n    }\n\n    public activateAsync(jobSummary: JobSummaryViewModel): Promise<void> {\n        this.viewModel = jobSummary;\n\n        return Promise.resolve();\n    }\n\n    public attachedAsync() : Promise<void> {\n        if (this.viewModel) {\n            this.viewModel.viewCount++;\n        }\n        return Promise.resolve();\n    }\n\n    public navigateToDetails(): void {\n        const routeName = this.viewModel.jobState === JobState.done ? \"doneJob\" : \"job\";\n        this._router.navigateToRoute(routeName, {jobId: this.viewModel.jobNumber});\n    }\n}\n"],"sourceRoot":"../../../.."}