{"version":3,"sources":["hema/presentation/modules/jobsList/done.ts"],"names":[],"mappings":"AAAA,wDAAwD;;;;;;;;;;;;;;;;;;;;;;;IAgBxD;QAA0B,wBAAa;QAKnC,cAAY,YAA2B,EAC3B,eAAgC,EAChC,aAA4B,EAAE,UAAuB;YAFjE,YAGI,kBAAM,YAAY,EAAE,eAAe,EAAE,aAAa,CAAC,SAItD;YAFG,KAAI,CAAC,IAAI,GAAG,EAAE,CAAC;YACf,KAAI,CAAC,WAAW,GAAG,UAAU,CAAC;;QAClC,CAAC;QAEM,4BAAa,GAApB;YAAA,iBAQC;YANG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;iBAChC,IAAI,CAAC,UAAC,QAAQ;gBACX,KAAI,CAAC,IAAI,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,KAAK,mBAAQ,CAAC,IAAI,EAAzB,CAAyB,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC,IAAI,CAAC;gBACJ,KAAI,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC,CAAC,CAAC;QACX,CAAC;QAtBQ,IAAI;YAFhB,0BAAM,CAAC,2BAAY,EAAE,0CAAe,EAAE,8BAAa,EAAE,uBAAU,CAAC;qDAQhC,0CAAe;gBACjB,8BAAa;WAP/B,IAAI,CAwBhB;QAAD,WAAC;KAxBD,AAwBC,CAxByB,6BAAa,GAwBtC;IAxBY,oBAAI","file":"done.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\n\nimport {inject} from \"aurelia-framework\";\n\nimport {BaseViewModel} from \"../../models/baseViewModel\";\nimport {Job as JobBusinessModel} from \"../../../business/models/job\";\nimport {ILabelService} from \"../../../business/services/interfaces/ILabelService\";\nimport {LabelService} from \"../../../business/services/labelService\";\nimport {EventAggregator} from \"aurelia-event-aggregator\";\nimport {DialogService} from \"aurelia-dialog\";\nimport {IJobService} from \"../../../business/services/interfaces/IJobService\";\nimport {JobState} from \"../../../business/models/jobState\";\nimport {JobService} from \"../../../business/services/jobService\";\n\n@inject(LabelService, EventAggregator, DialogService, JobService)\n\nexport class Done extends BaseViewModel {\n    public jobs: JobBusinessModel[];\n    public isSignedOn: boolean;\n    private _jobService: IJobService;\n\n    constructor(labelService: ILabelService,\n                eventAggregator: EventAggregator,\n                dialogService: DialogService, jobService: IJobService) {\n        super(labelService, eventAggregator, dialogService);\n\n        this.jobs = [];\n        this._jobService = jobService;\n    }\n\n    public activateAsync(): Promise<any> {\n\n        return this._jobService.getJobsToDo()\n            .then((jobsToDo) => {\n                this.jobs = (jobsToDo || []).filter(j => j.state === JobState.done);\n            }).then(() => {\n                this.showContent();\n            });\n    }\n\n}\n"],"sourceRoot":"../../../.."}