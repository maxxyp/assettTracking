{"version":3,"sources":["hema/presentation/modules/jobsList/jobPartsCollections.ts"],"names":[],"mappings":"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","file":"jobPartsCollections.js","sourcesContent":["import { inject } from \"aurelia-dependency-injection\";\r\nimport { BaseViewModel } from \"../../models/baseViewModel\";\r\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\r\nimport { LabelService } from \"../../../business/services/labelService\";\r\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\r\nimport { DialogService } from \"aurelia-dialog\";\r\nimport { WorkRetrievalTracker } from \"../../../business/services/workRetrievalTracker\";\r\nimport { JobPartsCollection } from \"../../../business/models/jobPartsCollection\";\r\nimport { JobServiceConstants } from \"../../../business/services/constants/jobServiceConstants\";\r\nimport { EngineerService } from \"../../../business/services/engineerService\";\r\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\r\nimport { JobService } from \"../../../business/services/jobService\";\r\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\r\nimport { WorkRetrievalServiceConstants } from \"../../../business/services/constants/workRetrievalServiceConstants\";\r\nimport { computedFrom } from \"aurelia-binding\";\r\nimport { StringHelper } from \"../../../../common/core/stringHelper\";\r\nimport { Router } from \"aurelia-router\";\r\nimport { DOM } from \"aurelia-pal\";\r\n\r\n@inject(LabelService, EventAggregator, DialogService, WorkRetrievalTracker, EngineerService, JobService, Router)\r\nexport class JobPartsCollections extends BaseViewModel {\r\n    public partsCollections: JobPartsCollection[];\r\n    public tracker: WorkRetrievalTracker;\r\n    public enabled: boolean;\r\n    public isDone: boolean;\r\n    public engineerService: IEngineerService;\r\n\r\n    private _subscriptions: Subscription[];    \r\n    private _jobService: IJobService;\r\n    private _router: Router;\r\n\r\n    constructor(labelService: ILabelService,\r\n        eventAggregator: EventAggregator,\r\n        dialogService: DialogService,\r\n        tracker: WorkRetrievalTracker,\r\n        engineerService: IEngineerService,\r\n        jobService: IJobService,\r\n        router: Router) {\r\n        super(labelService, eventAggregator, dialogService);\r\n        this.tracker = tracker;\r\n        this.engineerService = engineerService;\r\n        this._jobService = jobService;\r\n        this._router = router;\r\n    }\r\n\r\n    public async activateAsync(params: { isDone: boolean }): Promise<void> {\r\n        this.isDone = params && params.isDone;\r\n        this._subscriptions = [\r\n            this._eventAggregator.subscribe(JobServiceConstants.JOB_STATE_CHANGED, () => this.update()),            \r\n            this._eventAggregator.subscribe(WorkRetrievalServiceConstants.REFRESH_START_STOP, () => this.update())\r\n        ];\r\n        await this.update();\r\n    }\r\n\r\n    public async detachedAsync(): Promise<void> {\r\n        this._subscriptions.forEach(subscription => subscription.dispose());\r\n    }\r\n\r\n    public async setCollectingParts(e: any): Promise<void> {\r\n        this.dispatchClickEvent(e);\r\n        this.engineerService.isPartCollectionInProgress = true;\r\n        await this.engineerService.setStatus(EngineerService.OBTAINING_MATS_STATUS);\r\n    }\r\n\r\n    public async setPartsCollected(e: any): Promise<void> {\r\n        this.dispatchClickEvent(e);\r\n        this.engineerService.isPartCollectionInProgress = false;\r\n        // set the engineerstatus back to Working status\r\n        await this._jobService.completePartsCollections();\r\n        await this.engineerService.setStatus(undefined);\r\n        this._router.navigateToRoute(\"to-do\");\r\n    }\r\n\r\n    public navigateToPartsCollection(e: Event): void {\r\n        if (this.isDone) {\r\n            this._router.navigateToRoute(\"donePartsCollectionDetails\", { isDone: \"true\" });\r\n        } else {\r\n            this._router.navigateToRoute(\"partsCollectionDetails\", { isDone: \"false\" });\r\n        }\r\n        this.dispatchClickEvent(e);\r\n    }\r\n\r\n    // e.g. 7 parts to collect: 3 parts - Job 1319414267;  4 parts - Job 1319415267\r\n    @computedFrom(\"partsCollections\")\r\n    public get summaryDescription(): string {\r\n\r\n        let value = \"\";\r\n        let totalParts = 0;\r\n\r\n        const { length = 0 } = this.partsCollections;\r\n        const lastIndex = length - 1;\r\n\r\n        this.partsCollections.forEach((j, index) => {\r\n\r\n            if (j.parts && j.parts.length > 0) {\r\n\r\n                const noParts = j.parts.map(p => p.quantity).reduce((p, n) => (p + n));\r\n\r\n                value += `${StringHelper.pluralise(noParts, \"part\")} - Job ${j.id}`;\r\n\r\n                totalParts = (totalParts + noParts);\r\n\r\n            } else {\r\n                value += `0 parts - Job ${j.id}`;\r\n            }\r\n\r\n            if (index < lastIndex) {\r\n                value += \"; \";\r\n            }\r\n        });\r\n\r\n        if (value) {\r\n            value = `${StringHelper.pluralise(totalParts, \"part\")} ${this.isDone ? \"collected\" : \"to collect\"}: ${value}`;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    private async update(): Promise<void> {\r\n        let [partsCollections, activeJobId] = await Promise.all([\r\n            this._jobService.getPartsCollections(),\r\n            this._jobService.getActiveJobId()            \r\n        ]);\r\n        this.partsCollections = (partsCollections || [])\r\n            .filter(partsCollection => !!partsCollection.done === !!this.isDone);\r\n        this.enabled = !activeJobId;        \r\n    }\r\n\r\n    private dispatchClickEvent(event: Event): void {\r\n        if (event !== null) {\r\n            event.stopPropagation();\r\n            DOM.dispatchEvent(new Event(\"click\"));\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../../../.."}