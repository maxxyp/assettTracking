{"version":3,"sources":["hema/presentation/modules/risks/risks.ts"],"names":[],"mappings":"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","file":"risks.js","sourcesContent":["import { RiskAcknowledgement } from \"../../../business/models/riskAcknowledgement\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { Router } from \"aurelia-router\";\nimport { observable } from \"aurelia-binding\";\nimport { DataState } from \"../../../business/models/dataState\";\nimport { EditableViewModel } from \"../../models/editableViewModel\";\nimport { Guid } from \"../../../../common/core/guid\";\n\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\nimport { CatalogService } from \"../../../business/services/catalogService\";\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\nimport { EngineerService } from \"../../../business/services/engineerService\";\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\nimport { JobService } from \"../../../business/services/jobService\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { IRiskService } from \"../../../business/services/interfaces/IRiskService\";\nimport { RiskService } from \"../../../business/services/riskService\";\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\nimport { ValidationService } from \"../../../business/services/validationService\";\nimport { RiskViewModel } from \"./viewModels/riskViewModel\";\nimport { Job } from \"../../../business/models/job\";\n\n@inject(LabelService, RiskService, JobService, EngineerService, CatalogService, EventAggregator, DialogService,\n    ValidationService, BusinessRuleService, Router)\nexport class Risks extends EditableViewModel {\n    public jobId: string;\n    @observable\n    public riskViewModels: RiskViewModel[];\n    public riskMessageRead: boolean;\n    private _riskService: IRiskService;\n    private _router: Router;\n    private _job: Job;\n\n    constructor(labelService: ILabelService,\n        riskService: IRiskService,\n        jobService: IJobService,\n        engineerService: IEngineerService,\n        catalogService: ICatalogService,\n        eventAggregator: EventAggregator,\n        dialogService: DialogService,\n        validationService: IValidationService,\n        businessRuleService: IBusinessRuleService,\n        router: Router) {\n\n        super(jobService, engineerService, labelService, eventAggregator, dialogService, validationService, businessRuleService, catalogService);\n\n        this._riskService = riskService;\n        this._router = router;\n        this.riskViewModels = [];\n    }\n\n    public activateAsync(params: { jobId: string }): Promise<void> {\n        this.jobId = params.jobId;\n        return this._jobService.getJob(params.jobId)\n            .then((job) => {\n                if (job) {\n                    this._job = job;\n                    if (job.riskAcknowledgement) {\n                        this.riskMessageRead = job.riskAcknowledgement.messageRead;\n                    }\n                }\n            })\n            .then(() => this.load())\n            .then(() => this.showContent());\n    }\n\n    public navigateToRisk(id: string): void {\n        this._router.navigateToRoute(\"risk\", { riskId: id });\n    }\n\n    public newRisk(): void {\n        this._router.navigateToRoute(\"risk\", { riskId: Guid.empty });\n    }\n\n    public deleteRisk(event: MouseEvent, id: string): void {\n        event.stopPropagation();\n\n        this.showDeleteConfirmation()\n            .then((shouldDelete) => {\n                if (shouldDelete) {\n                    let foundIndex = this.riskViewModels.findIndex(riskViewModel => riskViewModel.risk.id === id);\n\n                    if (foundIndex >= 0) {\n                        this._riskService.deleteRisk(this.jobId, id)\n                            .then(() => {\n                                this.riskViewModels.splice(foundIndex, 1);\n                                this.notifyDataStateChanged();\n                            })\n                            .catch(ex => {\n                                this.showError(ex);\n                            });\n                    }\n                }\n            });\n    }\n\n    public accept(): Promise<void> {\n        if (this._job) {\n            this._job.riskAcknowledgement = new RiskAcknowledgement();\n            this._job.riskAcknowledgement.messageRead = true;\n            this._job.riskAcknowledgement.dataState = DataState.valid;\n            this.setIndividualRisksStatus();\n            return this._jobService.setJob(this._job).then(() => {\n                this.riskMessageRead = true;\n                this.notifyDataStateChanged();\n            });\n        } else {\n            return Promise.resolve();\n        }\n    }\n\n    protected loadModel(): Promise<void> {\n        return this._riskService.getRisks(this.jobId)\n        .then(risks => {\n                (risks || []).forEach(risk => {\n                    let riskViewModel = new RiskViewModel();\n                    riskViewModel.risk = risk;\n                    this.riskViewModels.push(riskViewModel);\n                });\n        });\n    }\n\n    private setIndividualRisksStatus(): void {\n        (this._job.risks || []).forEach(risk => {\n                if (risk.dataState === DataState.notVisited) {\n                    risk.dataState = DataState.valid;\n                }\n            });\n    }\n}\n"],"sourceRoot":"../../../.."}