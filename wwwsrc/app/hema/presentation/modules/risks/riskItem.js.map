{"version":3,"sources":["hema/presentation/modules/risks/riskItem.ts"],"names":[],"mappings":"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","file":"riskItem.js","sourcesContent":["import { observable } from \"aurelia-framework\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { ButtonListItem } from \"../../../../common/ui/elements/models/buttonListItem\";\nimport { Risk } from \"../../../business/models/risk\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { ValidationService } from \"../../../business/services/validationService\";\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\nimport { EditableViewModel } from \"../../models/editableViewModel\";\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { CatalogService } from \"../../../business/services/catalogService\";\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport { IRiskService } from \"../../../business/services/interfaces/IRiskService\";\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\nimport { RiskService } from \"../../../business/services/riskService\";\nimport { JobService } from \"../../../business/services/jobService\";\nimport { Guid } from \"../../../../common/core/guid\";\nimport { Router } from \"aurelia-router\";\nimport { EngineerService } from \"../../../business/services/engineerService\";\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { CatalogConstants } from \"../../../business/services/constants/catalogConstants\";\nimport { ISftyReasonCat } from \"../../../business/models/reference/ISftyReasonCat\";\n\n@inject(CatalogService, JobService, EngineerService, LabelService, RiskService, EventAggregator, DialogService, ValidationService, BusinessRuleService, Router)\nexport class RiskItem extends EditableViewModel {\n    public reasonButtons: ButtonListItem[];\n\n    @observable\n    public reason: string;\n\n    public report: string;\n    // location has different validation rules to report\n    public location: string;\n    public isHazard: boolean;\n\n    // .DF_1681 we need to stop multiple submissions of the same new record\n    public isCompleteTriggeredAlready: boolean;\n\n    private _hazardReason: string;\n    private _riskException: string[];\n\n    private _risks: Risk[];\n    private _riskId: string;\n    private _riskService: IRiskService;\n    private _router: Router;\n\n    constructor(catalogService: ICatalogService,\n        jobService: IJobService,\n        engineerService: IEngineerService,\n        labelService: ILabelService,\n        riskService: IRiskService,\n        eventAggregator: EventAggregator,\n        dialogService: DialogService,\n        validationService: IValidationService,\n        businessRulesService: IBusinessRuleService,\n        router: Router) {\n\n        super(jobService, engineerService, labelService, eventAggregator, dialogService, validationService, businessRulesService, catalogService);\n\n        this._riskService = riskService;\n        this._router = router;\n    }\n\n    public activateAsync(params: { jobId: string, riskId: string }): Promise<void> {\n        this._riskId = params.riskId;\n\n        return this._riskService.getRisks(params.jobId).then(risks => {\n            this._risks = risks || [];\n            if (this._isCleanInstance) {\n                return this.buildValidation([\n                    { property: \"location\", condition: () => this.isHazard },\n                    { property: \"report\", condition: () => !this.isHazard },\n                ])\n                    .then(() => this.loadBusinessRules())\n                    .then(() => {\n                        this._hazardReason = this.getBusinessRule<string>(\"hazard\");\n                        this._riskException = (this.getBusinessRule<string>(\"riskException\") || \"\").split(\",\");\n                    })\n                    .then(() => this.loadCatalogs())\n                    .then(() => this.load())\n                    .then(() => this.showContent());\n            } else {\n                return this.load();\n            }\n        });\n    }\n\n    public completeOk(): Promise<void> {\n        return this.saveModel()\n            .then(() => {\n                this.notifyDataStateChanged();\n                this._router.navigateToRoute(\"risks\");\n            });\n    }\n\n    public completeCancel(): void {\n        this._router.navigateToRoute(\"risks\");\n    }\n\n    public reasonChanged(newReason: string, oldReason: string): void {\n        this.isHazard = newReason && newReason === this._hazardReason;\n    }\n\n    protected loadModel(): Promise<void> {\n        if (this._riskId === Guid.empty) {\n            this.reason = \"\";\n            this.report = \"\";\n            this.location = \"\";\n            this.isHazard = false;\n            this.setNewDataState(\"risks\");\n            this.isNew = true;\n\n            this.reasonButtons.forEach(reasonButton => {\n                /* can only have one of each type or risk, so disable any existing ones */\n                reasonButton.disabled = !!this._risks.find(r => r.reason === reasonButton.value && !(this._riskException.indexOf(r.reason) !== -1));\n            });\n\n            return Promise.resolve();\n        } else {\n            return this._riskService.getRisk(this.jobId, this._riskId)\n                .then(risk => {\n                    this.isNew = false;\n                    this.reason = risk.reason;\n                    this.isHazard = risk.isHazard;\n                    this.location = this.isHazard ? risk.report : undefined;\n                    this.report = !this.isHazard ? risk.report : undefined;\n                    this.setInitialDataState(risk.dataStateId, risk.dataState);\n                    this.reasonButtons.forEach(reasonButton => {\n                        /* can only have one of each type or risk, so disable any existing ones\n                        * as long as its not the current selection */\n                        reasonButton.disabled = !!this._risks.find(r => r.reason === reasonButton.value && r.reason !== this.reason);\n                    });\n                });\n        }\n    }\n\n    protected clearModel(): Promise<void> {\n        this.location = undefined;\n        this.report = undefined;\n        this.reason = undefined;\n        return Promise.resolve();\n    }\n\n    protected saveModel(): Promise<void> {\n        let risk: Risk = new Risk();\n        risk.isHazard = this.reason === this._hazardReason;\n        risk.reason = this.reason;\n        risk.report = this.isHazard ? this.location : this.report;\n        risk.dataState = this.getFinalDataState();\n\n        if (this._riskId === Guid.empty) {\n            if (this.isCompleteTriggeredAlready) {\n                return Promise.resolve();\n            }\n            this.isCompleteTriggeredAlready = true;\n            return this._riskService.addRisk(this.jobId, risk).then(() => {});\n        } else {\n            risk.id = this._riskId;\n            return this._riskService.updateRisk(this.jobId, risk);\n        }\n\n    }\n\n    private loadCatalogs(): Promise<any> {\n        return this._catalogService.getSafetyReasonCats(CatalogConstants.SAFETY_REASON_CAT_GROUP_RISK_REASON)\n            .then((safetyReasons) => {\n                safetyReasons = safetyReasons || [];\n                safetyReasons.push(<ISftyReasonCat>{\n                    safetyReasonCategoryCode: this._hazardReason,\n                    safetyReasonCategoryReason: this.getLabel(\"hazardReason\")\n                });\n\n                this.reasonButtons = this.toButtonListItemArray(safetyReasons, CatalogConstants.SAFETY_REASON_CAT_ID, CatalogConstants.SAFETY_REASON_CAT_DESCRIPTION);\n            });\n    }\n}\n"],"sourceRoot":"../../../.."}