{"version":3,"sources":["hema/presentation/modules/appointment/appointmentBooking.ts"],"names":[],"mappings":"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","file":"appointmentBooking.js","sourcesContent":["import { TaskTimeDurationModel } from \"./viewModels/taskTimeDurationModel\";\nimport { inject } from \"aurelia-framework\";\nimport { Router } from \"aurelia-router\";\nimport * as moment from \"moment\";\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\nimport { JobService } from \"../../../business/services/jobService\";\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\nimport { ValidationService } from \"../../../business/services/validationService\";\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\nimport { CatalogService } from \"../.././../business/services/catalogService\";\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\nimport { EditableViewModel } from \"../../models/editableViewModel\";\nimport { DataState } from \"../../../business/models/dataState\";\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\nimport { EngineerService } from \"../../../business/services/engineerService\";\nimport { IAppointmentBookingService } from \"../../../business/services/interfaces/IAppointmentBookingService\";\nimport { AppointmentBookingService } from \"../../../business/services/appointmentBookingService\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { Appointment } from \"../../../business/models/appointment\";\nimport { AppointmentDurationItem } from \"../../../business/models/appointmentDurationItem\";\nimport { Job } from \"../../../business/models/job\";\nimport { Task } from \"../../../business/models/task\";\nimport { IAppointmentBand } from \"../../../business/models/reference/IAppointmentBand\";\nimport { JobState } from \"../../../business/models/jobState\";\nimport { BindingEngine } from \"aurelia-binding\";\nimport { DateHelper } from \"../../../core/dateHelper\";\nimport { IDynamicRule } from \"../../../business/services/validation/IDynamicRule\";\n\n@inject(JobService, EngineerService, LabelService, Router,\n    EventAggregator, ValidationService, BusinessRuleService, CatalogService,\n    BindingEngine, AppointmentBookingService, DialogService)\nexport class AppointmentBooking extends EditableViewModel {\n\n    public minDate: Date;\n    public maxDate: Date;\n\n    public hasParts: boolean;\n    public hasAppointment: boolean;\n\n    public normalAccessInformation: string;\n    public promisedDate: Date;\n    public promisedTimeSlot: string;\n    public generalAccessInformation: string;\n    public accessInformation: string;\n    public preferredEngineer: string;\n    public estimatedDurationOfAppointment: TaskTimeDurationModel[];\n    public promisedTimeSlotCatalog: IAppointmentBand[];\n    public canBook: boolean;\n    public preferredEngineerIdPlaceholder: string;\n    public estimatedDurationOfAppointmentMaxValue: number;\n    public estimatedDurationOfAppointmentMaxLength: number;\n    public estimatedDurationOfAppointmentPlaceholder: string;\n\n    public isTodaysDateAvailable: boolean;\n\n    private _job: Job;\n    private _appointmentBookingService: IAppointmentBookingService;\n    private _promiseDateWarningThreshold: number;\n    private _cutOffTime: string;\n    private _showAppointmentRemovedInfo: boolean;\n    private _router: Router;\n    private _appointmentAllowedActivityStatus: string[];\n    private _appointmentBookingSubscriptions: Subscription[];\n    private _bindingEngine: BindingEngine;\n    private _estimatedEndTimeInMinutes: number;\n    private _partsRequiredStatus: string;\n\n    public constructor(jobService: IJobService,\n        engineerService: IEngineerService,\n        labelService: ILabelService,\n        router: Router,\n        eventAggregator: EventAggregator,\n        validationService: IValidationService,\n        businessRulesService: IBusinessRuleService,\n        catalogService: ICatalogService,\n        bindingEngine: BindingEngine,\n        appointmentBookingService: IAppointmentBookingService,\n        dialogService: DialogService) {\n        super(jobService, engineerService, labelService, eventAggregator, dialogService, validationService, businessRulesService, catalogService);\n        this._appointmentBookingService = appointmentBookingService;\n        this.hasAppointment = false;\n        this._showAppointmentRemovedInfo = true;\n        this._router = router;\n        this.isTodaysDateAvailable = false;\n        this._bindingEngine = bindingEngine;\n        this._appointmentBookingSubscriptions = [];\n        this.estimatedDurationOfAppointmentMaxValue = 0;\n    }\n\n    public activateAsync(params: { jobId: string }): Promise<any> {\n        this.jobId = params.jobId;\n        return this.loadBusinessRules()\n            .then(() => this.buildBusinessRules())\n            .then(() => this.loadCatalogs())\n            .then(() => this.checkJobHasParts())\n            .then(() => this.load())\n            .then(() => this.buildValidationRules())\n            .then(() => this.showContent());\n    }\n\n    public navigateToJob(): void {\n        if (this._job.state === JobState.done) {\n            this._router.navigateToRoute(\"doneJob\", { jobId: this._job.id });\n        } else {\n            this._router.navigateBack();\n        }\n    }\n\n    public promisedDateChanged(date: Date): void {\n        this.warnPromisedDateThreshold(date);\n    }\n\n    public promisedTimeSlotChanged(timeSlot: string): Promise<void> {\n        let startTime: number = 0;\n        if (timeSlot) {\n            if (this.businessRules[timeSlot]) {\n                startTime = this.getBusinessRule<number>(timeSlot);\n            } else {\n                startTime = parseInt(timeSlot, 10);\n            }\n            this.estimatedDurationOfAppointmentMaxValue = DateHelper.getEstimatedDurationOfAppointmentMaxValue(startTime, this._estimatedEndTimeInMinutes);\n\n            return this.validateAllRules();\n        }\n        return Promise.resolve();\n    }\n\n    public deactivateAsync(): Promise<void> {\n        this.clearSubscriptions();\n        return Promise.resolve();\n    }\n    public saveAppointment(): Promise<void> {\n        let finalDataState = this.getFinalDataState();\n        if (finalDataState !== DataState.valid) { return Promise.resolve(); }\n\n        let appointment: Appointment = new Appointment();\n        appointment.jobId = this.jobId;\n        appointment.accessInformation = this.accessInformation;\n        appointment.generalAccessInformation = this.generalAccessInformation;\n        appointment.normalAccessInformation = this.normalAccessInformation;\n        appointment.preferredEngineer = this.preferredEngineer;\n        appointment.promisedDate = this.promisedDate;\n        appointment.promisedTimeSlot = this.promisedTimeSlot;\n        appointment.estimatedDurationOfAppointment = [];\n        this.estimatedDurationOfAppointment.forEach(x => {\n            let item = new AppointmentDurationItem();\n            item.taskId = x.taskId;\n            item.duration = x.duration;\n            item.specialRequirement = x.specialRequirement;\n            appointment.estimatedDurationOfAppointment.push(item);\n        });\n        appointment.dataState = finalDataState;\n        this.hasAppointment = true;\n        return this._appointmentBookingService.save(appointment);\n    }\n    protected loadModel(): Promise<void> {\n        this.isNew = true;\n        this.clearSubscriptions();\n\n        return Promise.all([this._jobService.getJob(this.jobId), this._engineerService.getCurrentEngineer()])\n            .then(([job, engineer]) => {\n                this._job = job;\n                this.setState(job);\n\n                if (this._job && this.canBook) {\n                    this.initDate();\n                    this.setObservables();\n\n                    if (this._job.appointment) {\n                        this.hasAppointment = true;\n                        this.accessInformation = this._job.appointment.accessInformation;\n                        this.generalAccessInformation = this._job.appointment.generalAccessInformation;\n                        this.normalAccessInformation = this._job.appointment.normalAccessInformation;\n                        this.promisedDate = moment(this._job.appointment.promisedDate).toDate();\n                        this.promisedTimeSlot = this._job.appointment.promisedTimeSlot;\n                        this.estimatedDurationOfAppointment = [];\n                        this.preferredEngineer = this._job.appointment.preferredEngineer;\n                        this.setInitialDataState(this._job.appointment.dataStateId, this._job.appointment.dataState);\n                        this.setTaskTimeDurations(this._job.tasks, this._job.appointment);\n                    } else {\n                        this.preferredEngineer = engineer.id;\n                        this.initFields();\n                    }\n                }\n            });\n    }\n\n    protected clearModel(): Promise<void> {\n        return this._appointmentBookingService.removeAppointment(this.jobId)\n            .then(() => this.init())\n            .then(() => this.initDate())\n            .then(() => {\n                if (this._showAppointmentRemovedInfo) {\n                    this.showInfo(this.getLabel(\"appointmentNotificationTitle\"), this.getLabel(\"appointmentRemoved\"));\n                }\n                this.hasAppointment = false;\n                this.clearFields();\n            });\n    }\n\n    protected showSaveToast(finalDataState: DataState): void {\n        if (finalDataState === DataState.valid) {\n            this.showSuccess(this.getLabel(\"appointmentNotificationTitle\"), this.getLabel(\"appointmentSaved\"));\n        } else {\n            this.showDanger(this.getLabel(\"appointmentNotificationTitle\"), this.getLabel(\"appointmentNotSaved\"));\n        }\n    }\n\n    protected clearFields(): void {\n        this.promisedDate = undefined;\n        this.preferredEngineer = undefined;\n        this.accessInformation = undefined;\n        this.promisedTimeSlot = undefined;\n        this.estimatedDurationOfAppointmentMaxValue = undefined;\n        this.setTaskTimeDurations(this._job.tasks, this._job.appointment);\n    }\n\n    private initFields(): void {\n        this.hasAppointment = false;\n        this.init();\n        this.setTaskTimeDurations(this._job.tasks, null);\n        this.promisedTimeSlot = undefined;\n        this.setNewDataState(\"appointment\");\n    }\n\n    private buildBusinessRules(): Promise<void> {\n        this._promiseDateWarningThreshold = this.getBusinessRule<number>(\"promiseDateWarningThreshold\");\n        this._cutOffTime = this.getBusinessRule<string>(\"cutOffTime\");\n        this.preferredEngineerIdPlaceholder = this.getBusinessRule<string>(\"preferredEngineerIdPlaceholder\");\n        this._appointmentAllowedActivityStatus = this.getBusinessRule<string>(\"appointmentAllowedActivityStatus\").split(\",\");\n        this.estimatedDurationOfAppointmentPlaceholder = this.getBusinessRule<string>(\"estimatedDurationOfAppointmentPlaceholder\");\n        this.estimatedDurationOfAppointmentMaxLength = this.getBusinessRule<number>(\"estimatedDurationOfAppointmentMaxLength\");\n        this._estimatedEndTimeInMinutes = this.getBusinessRule<number>(\"estimatedEndTimeInMinutes\");\n\n        return this._businessRuleService.getQueryableRuleGroup(\"taskItem\").then((taskItemRuleGroup) => {\n            this._partsRequiredStatus = taskItemRuleGroup.getBusinessRule<string>(\"activityPartsRequiredStatus\");\n       });\n    }\n\n    private buildValidationRules(): Promise<void> {\n        let estimatedDurationRules: IDynamicRule[] = [];\n\n        let otherRules: IDynamicRule[] = [\n            {\n                property: \"promisedDate\", condition: () => this.canBook\n            },\n            {\n                property: \"promisedTimeSlot\", condition: () => this.canBook,\n            },\n            {\n                property: \"preferredEngineer\", condition: () => !!this.preferredEngineer\n            }\n        ];\n\n        if (this.estimatedDurationOfAppointment && this.estimatedDurationOfAppointment.length > 0) {\n            this.estimatedDurationOfAppointment.forEach((app, index) => {\n                estimatedDurationRules.push(\n                    {\n                        property: \"estimatedDurationOfAppointment[\" + index + \"].duration\",\n                        groups: [\"estimatedDurationOfAppointment[\" + index + \"]\"],\n                        condition: () => this.estimatedDurationOfAppointment[index].duration && this.promisedTimeSlot ? true : false,\n                        passes: [\n                            {\n                                test: () => this.estimatedDurationOfAppointment[index].duration > this.estimatedDurationOfAppointmentMaxValue ? false : true,\n                                message: () => this.getParameterisedLabel(\"estimatedDurationMaxValueError\", [this.estimatedDurationOfAppointmentMaxValue])\n                            }\n                        ]\n                    }\n                );\n            });\n        }\n\n        return this.buildValidation(otherRules.concat(estimatedDurationRules));\n    }\n\n    private loadCatalogs(): Promise<void> {\n        return Promise.all([\n            this._catalogService.getAppointmentBands()\n        ]).then(([promisedTimeSlotCatalog]) => {\n            if (promisedTimeSlotCatalog) {\n                this.promisedTimeSlotCatalog = promisedTimeSlotCatalog;\n            }\n        });\n    }\n\n    private init(): Promise<void> {\n        if (this.promisedTimeSlotCatalog && this.promisedTimeSlotCatalog[0]) {\n            this.promisedTimeSlot = this.promisedTimeSlotCatalog[0].appointmentBandCode;\n        }\n\n        return this._appointmentBookingService.getGeneralAccessInformation(this.jobId)\n            .then((value) => {\n                this.generalAccessInformation = value;\n            });\n    }\n\n    private checkJobHasParts(): Promise<void> {\n        return this._appointmentBookingService.hasParts(this.jobId).then((val) => {\n            this.hasParts = val;\n        });\n    }\n\n    private warnPromisedDateThreshold(promisedDate: Date): void {\n        if (promisedDate) {\n            let date1 = moment(promisedDate);\n            let date2 = moment();\n            let noOfDays = date1.diff(date2, \"days\");\n\n            if (noOfDays >= this._promiseDateWarningThreshold) {\n                this.showWarning(this.getLabel(\"promisedDate\"), this.getParameterisedLabel(\"promiseDateWarningThresholdWarning\", [this._promiseDateWarningThreshold]));\n            }\n        }\n    }\n\n    private setState(job: Job): void {\n        if (job && job.tasks) {\n            if (this._job.tasks.find(x => this._appointmentAllowedActivityStatus.some((el) => el === x.status))) {\n                this.canBook = true;\n            } else {\n                this.canBook = false;\n            }\n        }\n    }\n\n    private setTaskTimeDurations(tasks: Task[], appointment?: Appointment): void {\n        this.estimatedDurationOfAppointment = [];\n        tasks.filter(task => this._appointmentAllowedActivityStatus.indexOf(task.status) !== -1)\n            .forEach(x => {\n                if (x) {\n                    let time: TaskTimeDurationModel = new TaskTimeDurationModel();\n                    time.taskId = x.id;\n                    time.jobType = x.jobType;\n                    time.applianceType = x.applianceType;\n                    if (appointment) {\n                        let appointmentDuration = appointment.estimatedDurationOfAppointment.find(y => y.taskId === x.id);\n                        if (appointmentDuration) {\n                            time.duration = appointmentDuration.duration;\n                            time.specialRequirement = appointmentDuration.specialRequirement;\n                        }\n                    } else {\n                        time.duration = undefined;\n                        time.specialRequirement = undefined;\n                    }\n\n                    this.estimatedDurationOfAppointment.push(time);\n                }\n            });\n    }\n\n    private initDate(): void {\n        let todaysDate =  DateHelper.getTodaysDate();\n        let isPartsRequired = this._job.tasks.some(t => t.status === this._partsRequiredStatus);\n\n        if (this._job && this._job.appointment && this._job.appointment.promisedDate) {\n            this.minDate = this._job.appointment.promisedDate;\n        } else {        \n            if (!this.hasParts && !isPartsRequired) {\n                this.minDate =  todaysDate;\n            } else {\n                if (this._appointmentBookingService.checkCutOffTimeExceededWithParts(moment(todaysDate).toDate(), moment(todaysDate).toDate(), this._cutOffTime)) {\n                    this.minDate = this._appointmentBookingService.getNexAppointmentDateWithParts(moment(todaysDate).add(2, \"days\").toDate());\n                } else {\n                    this.minDate = moment(todaysDate).add(1, \"days\").toDate();\n                }\n            }\n        }\n\n        this.isTodaysDateAvailable = moment(todaysDate).isSame(moment(this.minDate));\n    }\n\n    private setObservables(): void {\n        let sub1 = this._bindingEngine.propertyObserver(this, \"promisedDate\")\n            .subscribe(newValue => this.promisedDateChanged(newValue));\n        this._appointmentBookingSubscriptions.push(sub1);\n\n        let sub2 = this._bindingEngine.propertyObserver(this, \"promisedTimeSlot\")\n            .subscribe(newValue => this.promisedTimeSlotChanged(newValue));\n        this._appointmentBookingSubscriptions.push(sub2);\n\n    }\n\n    private clearSubscriptions(): void {\n        if (this._appointmentBookingSubscriptions.length > 0) {\n            this._appointmentBookingSubscriptions.forEach(s => s.dispose());\n            this._appointmentBookingSubscriptions = [];\n        }\n    }\n}\n"],"sourceRoot":"../../../.."}