{"version":3,"sources":["hema/presentation/modules/settings/about/catalogQuery.ts"],"names":[],"mappings":"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","file":"catalogQuery.js","sourcesContent":["import { inject } from \"aurelia-dependency-injection\";\nimport { IDatabaseService } from \"../../../../../common/storage/IDatabaseService\";\nimport { IndexedDatabaseService } from \"../../../../../common/storage/indexedDatabaseService\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { ILabelService } from \"../../../../business/services/interfaces/ILabelService\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { LabelService } from \"../../../../business/services/labelService\";\nimport { computedFrom, observable } from \"aurelia-binding\";\nimport { ReferenceDataManifest } from \"../../../../business/models/reference/referenceDataManifest\";\nimport { ReferenceDataConstants } from \"../../../../business/services/constants/referenceDataConstants\";\nimport { ArrayHelper } from \"../../../../../common/core/arrayHelper\";\nimport { BaseInformation } from \"./baseInformation\";\n\nconst REFERENCE_DATA_MANIFEST = new ReferenceDataManifest();\nconst REF_DATABASE = ReferenceDataConstants.REFERENCE_DATABASE;\n\n@inject(LabelService, EventAggregator, DialogService, IndexedDatabaseService)\nexport class CatalogQuery extends BaseInformation {\n    public catalogs: { code: string, description: string } [];\n    public indexNames: { code: string, description: string } [];\n\n    public indexValue: string;\n    public queryResult: string;\n    public itemsFound: number;\n    public showQuery: boolean;\n\n    @observable\n    public selectedCatalog: string;\n\n    @observable\n    public selectedIndexName: string;\n\n    private _indexDatabaseService: IDatabaseService;\n\n    constructor(labelService: ILabelService, eventAggregator: EventAggregator, dialogService: DialogService, indexDatabaseService: IDatabaseService) {\n        super(labelService, eventAggregator, dialogService);\n\n        const catalogTables = ArrayHelper.sortByColumn(REFERENCE_DATA_MANIFEST.all(), \"type\") || [];\n\n        this.catalogs = catalogTables.map(ct => {\n            const {type: code} = ct;\n            return {code, description: code};\n        });\n        this.isExpanded = false;\n        this.indexNames = [];\n        this._indexDatabaseService = indexDatabaseService;\n        this.indexValue = \"\";\n        this.queryResult = \"\";\n        this.showQuery = false;\n        this.itemsFound = 0;\n    }\n\n    public async activateAsync(): Promise<any> {\n        return Promise.resolve();\n    }\n\n    @computedFrom(\"indexNames\")\n    public get noIndexes(): boolean {\n        return !this.indexNames || this.indexNames.length === 0;\n    }\n\n    public async selectedCatalogChanged(): Promise<void> {\n\n        if (!this.selectedCatalog || this.selectedCatalog === \"\") {\n            this.indexNames = [];\n            return Promise.resolve();\n        }\n\n        this.itemsFound = 0;\n        this.queryResult = \"\";\n        this.indexValue = \"\";\n\n        const indexes = this._indexDatabaseService.getIndexes(REF_DATABASE, this.selectedCatalog);\n\n        if (!indexes || indexes.length === 0) {\n            this.indexNames = undefined;\n            this.selectedIndexName = undefined;\n        }\n\n        const {length} = indexes;\n\n        let items = [];\n\n        for (let i = 0; i < length; i++) {\n            items.push(indexes[i]);\n        }\n\n        this.indexNames = items.map(i => {\n            return {code: i, description: i};\n        });\n\n        this.selectedIndexName = undefined;\n    }\n\n    public clear(): void {\n        this.indexValue = undefined;\n        this.queryResult = undefined;\n        this.showQuery = false;\n        this.itemsFound = 0;\n        this.selectedCatalog = undefined;\n        this.selectedIndexName = undefined;\n        this.indexNames = [];\n    }\n\n    public async queryIndex(): Promise<void> {\n\n        this.queryResult = \"\";\n        this.itemsFound = 0;\n\n        this.showQuery = false;\n\n        let indexValues: string [] | string;\n        indexValues = undefined;\n\n        let itemsFound = [];\n\n        if (!this.indexValue) {\n            itemsFound = await  this._indexDatabaseService.getAll(REF_DATABASE, this.selectedCatalog);\n        } else if (this.indexValue.indexOf(\",\", 0) > -1) {\n            indexValues = this.indexValue.split(\",\");\n            itemsFound = await this._indexDatabaseService.getAll(REF_DATABASE, this.selectedCatalog, this.selectedIndexName, indexValues);\n        } else {\n            indexValues = this.indexValue;\n            const singleItem = await this._indexDatabaseService.getAll(REF_DATABASE, this.selectedCatalog, this.selectedIndexName, indexValues);\n            itemsFound.push(singleItem);\n        }\n\n        this.itemsFound = itemsFound.length;\n        this.queryResult = JSON.stringify(itemsFound, undefined, 2);\n        this.showQuery = true;\n    }\n\n}\n"],"sourceRoot":"../../../../.."}