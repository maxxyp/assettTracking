{"version":3,"sources":["hema/presentation/modules/settings/about/engineerDetails.ts"],"names":[],"mappings":"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","file":"engineerDetails.js","sourcesContent":["import {ILabelService} from \"../../../../business/services/interfaces/ILabelService\";\r\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\r\nimport {DialogService} from \"aurelia-dialog\";\r\nimport {LabelService} from \"../../../../business/services/labelService\";\r\nimport {inject} from \"aurelia-dependency-injection\";\r\nimport {BaseInformation} from \"./baseInformation\";\r\nimport {IEngineerService} from \"../../../../business/services/interfaces/IEngineerService\";\r\nimport {EngineerService} from \"../../../../business/services/engineerService\";\r\nimport {StorageService} from \"../../../../business/services/storageService\";\r\nimport {IStorageService} from \"../../../../business/services/interfaces/IStorageService\";\r\nimport {CatalogService} from \"../../../../business/services/catalogService\";\r\nimport {ICatalogService} from \"../../../../business/services/interfaces/ICatalogService\";\r\nimport {VanStockService} from \"../../../../business/services/vanStockService\";\r\nimport {IVanStockService} from \"../../../../business/services/interfaces/IVanStockService\";\r\nimport { UserPreferenceConstants } from \"../../../../business/services/constants/userPreferenceConstants\";\r\n\r\n@inject(LabelService, EventAggregator, DialogService, EngineerService, StorageService, CatalogService, VanStockService)\r\nexport class EngineerDetails extends BaseInformation {\r\n    public name: string;\r\n    public payrollId: string;\r\n    public lanId: string;\r\n    public phoneNumber: string;\r\n    public roles: string;\r\n    public workingArea: string;\r\n    public patch: string;\r\n    public region: string;\r\n\r\n    private _engineerService: IEngineerService;\r\n    private _storageService: IStorageService;\r\n    private _catalogService: ICatalogService;\r\n    private _vanStockService: IVanStockService;\r\n    private _subscription: Subscription;\r\n\r\n    constructor(labelService: ILabelService, eventAggregator: EventAggregator, dialogService: DialogService,\r\n                engineerService: IEngineerService, storageService: IStorageService, catalogService: ICatalogService, vanStockService: IVanStockService) {\r\n        super(labelService, eventAggregator, dialogService);\r\n        this._eventAggregator = eventAggregator;\r\n        this.isExpanded = false;\r\n        this._engineerService = engineerService;\r\n        this._storageService = storageService;\r\n        this._catalogService = catalogService;\r\n        this._vanStockService = vanStockService;\r\n    }\r\n\r\n    public attachedAsync() : Promise<void> {\r\n        this._subscription = this._eventAggregator.subscribe(UserPreferenceConstants.USER_PREFERENCES_CHANGED, () => this.load());\r\n        return this.load();\r\n    }\r\n\r\n    public detachedAsync(): Promise<void> {\r\n        if (this._subscription) {\r\n            this._subscription.dispose();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public async load() : Promise<void> {\r\n        let [engineer, userPatch, workingSector, regionId] = await Promise.all([\r\n            this._engineerService.getCurrentEngineer(),\r\n            this._storageService.getUserPatch(),\r\n            this._storageService.getWorkingSector(),\r\n            this._storageService.getUserRegion()\r\n        ]);\r\n\r\n        this.name = engineer.firstName + \" \" + engineer.lastName;\r\n        this.payrollId = engineer.id;\r\n        this.lanId = engineer.lanId;\r\n        this.phoneNumber = engineer.phoneNumber;\r\n        this.roles = engineer && engineer.roles ? engineer.roles.join(\", \") : \"\";\r\n\r\n        this.patch = userPatch;\r\n\r\n        let workingSectors = this._vanStockService.getSectors();\r\n        let wa = workingSectors.find((sector) => sector.sectorCode === workingSector);\r\n        if (wa) {\r\n            this.workingArea = wa.sectorDescription;\r\n        }\r\n\r\n        let region = await this._catalogService.getRegion(regionId);\r\n        this.region = region ? region.description : \"\";\r\n    }\r\n}\r\n"],"sourceRoot":"../../../../.."}