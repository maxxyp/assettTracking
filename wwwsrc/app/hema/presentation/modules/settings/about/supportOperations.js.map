{"version":3,"sources":["hema/presentation/modules/settings/about/supportOperations.ts"],"names":[],"mappings":"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","file":"supportOperations.js","sourcesContent":["import { ILabelService } from \"../../../../business/services/interfaces/ILabelService\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { LabelService } from \"../../../../business/services/labelService\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { BaseInformation } from \"./baseInformation\";\nimport { HemaStorage } from \"../../../../core/services/hemaStorage\";\nimport { ReferenceDataService } from \"../../../../business/services/referenceDataService\";\nimport { IStorage } from \"../../../../../common/core/services/IStorage\";\nimport { IReferenceDataService } from \"../../../../business/services/interfaces/IReferenceDataService\";\nimport { ConfirmDialogModel } from \"../../../../../common/ui/dialogs/models/confirmDialogModel\";\nimport { ConfirmationDialog } from \"./dialog/confirmationDialog\";\nimport { PlatformHelper } from \"../../../../../common/core/platformHelper\";\nimport { JobService } from \"../../../../business/services/jobService\";\nimport { IJobService } from \"../../../../business/services/interfaces/IJobService\";\nimport { BridgeDiagnostic } from \"../../../../business/models/bridgeDiagnostic\";\nimport { IBridgeBusinessService } from \"../../../../business/services/interfaces/IBridgeBusinessService\";\nimport { BridgeBusinessService } from \"../../../../business/services/bridgeBusinessService\";\nimport { WindowHelper } from \"../../../../core/windowHelper\";\nimport { InformationDialog } from \"./dialog/informationDialog\";\nimport { InfoDialogModel } from \"../../../../../common/ui/dialogs/models/infoDialogModel\";\nimport { DialogResult } from \"../../../../../../typings/lib/aurelia/aurelia-dialog/index\";\nimport { IFFTService } from \"../../../../api/services/interfaces/IFFTService\";\nimport { FftService } from \"../../../../api/services/fftService\";\nimport { ISupportService } from \"../../../../business/services/interfaces/ISupportService\";\nimport { SupportService } from \"../../../../business/services/supportService\";\nimport { AnalyticsConstants } from \"../../../../../common/analytics/analyticsConstants\";\nimport * as moment from \"moment\";\n\n@inject(LabelService, EventAggregator, DialogService, HemaStorage, ReferenceDataService, JobService, BridgeBusinessService, FftService, SupportService)\nexport class SupportOperations extends BaseInformation {\n    public platform: string;\n    public bridgeDiagnosticSummary: BridgeDiagnostic;\n    public jobUpdate: string;\n    public hiddenText: HTMLTextAreaElement;\n\n    private _storage: IStorage;\n    private _referenceDataService: IReferenceDataService;\n    private _jobService: IJobService;\n    private _bridgeBusinessService: IBridgeBusinessService;\n    private _supportService: ISupportService;\n    private _fftService: IFFTService;\n\n    constructor(labelService: ILabelService, eventAggregator: EventAggregator, dialogService: DialogService,\n        storage: IStorage, referenceDataService: IReferenceDataService, jobService: IJobService,\n                bridgeBusinessService: IBridgeBusinessService, fftService: IFFTService,\n                supportService: ISupportService) {\n        super(labelService, eventAggregator, dialogService);\n\n        this.isExpanded = false;\n        this._storage = storage;\n        this._referenceDataService = referenceDataService;\n        this._jobService = jobService;\n        this._bridgeBusinessService = bridgeBusinessService;\n        this._supportService = supportService;\n\n        this.platform = PlatformHelper.getPlatform();\n        this.bridgeDiagnosticSummary = new BridgeDiagnostic();\n        this._fftService = fftService;\n    }\n\n    public async activateAsync(): Promise<void> {\n        const lastJob = await this._supportService.getLastJobUpdate();\n        if (lastJob) {\n            this.jobUpdate = JSON.stringify(lastJob, undefined, 2);\n        }\n        await this.getBridgeDiagnostic();\n    }\n\n    public async logCurrentJobState() : Promise<DialogResult> {\n        let feedback = (message: string) => {\n            return this._dialogService.open({\n                viewModel: InformationDialog,\n                model: new InfoDialogModel(this.getLabel(\"logJobTitle\"), message )\n            });\n        };\n\n        let jobId = await this._jobService.getActiveJobId();\n\n        if (!jobId) {\n            return feedback(this.getLabel(\"logJobNoActiveJob\"));\n        }\n\n        let job = await this._jobService.getJob(jobId);\n        if (!job) {\n            return feedback(this.getLabel(\"logJobCantGetJob\") + jobId);\n        }\n\n        this._logger.warn(\"Current Job State\", job);\n        return feedback(this.getLabel(\"logJobSuccess\") + jobId);\n    }\n\n    public async getBridgeDiagnostic(): Promise<void> {\n        this.bridgeDiagnosticSummary = await this._bridgeBusinessService.getDiagnostic();\n    }\n\n    public async removeData(args: {user?: boolean, catalog?: boolean}): Promise<void> {\n\n        let buildModel = (title: string, text: string) => {\n        let model: ConfirmDialogModel = new ConfirmDialogModel();\n            model.header = this.getLabel(title);\n            model.text = this.getLabel(text);\n            return model;\n        };\n        \n        let result = await this._dialogService.open({ \n            viewModel: ConfirmationDialog, \n            model: buildModel(\"questionTitle\", \"question\") \n        });\n\n        if (result.wasCancelled) {\n            return;\n        }\n\n        if (args.user) {\n            try {\n                let payloads = await this._fftService.getUnsentPayloads();\n                if (payloads.length) {\n                    let resultPayloads = await this._dialogService.open({ \n                        viewModel: ConfirmationDialog, \n                        model: buildModel(\"haveUnsentPayloadsTitle\", \"haveUnsentPayloads\") \n                    });\n\n                    if (resultPayloads.wasCancelled) {\n                        return;\n                    }\n                }\n\n                this._logger.warn(\"Attempting to clear user data\");\n                await this._storage.clear();\n                this.addToAnalytics(AnalyticsConstants.REMOVE_USER_DATA);\n            } catch (error) {\n                this._logger.warn(\"Error when user storage\", error);\n            }\n        }\n\n        if (args.catalog) {\n            try {\n                this._logger.warn(\"Attempting to clear reference data\");\n                await this._referenceDataService.clear();\n                this.addToAnalytics(AnalyticsConstants.REMOVE_CATALOG_DATA);\n            } catch (error) {\n                // we have seen that even though db is deleted, a \"blocked\" error may still be thrown\n                this._logger.warn(\"Error when clearing catalog\", error);\n            }\n        }\n        this._logger.warn(\"About to reload ...\");\n        // give the logger time to flush to disk\n        await Promise.delay(500);\n        WindowHelper.reload();\n    }\n\n    public copy(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            if (this.populateHiddenText()) {\n                this.hiddenText.select();\n                try {\n                    let supported: boolean = document.queryCommandSupported(\"copy\");\n                    if (supported) {\n                        document.execCommand(\"copy\");\n                    }\n                    this.clearHiddenText();\n                    resolve();\n                } catch (err) {\n                    this.clearHiddenText();\n                    resolve();\n                }\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    private addToAnalytics(category: string) : void {\n        try {\n            this._eventAggregator.publish(AnalyticsConstants.ANALYTICS_EVENT, {\n                category: category,\n                action: AnalyticsConstants.CLICK_ACTION,\n                label: moment().format(AnalyticsConstants.DATE_TIME_FORMAT),\n                metric: AnalyticsConstants.METRIC\n            });   \n        } catch {\n            // do nothing\n        }\n    }\n\n    private populateHiddenText(): boolean {\n        let flag: boolean = false;\n        if (this.hiddenText) {\n            this.hiddenText.innerText = this.jobUpdate;\n            flag = true;\n        }\n        return flag;\n    }\n\n    private clearHiddenText(): void {\n        if (this.hiddenText) {\n            this.hiddenText.innerText = \" \";\n        }\n    }\n }\n"],"sourceRoot":"../../../../.."}