{"version":3,"sources":["hema/presentation/modules/settings/about/resilienceInformation.ts"],"names":[],"mappings":"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","file":"resilienceInformation.js","sourcesContent":["import {ILabelService} from \"../../../../business/services/interfaces/ILabelService\";\nimport {EventAggregator, Subscription} from \"aurelia-event-aggregator\";\nimport {DialogService} from \"aurelia-dialog\";\nimport {LabelService} from \"../../../../business/services/labelService\";\nimport {inject} from \"aurelia-dependency-injection\";\nimport {BaseInformation} from \"./baseInformation\";\nimport {RetryPayload} from \"../../../../../common/resilience/models/retryPayload\";\nimport {ResilientServiceConstants} from \"../../../../../common/resilience/constants/resilientServiceConstants\";\nimport {InfoDialogModel} from \"../../../../../common/ui/dialogs/models/infoDialogModel\";\nimport {InformationDialog} from \"./dialog/informationDialog\";\nimport { IResilientService } from \"../../../../../common/resilience/services/interfaces/IResilientService\";\n\n@inject(LabelService, EventAggregator, DialogService)\nexport class ResilienceInformation extends BaseInformation {\n    public unsentCalls: { type: string, id: string, showDetail: boolean, payload: RetryPayload }[];\n    public isRetryInProgress: boolean;\n    public showRecords: boolean;\n    public title: string;\n    private _resilientService: IResilientService;\n    private _subscription: Subscription;\n\n    constructor(labelService: ILabelService, eventAggregator: EventAggregator, dialogService: DialogService) {\n        super(labelService, eventAggregator, dialogService);\n    }\n\n    public async activateAsync(model: {service: IResilientService, title: string }) : Promise<void> {\n        this._resilientService = model.service;\n        this.title = model.title;\n        // create the subscription only when we know labels have been loaded, otherwise we get this.getLabel(...) errors\n        this._subscription = this._eventAggregator.subscribe(ResilientServiceConstants.UNSENT_PAYLOADS_UPDATES, async (val: string) => {\n            if (val === this._resilientService.getConfigurationName()) {\n                await this.loadPayloads();\n            }\n         });\n        await this.loadPayloads();\n    }\n\n    public async detachedAsync() : Promise<void> {\n        if (this._subscription) {\n            this._subscription.dispose();\n            this._subscription = undefined;\n        }\n    }\n\n    public async loadPayloads() : Promise<void> {\n\n        let unsentPayloads = ((await this._resilientService.getUnsentPayloads()) || [])\n                                // we get flashing because all calls go through resilience.  If a call is fine, we\n                                //  see it momentarily in the list.  So we filter out these \"only one call in the list for a flash\" calls.\n                                .filter(((payload, _, payloads)  => payload.lastRetryTime || payloads.length > 1));\n\n        this.unsentCalls = unsentPayloads.map(item => ({\n            type: item.routeName,\n            id: this.getItemRepresentativeValue(item),\n            showDetail: false,\n            payload: item\n        }));\n\n        this.isRetryInProgress = this._resilientService.isRetryInProgress();\n    }\n\n    public retryAll() : void {\n        this._resilientService.sendAllRetryPayloads();\n    }\n\n    public showDetail(retryPayload: RetryPayload) : void {\n        let vm : InfoDialogModel = new InfoDialogModel(this.getLabel(\"failureInformation\"), retryPayload.lastFailureMessage);\n        this._dialogService.open({viewModel: InformationDialog, model: vm});\n    }\n\n    private getItemRepresentativeValue(payload: RetryPayload): string {\n        return payload\n                && payload.params\n                && Object.keys(payload.params)\n                && Object.keys(payload.params).length\n                && payload.params[Object.keys(payload.params)[0]];\n    }\n}\n"],"sourceRoot":"../../../../.."}