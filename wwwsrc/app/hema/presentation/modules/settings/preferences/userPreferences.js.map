{"version":3,"sources":["hema/presentation/modules/settings/preferences/userPreferences.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyBA;QAAqC,mCAAoB;QAkBrD,yBACI,YAA2B,EAC3B,eAAgC,EAChC,aAA4B,EAC5B,iBAAqC,EACrC,eAAiC,EACjC,cAA+B,EAC/B,cAA+B,EAC/B,UAAuB;YAR3B,YAUI,kBAAM,YAAY,EAAE,eAAe,EAAE,aAAa,EAAE,iBAAiB,CAAC,SAKzE;YAJG,KAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YACxC,KAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,KAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,KAAI,CAAC,WAAW,GAAG,UAAU,CAAC;;QAClC,CAAC;QAEY,uCAAa,GAA1B;;;;;4BACI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC;4BACzD,qBAAM,IAAI,CAAC,oBAAoB,EAAE,EAAA;;4BAAjC,SAAiC,CAAC;4BAClC,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAAjB,SAAiB,CAAC;4BAClB,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;4BAA5B,SAA4B,CAAC;4BAC7B,qBAAM,IAAI,CAAC,gBAAgB,EAAE,EAAA;;4BAA7B,SAA6B,CAAC;4BAE9B,kFAAkF;4BAClF,2FAA2F;4BAC3F,wEAAwE;4BACxE,gEAAgE;4BAChE,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC3C,qHAAqH;gCACrH,4BAA4B;gCAC5B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;gCACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;4BACzB,CAAC;;;;;SACJ;QAEY,uCAAa,GAA1B;;;;gCACG,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAAjB,SAAiB,CAAC;;;;;SACpB;QAEY,sDAA4B,GAAzC;;;;;gCACI,qBAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAA;;4BAApD,SAAoD,CAAC;4BAErD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,SAAS,KAAK,KAAI,CAAC,aAAa,EAArC,CAAqC,CAAC,CAAC,CAAC,CAAC;gCACtE,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;4BACnC,CAAC;4BACD,oFAAoF;4BACpF,8EAA8E;4BAC9E,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;4BAErB,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;;4BAA3B,SAA2B,CAAC;;;;;SAC/B;QAEM,8CAAoB,GAA3B;YACI,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QACjC,CAAC;QAEM,+CAAqB,GAA5B;YACI,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QACjC,CAAC;QAEa,wCAAc,GAA5B;;;;;iCACQ,CAAA,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,cAAc,CAAA,EAAvE,wBAAuE;4BACvE,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAAjB,SAAiB,CAAC;;;;;;SAEzB;QAEa,8BAAI,GAAlB;;;;;gCACkC,qBAAM,OAAO,CAAC,GAAG,CAAC;gCACxC,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE;gCACvC,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;gCACnC,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE;6BAC3C,CAAC,EAAA;;4BAJE,KAA0B,SAI5B,EAJG,MAAM,QAAA,EAAE,KAAK,QAAA,EAAE,MAAM,QAAA;4BAK1B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;4BAC3B,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;4BAC7B,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC;;;;;SACvC;QAEa,8BAAI,GAAlB;;;;;gCACI,qBAAM,OAAO,CAAC,GAAG,CAAC;gCACd,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,qBAAqB,CAAC;gCACjE,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC;gCACrD,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC;6BAC1D,CAAC,EAAA;;4BAJF,SAIE,CAAC;4BAEH,KAAA,CAAA,KAAA,IAAI,CAAC,gBAAgB,CAAA,CAAC,OAAO,CAAA;kCAAC,+CAAsB,CAAC,mBAAmB;4BAAE,qBAAM,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,EAAA;;4BAAjH,wBAA0E,SAAuC,GAAC,CAAC;4BAEnH,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,iDAAuB,CAAC,wBAAwB,EAAE;gCAC5E,YAAY,EAAE,IAAI,CAAC,qBAAqB;gCACxC,aAAa,EAAE,IAAI,CAAC,aAAa;gCACjC,cAAc,EAAE,IAAI,CAAC,cAAc;6BACtC,CAAC,CAAC;;;;;SACN;QAEa,8CAAoB,GAAlC;;;;;gCACqB,qBAAM,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,EAAA;;4BAApD,UAAU,GAAG,SAAuC;4BACxD,IAAI,CAAC,UAAU,GAAG,UAAU;iCACvB,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAS,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,WAAW,EAAK,IAAI,CAAC,GAAG,WAAM,IAAI,CAAC,WAAa,EAAC,CAAA,EAA3E,CAA2E,CAAC;iCACxF,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,EAAf,CAAe,CAAC,CAAC;;;;;SACxC;QAEa,uCAAa,GAA3B,UAA4B,MAAc;;;;;gCACtB,qBAAM,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,CAAC,EAAA;;4BAA7D,SAAS,GAAG,SAAiD;4BACjE,IAAI,CAAC,SAAS,GAAG,SAAS;iCACL,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAlE,CAAkE,CAAC,CAAC;;;;;SAC3G;QApHD;YADC,4BAAU;;8DACkB;QAE7B;YADC,4BAAU;;sEAC0B;QAErC;YADC,4BAAU;;+DACmB;QAXrB,eAAe;YAD3B,qCAAM,CAAC,2BAAY,EAAE,0CAAe,EAAE,8BAAa,EAAE,qCAAiB,EAAE,iCAAe,EAAE,+BAAc,EAAE,+BAAc,EAAE,uBAAU,CAAC;qDAqB5G,0CAAe;gBACjB,8BAAa;WArBvB,eAAe,CA4H3B;QAAD,sBAAC;KA5HD,AA4HC,CA5HoC,2CAAoB,GA4HxD;IA5HY,0CAAe","file":"userPreferences.js","sourcesContent":["import { inject } from \"aurelia-dependency-injection\";\r\nimport { StorageService } from \"../../../../business/services/storageService\";\r\nimport { IStorageService } from \"../../../../business/services/interfaces/IStorageService\";\r\nimport { ValidatableViewModel } from \"../../../models/validatableViewModel\";\r\nimport { ILabelService } from \"../../../../business/services/interfaces/ILabelService\";\r\nimport { LabelService } from \"../../../../business/services/labelService\";\r\nimport { IValidationService } from \"../../../../business/services/interfaces/IValidationService\";\r\nimport { ValidationService } from \"../../../../business/services/validationService\";\r\nimport { VanStockService } from \"../../../../business/services/vanStockService\";\r\n\r\nimport { IVanStockService } from \"../../../../business/services/interfaces/IVanStockService\";\r\nimport { VanStockSector } from \"../../../../business/models/vanStockSector\";\r\nimport { VanStockPatchListItem } from \"../../../../business/models/vanStockPatchListItem\";\r\nimport { EventAggregator } from \"aurelia-event-aggregator\";\r\nimport { DialogService } from \"aurelia-dialog\";\r\nimport { observable } from \"aurelia-binding\";\r\nimport { IRegion } from \"../../../../business/models/reference/IRegion\";\r\nimport { ICatalogService } from \"../../../../business/services/interfaces/ICatalogService\";\r\nimport { CatalogService } from \"../../../../business/services/catalogService\";\r\nimport { ChargeServiceConstants } from \"../../../../business/services/constants/chargeServiceConstants\";\r\nimport { IJobService } from \"../../../../business/services/interfaces/IJobService\";\r\nimport { JobService } from \"../../../../business/services/jobService\";\r\nimport { UserPreferenceConstants } from \"../../../../business/services/constants/userPreferenceConstants\";\r\n\r\n@inject(LabelService, EventAggregator, DialogService, ValidationService, VanStockService, StorageService, CatalogService, JobService)\r\nexport class UserPreferences extends ValidatableViewModel {\r\n    public workingSectors: VanStockSector[];\r\n    public patchList: VanStockPatchListItem[];\r\n    public regionList: IRegion[];\r\n    public isLoaded: boolean;\r\n\r\n    @observable\r\n    public selectedPatch: string;\r\n    @observable\r\n    public selectedWorkingSector: string;\r\n    @observable\r\n    public selectedRegion: string;\r\n\r\n    private _vanStockService: IVanStockService;\r\n    private _storageService: IStorageService;\r\n    private _catalogService: ICatalogService;\r\n    private _jobService: IJobService;\r\n\r\n    constructor(\r\n        labelService: ILabelService,\r\n        eventAggregator: EventAggregator,\r\n        dialogService: DialogService,\r\n        validationService: IValidationService,\r\n        vanStockService: IVanStockService,\r\n        storageService: IStorageService,\r\n        catalogService: ICatalogService,\r\n        jobService: IJobService) {\r\n\r\n        super(labelService, eventAggregator, dialogService, validationService);\r\n        this._vanStockService = vanStockService;\r\n        this._storageService = storageService;\r\n        this._catalogService = catalogService;\r\n        this._jobService = jobService;\r\n    }\r\n\r\n    public async attachedAsync(): Promise<any> {\r\n        this.workingSectors = this._vanStockService.getSectors();\r\n        await this.loadAvailableRegions();\r\n        await this.load();\r\n        await this.buildValidation();\r\n        await this.validationManual();\r\n\r\n        // due to dropDown.ts issues, we only want to add the dropdown to the dom once the\r\n        // values list has been loaded (hence its attached event will fire only once it has values)\r\n        // on first load after install, selectedWorkingSector will be undefined,\r\n        //  and we will not have a selectedWorkingSectorChanged event...\r\n        if (this.selectedWorkingSector === undefined) {\r\n            // patchList will be loaded when working sector is set, but the current dropDown throws if we enter and leave without\r\n            //  the value list being set\r\n            this.patchList = [];\r\n            this.isLoaded = true;\r\n        }\r\n    }\r\n\r\n    public async detachedAsync() : Promise<void> {\r\n       await this.save();\r\n    }\r\n\r\n    public async selectedWorkingSectorChanged(): Promise<void> {\r\n        await this.reloadPatches(this.selectedWorkingSector);\r\n\r\n        if (!this.patchList.some(item => item.patchCode === this.selectedPatch)) {\r\n            this.selectedPatch = undefined;\r\n        }\r\n        // after first load, we need to wait until patchList has been loaded before showing,\r\n        //  hence wait for workingSector changed to finish its business before showing\r\n        this.isLoaded = true;\r\n\r\n        await this.saveIfComplete();\r\n    }\r\n\r\n    public selectedPatchChanged(): Promise<void> {\r\n        return this.saveIfComplete();\r\n    }\r\n\r\n    public selectedRegionChanged(): Promise<void> {\r\n        return this.saveIfComplete();\r\n    }\r\n\r\n    private async saveIfComplete(): Promise<void> {\r\n        if (this.selectedWorkingSector && this.selectedPatch && this.selectedRegion) {\r\n            await this.save();\r\n        }\r\n    }\r\n\r\n    private async load(): Promise<void> {\r\n        let [sector, patch, region] = await Promise.all([\r\n                this._storageService.getWorkingSector(),\r\n                this._storageService.getUserPatch(),\r\n                this._storageService.getUserRegion()\r\n        ]);\r\n        this.selectedPatch = patch;\r\n        this.selectedRegion = region;\r\n        this.selectedWorkingSector = sector;\r\n    }\r\n\r\n    private async save(): Promise<void> {\r\n        await Promise.all([\r\n            this._storageService.setWorkingSector(this.selectedWorkingSector),\r\n            this._storageService.setUserPatch(this.selectedPatch),\r\n            this._storageService.setUserRegion(this.selectedRegion)\r\n        ]);\r\n\r\n        this._eventAggregator.publish(ChargeServiceConstants.CHARGE_UPDATE_START, await this._jobService.getActiveJobId());\r\n\r\n        this._eventAggregator.publish(UserPreferenceConstants.USER_PREFERENCES_CHANGED, {\r\n            engineerType: this.selectedWorkingSector,\r\n            engineerPatch: this.selectedPatch,\r\n            engineerRegion: this.selectedRegion\r\n        });\r\n    }\r\n\r\n    private async loadAvailableRegions(): Promise<void> {\r\n        let regionList = await this._catalogService.getRegions();\r\n        this.regionList = regionList\r\n            .map(item => <IRegion>{ key: item.key, description: `${item.key} - ${item.description}`})\r\n            .sort((a, b) => +a.key - +b.key);\r\n    }\r\n\r\n    private async reloadPatches(sector: string): Promise<void> {\r\n        let patchList = await this._vanStockService.getPatchCodes(sector);\r\n        this.patchList = patchList\r\n                            .sort((a, b) => a.patchCode > b.patchCode ? 1 : a.patchCode < b.patchCode ? -1 : 0);\r\n    }\r\n}\r\n"],"sourceRoot":"../../../../.."}