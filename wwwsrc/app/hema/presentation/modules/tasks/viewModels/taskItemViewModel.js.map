{"version":3,"sources":["hema/presentation/modules/tasks/viewModels/taskItemViewModel.ts"],"names":[],"mappings":"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","file":"taskItemViewModel.js","sourcesContent":["import { TimeRange } from \"../../../../../common/ui/elements/models/timeRange\";\nimport { IChirpCode } from \"../../../../business/models/reference/IChirpCode\";\nimport { Job } from \"../../../../business/models/job\";\nimport { Task } from \"../../../../business/models/task\";\nimport { IVisitActivityCode } from \"../../../../business/models/reference/IVisitActivityCode\";\nimport { IPartType } from \"../../../../business/models/reference/IPartType\";\nimport { IFaultActionCode } from \"../../../../business/models/reference/IFaultActionCode\";\nimport { ObjectHelper } from \"../../../../../common/core/objectHelper\";\nimport { IVisitActivityFaultActionCode } from \"../../../../business/models/reference/IVisitActivityFaultActionCode\";\nimport { IPtFac } from \"../../../../business/models/reference/IPtFac\";\nimport { DataState } from \"../../../../business/models/dataState\";\n\nexport class TaskItemViewModel {\n    public readonly dataStateId: string;\n    public readonly dataState: DataState;\n    public readonly taskIds: string[];\n    public readonly tasks: Task[];\n    public readonly job: Job;\n    public readonly isCharge: boolean;\n    public readonly isNewRFA: boolean;\n\n    public currentApplianceId: string;\n    public isJobNoAccessedByAnotherTask: boolean;\n    public status: string;\n    public workedOnCode: string;\n    public activity: string;\n    public adviceCode: string;\n    public jobType: string;\n    public workDuration: number;\n    public startTime: string;\n    public endTime: string;\n    public chargeableTime: number;\n    public charactersLeft: string;\n    public charactersLeftClass: string;\n    public charactersLeftNum: number;\n    public isFirstVisit: boolean;\n    public productGroup: string;\n    public partType: string;\n    public faultActionCode: string;\n    public showProductGroupAndPartTypes: boolean;\n    // main part stuff\n    public mainPartInformationRetrieved: boolean;\n    public hasMainPart: boolean;\n    public mainPartProductGroup: string;\n    public mainPartPartType: string;\n    public showMainPartSelectedWithInvalidActivityTypeMessage: boolean;\n    public showMainPartSelectedWithInvalidProductGroupTypeMessage: boolean;\n    public showMainPartSelectedWithInvalidPartTypeMessage: boolean;\n    public isPotentiallyPartLJReportable: boolean;\n    public isPartLJReportable: boolean;\n    public applianceType: string;\n    public notCompletingJob: boolean;\n    public notCompletingTask: boolean;\n    public orderNo: number;\n    public isInCancellingStatus: boolean;\n    public isNotDoingJobByAnotherTask: boolean;\n    public adviceOutcome: string;\n    public adviceComment: string;\n    public totalPreviousWorkDuration: number;\n    public taskTime: TimeRange;\n    public taskReport: string;\n    public chirpCodes: IChirpCode[];\n    public unusedChirpCodes: IChirpCode[];\n    public selectedChirpCode: string;\n\n    public visitActivityFilteredCatalog: IVisitActivityCode[];\n    public partTypeFilteredCatalog: IPartType[];\n    public faultActionCodeFilteredCatalog: IFaultActionCode[];\n\n    constructor(taskId: string, job: Job, task: Task) {\n        this.dataStateId = task.dataStateId;\n        this.dataState = task.dataState;\n        this.taskIds = job.tasks.map(t => t.id);\n        this.isCharge = task.isCharge;\n        this.isNewRFA = task.isNewRFA;\n        this.tasks = job.tasks;\n        this.job = job;\n\n        this.orderNo = task.orderNo;\n        this.applianceType = task.applianceType;\n        this.jobType = task.jobType;\n        this.status = task.status;\n        this.workedOnCode = task.workedOnCode;\n        this.adviceOutcome = task.adviceOutcome;\n        this.adviceCode = task.adviceCode;\n        this.adviceComment = task.adviceComment;\n        this.taskReport = task.report;\n        this.workDuration = task.workDuration;\n        this.chargeableTime = task.chargeableTime;\n        this.activity = task.activity;\n        this.productGroup = task.productGroup;\n        this.partType = task.partType;\n        this.faultActionCode = task.faultActionCode;\n        this.isPotentiallyPartLJReportable = task.isPotentiallyPartLJReportable;\n        this.isPartLJReportable = task.isPartLJReportable;\n        this.isFirstVisit = task.isFirstVisit;\n        this.hasMainPart = task.hasMainPart;\n        this.mainPartPartType = task.mainPartPartType;\n        this.currentApplianceId = task.applianceId;\n        this.showMainPartSelectedWithInvalidActivityTypeMessage = task.showMainPartSelectedWithInvalidActivityTypeMessage;\n        this.showMainPartSelectedWithInvalidProductGroupTypeMessage = task.showMainPartSelectedWithInvalidProductGroupTypeMessage;\n        this.showMainPartSelectedWithInvalidPartTypeMessage = task.showMainPartSelectedWithInvalidPartTypeMessage;\n        this.showProductGroupAndPartTypes = true;\n        this.notCompletingJob = false;\n        this.notCompletingTask = false;\n        this.mainPartInformationRetrieved = false;\n        this.chirpCodes = [];\n        this.faultActionCodeFilteredCatalog = [];\n        this.partTypeFilteredCatalog = [];\n        this.visitActivityFilteredCatalog = [];\n        this.mainPartProductGroup = \"\";\n        this.totalPreviousWorkDuration = TaskItemViewModel.getTotalPreviousChargeableTime(task);\n    }\n\n    public static getTotalPreviousChargeableTime(task: Task): number {\n        let totalChargeableTime: number = 0;\n        if (task && task.activities) {\n            for (let i: number = 0; i < task.activities.length; i++) {\n                let activity = task.activities[i];\n                if (activity && activity.chargeableTime) {\n                    totalChargeableTime += activity.chargeableTime;\n                }\n            }\n        }\n        return totalChargeableTime;\n    }\n\n    public static filterVisitActivityCatalog(viewModel: TaskItemViewModel,\n                                             workedOnCode: string,\n                                             firstVisitJobCode: string,\n                                             firstVisitTaskCode: string,\n                                             visitActivityCatalog: IVisitActivityCode[],\n                                             claimRejNotCoveredVisitCodesPattern: string,\n                                             workedOnClaimRejNotCovered: string): void {\n\n        // if job type is first visit then visit activity defaults to first visit code, other have other job types, except first visit\n        if (viewModel.jobType === firstVisitJobCode) {\n            viewModel.isFirstVisit = true; // used for view and stops reloading on second visit\n            viewModel.activity = firstVisitTaskCode;\n            viewModel.visitActivityFilteredCatalog = visitActivityCatalog.filter(v => v.visitActivityCode === firstVisitTaskCode);\n        } else {\n            viewModel.isFirstVisit = false;\n            // get claim rej type products\n            if (workedOnCode !== undefined) {\n                if (viewModel.workedOnCode === workedOnClaimRejNotCovered) {\n                    viewModel.visitActivityFilteredCatalog = visitActivityCatalog.filter(v => {\n                        return v.visitActivityCode.substr(0, claimRejNotCoveredVisitCodesPattern.length) === claimRejNotCoveredVisitCodesPattern\n                            && v.visitActivityCode !== firstVisitTaskCode;\n                    }).map((item) => {\n                        /* Since the WMIS data is prefixed with X for this category strip it off using a cloned version of the object */\n                        let newItem = ObjectHelper.clone(item);\n                        newItem.visitActivityDescr = newItem.visitActivityDescription.substr(1);\n                        return newItem;\n                    });\n                } else {\n                    viewModel.visitActivityFilteredCatalog = visitActivityCatalog.filter(v =>\n                    v.visitActivityCode.substr(0, claimRejNotCoveredVisitCodesPattern.length) !== claimRejNotCoveredVisitCodesPattern\n                    && v.visitActivityCode !== firstVisitTaskCode);\n                }\n            }\n        }\n    }\n\n    public static filterFaultActionCodeCatalog(viewModel: TaskItemViewModel,\n        visitActFaultActLinkCatalog: IVisitActivityFaultActionCode[],\n        faultMap: { [code: string]: IFaultActionCode },\n        visitCodesProductGroupPartsRequired: string[]): void {\n        const faultCodes = visitActFaultActLinkCatalog.filter(lookup => lookup.visitActivityCode === viewModel.activity);\n\n        // if no fault codes associated to visit type, then it implies that a part and product group is needed\n        if (faultCodes && faultCodes.length > 0) {\n            const filteredFaultCodes = faultCodes.map(f => faultMap[f.faultActionCode]);\n\n            if (filteredFaultCodes) {\n                viewModel.showProductGroupAndPartTypes = false;\n                viewModel.faultActionCodeFilteredCatalog = filteredFaultCodes;\n            }\n        } else {\n            viewModel.showProductGroupAndPartTypes = visitCodesProductGroupPartsRequired.indexOf(viewModel.activity) !== -1;\n        }\n    }\n\n    public static filterFaultActionCodeBasedOnPartType(viewModel: TaskItemViewModel,\n        partTypeFaultActLinkCatalog: IPtFac[],\n        partTypeCatalog: IPartType[],\n        faultMap: { [code: string]: IFaultActionCode }): void {\n        if (viewModel.partType && partTypeFaultActLinkCatalog && partTypeFaultActLinkCatalog.length > 0) {\n\n            const foundPartType = partTypeCatalog.find(pt => pt.partTypeCode === viewModel.partType);\n\n            if (!foundPartType) {\n                return;\n            }\n            const faultCodes = partTypeFaultActLinkCatalog.filter(pType => pType.productGroupCode === viewModel.productGroup && pType.partTypeCode === foundPartType.partTypeCode);\n\n            // being defensive by using filter in case the faultCode mapping does not contain the faultActionCode\n\n            if (faultCodes && faultCodes.length > 0) {\n                viewModel.faultActionCodeFilteredCatalog = faultCodes\n                    .filter(f => faultMap[f.faultActionCode]) // only return if fault exists\n                    .map(f => faultMap[f.faultActionCode]) // return fault code\n                    .sort((a, b) => {\n                        if (a.faultActionDescription < b.faultActionDescription) {\n                            return -1;\n                        }\n                        if (a.faultActionDescription > b.faultActionDescription) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n            }\n        }\n    }\n\n    public static filterPartTypeCatalog(viewModel: TaskItemViewModel, partTypeCatalog: IPartType[]): void {\n        if (partTypeCatalog && partTypeCatalog.length > 0) {\n            const partsTypes = partTypeCatalog.filter(ptc => ptc.productGroupCode === viewModel.productGroup);\n\n            if (partsTypes && partsTypes.length > 0) {\n                viewModel.partTypeFilteredCatalog = partsTypes;\n            }\n        }\n    }\n}\n"],"sourceRoot":"../../../../.."}