{"version":3,"sources":["hema/presentation/modules/tasks/taskItem.ts"],"names":[],"mappings":"AAAA,0DAA0D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqD1D;QAA8B,4BAAiB;QA+C3C,kBAAY,cAA+B,EACvC,UAAuB,EACvB,eAAiC,EACjC,YAA2B,EAC3B,WAAyB,EACzB,eAAgC,EAChC,aAA4B,EAC5B,iBAAqC,EACrC,oBAA0C,EAC1C,aAA4B,EAC5B,WAAyB,EACzB,eAAiC;YAXrC,YAaI,kBAAM,UAAU,EAAE,eAAe,EAAE,YAAY,EAAE,eAAe,EAAE,aAAa,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,cAAc,CAAC,SAgB5I;YAdG,KAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,KAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YAExC,KAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;YAC7B,KAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;YAC/B,KAAI,CAAC,cAAc,GAAG,EAAE,CAAC;YACzB,KAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACpB,KAAI,CAAC,cAAc,GAAG,aAAa,CAAC;YACpC,KAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;YAC7B,KAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,KAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;YACpC,KAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC;YACzC,KAAI,CAAC,4BAA4B,GAAG,EAAE,CAAC;YACvC,KAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;;QAChC,CAAC;QAED,yEAAyE;QAClE,uBAAI,GAAX,UAAY,cAAmB,EAAE,eAAoB;YACjD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,SAAS,GAAsB,EAAE,CAAC;YAC3C,CAAC;YACD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC;YAC3B,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,EAAE,CAAC;YACjC,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,CAAC,CAAC;YAClC,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC;QACxC,CAAC;QAEM,mCAAgB,GAAvB;YAAwB,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAClC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACrD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;qBACxC,IAAI,CAAC,UAAA,GAAG;oBACL,IAAI,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;oBAC5B,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;oBAC1B,IAAI,IAAI,GAAG,SAAG,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,KAAK,MAAM,EAAf,CAAe,CAAC,CAAC;oBACzE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;wBAChC,MAAM,CAAC,IAAI,yBAAQ,CAAC,oBAAoB,GAAG,KAAK,GAAG,cAAc,GAAG,MAAM,GAAG,sBAAsB,CAAC,CAAC;oBACzG,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC,CAAC,CAAC;YACX,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;QAEM,gCAAa,GAApB,UAAqB,MAAyC;YAA9D,iBA+BC;YA9BG,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAE1B,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,6BAAa,CAAC,iBAAiB,EAAE,UAAC,IAAU;gBACvG,KAAI,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBAClD,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,yCAAmB,CAAC,iBAAiB,EAAE,cAAM,OAAA,KAAI,CAAC,gBAAgB,EAAE,EAAvB,CAAuB,CAAC,CAAC;YAE1I,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE;qBAC1B,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,kBAAkB,EAAE,EAAzB,CAAyB,CAAC;qBACrC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,wBAAwB,EAAE,EAA/B,CAA+B,CAAC;qBAC3C,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,oBAAoB,EAAE,EAA3B,CAA2B,CAAC;qBACvC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,EAAE,EAAnB,CAAmB,CAAC;qBAC/B,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,IAAI,EAAE,EAAX,CAAW,CAAC;qBACvB,IAAI,CAAC;oBACF,KAAI,CAAC,WAAW,EAAE,CAAC;gBACvB,CAAC,CAAC,CAAC;YACX,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,IAAI,CAAC,kCAAkC,EAAE;qBAC3C,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,oBAAoB,EAAE,EAA3B,CAA2B,CAAC;qBACvC,IAAI,CAAC;oBACF,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC;wBACjB,KAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,KAAI,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;oBACrF,CAAC;oBACD,MAAM,CAAC,KAAI,CAAC,IAAI,EAAE,CAAC;gBACvB,CAAC,CAAC,CAAC;YACX,CAAC;QACL,CAAC;QAEM,kCAAe,GAAtB;YACI,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7B,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAEM,sCAAmB,GAA1B,UAA2B,QAAgB,EAAE,QAAgB;YACzD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YACzC,CAAC;QACL,CAAC;QAEM,kCAAe,GAAtB,UAAuB,QAAgB,EAAE,QAAgB;YACrD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,+BAA+B,CAAC,QAAQ,CAAC,CAAC;YACnD,CAAC;QACL,CAAC;QAEM,sCAAmB,GAA1B,UAA2B,QAAgB,EAAE,QAAgB;YACzD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC/B,CAAC;QACL,CAAC;QAEM,kCAAe,GAAtB,UAAuB,QAAgB,EAAE,QAAgB;YACrD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,+BAA+B,CAAC,QAAQ,CAAC,CAAC;YACnD,CAAC;QACL,CAAC;QAEY,gCAAa,GAA1B;;;;;4BACI,IAAI,CAAC,SAAS,CAAC,oBAAoB,GAAG,CAAC,+CAAsB,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;4BACpH,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;4BAA/B,SAA+B,CAAC;;;;;SACnC;QAEM,oCAAiB,GAAxB,UAAyB,SAAqB;YAC1C,IAAI,GAAG,GAAW,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAC/D,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACnC,CAAC;QACL,CAAC;QAEM,oCAAiB,GAAxB;YACI,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACnC,CAAC;QAEM,2CAAwB,GAA/B;YAAA,iBAYC;YAXG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,EAAE,CAAC;YACnC,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,IAAI,KAAK,KAAI,CAAC,SAAS,CAAC,iBAAiB,EAA5C,CAA4C,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,IAAI,KAAK,KAAI,CAAC,SAAS,CAAC,iBAAiB,EAA5C,CAA4C,CAAC,CAAC,CAAC;gBACzH,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACnC,CAAC;YACD,oCAAoC;YACpC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC5B,CAAC;QAEM,+BAAY,GAAnB;YAAA,iBAIC;YAHG,IAAI,CAAC,SAAS,CAAC,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBACzD,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,EAArB,CAAqB,CAAC,KAAK,CAAC,CAAC,EAAzE,CAAyE,CAAC,CAAC,CAAC;gBAChH,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC;QAEM,sCAAmB,GAA1B,UAA2B,QAAgB,EAAE,QAAgB;YACzD,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,QAAQ,CAAC;QAC7C,CAAC;QAEM,8CAA2B,GAAlC;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,0BAA0B,EAAE,IAAI,CAAC,CAAC;QAC/E,CAAC;QAEM,wCAAqB,GAA5B,UAA6B,YAAoB;YAE7C,gDAAgD;YAEhD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;gBAE/B,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,SAAS,CAAC;gBACxC,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC;gBACpC,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC;gBACpC,IAAI,CAAC,SAAS,CAAC,eAAe,GAAG,SAAS,CAAC;gBAE3C,IAAI,CAAC,SAAS,CAAC,uBAAuB,GAAG,EAAE,CAAC;gBAC5C,IAAI,CAAC,SAAS,CAAC,8BAA8B,GAAG,EAAE,CAAC;gBACnD,IAAI,CAAC,SAAS,CAAC,4BAA4B,GAAG,EAAE,CAAC;gBACjD,IAAI,CAAC,SAAS,CAAC,4BAA4B,GAAG,KAAK,CAAC;gBAEpD,qCAAiB,CAAC,0BAA0B,CAAC,IAAI,CAAC,SAAS,EACvD,YAAY,EACZ,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,oBAAoB,EACzB,IAAI,CAAC,oCAAoC,EACzC,IAAI,CAAC,2BAA2B,CAAC,CAAC;YAC1C,CAAC;QACL,CAAC;QAEM,kDAA+B,GAAtC,UAAuC,YAAoB;YAA3D,iBA+BC;YA7BG,IAAI,CAAC,SAAS,CAAC,eAAe,GAAG,SAAS,CAAC;YAC3C,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC;YACpC,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,SAAS,CAAC;YAExC,IAAI,CAAC,SAAS,CAAC,8BAA8B,GAAG,EAAE,CAAC;YACnD,IAAI,CAAC,SAAS,CAAC,uBAAuB,GAAG,EAAE,CAAC;YAE5C,qCAAiB,CAAC,4BAA4B,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,oCAAoC,CAAC,CAAC;YAE5J,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;iBAC5B,IAAI,CAAC;gBACF,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC7B,EAAE,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;wBAC7B,EAAE,CAAC,CAAC,KAAI,CAAC,oCAAoC,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BACzE,KAAI,CAAC,SAAS,CAAC,kDAAkD,GAAG,KAAK,CAAC;4BAE1E,qBAAS,CAAC,SAAS,CAAC;gCAChB,KAAI,CAAC,SAAS,CAAC,YAAY,GAAG,KAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC;4BACtE,CAAC,CAAC,CAAC;wBACP,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,KAAI,CAAC,SAAS,CAAC,kDAAkD,GAAG,IAAI,CAAC;wBAC7E,CAAC;oBACL,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,KAAI,CAAC,SAAS,CAAC,kDAAkD,GAAG,IAAI,CAAC;oBAC7E,CAAC;gBACL,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,KAAI,CAAC,SAAS,CAAC,kDAAkD,GAAG,KAAK,CAAC;gBAC9E,CAAC;YACL,CAAC,CAAC,CAAC;QACX,CAAC;QAEM,8BAAW,GAAlB,UAAmB,WAAmB;YAAtC,iBAwBC;YAtBG,EAAE,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC;YACX,CAAC;YAED,IAAI,CAAC,SAAS,CAAC,eAAe,GAAG,SAAS,CAAC;YAC3C,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC;YACpC,IAAI,CAAC,SAAS,CAAC,uBAAuB,GAAG,EAAE,CAAC;YAE5C,qCAAiB,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YAE9E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,SAAS,CAAC,sDAAsD,GAAG,KAAK,CAAC;gBAC9E,MAAM,CAAC;YACX,CAAC;YACD,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACtD,qBAAS,CAAC,SAAS,CAAC;oBAChB,KAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,KAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC;gBAC9D,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,SAAS,CAAC,sDAAsD,GAAG,KAAK,CAAC;YAClF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,SAAS,CAAC,sDAAsD,GAAG,IAAI,CAAC;YACjF,CAAC;QACL,CAAC;QAEM,kDAA+B,GAAtC,UAAuC,YAAoB;YAEvD,EAAE,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC;YACX,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC7B,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACnD,IAAI,CAAC,SAAS,CAAC,8CAA8C,GAAG,KAAK,CAAC;gBAC1E,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,CAAC,SAAS,CAAC,8CAA8C,GAAG,IAAI,CAAC;gBACzE,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,SAAS,CAAC,8CAA8C,GAAG,KAAK,CAAC;YAC1E,CAAC;YAED,IAAI,CAAC,SAAS,CAAC,eAAe,GAAG,SAAS,CAAC;YAE3C,qCAAiB,CAAC,oCAAoC,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACnJ,CAAC;QAED,sBAAW,wCAAkB;iBAA7B;gBACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;oBACjD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,IAAI,IAAI,CAAC,8BAA8B,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC5H,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;;;WAAA;QAED,wFAAwF;QACjF,0CAAuB,GAA9B;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;gBAE9B,IAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAAC;gBACxE,IAAI,kBAAkB,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,IAAI,EAAP,CAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBAClK,IAAI,CAAC,SAAS,CAAC,iBAAiB,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;gBAEhH,yBAAyB;gBACzB,4BAA4B;gBAC5B;;;;;;;;;;;;;;;;;;;qBAmBK;YACT,CAAC;QACL,CAAC;QAEM,qCAAkB,GAAzB;YAAA,iBAgBC;YAfG,mBAAmB;YACnB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iDAAiD,EAAE,CAAC,CAAC,CAAC;gBAC5D,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,iDAAiD,CAAC,CAAC;qBACxH,IAAI,CAAC,UAAC,MAAM;oBACT,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;wBACvB,iDAAiD;wBACjD,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,KAAI,CAAC,KAAK,EAAE,KAAI,CAAC,OAAO,CAAC;6BAClE,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;oBAC1B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC;gBACL,CAAC,CAAC,CAAC;YACX,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC;QACL,CAAC;QAEM,+CAA4B,GAAnC;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC;YACtE,CAAC;QACL,CAAC;QAEM,2CAAwB,GAA/B;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;gBACtD,IAAI,CAAC,4BAA4B,EAAE,CAAC;YACxC,CAAC;QACL,CAAC;QAEM,wCAAqB,GAA5B;YACI,IAAI,CAAC,kBAAkB,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,yBAAyB,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,IAAI,CAAC,CAAC,CAAC;QACrH,CAAC;QAEe,4BAAS,GAAzB;;;;;;;4BACI,IAAI,CAAC,4BAA4B,EAAE,CAAC;4BACpC,IAAI,CAAC,kBAAkB,EAAE,CAAC;4BACd,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAA;;4BAA/C,GAAG,GAAG,SAAyC;iCAEjD,CAAA,GAAG,IAAI,GAAG,CAAC,KAAK,CAAA,EAAhB,wBAAgB;4BAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;4BAClI,IAAI,CAAC,8BAA8B,EAAE,CAAC;4BACtC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,qDAAqD;4BAC3E,8BAA8B;4BAC9B,qCAAiB,CAAC,0BAA0B,CAAC,IAAI,CAAC,SAAS,EACvD,IAAI,CAAC,SAAS,CAAC,YAAY,EAC3B,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,oBAAoB,EACzB,IAAI,CAAC,oCAAoC,EACzC,IAAI,CAAC,2BAA2B,CAAC,CAAC;4BAEtC,qCAAiB,CAAC,4BAA4B,CAAC,IAAI,CAAC,SAAS,EACzD,IAAI,CAAC,2BAA2B,EAChC,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,oCAAoC,CAAC,CAAC;4BAE/C,qCAAiB,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;4BAC9E,qCAAiB,CAAC,oCAAoC,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;4BAC/I,IAAI,CAAC,YAAY,EAAE,CAAC;4BACpB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;4BAC/E,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;4BAC5B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;4BACrI,IAAI,CAAC,SAAS,CAAC,iBAAiB,GAAG,SAAS,CAAC;4BAC7C,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;4BAA/B,SAA+B,CAAC;4BAChC,IAAI,CAAC,uBAAuB,EAAE,CAAC;;;4BAEnC,qBAAS,CAAC,SAAS,CAAC;gCAChB,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,OAAO,KAAK,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;oCACrD,KAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,KAAI,CAAC,mBAAmB,CAAC,CAAC,mEAAmE;gCAC3H,CAAC;gCACD,KAAI,CAAC,cAAc,EAAE,CAAC;gCACtB,KAAI,CAAC,SAAS,CAAC,cAAc,GAAG,CAAC,KAAI,CAAC,SAAS,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC;gCAC5I,KAAI,CAAC,qBAAqB,EAAE,CAAC;4BACjC,CAAC,CAAC,CAAC;;;;;SACN;QAES,4BAAS,GAAnB;YAAA,iBAWC;YAVG,IAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,8BAA8B,CAAC,CAAC;YAElI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;iBAC5B,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAI,CAAC,KAAK,EAAE,IAAI,CAAC,EAA5C,CAA4C,CAAC;iBACxD,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,uBAAuB,CAAC,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAnD,CAAmD,CAAC;iBAC/D,IAAI,CAAC;gBACF,EAAE,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAChB,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,+CAAsB,CAAC,mBAAmB,EAAE,KAAI,CAAC,KAAK,CAAC,CAAC;gBAC1F,CAAC;YACL,CAAC,CAAC,CAAC;QACX,CAAC;QAES,6BAAU,GAApB;YAAA,iBAeC;YAdG,EAAE,CAAC,CAAC,mCAAgB,CAAC,gCAAgC,KAAK,YAAY,CAAC,CAAC,CAAC;gBACrE,mCAAgB,CAAC,qCAAqC,EAAE,CAAC;YAC7D,CAAC;YAED,IAAI,CAAC,4BAA4B,EAAE,CAAC;YAEpC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;iBACzD,IAAI,CAAC,UAAM,IAAI;;;;4BACZ,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;4BAC5F,IAAI,CAAC,aAAa,EAAE,CAAC;4BACrB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;4BAC3D,IAAI,CAAC,cAAc,EAAE,CAAC;4BACtB,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;4BAA/B,SAA+B,CAAC;;;;iBACnC,CAAC,CAAC;QACX,CAAC;QAED,mFAAmF;QACnF,mCAAmC;QAC3B,qCAAkB,GAA1B;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,SAAS,CAAC,4BAA4B,GAAG,KAAK,CAAC;gBACpD,IAAI,CAAC,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;gBACnC,IAAI,CAAC,SAAS,CAAC,oBAAoB,GAAG,EAAE,CAAC;gBACzC,IAAI,CAAC,SAAS,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBACrC,IAAI,CAAC,SAAS,CAAC,kDAAkD,GAAG,KAAK,CAAC;gBAC1E,IAAI,CAAC,SAAS,CAAC,sDAAsD,GAAG,KAAK,CAAC;gBAC9E,IAAI,CAAC,SAAS,CAAC,8CAA8C,GAAG,KAAK,CAAC;YAC1E,CAAC;QACL,CAAC;QAEO,yCAAsB,GAA9B,UAA+B,OAAoC,EAAE,aAAqB,EAAE,OAAe;YAA3G,iBAKC;YAJG,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,CAAC,mBAAmB,IAAI,OAAO,KAAK,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBAC1F,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,CAAC,CAAC,MAAM,EAAd,CAAc,CAAC,EAAhE,CAAgE,CAAC,CAAC;YACjG,CAAC;YACD,MAAM,CAAC,OAAO,CAAC;QACnB,CAAC;QAEO,0CAAuB,GAA/B,UAAgC,SAAiB;YAAjD,iBASC;YARG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC;iBACvD,IAAI,CAAC,UAAC,YAAY;gBACf,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACf,EAAE,CAAC,CAAC,SAAS,KAAK,KAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC;wBAClD,KAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,8BAA8B,EAAE,EAAE,CAAC,CAAC;oBAC1E,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;QACX,CAAC;QAEO,oEAAiD,GAAzD;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC5D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,oCAAoC,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;uBAChF,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,KAAK,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC;uBACrE,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,KAAK,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBACnE,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QAEO,sCAAmB,GAA3B;YAAA,iBAwDC;YAvDG,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC,CAAC;gBAC9C,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC7B,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;iBAChE,IAAI,CAAC,UAAC,QAAQ;gBACX,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACZ,KAAI,CAAC,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;oBACnC,KAAI,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAS,CAAC;oBAChD,KAAI,CAAC,SAAS,CAAC,gBAAgB,GAAG,SAAS,CAAC;oBAE5C,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;gBACD,MAAM,CAAC,KAAI,CAAC,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC;qBAC9D,IAAI,CAAC,UAAA,IAAI;oBACN,KAAI,CAAC,SAAS,CAAC,4BAA4B,GAAG,IAAI,CAAC;oBAEnD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;wBACR,KAAI,CAAC,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;wBACnC,KAAI,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAS,CAAC;wBAChD,KAAI,CAAC,SAAS,CAAC,gBAAgB,GAAG,SAAS,CAAC;wBAE5C,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;oBAC7B,CAAC;oBACD,KAAI,CAAC,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC;oBAClC,KAAI,CAAC,SAAS,CAAC,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC;oBAC5D,KAAI,CAAC,SAAS,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC;oBAEpD,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,KAAI,CAAC,oCAAoC,CAAC,OAAO,CAAC,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC/G,KAAI,CAAC,SAAS,CAAC,kDAAkD,GAAG,KAAK,CAAC;oBAE9E,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,KAAI,CAAC,SAAS,CAAC,kDAAkD,GAAG,IAAI,CAAC;oBAC7E,CAAC;oBAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAE7B,CAAC,CAAC;qBACD,KAAK,CAAC,UAAC,KAAoB;oBACxB,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC9C,KAAI,CAAC,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;oBACnC,KAAI,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAS,CAAC;oBAChD,KAAI,CAAC,SAAS,CAAC,gBAAgB,GAAG,SAAS,CAAC;oBAE5C,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC,CAAC,CAAC;YACX,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,KAAoB;gBACxB,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC9C,KAAI,CAAC,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;gBACnC,KAAI,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAS,CAAC;gBAChD,KAAI,CAAC,SAAS,CAAC,gBAAgB,GAAG,SAAS,CAAC;gBAE5C,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC7B,CAAC,CAAC,CAAC;QACX,CAAC;QAEO,qCAAkB,GAA1B;YACI,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,eAAe,CAAS,+BAA+B,CAAC,CAAC;YACpG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAS,eAAe,CAAC,CAAC;YACxE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,eAAe,CAAS,gBAAgB,CAAC,CAAC;YAC1E,IAAI,CAAC,oCAAoC,GAAG,IAAI,CAAC,eAAe,CAAS,qCAAqC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3H,IAAI,CAAC,oCAAoC,GAAG,IAAI,CAAC,eAAe,CAAS,qCAAqC,CAAC,CAAC;YAChH,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,eAAe,CAAS,4BAA4B,CAAC,CAAC;YAC9F,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAS,mBAAmB,CAAC,CAAC;YAC5E,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,eAAe,CAAS,6BAA6B,CAAC,CAAC;YAChG,IAAI,CAAC,iCAAiC,GAAG,IAAI,CAAC,eAAe,CAAS,kCAAkC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAS,mBAAmB,CAAC,CAAC;YAC3E,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,eAAe,CAAS,6BAA6B,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/G,CAAC;QAEO,2CAAwB,GAAhC;YAAA,iBAKC;YAJG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAC,mBAAmB;gBAC1F,KAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC,eAAe,CAAS,uBAAuB,CAAC,CAAC;gBAChG,KAAI,CAAC,wBAAwB,GAAG,mBAAmB,CAAC,eAAe,CAAS,sBAAsB,CAAC,CAAC;YACxG,CAAC,CAAC,CAAC;QACP,CAAC;QAEa,+BAAY,GAA1B;;;;;gCAEQ,qBAAM,OAAO,CAAC,GAAG,CAAC;gCACd,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE;gCACpC,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE;gCACpC,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE;gCACvC,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE;gCACvC,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;gCACnC,IAAI,CAAC,cAAc,EAAE;6BACxB,CAAC,EAAA;;4BARA,KACF,SAOE,EARC,OAAO,QAAA,EAAE,SAAS,QAAA,EAAE,YAAY,QAAA,EAAE,cAAc,QAAA,EAAE,QAAQ,QAAA,EAAE,wBAAwB,QAAA;4BAU3F,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,mCAAgB,CAAC,uBAAuB,CAAC,CAAC;4BAC7F,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,mCAAgB,CAAC,aAAa,CAAC,CAAC;4BACvF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,mCAAgB,CAAC,gBAAgB,EAAE,mCAAgB,CAAC,yBAAyB,CAAC,CAAC;4BAClJ,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,mCAAgB,CAAC,yBAAyB,EAAE,mCAAgB,CAAC,kCAAkC,CAAC,CAAC;4BACxK,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,mCAAgB,CAAC,YAAY,EAAE,mCAAgB,CAAC,qBAAqB,CAAC,CAAC;4BAClI,IAAI,CAAC,wBAAwB,GAAG,wBAAwB,CAAC;4BACzD,qBAAM,IAAI,CAAC,kCAAkC,EAAE,EAAA;;4BAA/C,SAA+C,CAAC;4BAChD,qBAAM,IAAI,CAAC,2BAA2B,EAAE,EAAA;;4BAAxC,SAAwC,CAAC;;;;;SAC5C;QAEO,8CAA2B,GAAnC;YAAA,iBAoBC;YAnBG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;gBACf,IAAI,CAAC,eAAe,CAAC,qBAAqB,EAAE;gBAC5C,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE;gBACvC,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;gBACnC,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAAE;gBAC9C,IAAI,CAAC,eAAe,CAAC,4BAA4B,EAAE;gBACnD,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE;aAC7C,CAAC,CAAC,IAAI,CAAC,UAAC,EAC+C;oBAD9C,qBAAa,EAAE,oBAAY,EAAE,gBAAQ,EAAE,4BAAoB,EAAE,4BAAoB,EAAE,uBAAe;gBAExG,KAAI,CAAC,oBAAoB,GAAG,yBAAW,CAAC,YAAY,CAAC,aAAa,EAAE,mCAAgB,CAAC,+BAA+B,CAAC,CAAC;gBACtH,KAAI,CAAC,mBAAmB,GAAG,yBAAW,CAAC,YAAY,CAAC,YAAY,EAAE,mCAAgB,CAAC,yBAAyB,CAAC,CAAC;gBAC9G,KAAI,CAAC,eAAe,GAAG,yBAAW,CAAC,YAAY,CAAC,QAAQ,EAAE,mCAAgB,CAAC,qBAAqB,CAAC,CAAC;gBAClG,KAAI,CAAC,2BAA2B,GAAG,oBAAoB,CAAC;gBACxD,KAAI,CAAC,2BAA2B,GAAG,oBAAoB,CAAC;gBACxD,KAAI,CAAC,sBAAsB,GAAG,eAAe,CAAC;gBAE9C,6BAA6B;gBAC7B,eAAe,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,EAArC,CAAqC,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC;QACP,CAAC;QAEa,qDAAkC,GAAhD;;;;;;gCACsB,qBAAM,IAAI,CAAC,eAAe,CAAC,iCAAiC,EAAE,EAAA;;4BAA5E,WAAW,GAAG,SAA8D;4BAChF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAA1D,CAA0D,CAAC,EAAE,mCAAgB,CAAC,kCAAkC,CAAC,CAAC;;;;;SAC1L;QAED,4FAA4F;QACpF,iCAAc,GAAtB;YAAA,iBAkCC;YAjCG,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC;iBACtE,SAAS,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,+BAA+B,CAAC,QAAQ,CAAC,EAA9C,CAA8C,CAAC,CAAC;YAC3E,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC;iBAC1E,SAAS,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAA1B,CAA0B,CAAC,CAAC;YACvD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC;iBACtE,SAAS,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,+BAA+B,CAAC,QAAQ,CAAC,EAA9C,CAA8C,CAAC,CAAC;YAC3E,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC;iBAC1E,SAAS,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,EAApC,CAAoC,CAAC,CAAC;YACjE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC;iBACpE,SAAS,CAAC,UAAC,QAAQ,EAAE,QAAQ,IAAK,OAAA,KAAI,CAAC,aAAa,EAAE,EAApB,CAAoB,CAAC,CAAC;YAC7D,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC;iBAC1E,SAAS,CAAC,UAAC,QAAQ,EAAE,QAAQ,IAAK,OAAA,KAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAA5C,CAA4C,CAAC,CAAC;YACrF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,iBAAiB,EAAE,EAAxB,CAAwB,CAAC,CAAC;YACxH,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,wBAAwB,EAAE,EAA/B,CAA+B,CAAC,CAAC;YACtI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAgB,CAAC;iBAC5E,SAAS,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,qBAAqB,EAAE,EAA5B,CAA4B,CAAC,CAAC;YACzD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;QAEO,wCAAqB,GAA7B;YACI,IAAI,CAAC,4BAA4B,EAAE,CAAC;YAEpC,EAAE,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,CAAC;gBACvC,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;YACxC,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,4BAA4B,CAAC,OAAO,EAAE,CAAC;gBAC5C,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC;YAC7C,CAAC;QACL,CAAC;QAEO,+CAA4B,GAApC;YACI,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAE,EAAX,CAAW,CAAC,CAAC;YAClD,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QACjC,CAAC;QAEO,uCAAoB,GAA5B;YAAA,iBA+EC;YA7EG,IAAM,sBAAsB,GAAG,cAAM,OAAA,CAAC,KAAI,CAAC,SAAS,CAAC,oBAAoB,IAAI,CAAC,KAAI,CAAC,SAAS,CAAC,0BAA0B,EAAlF,CAAkF,CAAC;YAExH,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;gBACxB;oBACI,QAAQ,EAAE,0BAA0B;oBACpC,SAAS,EAAE,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,cAAc,KAAK,SAAS,IAAI,CAAC,KAAI,CAAC,kBAAkB,IAAI,sBAAsB,EAAE,CAAC,EAApG,CAAoG;oBACrH,MAAM,EAAE;wBACJ;4BACI,IAAI,EAAE,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,cAAc,IAAI,KAAI,CAAC,SAAS,CAAC,YAAY,EAA5D,CAA4D;4BACxE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC;yBAClD;qBACJ;iBACJ;gBACD,AAIK,yBAJoB;gBACzB;;;qBAGK;gBACL;oBACI,QAAQ,EAAE,sBAAsB;oBAChC,SAAS,EAAE,cAAM,OAAA,sBAAsB,EAAE,EAAxB,CAAwB;iBAC5C;gBACD;oBACI,QAAQ,EAAE,kBAAkB;oBAC5B,SAAS,EAAE,cAAM,OAAA,sBAAsB,EAAE,EAAxB,CAAwB;oBACzC,MAAM,EAAE;wBACJ;4BACI,IAAI,EAAE,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,MAAM,KAAK,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAhE,CAAgE;4BAC5E,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,0BAA0B,CAAC;yBACrD;qBACJ;iBACJ;gBACD;oBACI,QAAQ,EAAE,oBAAoB;oBAC9B,SAAS,EAAE,cAAM,OAAA,sBAAsB,EAAE,EAAxB,CAAwB;iBAC5C;gBACD;oBACI,QAAQ,EAAE,yBAAyB;oBACnC,SAAS,EAAE,cAAM,OAAA,sBAAsB,EAAE,EAAxB,CAAwB;iBAC5C;gBACD;oBACI,QAAQ,EAAE,wBAAwB;oBAClC,SAAS,EAAE,cAAM,OAAA,sBAAsB,EAAE,EAAxB,CAAwB;iBAC5C;gBACD;oBACI,QAAQ,EAAE,yBAAyB;oBACnC,SAAS,EAAE,cAAM,OAAA,KAAI,CAAC,kBAAkB,IAAI,sBAAsB,EAAE,EAAnD,CAAmD;iBACvE;gBACD;oBACI,QAAQ,EAAE,sBAAsB;oBAChC,SAAS,EAAE,cAAM,OAAA,KAAI,CAAC,kBAAkB,IAAI,sBAAsB,EAAE,EAAnD,CAAmD;iBACvE;gBACD;oBACI,QAAQ,EAAE,yBAAyB;oBACnC,SAAS,EAAE,cAAM,OAAA,sBAAsB,EAAE,EAAxB,CAAwB;iBAC5C;gBACD;oBACI,QAAQ,EAAE,wBAAwB;oBAClC,SAAS,EAAE,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,4BAA4B,IAAI,sBAAsB,EAAE,EAAvE,CAAuE;iBAC3F;gBACD;oBACI,QAAQ,EAAE,oBAAoB;oBAC9B,SAAS,EAAE,cAAM,OAAA,CAAC,KAAI,CAAC,SAAS,CAAC,4BAA4B,IAAI,KAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,MAAM,GAAG,CAAC,CAAC;2BAC5G,sBAAsB,EAAE,EADd,CACc;iBAClC;gBACD;oBACI,QAAQ,EAAE,2BAA2B;oBACrC,SAAS,EAAE,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,8BAA8B,CAAC,MAAM,GAAG,CAAC,IAAI,sBAAsB,EAAE,EAApF,CAAoF;iBACxG;gBACD;oBACI,QAAQ,EAAE,8BAA8B;oBACxC,SAAS,EAAE,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,6BAA6B,IAAI,sBAAsB,EAAE,EAAxE,CAAwE;iBAC5F;gBACD;oBACI,QAAQ,EAAE,sBAAsB,EAAE,SAAS,EAAE,cAAM,OAAA,CAAC,KAAI,CAAC,SAAS,CAAC,0BAA0B,EAA1C,CAA0C;iBAChG;aACJ,CAAC,CAAC;QACP,CAAC;QAEO,kCAAe,GAAvB,UAAwB,IAAU;YAAlC,iBAMC;YALG,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC;gBAChC,IAAI,CAAC,SAAS,GAAG,KAAI,CAAC,iBAAiB,EAAE,CAAC;gBAC1C,KAAI,CAAC,SAAS,CAAC,kBAAkB,GAAG,IAAI,CAAC,WAAW,CAAC;gBACrD,KAAI,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;YACtD,CAAC,CAAC,CAAC;QACP,CAAC;QAEa,mCAAgB,GAA9B;;;;;;gCACgB,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAA;;4BAA/C,GAAG,GAAG,SAAyC;iCACjD,CAAA,GAAG,IAAI,GAAG,CAAC,KAAK,KAAK,mBAAQ,CAAC,OAAO,CAAA,EAArC,wBAAqC;4BACjC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,KAAK,KAAI,CAAC,OAAO,EAArB,CAAqB,CAAC,CAAC;4BACtD,kCAAkC;4BAClC,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;4BACtE,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;4BAChD,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;4BACpD,qBAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA;;4BAA/B,SAA+B,CAAC;;;;;;SAEvC;QAEa,qCAAkB,GAAhC;;;;;;;4BACI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,KAAK,mBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gCACzE,MAAM,gBAAC;4BACX,CAAC;4BAEK,iBAAiB,GAAG,CAAC,+CAAsB,CAAC,oBAAoB,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;4BAC5G,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK;iCACzC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,EAAE,KAAK,KAAI,CAAC,OAAO;mCAC/B,CAAC,+CAAsB,CAAC,oBAAoB,CAAC,KAAI,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,EADtE,CACsE,CAAC,CAAC;4BAKpF,mBAAmB,GAAG,iBAAiB;mCACtC,+CAAsB,CAAC,mBAAmB,CAAE,mCAAmC;gCAC9E,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,EAAE,KAAK,KAAI,CAAC,OAAO,EAAxB,CAAwB,CAAC,CAAC,MAAM,CAAC,2CAA2C;iCACjH;mCACE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,EAAE,KAAK,KAAI,CAAC,OAAO,EAAxB,CAAwB,CAAC,CAAC;4BAEnE,IAAI,CAAC,sBAAsB,GAAG,CAAC,iBAAiB;mCACzC,iBAAiB;mCACjB,mBAAmB,CAAC;4BAIrB,sBAAsB,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,KAAK,OAAO,CAAC;iCAEzE,CAAA,iBAAiB,IAAI,sBAAsB,CAAA,EAA3C,wBAA2C;4BAEnB,qBAAM,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,EAAA;;4BAA9F,eAAe,GAAG,SAA4E;4BACpG,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,IAAI,qBAAS,CAAC,eAAe,CAAC,SAAS,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC;4BAC5F,IAAI,CAAC,SAAS,CAAC,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC;4BAC3D,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,eAAe,CAAC,cAAc,CAAC;;;;;;SAEtE;QAEO,iDAA8B,GAAtC;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,KAAK,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,KAAK,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAC7G,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC;YACxC,CAAC;QACL,CAAC;QAv0BQ,QAAQ;YAFpB,0BAAM,CAAC,+BAAc,EAAE,uBAAU,EAAE,iCAAe,EAAE,2BAAY,EAAE,yBAAW,EAAE,0CAAe,EAAE,8BAAa,EAC1G,qCAAiB,EAAE,yCAAmB,EAAE,+BAAa,EAAE,yBAAW,EAAE,iCAAe,CAAC;qFAqD/D,0CAAe;gBACjB,8BAAa,kBAGb,+BAAa;WAxDvB,QAAQ,CAw0BpB;QAAD,eAAC;KAx0BD,AAw0BC,CAx0B6B,qCAAiB,GAw0B9C;IAx0BY,4BAAQ","file":"taskItem.js","sourcesContent":["/// <reference path=\"./../../../../../typings/app.d.ts\" />\n\nimport { BindingEngine } from \"aurelia-binding\";\nimport { inject } from \"aurelia-framework\";\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\nimport { Task } from \"../../../business/models/task\";\nimport { CatalogService } from \"../.././../business/services/catalogService\";\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\nimport { JobService } from \"../../../business/services/jobService\";\nimport { ITaskService } from \"../../../business/services/interfaces/ITaskService\";\nimport { TaskService } from \"../../../business/services/taskService\";\nimport { EditableViewModel } from \"../../models/editableViewModel\";\nimport { ButtonListItem } from \"../../../../common/ui/elements/models/buttonListItem\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\nimport { ValidationService } from \"../../../business/services/validationService\";\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\nimport { Redirect } from \"aurelia-router\";\nimport { EngineerService } from \"../../../business/services/engineerService\";\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { Threading } from \"../../../../common/core/threading\";\nimport { IPartService } from \"../../../business/services/interfaces/IPartService\";\nimport { PartService } from \"../../../business/services/partService\";\nimport { ChargeServiceConstants } from \"../../../business/services/constants/chargeServiceConstants\";\nimport { IJcJobCode } from \"../../../business/models/reference/IJcJobCode\";\nimport { IActivityCmpnentVstStatus } from \"../../../business/models/reference/IActivityCmpnentVstStatus\";\nimport { IChirpCode } from \"../../../business/models/reference/IChirpCode\";\nimport { CatalogConstants } from \"../../../business/services/constants/catalogConstants\";\nimport { IVisitActivityCode } from \"../../../business/models/reference/IVisitActivityCode\";\nimport { IProductGroup } from \"../../../business/models/reference/IProductGroup\";\nimport { IPartType } from \"../../../business/models/reference/IPartType\";\nimport { IPtFac } from \"../../../business/models/reference/IPtFac\";\nimport { IVisitActivityFaultActionCode } from \"../../../business/models/reference/IVisitActivityFaultActionCode\";\nimport { IFaultActionCode } from \"../../../business/models/reference/IFaultActionCode\";\nimport { ArrayHelper } from \"../../../../common/core/arrayHelper\";\nimport { TaskConstants } from \"../../constants/taskConstants\";\nimport { DataStateSummary } from \"../../../business/models/dataStateSummary\";\nimport { Job } from \"../../../business/models/job\";\nimport { JobServiceConstants } from \"../../../business/services/constants/jobServiceConstants\";\nimport { JobState } from \"../../../business/models/jobState\";\nimport { BaseException } from \"../../../../common/core/models/baseException\";\nimport { TaskBusinessRuleHelper } from \"../../../business/models/businessRules/taskBusinessRuleHelper\";\nimport { TaskItemViewModel } from \"./viewModels/taskItemViewModel\";\nimport { TaskItemFactory } from \"../../factories/taskItemFactory\";\nimport { ITaskItemFactory } from \"../../factories/interfaces/ITaskItemFactory\";\nimport { TimeRange } from \"../../../../common/ui/elements/models/timeRange\";\n\n@inject(CatalogService, JobService, EngineerService, LabelService, TaskService, EventAggregator, DialogService,\n    ValidationService, BusinessRuleService, BindingEngine, PartService, TaskItemFactory)\nexport class TaskItem extends EditableViewModel {\n\n    public viewModel: TaskItemViewModel;\n\n    public intervalInMinutes: number;\n    public jobStatusesCatalog: IActivityCmpnentVstStatus[];\n    public jobCodesCatalog: IJcJobCode[];\n    public chirpCodesCatalog: IChirpCode[];\n    public visitActivityCatalog: IVisitActivityCode[];\n    public productGroupCatalog: IProductGroup[];\n    public partTypeCatalog: IPartType[];\n    public partTypeFaultActLinkCatalog: IPtFac[];\n    public visitActFaultActLinkCatalog: IVisitActivityFaultActionCode[];\n    public faultActionCodeCatalog: IFaultActionCode[];\n    public adviceResultLookup: ButtonListItem[];\n    public adviceCategoryLookup: ButtonListItem[];\n    public workedOnLookup: ButtonListItem[];\n    public isPartLJReportableLookup: ButtonListItem[];\n    public disableTimeRangePicker: boolean;\n    public totalChargableTime: number;\n\n    private _faultMap: { [code: string]: IFaultActionCode };\n\n    private _taskService: ITaskService;\n    private _partService: IPartService;\n    private _taskItemFactory: ITaskItemFactory;\n\n    private _adviceResultsThatNeedCategory: string;\n\n    // business rule properties\n    private _firstVisitJobCode: string;\n    private _firstVisitTaskCode: string;\n    private _visitCodesProductGroupPartsRequired: string[];\n    private _claimRejNotCoveredVisitCodesPattern: string;\n    private _workedOnClaimRejNotCovered: string;\n    private _taskSubscriptions: Subscription[];\n    private _bindingEngine: BindingEngine;\n    private _taskUpdateSubscription: Subscription;\n    private _jobStateChangedSubscription: Subscription;\n    private _taskStatusDoToday: string;\n    private _partsRequiredInBasketStatus: string;\n    private _instaPremAppliance: string;\n    private _annualServiceActionType: string;\n    private _taskId: string;\n    private _insAnnualServiceActivityStatuses: string[];\n    private _filteredOutActivityStatuses: string[];\n\n    constructor(catalogService: ICatalogService,\n        jobService: IJobService,\n        engineerService: IEngineerService,\n        labelService: ILabelService,\n        taskService: ITaskService,\n        eventAggregator: EventAggregator,\n        dialogService: DialogService,\n        validationService: IValidationService,\n        businessRulesService: IBusinessRuleService,\n        bindingEngine: BindingEngine,\n        partService: IPartService,\n        taskItemFactory: ITaskItemFactory) {\n\n        super(jobService, engineerService, labelService, eventAggregator, dialogService, validationService, businessRulesService, catalogService);\n\n        this._partService = partService;\n        this._taskItemFactory = taskItemFactory;\n\n        this.adviceResultLookup = [];\n        this.adviceCategoryLookup = [];\n        this.workedOnLookup = [];\n        this._faultMap = {};\n        this._bindingEngine = bindingEngine;\n        this._taskSubscriptions = [];\n        this._taskService = taskService;\n        this._taskUpdateSubscription = null;\n        this._jobStateChangedSubscription = null;\n        this._filteredOutActivityStatuses = [];\n        this.totalChargableTime = 0;\n    }\n\n    // fix status not binding when navigating to this vm from a sibling route\n    public bind(bindingContext: any, overrideContext: any): void {\n        if (!this.viewModel) {\n            this.viewModel = <TaskItemViewModel>{};\n        }\n        this.viewModel.status = \"\";\n        this.viewModel.workedOnCode = \"\";\n        this.viewModel.chargeableTime = 0;\n        this.viewModel.taskTime = undefined;\n    }\n\n    public canActivateAsync(...rest: any[]): Promise<boolean | Redirect> {\n        if (rest && rest[0] && rest[0].jobId && rest[0].taskId) {\n            return this._jobService.getJob(rest[0].jobId)\n                .then(job => {\n                    let taskId = rest[0].taskId;\n                    let jobId = rest[0].jobId;\n                    let task = Job.getTasksAndCompletedTasks(job).find(t => t.id === taskId);\n                    if (!task.isMiddlewareDoTodayTask) {\n                        return new Redirect(\"#/customers/to-do/\" + jobId + \"/activities/\" + taskId + \"/previous-activities\");\n                    }\n                    return true;\n                });\n        }\n        return Promise.resolve(false);\n    }\n\n    public activateAsync(params: { jobId: string, taskId: string }): Promise<void> {\n        this._taskId = params.taskId;\n        this.jobId = params.jobId;\n\n        this._taskUpdateSubscription = this._eventAggregator.subscribe(TaskConstants.UPDATE_DATA_STATE, (task: Task) => {\n            this.viewModel.applianceType = task.applianceType;\n            this.updateDataState(task);\n        });\n\n        this._jobStateChangedSubscription = this._eventAggregator.subscribe(JobServiceConstants.JOB_STATE_CHANGED, () => this.jobStatusChanged());\n\n        if (this._isCleanInstance) {\n            return this.loadBusinessRules()\n                .then(() => this.buildBusinessRules())\n                .then(() => this.buildCustomBusinessRules())\n                .then(() => this.buildValidationRules())\n                .then(() => this.loadCatalogs())\n                .then(() => this.load())\n                .then(() => {\n                    this.showContent();\n                });\n        } else {\n            return this.loadActivityComponentVisitStatuses()\n                .then(() => this.buildValidationRules())\n                .then(() => {\n                    if (this.viewModel) {\n                        this._taskItemFactory.clearViewModel(this.viewModel, undefined, undefined, true);\n                    }\n                    return this.load();\n                });\n        }\n    }\n\n    public deactivateAsync(): Promise<void> {\n        this.clearAllSubscriptions();\n        return Promise.resolve();\n    }\n\n    public workedOnCodeChanged(newValue: string, oldValue: string): void {\n        if (newValue) {\n            this.updateVisitActivities(newValue);\n        }\n    }\n\n    public activityChanged(newValue: string, oldValue: string): void {\n        if (newValue) {\n            this.updateFaultCodesBasedOnActivity(newValue);\n        }\n    }\n\n    public productGroupChanged(newValue: string, oldValue: string): void {\n        if (newValue) {\n            this.updateParts(newValue);\n        }\n    }\n\n    public partTypeChanged(newValue: string, oldValue: string): void {\n        if (newValue) {\n            this.updateFaultCodesBasedOnPartType(newValue);\n        }\n    }\n\n    public async statusChanged(): Promise<void> {\n        this.viewModel.isInCancellingStatus = !TaskBusinessRuleHelper.isLiveTask(this.businessRules, this.viewModel.status);\n        await this.setTimeRangePicker();\n    }\n\n    public deselectChirpCode(chirpCode: IChirpCode): void {\n        let idx: number = this.viewModel.chirpCodes.indexOf(chirpCode);\n        if (idx >= 0) {\n            this.viewModel.chirpCodes.splice(idx, 1);\n            this.viewModel.chirpCodes = this.viewModel.chirpCodes.slice(0);\n            this.updateUnused();\n            this.calculateCharactersLeft();\n        }\n    }\n\n    public chirpCodesChanged(): void {\n        this.calculateCharactersLeft();\n    }\n\n    public selectedChirpCodeChanged(): void {\n        if (!this.viewModel.chirpCodes) {\n            this.viewModel.chirpCodes = [];\n        }\n        if (this.viewModel.selectedChirpCode && this.viewModel.chirpCodes.findIndex(cc => cc.code === this.viewModel.selectedChirpCode) === -1) {\n            this.viewModel.chirpCodes.push(this.viewModel.unusedChirpCodes.find(cc => cc.code === this.viewModel.selectedChirpCode));\n            this.viewModel.chirpCodes = this.viewModel.chirpCodes.slice(0);\n            this.updateUnused();\n            this.calculateCharactersLeft();\n        }\n        // df_1772 revalidate all the rules.\n        this.validateAllRules();\n    }\n\n    public updateUnused(): void {\n        this.viewModel.unusedChirpCodes = this.viewModel.chirpCodes ?\n            this.chirpCodesCatalog.filter(cc => this.viewModel.chirpCodes.findIndex(used => used.code === cc.code) === -1) :\n            this.chirpCodesCatalog.slice(0);\n    }\n\n    public workDurationChanged(newValue: number, oldValue: number): void {\n        this.viewModel.chargeableTime = newValue;\n    }\n\n    public displayPartsRequiredMessage(): string {\n        return this.showDanger(\"Parts Required\", \"Parts required in basket\", null);\n    }\n\n    public updateVisitActivities(workedOnCode: string): void {\n\n        // no point resetting if firstVisit  already set\n\n        if (!this.viewModel.isFirstVisit) {\n\n            this.viewModel.productGroup = undefined;\n            this.viewModel.activity = undefined;\n            this.viewModel.partType = undefined;\n            this.viewModel.faultActionCode = undefined;\n\n            this.viewModel.partTypeFilteredCatalog = [];\n            this.viewModel.faultActionCodeFilteredCatalog = [];\n            this.viewModel.visitActivityFilteredCatalog = [];\n            this.viewModel.showProductGroupAndPartTypes = false;\n\n            TaskItemViewModel.filterVisitActivityCatalog(this.viewModel,\n                workedOnCode,\n                this._firstVisitJobCode,\n                this._firstVisitTaskCode,\n                this.visitActivityCatalog,\n                this._claimRejNotCoveredVisitCodesPattern,\n                this._workedOnClaimRejNotCovered);\n        }\n    }\n\n    public updateFaultCodesBasedOnActivity(activityCode: string): Promise<void> {\n\n        this.viewModel.faultActionCode = undefined;\n        this.viewModel.partType = undefined;\n        this.viewModel.productGroup = undefined;\n\n        this.viewModel.faultActionCodeFilteredCatalog = [];\n        this.viewModel.partTypeFilteredCatalog = [];\n\n        TaskItemViewModel.filterFaultActionCodeCatalog(this.viewModel, this.visitActFaultActLinkCatalog, this._faultMap, this._visitCodesProductGroupPartsRequired);\n\n        return this.loadMainPartDetails()\n            .then(() => {\n                if (this.viewModel.hasMainPart) {\n                    if (activityCode !== undefined) {\n                        if (this._visitCodesProductGroupPartsRequired.indexOf(activityCode) !== -1) {\n                            this.viewModel.showMainPartSelectedWithInvalidActivityTypeMessage = false;\n\n                            Threading.nextCycle(() => {\n                                this.viewModel.productGroup = this.viewModel.mainPartProductGroup;\n                            });\n                        } else {\n                            this.viewModel.showMainPartSelectedWithInvalidActivityTypeMessage = true;\n                        }\n                    } else {\n                        this.viewModel.showMainPartSelectedWithInvalidActivityTypeMessage = true;\n                    }\n                } else {\n                    this.viewModel.showMainPartSelectedWithInvalidActivityTypeMessage = false;\n                }\n            });\n    }\n\n    public updateParts(productCode: string): void {\n\n        if (productCode === undefined) {\n            return;\n        }\n\n        this.viewModel.faultActionCode = undefined;\n        this.viewModel.partType = undefined;\n        this.viewModel.partTypeFilteredCatalog = [];\n\n        TaskItemViewModel.filterPartTypeCatalog(this.viewModel, this.partTypeCatalog);\n\n        if (!this.viewModel.hasMainPart) {\n            this.viewModel.showMainPartSelectedWithInvalidProductGroupTypeMessage = false;\n            return;\n        }\n        if (productCode === this.viewModel.mainPartProductGroup) {\n            Threading.nextCycle(() => {\n                this.viewModel.partType = this.viewModel.mainPartPartType;\n            });\n            this.viewModel.showMainPartSelectedWithInvalidProductGroupTypeMessage = false;\n        } else {\n            this.viewModel.showMainPartSelectedWithInvalidProductGroupTypeMessage = true;\n        }\n    }\n\n    public updateFaultCodesBasedOnPartType(partTypeCode: string): void {\n\n        if (partTypeCode === undefined) {\n            return;\n        }\n\n        if (this.viewModel.hasMainPart) {\n            if (partTypeCode === this.viewModel.mainPartPartType) {\n                this.viewModel.showMainPartSelectedWithInvalidPartTypeMessage = false;\n            } else {\n                this.viewModel.showMainPartSelectedWithInvalidPartTypeMessage = true;\n            }\n        } else {\n            this.viewModel.showMainPartSelectedWithInvalidPartTypeMessage = false;\n        }\n\n        this.viewModel.faultActionCode = undefined;\n\n        TaskItemViewModel.filterFaultActionCodeBasedOnPartType(this.viewModel, this.partTypeFaultActLinkCatalog, this.partTypeCatalog, this._faultMap);\n    }\n\n    public get showAdviceCategory(): boolean {\n        if (this.viewModel && this.viewModel.adviceOutcome) {\n            return this.viewModel.adviceOutcome && this._adviceResultsThatNeedCategory.indexOf(this.viewModel.adviceOutcome) !== -1;\n        }\n        return false;\n    }\n\n    // space needs to be between each chirp codes and between chirp code and freetext report\n    public calculateCharactersLeft(): void {\n        if (this.getValidationEnabled()) {\n\n            let maxChars = this.getValidationRule(\"viewModel.taskReport\").maxLength;\n            let selectedChirpCodes = (this.viewModel.chirpCodes && this.viewModel.chirpCodes.length > 0) ? this.viewModel.chirpCodes.map(cc => cc.code).join(\" \") : undefined;\n            this.viewModel.charactersLeftNum = (selectedChirpCodes) ? maxChars - (selectedChirpCodes.length + 1) : maxChars;\n\n            // commented to fix 16843\n            // this.combinedReport = \"\";\n            /* if (this.chirpCodes && this.chirpCodes.length > 0) {\n             this.combinedReport += this.chirpCodes.map(cc => cc.code).join(\"\");\n             }\n\n             if (this.taskReport) {\n             this.combinedReport += this.taskReport;\n             }\n\n             this.charactersLeftNum = maxChars - this.combinedReport.length;\n\n             this.charactersLeftClass = \"\";\n             this.charactersLeft = \"\";\n\n             if (this.charactersLeftNum >= 0) {\n             this.charactersLeft = `${this.charactersLeftNum} characters left`;\n             this.charactersLeftClass = \"valid\";\n             } else if (this.charactersLeftNum < 0) {\n             this.charactersLeft = `${Math.abs(this.charactersLeftNum)} characters too many`;\n             this.charactersLeftClass = \"invalid\";\n             } */\n        }\n    }\n\n    public canDeactivateAsync(): Promise<boolean> {\n        // ask the question\n        if (!this.isValidActivityProductGroupAndPartTypeForMainPart()) {\n            return this.showConfirmation(this.getLabel(\"confirmation\"), this.getLabel(\"incorrectActivityProductGroupOrPartTypeQuestion\"))\n                .then((result) => {\n                    if (!result.wasCancelled) {\n                        // need to reset the main part flag for this task\n                        return this._partService.clearMainPartForTask(this.jobId, this._taskId)\n                            .then(() => true);\n                    } else {\n                        return false;\n                    }\n                });\n        } else {\n            return Promise.resolve(true);\n        }\n    }\n\n    public loadProductGroupFromMainPart(): void {\n        if (this.viewModel.hasMainPart) {\n            this.viewModel.productGroup = this.viewModel.mainPartProductGroup;\n        }\n    }\n\n    public loadPartTypeFromMainPart(): void {\n        if (this.viewModel.hasMainPart) {\n            this.updateParts(this.viewModel.mainPartProductGroup);\n            this.loadProductGroupFromMainPart();\n        }\n    }\n\n    public chargeableTimeChanged(): void {\n        this.totalChargableTime = (this.viewModel.totalPreviousWorkDuration || 0) + (this.viewModel.chargeableTime || 0);\n    }\n\n    protected async loadModel(): Promise<void> {\n        this.clearObservableSubscriptions();\n        this.resetMainPartFlags();\n        const job = await this._jobService.getJob(this.jobId);\n\n        if (job && job.tasks) {\n            this.viewModel = this._taskItemFactory.createTaskItemViewModel(this._taskId, job, this.intervalInMinutes, this.chirpCodesCatalog);\n            this.updateActivityIfJobTypeChanged();\n            this.statusChanged(); // todo: when this is awaited then a red error occurs\n            // initialise activity changed\n            TaskItemViewModel.filterVisitActivityCatalog(this.viewModel,\n                this.viewModel.workedOnCode,\n                this._firstVisitJobCode,\n                this._firstVisitTaskCode,\n                this.visitActivityCatalog,\n                this._claimRejNotCoveredVisitCodesPattern,\n                this._workedOnClaimRejNotCovered);\n\n            TaskItemViewModel.filterFaultActionCodeCatalog(this.viewModel,\n                this.visitActFaultActLinkCatalog,\n                this._faultMap,\n                this._visitCodesProductGroupPartsRequired);\n\n            TaskItemViewModel.filterPartTypeCatalog(this.viewModel, this.partTypeCatalog);\n            TaskItemViewModel.filterFaultActionCodeBasedOnPartType(this.viewModel, this.partTypeFaultActLinkCatalog, this.partTypeCatalog, this._faultMap);\n            this.updateUnused();\n            this.setInitialDataState(this.viewModel.dataStateId, this.viewModel.dataState);\n            this.validationToggle(true);\n            this.jobStatusesCatalog = this.filterActivityStatuses(this.jobStatusesCatalog, this.viewModel.applianceType, this.viewModel.jobType);\n            this.viewModel.selectedChirpCode = undefined;\n            await this.setTimeRangePicker();\n            this.calculateCharactersLeft();\n        }\n        Threading.nextCycle(() => {\n            if (this.viewModel.jobType === this._firstVisitJobCode) {\n                this.viewModel.activity = this._firstVisitTaskCode; // this is required for fresh job with undefined workedOnCode, etc.\n            }\n            this.setObservables();\n            this.viewModel.chargeableTime = (this.viewModel.chargeableTime !== undefined) ? this.viewModel.chargeableTime : this.viewModel.workDuration;\n            this.chargeableTimeChanged();\n        });\n    }\n\n    protected saveModel(): Promise<void> {\n        const task = this._taskItemFactory.createTaskItemBusinessModel(this.viewModel, this._taskId, this._adviceResultsThatNeedCategory);\n\n        return this.updateDataState(task)\n            .then(() => this._taskService.saveTask(this.jobId, task))\n            .then(() => this.setPartsRequiredForTask(this.viewModel.status))\n            .then(() => {\n                if (this._isDirty) {\n                    this._eventAggregator.publish(ChargeServiceConstants.CHARGE_UPDATE_START, this.jobId);\n                }\n            });\n    }\n\n    protected clearModel(): Promise<void> {\n        if (DataStateSummary.dataStateCompletionOverrideGroup === \"activities\") {\n            DataStateSummary.clearDataStateCompletionOverrideGroup();\n        }\n\n        this.clearObservableSubscriptions();\n\n        return this._taskService.getTaskItem(this.jobId, this._taskId)\n            .then(async task => {\n                this._taskItemFactory.clearViewModel(this.viewModel, task, this._firstVisitTaskCode, false);\n                this.statusChanged();\n                this.setInitialDataState(task.dataStateId, task.dataState);\n                this.setObservables();\n                await this.setTimeRangePicker();\n            });\n    }\n\n    // this is needed becase the next and previous buttons dont hit the constructor and\n    // as such the values are not reset\n    private resetMainPartFlags(): void {\n        if (this.viewModel) {\n            this.viewModel.mainPartInformationRetrieved = false;\n            this.viewModel.hasMainPart = false;\n            this.viewModel.mainPartProductGroup = \"\";\n            this.viewModel.mainPartPartType = \"\";\n            this.viewModel.showMainPartSelectedWithInvalidActivityTypeMessage = false;\n            this.viewModel.showMainPartSelectedWithInvalidProductGroupTypeMessage = false;\n            this.viewModel.showMainPartSelectedWithInvalidPartTypeMessage = false;\n        }\n    }\n\n    private filterActivityStatuses(catalog: IActivityCmpnentVstStatus[], applianceType: string, jobType: string): IActivityCmpnentVstStatus[] {\n        if (applianceType === this._instaPremAppliance && jobType === this._annualServiceActionType) {\n            return catalog.filter(x => this._insAnnualServiceActivityStatuses.some(y => y === x.status));\n        }\n        return catalog;\n    }\n\n    private setPartsRequiredForTask(newStatus: string): Promise<void> {\n        return this._partService.setPartsRequiredForTask(this.jobId)\n            .then((partsMessage) => {\n                if (partsMessage) {\n                    if (newStatus === this._partsRequiredInBasketStatus) {\n                        this.showDanger(\"Parts Required\", \"Parts in basket are required\", \"\");\n                    }\n                }\n            });\n    }\n\n    private isValidActivityProductGroupAndPartTypeForMainPart(): boolean {\n        if (this.viewModel.hasMainPart && this.viewModel.workedOnCode) {\n            if ((this._visitCodesProductGroupPartsRequired.indexOf(this.viewModel.activity) === -1)\n                || (this.viewModel.productGroup !== this.viewModel.mainPartProductGroup)\n                || (this.viewModel.partType !== this.viewModel.mainPartPartType)) {\n                return false;\n            } else {\n                return true;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    private loadMainPartDetails(): Promise<void> {\n        if (this.viewModel.mainPartInformationRetrieved) {\n            return Promise.resolve();\n        }\n\n        return this._partService.getMainPartForTask(this.jobId, this._taskId)\n            .then((mainPart) => {\n                if (!mainPart) {\n                    this.viewModel.hasMainPart = false;\n                    this.viewModel.mainPartProductGroup = undefined;\n                    this.viewModel.mainPartPartType = undefined;\n\n                    return Promise.resolve();\n                }\n                return this._catalogService.getGoodsType(mainPart.stockReferenceId)\n                    .then(part => {\n                        this.viewModel.mainPartInformationRetrieved = true;\n\n                        if (!part) {\n                            this.viewModel.hasMainPart = false;\n                            this.viewModel.mainPartProductGroup = undefined;\n                            this.viewModel.mainPartPartType = undefined;\n\n                            return Promise.resolve();\n                        }\n                        this.viewModel.hasMainPart = true;\n                        this.viewModel.mainPartProductGroup = part.productGroupCode;\n                        this.viewModel.mainPartPartType = part.partTypeCode;\n\n                        if (this.viewModel.activity && this._visitCodesProductGroupPartsRequired.indexOf(this.viewModel.activity) !== -1) {\n                            this.viewModel.showMainPartSelectedWithInvalidActivityTypeMessage = false;\n\n                        } else {\n                            this.viewModel.showMainPartSelectedWithInvalidActivityTypeMessage = true;\n                        }\n\n                        return Promise.resolve();\n\n                    })\n                    .catch((error: BaseException) => {\n                        this._logger.error(error && error.toString());\n                        this.viewModel.hasMainPart = false;\n                        this.viewModel.mainPartProductGroup = undefined;\n                        this.viewModel.mainPartPartType = undefined;\n\n                        return Promise.resolve();\n                    });\n            })\n            .catch((error: BaseException) => {\n                this._logger.error(error && error.toString());\n                this.viewModel.hasMainPart = false;\n                this.viewModel.mainPartProductGroup = undefined;\n                this.viewModel.mainPartPartType = undefined;\n\n                return Promise.resolve();\n            });\n    }\n\n    private buildBusinessRules(): void {\n        this._adviceResultsThatNeedCategory = this.getBusinessRule<string>(\"adviceResultsThatNeedCategory\");\n        this._firstVisitJobCode = this.getBusinessRule<string>(\"firstVisitJob\");\n        this._firstVisitTaskCode = this.getBusinessRule<string>(\"firstVisitTask\");\n        this._visitCodesProductGroupPartsRequired = this.getBusinessRule<string>(\"visitCodesProductGroupPartsRequired\").split(\",\");\n        this._claimRejNotCoveredVisitCodesPattern = this.getBusinessRule<string>(\"claimRejNotCoveredVisitCodesPattern\");\n        this._workedOnClaimRejNotCovered = this.getBusinessRule<string>(\"workedOnClaimRejNotCovered\");\n        this._taskStatusDoToday = this.getBusinessRule<string>(\"taskStatusDoToday\");\n        this._partsRequiredInBasketStatus = this.getBusinessRule<string>(\"activityPartsRequiredStatus\");\n        this._insAnnualServiceActivityStatuses = this.getBusinessRule<string>(\"insAnnualServiceActivityStatuses\").split(\",\");\n        this.intervalInMinutes = this.getBusinessRule<number>(\"intervalInMinutes\");\n        this._filteredOutActivityStatuses = this.getBusinessRule<string>(\"filteredOutActivityStatuses\").split(\",\");\n    }\n\n    private buildCustomBusinessRules(): Promise<void> {\n        return this._businessRuleService.getQueryableRuleGroup(\"jobFactory\").then((jobFactoryRuleGroup) => {\n            this._instaPremAppliance = jobFactoryRuleGroup.getBusinessRule<string>(\"instPremApplianceType\");\n            this._annualServiceActionType = jobFactoryRuleGroup.getBusinessRule<string>(\"annualServiceJobType\");\n        });\n    }\n\n    private async loadCatalogs(): Promise<void> {\n        const [jobCode, chirpCode, adviceResult, advicecategory, workedon, isPartLJReportableLookup] =\n            await Promise.all([\n                this._catalogService.getJCJobCodes(),\n                this._catalogService.getChirpCodes(),\n                this._catalogService.getAdviceResults(),\n                this._catalogService.getEeaCategories(),\n                this._catalogService.getWorkedOns(),\n                this.buildYesNoList()\n            ]);\n\n        this.jobCodesCatalog = this.toSortedArray(jobCode, CatalogConstants.JC_JOB_CODE_DESCRIPTION);\n        this.chirpCodesCatalog = this.toSortedArray(chirpCode, CatalogConstants.CHIRP_CODE_ID);\n        this.adviceResultLookup = this.toButtonListItemArray(adviceResult, CatalogConstants.ADVICE_RESULT_ID, CatalogConstants.ADVICE_RESULT_DESCRIPTION);\n        this.adviceCategoryLookup = this.toButtonListItemArray(advicecategory, CatalogConstants.ENERGY_ADVICE_CATEGORY_ID, CatalogConstants.ENERGY_ADVICE_CATEGORY_DESCRIPTION);\n        this.workedOnLookup = this.toButtonListItemArray(workedon, CatalogConstants.WORKED_ON_ID, CatalogConstants.WORKED_ON_DESCRIPTION);\n        this.isPartLJReportableLookup = isPartLJReportableLookup;\n        await this.loadActivityComponentVisitStatuses();\n        await this.loadDynamicDropdownCatalogs();\n    }\n\n    private loadDynamicDropdownCatalogs(): Promise<void> {\n        return Promise.all([\n            this._catalogService.getVisitActivityCodes(),\n            this._catalogService.getProductGroups(),\n            this._catalogService.getPartTypes(),\n            this._catalogService.getPartTypeFaultActions(),\n            this._catalogService.getVisitActivityFaultActions(),\n            this._catalogService.getFaultActionCodes()\n        ]).then(([visitActivity, productGroup, partType, partTypeFaultActLink, visitActFaultActLink, faultActionCode]: [IVisitActivityCode[], IProductGroup[], IPartType[], IPtFac[],\n            IVisitActivityFaultActionCode[], IFaultActionCode[]]) => {\n            this.visitActivityCatalog = ArrayHelper.sortByColumn(visitActivity, CatalogConstants.VISIT_ACTIVITY_CODE_DESCRIPTION);\n            this.productGroupCatalog = ArrayHelper.sortByColumn(productGroup, CatalogConstants.PRODUCT_GROUP_DESCRIPTION);\n            this.partTypeCatalog = ArrayHelper.sortByColumn(partType, CatalogConstants.PART_TYPE_DESCRIPTION);\n            this.partTypeFaultActLinkCatalog = partTypeFaultActLink;\n            this.visitActFaultActLinkCatalog = visitActFaultActLink;\n            this.faultActionCodeCatalog = faultActionCode;\n\n            // used for faultCode lookups\n            faultActionCode.forEach(f => this._faultMap[f.faultActionCode] = f);\n        });\n    }\n\n    private async loadActivityComponentVisitStatuses(): Promise<void> {\n        let visitStatus = await this._catalogService.getActivityComponentVisitStatuses();\n        this.jobStatusesCatalog = this.toSortedArray(visitStatus.filter(x => this._filteredOutActivityStatuses.indexOf(x.status) === -1), CatalogConstants.ACTIVITY_COMPONENT_VISIT_STATUS_ID);\n    }\n\n    // need this, as opposed to using decoraters, to prevent unnecessary fires on initialisation\n    private setObservables(): void {\n        let sub1 = this._bindingEngine.propertyObserver(this.viewModel, \"activity\")\n            .subscribe(newValue => this.updateFaultCodesBasedOnActivity(newValue));\n        this._taskSubscriptions.push(sub1);\n\n        let sub2 = this._bindingEngine.propertyObserver(this.viewModel, \"productGroup\")\n            .subscribe(newValue => this.updateParts(newValue));\n        this._taskSubscriptions.push(sub2);\n\n        let sub3 = this._bindingEngine.propertyObserver(this.viewModel, \"partType\")\n            .subscribe(newValue => this.updateFaultCodesBasedOnPartType(newValue));\n        this._taskSubscriptions.push(sub3);\n\n        let sub4 = this._bindingEngine.propertyObserver(this.viewModel, \"workedOnCode\")\n            .subscribe(newValue => this.updateVisitActivities(newValue));\n        this._taskSubscriptions.push(sub4);\n\n        let sub5 = this._bindingEngine.propertyObserver(this.viewModel, \"status\")\n            .subscribe((newValue, oldValue) => this.statusChanged());\n        this._taskSubscriptions.push(sub5);\n\n        let sub6 = this._bindingEngine.propertyObserver(this.viewModel, \"workDuration\")\n            .subscribe((newValue, oldValue) => this.workDurationChanged(newValue, oldValue));\n        this._taskSubscriptions.push(sub6);\n\n        let sub7 = this._bindingEngine.propertyObserver(this.viewModel, \"chirpCodes\").subscribe(() => this.chirpCodesChanged());\n        this._taskSubscriptions.push(sub7);\n\n        let sub8 = this._bindingEngine.propertyObserver(this.viewModel, \"selectedChirpCode\").subscribe(() => this.selectedChirpCodeChanged());\n        this._taskSubscriptions.push(sub8);\n\n        let sub9 = this._bindingEngine.propertyObserver(this.viewModel, \"chargeableTime\")\n            .subscribe(newValue => this.chargeableTimeChanged());\n        this._taskSubscriptions.push(sub9);\n    }\n\n    private clearAllSubscriptions(): void {\n        this.clearObservableSubscriptions();\n\n        if (this._taskUpdateSubscription) {\n            this._taskUpdateSubscription.dispose();\n            this._taskUpdateSubscription = null;\n        }\n\n        if (this._jobStateChangedSubscription) {\n            this._jobStateChangedSubscription.dispose();\n            this._jobStateChangedSubscription = null;\n        }\n    }\n\n    private clearObservableSubscriptions(): void {\n        this._taskSubscriptions.forEach(s => s.dispose());\n        this._taskSubscriptions = [];\n    }\n\n    private buildValidationRules(): Promise<void> {\n\n        const minValidationCondition = () => !this.viewModel.isInCancellingStatus && !this.viewModel.isNotDoingJobByAnotherTask;\n\n        return this.buildValidation([\n            {\n                property: \"viewModel.chargeableTime\",\n                condition: () => this.viewModel.chargeableTime !== undefined || (this.showAdviceCategory && minValidationCondition()),\n                passes: [\n                    {\n                        test: () => this.viewModel.chargeableTime <= this.viewModel.workDuration,\n                        message: this.getLabel(\"chargeableTimeMessage\")\n                    }\n                ]\n            },\n            // commented to fix 16843\n            /* {\n             property: \"combinedReport\",\n             condition: () => !this.notCompletingJobReason && !this.isJobNoAccessedByAnotherTask\n             } */,\n            {\n                property: \"viewModel.chirpCodes\",\n                condition: () => minValidationCondition()\n            },\n            {\n                property: \"viewModel.status\",\n                condition: () => minValidationCondition(),\n                passes: [\n                    {\n                        test: () => this.viewModel.status === this._taskStatusDoToday ? false : true,\n                        message: this.getLabel(\"doTodayTaskStatusMessage\")\n                    }\n                ]\n            },\n            {\n                property: \"viewModel.activity\",\n                condition: () => minValidationCondition()\n            },\n            {\n                property: \"viewModel.adviceOutcome\",\n                condition: () => minValidationCondition()\n            },\n            {\n                property: \"viewModel.workedOnCode\",\n                condition: () => minValidationCondition()\n            },\n            {\n                property: \"viewModel.adviceComment\",\n                condition: () => this.showAdviceCategory && minValidationCondition()\n            },\n            {\n                property: \"viewModel.adviceCode\",\n                condition: () => this.showAdviceCategory && minValidationCondition()\n            },\n            {\n                property: \"viewModel.applianceType\",\n                condition: () => minValidationCondition()\n            },\n            {\n                property: \"viewModel.productGroup\",\n                condition: () => this.viewModel.showProductGroupAndPartTypes && minValidationCondition()\n            },\n            {\n                property: \"viewModel.partType\",\n                condition: () => (this.viewModel.showProductGroupAndPartTypes || this.viewModel.partTypeFilteredCatalog.length > 0)\n                    && minValidationCondition()\n            },\n            {\n                property: \"viewModel.faultActionCode\",\n                condition: () => this.viewModel.faultActionCodeFilteredCatalog.length > 0 && minValidationCondition()\n            },\n            {\n                property: \"viewModel.isPartLJReportable\",\n                condition: () => this.viewModel.isPotentiallyPartLJReportable && minValidationCondition()\n            },\n            {\n                property: \"viewModel.taskReport\", condition: () => !this.viewModel.isNotDoingJobByAnotherTask\n            }\n        ]);\n    }\n\n    private updateDataState(task: Task): Promise<void> {\n        return this.validateAllRules().then(() => {\n            task.dataState = this.getFinalDataState();\n            this.viewModel.currentApplianceId = task.applianceId;\n            this.viewModel.applianceType = task.applianceType;\n        });\n    }\n\n    private async jobStatusChanged(): Promise<void> {\n        const job = await this._jobService.getJob(this.jobId);\n        if (job && job.state === JobState.arrived) {\n            let task = job.tasks.find(t => t.id === this._taskId);\n            // ttr1 what about chargeable time\n            this.viewModel.taskTime = new TimeRange(task.startTime, task.endTime);\n            this.viewModel.workDuration = task.workDuration;\n            this.viewModel.chargeableTime = task.chargeableTime;\n            await this.setTimeRangePicker();\n        }\n    }\n\n    private async setTimeRangePicker(): Promise<void> {\n        if (!(this.viewModel.job && this.viewModel.job.state === JobState.arrived)) {\n            return;\n        }\n\n        const isCurrentTaskLive = !TaskBusinessRuleHelper.isNotDoingTaskStatus(this.businessRules, this.viewModel.status);\n        const isAnotherTaskLive = this.viewModel.tasks\n            .some(task => task.id !== this._taskId\n                && !TaskBusinessRuleHelper.isNotDoingTaskStatus(this.businessRules, task.status));\n\n        // edge case: if we are on a multiTask job, and we previosuly NAed, and we have come back to reinstate the job,\n        //  all other tasks will be still NAed until we leave the screen.  We need to make the time pickers behave before we\n        //  leave the screen so we check for other visits and the before and after task status to see if we need to disable the fields.\n        const isAReinstatedNATask = isCurrentTaskLive\n            && TaskBusinessRuleHelper.isNotDoingJobStatus( // isNotDoingJob not isNotDoingTask\n                this.businessRules,\n                this.viewModel.tasks.find(task => task.id === this._taskId).status // this tasks status when we hit the screen\n            )\n            && this.viewModel.tasks.some(task => task.id !== this._taskId);\n\n        this.disableTimeRangePicker = !isCurrentTaskLive\n            || isAnotherTaskLive\n            || isAReinstatedNATask;\n\n        // todo: difficult to use undefined for time values that are bound to timeRangePicker because that will default the times to 00:00\n        //  by the time the user leaves the page\n        const isCurrentTaskTimeEmpty = this.viewModel.taskTime.startTime === \"00:00\";\n\n        if (isCurrentTaskLive && isCurrentTaskTimeEmpty) {\n            // if we are reinstating an e.g. XBed task, we need to reinitialise the time/duration fields\n            const reinstatedTimes = await this._taskService.buildReinstatedTaskTimes(this.viewModel, this.jobId);\n            this.viewModel.taskTime = new TimeRange(reinstatedTimes.startTime, reinstatedTimes.endTime);\n            this.viewModel.workDuration = reinstatedTimes.workDuration;\n            this.viewModel.chargeableTime = reinstatedTimes.chargeableTime;\n        }\n    }\n\n    private updateActivityIfJobTypeChanged(): void {\n        if (this.viewModel.activity === this._firstVisitTaskCode && this.viewModel.jobType !== this._firstVisitJobCode) {\n            this.viewModel.activity = undefined;\n        }\n    }\n}\n"],"sourceRoot":"../../../.."}