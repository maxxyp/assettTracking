{"version":3,"sources":["hema/presentation/modules/tasks/tasks.ts"],"names":[],"mappings":"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","file":"tasks.js","sourcesContent":["import { DialogService } from \"aurelia-dialog\";\r\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\r\nimport { inject } from \"aurelia-dependency-injection\";\r\nimport { Router } from \"aurelia-router\";\r\nimport { EditableViewModel } from \"../../models/editableViewModel\";\r\nimport { TaskSummaryViewModel } from \"../../models/taskSummaryViewModel\";\r\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\r\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\r\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\r\nimport { CatalogService } from \"../../../business/services/catalogService\";\r\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\r\nimport { EngineerService } from \"../../../business/services/engineerService\";\r\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\r\nimport { JobService } from \"../../../business/services/jobService\";\r\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\r\nimport { LabelService } from \"../../../business/services/labelService\";\r\nimport { ITaskService } from \"../../../business/services/interfaces/ITaskService\";\r\nimport { TaskService } from \"../../../business/services/taskService\";\r\nimport { ITaskFactory } from \"../../factories/interfaces/ITaskFactory\";\r\nimport { TaskFactory } from \"../../factories/taskFactory\";\r\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\r\nimport { ValidationService } from \"../../../business/services/validationService\";\r\nimport { ChargeServiceConstants } from \"../../../business/services/constants/chargeServiceConstants\";\r\nimport { JobNotDoingReason } from \"../../../business/models/jobNotDoingReason\";\r\nimport * as noUiSlider from \"noUiSlider\";\r\nimport * as wNumb from \"wNumb\";\r\nimport { JobServiceConstants } from \"../../../business/services/constants/jobServiceConstants\";\r\nimport * as moment from \"moment\";\r\nimport { observable } from \"aurelia-binding\";\r\nimport { Threading } from \"../../../../common/core/threading\";\r\nimport { TimeHelper } from \"../../../core/timeHelper\";\r\nimport { TaskBusinessRuleHelper } from \"../../../business/models/businessRules/taskBusinessRuleHelper\";\r\n\r\nconst HHMM = \"HH:mm\";\r\n\r\n@inject(TaskService, JobService, EngineerService, Router, TaskFactory,\r\n    LabelService, EventAggregator, DialogService, ValidationService,\r\n    BusinessRuleService, CatalogService)\r\nexport class Tasks extends EditableViewModel {\r\n\r\n    public tasks: TaskSummaryViewModel[];\r\n    public shouldAllowAddTask: boolean;\r\n    public tasktimes: HTMLElement;\r\n\r\n    public showTimeSlider: boolean;\r\n    // endtime will reamin end time of the last task\r\n    @observable\r\n    public endTime: string;\r\n    // when arrived, arrival time becomes startTime\r\n    @observable\r\n    public startTime: string;\r\n    public intervalInMinutes: number;\r\n    public slider: any;\r\n\r\n    private _taskService: ITaskService;\r\n    private _router: Router;\r\n    private _taskFactory: ITaskFactory;\r\n    private _jobStateChangedSubscription: Subscription;\r\n    private _taskColors: string[];\r\n    private _lastKnownStartTime: string;\r\n    private _lastKnownEndTime: string;\r\n    private _taskItemBusinessRules: { [key: string]: any };\r\n    private _liveTasks: TaskSummaryViewModel[];\r\n\r\n    constructor(taskService: ITaskService,\r\n        jobService: IJobService,\r\n        engineerService: IEngineerService,\r\n        router: Router,\r\n        taskFactory: ITaskFactory,\r\n        labelService: ILabelService,\r\n        eventAggregator: EventAggregator,\r\n        dialogService: DialogService,\r\n        validationService: IValidationService,\r\n        businessRuleService: IBusinessRuleService,\r\n        catalogService: ICatalogService) {\r\n\r\n        super(jobService, engineerService, labelService, eventAggregator,\r\n            dialogService, validationService, businessRuleService, catalogService);\r\n\r\n        this._taskService = taskService;\r\n        this._router = router;\r\n        this._taskFactory = taskFactory;\r\n        this.populateColors();\r\n        this._taskItemBusinessRules = {};\r\n    }\r\n\r\n    public async activateAsync(): Promise<void> {\r\n        this._jobStateChangedSubscription = this._eventAggregator.subscribe(\r\n            JobServiceConstants.JOB_STATE_CHANGED,\r\n            () => this.reloadTasks() // todo: could we just reload the page?\r\n                .then(() => this.destroyAndCreateSlider())\r\n        );\r\n\r\n        await this.loadCustomBusinessRules();\r\n        await this.reloadTasks();\r\n        this.showContent();\r\n    }\r\n\r\n    public async deactivateAsync(): Promise<void> {\r\n        if (this._jobStateChangedSubscription) {\r\n            this._jobStateChangedSubscription.dispose();\r\n        }\r\n    }\r\n\r\n    public async attachedAsync(): Promise<void> {\r\n        while (!this.tasks) { // todo: comment this, we need to wait for load to happen\r\n            await Promise.delay(100);\r\n        }\r\n        this.destroyAndCreateSlider();\r\n    }\r\n\r\n    public navigateToTask(id: string): void {\r\n        this._router.navigateToRoute(\"activity\", { taskId: id });\r\n    }\r\n\r\n    public async deleteTask(event: MouseEvent, task: TaskSummaryViewModel): Promise<void> {\r\n        event.stopPropagation();\r\n        const result = await this.showDeleteConfirmation();\r\n        if (!result) {\r\n            return;\r\n        }\r\n        this.showBusy(this.getLabel(\"loadingPleaseWait\"));\r\n\r\n        // get the index of task that is beging deleted\r\n        const index = this._liveTasks.findIndex(x => x.id === task.id);\r\n\r\n        await this.saveModel();\r\n        await this._taskService.deleteTask(this.jobId, task.id);\r\n        await this.reloadTasks();\r\n        this.showContent();\r\n\r\n        this.destroyAndCreateSlider();\r\n        // index now be next time after task is deleted from array \r\n        // so no need to do index + 1\r\n        const nextTask = this._liveTasks[index];        \r\n        this.setChargeTimeChangeTrigger(nextTask);\r\n\r\n        this._eventAggregator.publish(ChargeServiceConstants.CHARGE_UPDATE_START, this.jobId);\r\n    }\r\n\r\n    public newTask(): void {\r\n        this._router.navigateToRoute(\"task-appliance\", { jobId: this.jobId });\r\n    }\r\n\r\n    public startTimeChanged(newStartTime: string): void {\r\n        const isValidJobStartTime = (nextStartTime: string) => nextStartTime\r\n            && TimeHelper.isAfter(this._liveTasks[0].endTime, nextStartTime, HHMM);\r\n\r\n        if (!this.showTimeSlider || newStartTime === this._lastKnownStartTime) {\r\n            return;\r\n        }\r\n\r\n        Threading.nextCycle(() => {\r\n            if (isValidJobStartTime(newStartTime)) {\r\n                const task = this._liveTasks[0];\r\n                task.startTime = this._lastKnownStartTime = newStartTime;\r\n                this.destroyAndCreateSlider();\r\n                // now check the charge time change trigger becouse the change event wont \r\n                // get fired.\r\n                this.setChargeTimeChangeTrigger(task);\r\n            } else {\r\n                this.startTime = this._lastKnownStartTime;\r\n            }\r\n        });\r\n    }\r\n\r\n    public endTimeChanged(newEndTime: string): void {\r\n        const isValidJobEndTime = (nextEndTime: string) => nextEndTime\r\n            && TimeHelper.isAfter(nextEndTime, this._liveTasks[this._liveTasks.length - 1].startTime, HHMM);\r\n\r\n        if (!this.showTimeSlider || newEndTime === this._lastKnownEndTime) {\r\n            return;\r\n        }\r\n\r\n        Threading.nextCycle(() => {\r\n            if (isValidJobEndTime(newEndTime)) {\r\n                const task = this._liveTasks[this._liveTasks.length - 1];\r\n                task.endTime = this._lastKnownEndTime = newEndTime;\r\n                this.destroyAndCreateSlider();\r\n                // now check the charge time change trigger becouse the change event wont \r\n                // get fired.                \r\n                this.setChargeTimeChangeTrigger(task);\r\n            } else {\r\n                this.endTime = this._lastKnownEndTime;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected async saveModel(): Promise<void> {\r\n        if (this.canEdit && this.showTimeSlider) {\r\n            if (this._liveTasks.find(x => x.chargeableTimeChanged)) {\r\n                this.showInfo(this.getLabel(\"activityTimeChangedTitle\"), this.getLabel(\"activityTimeChangedDescription\"));\r\n                this._eventAggregator.publish(ChargeServiceConstants.CHARGE_UPDATE_START, this.jobId);\r\n            }\r\n            await this._taskService.updateTaskTimes(this.jobId, this._liveTasks);\r\n        }\r\n    }\r\n\r\n    private async reloadTasks(): Promise<void> {\r\n        const tasks = await this._taskService.getTasksAndCompletedTasks(this.jobId);\r\n        const job = await this._jobService.getJob(this.jobId);\r\n\r\n        const viewModels = tasks.map(task => ({\r\n            ...this._taskFactory.createTaskSummaryViewModel(task),\r\n            isInCancellingStatus: !TaskBusinessRuleHelper.isLiveTask(this._taskItemBusinessRules, task.status)\r\n        }));\r\n\r\n        this.tasks = [\r\n            ...viewModels.filter(vm => vm.isMiddlewareDoTodayTask),\r\n            ...viewModels.filter(vm => !vm.isMiddlewareDoTodayTask)\r\n        ];\r\n\r\n        this._liveTasks = this.tasks.filter(t => !t.isInCancellingStatus\r\n            && t.isMiddlewareDoTodayTask);\r\n\r\n        this._liveTasks.forEach((task, i) => task.color = this._taskColors[i]);\r\n\r\n        if (job.onsiteTime // we have onSiteTime if we have arrived\r\n            && this._liveTasks.length > 1) {\r\n            this.showTimeSlider = true;\r\n            this.startTime = this._lastKnownStartTime = this._liveTasks[0].startTime;\r\n            this.endTime = this._lastKnownEndTime = this._liveTasks[this._liveTasks.length - 1].endTime;\r\n        } else {\r\n            this.showTimeSlider = false;\r\n        }\r\n\r\n        this.shouldAllowAddTask = job.jobNotDoingReason !== JobNotDoingReason.taskNoAccessed;\r\n    }\r\n\r\n    private destroyAndCreateSlider(): void {\r\n        if (!this.showTimeSlider || !this.tasktimes) {\r\n            return;\r\n        }\r\n\r\n        if (this.slider) {\r\n            this.slider.destroy();\r\n        }\r\n\r\n        this.slider = noUiSlider.create(this.tasktimes, this.getSliderBarOptions());\r\n        const connect = this.tasktimes.querySelectorAll(\".noUi-connect\");\r\n        for (let i = 0; i < connect.length; i++) {\r\n            (<any>connect[i]).style.background = this._taskColors[i];\r\n        }\r\n\r\n        // update gets called when page renders + when user slides the handle\r\n        this.slider.on(\"update\", (values: number[]) => this.updateFromSliderUpdateEvent(values));\r\n        // change gets called when user slide the handle\r\n        this.slider.on(\"change\", (values: number[], handle: any) => this.updateFromSliderChangeEvent(handle));\r\n    }\r\n\r\n    // when user slides the handle,\r\n    // it should change duration for current task and one after.\r\n    // this method should only get called when slides the handle.\r\n    private updateFromSliderChangeEvent(handle: any): void {\r\n        const task1 = this._liveTasks[handle];\r\n        this.setChargeTimeChangeTrigger(task1);\r\n        const task2 = this._liveTasks[handle + 1];\r\n        this.setChargeTimeChangeTrigger(task2);\r\n    }\r\n\r\n    private updateFromSliderUpdateEvent(sliderCumulativeValues: number[]): void {\r\n        for (let i = 0; i <= sliderCumulativeValues.length; i++) { // note we use <= length, not < length\r\n            const task = this._liveTasks[i];\r\n            task.startTime = this._liveTasks[i - 1]\r\n                ? this._liveTasks[i - 1].endTime\r\n                : this.startTime; // the first item will not have a previous sibling, but this.startTime is what we wnat\r\n            task.endTime = i === sliderCumulativeValues.length\r\n                ? this.endTime // the last item will not have a value in the array, but this.endTime is what we want\r\n                : moment(task.startTime, HHMM)\r\n                    .add(sliderCumulativeValues[i] - (sliderCumulativeValues[i - 1] || 0), \"minutes\")\r\n                    .format(HHMM);\r\n\r\n            task.workDuration = moment(task.endTime, HHMM).diff(moment(task.startTime, HHMM), \"minutes\");\r\n        }\r\n    }\r\n\r\n    private setChargeTimeChangeTrigger(task: TaskSummaryViewModel): void {\r\n        // this should only be set from either start/end time change or \r\n        // user slides the slider. \r\n        // this must not set when the page is loaded.\r\n        if (task && task.workDuration !== task.chargeableTime) {\r\n            task.chargeableTime = task.workDuration;\r\n            task.chargeableTimeChanged = true;\r\n        }\r\n    }\r\n\r\n    private getSliderBarOptions(): any {\r\n        const times: number[] = this.getCumulativeDurations();\r\n        const formatTooltip = wNumb({\r\n            edit: (value: any) => {\r\n                return moment(this.startTime, HHMM)\r\n                    .add(value, \"minutes\")\r\n                    .format(HHMM);\r\n            }\r\n        });\r\n        return {\r\n            start: times.slice(0, -1), // need all but the last element to build the handles\r\n            connect: times.map(x => true),\r\n            step: this.intervalInMinutes,\r\n            tooltips: times.slice(0, -1).map(x => formatTooltip), // need all but the last element to build the handles\r\n            range: {\r\n                min: 0,\r\n                max: times[times.length - 1]\r\n            },\r\n            format: wNumb({ decimals: 0 })\r\n        };\r\n    }\r\n\r\n    private getCumulativeDurations(): number[] {\r\n        const times: number[] = [];\r\n\r\n        for (let i = 0; i < this._liveTasks.length; i++) {\r\n            const thisDuration = moment.duration(\r\n                moment(this._liveTasks[i].endTime, HHMM)\r\n                    .diff(moment(this._liveTasks[i].startTime, HHMM))\r\n            ).asMinutes();\r\n            times.push(thisDuration + (times[i - 1] || 0));\r\n        }\r\n        return times;\r\n    }\r\n\r\n    private async loadCustomBusinessRules(): Promise<void> {\r\n        const notDoingJobStatuses = \"notDoingJobStatuses\";\r\n        const notDoingTaskStatuses = \"notDoingTaskStatuses\";\r\n\r\n        const ruleGroup = await this._businessRuleService.getQueryableRuleGroup(\"taskItem\");\r\n        this.intervalInMinutes = ruleGroup.getBusinessRule<number>(\"intervalInMinutes\");\r\n        this._taskItemBusinessRules[notDoingJobStatuses] = ruleGroup.getBusinessRule(notDoingJobStatuses);\r\n        this._taskItemBusinessRules[notDoingTaskStatuses] = ruleGroup.getBusinessRule(notDoingTaskStatuses);\r\n    }\r\n\r\n    private populateColors(): void {\r\n        // we assume that there will not be more then 45 activities in one job!\r\n        const colors = [\r\n            \"#9E007E\",\r\n            \"#DFA0C9\",\r\n            \"#007FA3\",\r\n            \"#00677F\",\r\n            \"#6AD1E3\",\r\n            \"#91D6AC\",\r\n            \"#F2C75C\",\r\n            \"#FF8674\"\r\n        ];\r\n        this._taskColors = [...colors, ...colors, ...colors, ...colors, ...colors];\r\n    }\r\n}\r\n"],"sourceRoot":"../../../.."}