{"version":3,"sources":["hema/presentation/modules/tasks/taskAppliance.ts"],"names":[],"mappings":"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","file":"taskAppliance.js","sourcesContent":["import { CatalogService } from \"../../../business/services/catalogService\";\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\nimport { JobService } from \"../../../business/services/jobService\";\nimport { EngineerService } from \"../../../business/services/engineerService\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { ValidationService } from \"../../../business/services/validationService\";\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { IApplianceService } from \"../../../business/services/interfaces/IApplianceService\";\nimport { ApplianceService } from \"../../../business/services/applianceService\";\nimport { TaskService } from \"../../../business/services/taskService\";\nimport { ITaskService } from \"../../../business/services/interfaces/ITaskService\";\nimport { Router } from \"aurelia-router\";\nimport { BindingEngine, computedFrom } from \"aurelia-binding\";\nimport { Task } from \"../../../business/models/task\";\nimport { ChargeServiceConstants } from \"../../../business/services/constants/chargeServiceConstants\";\nimport { ChargeCatalogHelperService } from \"../../../business/services/charge/chargeCatalogHelperService\";\nimport { IChargeCatalogHelperService } from \"../../../business/services/interfaces/charge/IChargeCatalogHelperService\";\nimport { EditableViewModel } from \"../../models/editableViewModel\";\nimport { Job } from \"../../../business/models/job\";\nimport { ObjectHelper } from \"../../../../common/core/objectHelper\";\nimport { IFieldActivityType } from \"../../../business/models/reference/IFieldActivityType\";\nimport { IActionType } from \"../../../business/models/reference/IActionType\";\nimport { BusinessException } from \"../../../business/models/businessException\";\nimport { Threading } from \"../../../../common/core/threading\";\nimport { Appliance } from \"../../../business/models/appliance\";\nimport * as moment from \"moment\";\nimport { TaskConstants } from \"../../constants/taskConstants\";\nimport { JobServiceConstants } from \"../../../business/services/constants/jobServiceConstants\";\nimport { IChargeType } from \"../../../business/models/reference/IChargeType\";\nimport { ChargeService } from \"../../../business/services/charge/chargeService\";\nimport { IChargeService } from \"../../../business/services/interfaces/charge/IChargeService\";\n\n@inject(CatalogService, JobService, EngineerService, LabelService, EventAggregator, DialogService,\n    ValidationService, BusinessRuleService, ApplianceService, TaskService, Router, BindingEngine, ChargeCatalogHelperService, ChargeService)\n\nexport class TaskAppliance extends EditableViewModel {\n    // .DF_1681 we need to stop multiple submissions of the same new record\n    public isCompleteTriggeredAlready: boolean;\n    public appliances: Appliance[];\n    public selectedApplianceId: string;\n    public selectedApplianceDescription: string;\n\n    public actionTypes: IActionType[];\n    public selectedActionType: string;\n\n    public chargeTypes: IChargeType[];\n    public selectedChargeText: string;\n    public selectedChargeType: string;\n    public chargeTypeErrorMsg: string;\n    public actionTypeErrorMsg: string;\n\n    public task: Task;\n    public isNewTask: boolean;\n    public isFirstVisitActivity: boolean;\n    public showActionTypesLoading: boolean;\n    public showChargeTypesLoading: boolean;\n    public noChargeRulesFound: boolean;\n\n    protected _applianceService: IApplianceService;\n    protected _taskService: ITaskService;\n\n    protected _router: Router;\n    protected _fmtFieldActivityType: string;\n\n    protected _newTaskId: string;\n    protected _visitNumber: number;\n    protected _selectedApplianceType: string;\n    protected _validNewWorkInd: string;\n    protected _job: Job;\n\n    private _bindingEngine: BindingEngine;\n    private _rfaSubscriptions: Subscription[];\n    private _firstVisitRestrictions: string[];\n    private _firstVisitJobCode: string;\n    private _chargeRulesDateFormat: string;\n    private _chargeCatalogHelper: IChargeCatalogHelperService;\n    private _chargeMethodCodeLength: number;\n    private _firstVisitSequence: number;\n    private _businessRulesService: IBusinessRuleService;\n    private _chargeService: IChargeService;\n\n    constructor(catalogService: ICatalogService,\n                jobService: IJobService,\n                engineerService: IEngineerService,\n                labelService: ILabelService,\n                eventAggregator: EventAggregator,\n                dialogService: DialogService,\n                validationService: IValidationService,\n                businessRulesService: IBusinessRuleService,\n                applianceService: IApplianceService,\n                taskService: ITaskService,\n                router: Router,\n                bindingEngine: BindingEngine,\n                chargeCatalogHelper: IChargeCatalogHelperService,\n                chargeService: IChargeService) {\n        super(jobService, engineerService, labelService, eventAggregator, dialogService, validationService, businessRulesService, catalogService);\n        this._businessRulesService = businessRulesService;\n        this._bindingEngine = bindingEngine;\n        this._applianceService = applianceService;\n        this._taskService = taskService;\n        this.actionTypes = [];\n        this._router = router;\n        this._visitNumber = 1;\n        this._rfaSubscriptions = [];\n        this.isNewTask = false;\n        this._chargeCatalogHelper = chargeCatalogHelper;\n        this.isFirstVisitActivity = true;\n        this.showActionTypesLoading = false;\n        this.showChargeTypesLoading = false;\n        this._chargeService = chargeService;\n        this.noChargeRulesFound = false;\n    }\n\n    public saveTask(): Promise<void> {\n        if (this.isNew) {\n            return this.createNew();\n        } else {\n            return this.updateExisting();\n        }\n    }\n\n    public activateAsync(params: { jobId: string, taskId: string }): Promise<void> {\n        this.jobId = params.jobId;\n        this.isNew = true; // .DF_1697\n        return this.loadBusinessRules()\n            .then(() => this.buildBusinessRules())\n            .then(() => this.populateErrorMessage())\n            .then(() => this.buildCustomBusinessRules())\n            .then(() => this.loadJob(params.jobId))\n            .then(() => this.populateAppliances(params.jobId))\n            .then(() => params.taskId ? this.loadExistingTask(params.jobId, params.taskId) : this.loadNewTask(params.jobId))\n            .then(() => this.filterAppliances())\n            .then(() => this.populate())\n            // had to set obervable manually\n            // becouse known issue with dropdown\n            .then(() => this.setObservables())\n            .then(() => this.showContent());\n    }\n\n    public deactivateAsync(): Promise<void> {\n        this.removeObservables();\n        return Promise.resolve();\n    }\n\n    public selectedApplianceIdChanged(newValue: string, oldValue: string): Promise<void> {\n        if (newValue) {\n            this.showActionTypesLoading = true;\n            this.actionTypes = [];\n            this.selectedActionType = undefined;\n            this.chargeTypes = [];\n            this.selectedChargeType = undefined;\n            if (this.appliances) {\n                let app = this.appliances.find(x => x.id === newValue);\n                if (app) {\n                    this._selectedApplianceType = app.applianceType;\n                    this.selectedApplianceDescription = app.description;\n                    return this._catalogService.getFieldActivityType(app.applianceType)\n                        .then((fieldActivityTypes) => this.populateActionTypes(fieldActivityTypes))\n                        .then((actionTypes) => this.actionTypes = actionTypes)\n                        .then(() => {\n                            this.showActionTypesLoading = false;\n                            return Promise.resolve();\n                        });\n                }\n                this.showActionTypesLoading = false;\n                return Promise.resolve();\n            }\n            this.showActionTypesLoading = false;\n            return Promise.resolve();\n        }\n        return Promise.resolve();\n    }\n\n    public selectedActionTypeChanged(newValue: string, oldValue: string): Promise<void> {\n        this.showChargeTypesLoading = true;\n        this.chargeTypes = [];\n        if (newValue && this._selectedApplianceType && this.actionTypes) {\n            this.selectedChargeType = undefined;\n            this.chargeTypes = [];\n            let at = this.actionTypes.find(x => x.jobType === newValue);\n            if (at) {\n                this._logger.info(\"looking for charge rule\", newValue, this._selectedApplianceType);\n                return this.populateChargeTypes(this._selectedApplianceType, newValue)\n                    .then((chargeTypes) => {\n                        this.chargeTypes = chargeTypes;\n                        if (this.chargeTypes && this.chargeTypes.length === 1) {\n                            this.selectedChargeType = this.chargeTypes[0].chargeType;\n                            this.selectedChargeText = this.chargeTypes[0].chargeType + \" - \" + this.chargeTypes[0].chargeTypeDescription;\n                        }\n                        this.showChargeTypesLoading = false;\n                    });\n            }\n            this.showChargeTypesLoading = false;\n            return Promise.resolve();\n        }\n        this.showChargeTypesLoading = false;\n        return Promise.resolve();\n    }\n\n    public async selectedChargeTypeChanged(newValue: string, oldValue: string): Promise<void> {\n\n        if (!this.selectedChargeType) {\n            return;\n        }\n\n        this.showChargeTypesLoading = true;\n\n        const jobType = this.selectedActionType;\n        const applianceType = this._selectedApplianceType;\n        const chargeType = this.selectedChargeType;\n        const crdf = this._chargeRulesDateFormat;\n        const cmcl = this._chargeMethodCodeLength;\n\n        try {\n            const chargeRules = await this._chargeCatalogHelper.getJobCodeChargeRule(jobType, applianceType, chargeType, crdf, cmcl);\n            this.noChargeRulesFound = chargeRules === undefined;\n            this.showChargeTypesLoading = false;\n        } catch (ex) {\n            this.noChargeRulesFound = true;\n            this.showChargeTypesLoading = false;\n        }\n    }\n\n    public resetViewModel(): Promise<void> {\n        this.selectedApplianceId = undefined;\n        this._selectedApplianceType = undefined;\n        this.selectedApplianceDescription = undefined;\n        this.actionTypes = [];\n        this.selectedActionType = undefined;\n        this.chargeTypes = [];\n        this.selectedChargeType = undefined;\n        return this.populateAppliances(this.jobId).then(() => this.filterAppliances());\n    }\n\n    public cancel(): boolean {\n        if (this.task && this.task.id) {\n            return this._router.navigateToRoute(\"activity\", {taskId: this.task.id});\n        }\n        return this._router.navigateToRoute(\"activities\");\n    }\n\n    // so could be that we have no charge types for appliance and job type, or there could be a charge type but\n    // we cannot find any charge rules associated for the region (see DF_1881)\n\n    @computedFrom(\"chargeTypes\")\n    public get noChargeRuleMessage() : string {\n        return `${this.chargeTypes && this.chargeTypes.length > 0 ? \"No charge rules found for your region\" : \"No charge types found\"}`;\n    }\n\n    protected populateAppliances(jobId: string): Promise<void> {\n        this.appliances = [];\n        return this._applianceService.getAppliances(jobId)\n            .then((appliances) => {\n                this.appliances = appliances.filter(x => !x.parentId);\n                this.appliances.forEach(x => {\n                    if (x.description === undefined || x.description === null) {\n                        x.description = \"\";\n                    }\n                    if (x.locationDescription === undefined || x.locationDescription === null) {\n                        x.locationDescription = \"\";\n                    }\n                });\n            });\n    }\n\n    private buildBusinessRules(): void {\n        this._fmtFieldActivityType = this.getBusinessRule<string>(\"fmtFieldActivityType\");\n        this._validNewWorkInd = this.getBusinessRule<string>(\"validNewWorkInd\");\n    }\n\n    private buildCustomBusinessRules(): Promise<void> {\n        let taskItemBusinessRules = this._businessRuleService.getQueryableRuleGroup(\"taskItem\");\n        let taskApplianceBusinessRules = this._businessRuleService.getQueryableRuleGroup(\"taskAppliance\");\n        let chargeServiceBusinessRules = this._businessRuleService.getQueryableRuleGroup(\"chargeService\");\n\n        return Promise.all([taskItemBusinessRules, taskApplianceBusinessRules, chargeServiceBusinessRules])\n            .then(([taskItemBusinessRuleGroup, taskApplianceBusinessRuleGroup, chargeServiceBusinessRuleGroup]) => {\n                this._firstVisitJobCode = taskItemBusinessRuleGroup.getBusinessRule<string>(\"firstVisitJob\");\n                this._chargeRulesDateFormat = chargeServiceBusinessRuleGroup.getBusinessRule<string>(\"chargeRulesDateFormat\");\n                this._chargeMethodCodeLength = chargeServiceBusinessRuleGroup.getBusinessRule<number>(\"chargeMethodCodeLength\");\n\n                let firstVisitRestrictionsString = taskApplianceBusinessRuleGroup.getBusinessRule<string>(\"firstVisitRestrictions\");\n                if (firstVisitRestrictionsString) {\n                    this._firstVisitRestrictions = firstVisitRestrictionsString.split(\",\");\n                }\n                this._firstVisitSequence = taskApplianceBusinessRuleGroup.getBusinessRule<number>(\"firstVisitSequence\");\n            });\n    }\n\n    private loadNewTask(jobId: string): Promise<void> {\n        this.isNewTask = true;\n        this.isNew = true;\n        return this._taskService.getTasksAndCompletedTasks(jobId).then((tasks) => {\n            let newTaskId = Task.getNextTaskId(tasks);\n            if (!newTaskId) {\n                throw new BusinessException(this, \"loadNewTask\", \"Unable to generate next task id for job {0}\", [jobId], null);\n            }\n            this._newTaskId = newTaskId;\n            this._visitNumber = 1;\n        });\n    }\n\n    private loadExistingTask(jobId: string, taskId: string): Promise<void> {\n        this.isNew = false;\n        return this._jobService.getJob(jobId).then((job) => {\n            if (job && job.tasks) {\n                this.task = job.tasks.find(x => x.id === taskId);\n                if (this.task) {\n                    // this is becouse this.task.isNewRFA is an absolute truth.\n                    this.isNewTask = this.task.isNewRFA;\n                    this.isFirstVisitActivity = this.task.sequence !== undefined ? this.task.sequence === this._firstVisitSequence : this.isFirstVisitActivity;\n                    this.filterAppliances();\n                    return this.selectedApplianceIdChanged(this.task.applianceId, undefined)\n                        .then(() => this.selectedActionTypeChanged(this.task.jobType, undefined))\n                        .then(() => this.selectedChargeTypeChanged(this.task.chargeType, undefined));\n                }\n                return Promise.resolve();\n            }\n            return Promise.resolve();\n        });\n    }\n\n    private async populateChargeTypes(applianceType: string, jobType: string): Promise<IChargeType[]> {\n\n        try {\n            return await this._chargeCatalogHelper.getChargeTypesByApplianceJob(applianceType, jobType,\n                this._chargeRulesDateFormat, this._chargeMethodCodeLength);\n        } catch (err) {\n            this._logger.error(err);\n            this.showChargeTypesLoading = false;\n            this.noChargeRulesFound = true;\n            return [];\n            // throw (err);\n        }\n    }\n\n    private populateActionTypes(fieldActivityTypes: IFieldActivityType[]): Promise<IActionType[]> {\n        let result: IActionType[] = [];\n        if (fieldActivityTypes) {\n            let actionTypePromises: Promise<IActionType[]>[] = [];\n            actionTypePromises = fieldActivityTypes.map((val) => this.getActionTypePromise(val));\n            return Promise.all(actionTypePromises)\n                .then((actTypes: IActionType[][]) => {\n                    if (actTypes) {\n                        result = actTypes.reduce<IActionType[]>((acc, val) => (val && val[0]) ? acc.concat(val[0]) : acc, []);\n                    }\n                    return Promise.resolve(result);\n                });\n        } else {\n            return Promise.resolve(result);\n        }\n    }\n\n    private getActionTypePromise(fieldActivityType: IFieldActivityType): Promise<IActionType[]> {\n        const endDate = moment(fieldActivityType.fieldActivityTypeEndDate, this._fmtFieldActivityType);\n        const startDate = moment(fieldActivityType.fieldActivityTypeStartDate, this._fmtFieldActivityType);\n        if (moment().isBetween(startDate, endDate)) {\n            if (this.isNewTask) {\n                // only restrict action types when its new task created from field app\n                if (fieldActivityType.validNewWorkIndicator === this._validNewWorkInd) {\n                    return this._catalogService.getActionType(fieldActivityType.jobType);\n                }\n                return undefined;\n            }\n            return this._catalogService.getActionType(fieldActivityType.jobType);\n        }\n        return undefined;\n    }\n\n    private setObservables(): void {\n        // dont get chance to set value (into dropdown control)\n        // so wait for next digest cycle\n        // this needs to be fixed in dropdown\n        Threading.nextCycle(() => {\n            let sub1 = this._bindingEngine.propertyObserver(this, \"selectedApplianceId\")\n                .subscribe((newValue: string, oldValue: string) => this.selectedApplianceIdChanged(newValue, oldValue));\n            this._rfaSubscriptions.push(sub1);\n            let sub2 = this._bindingEngine.propertyObserver(this, \"selectedActionType\")\n                .subscribe((newValue: string, oldValue: string) => this.selectedActionTypeChanged(newValue, oldValue));\n            this._rfaSubscriptions.push(sub2);\n            let sub3 = this._bindingEngine.propertyObserver(this, \"selectedChargeType\")\n                .subscribe((newValue: string, oldValue: string) => this.selectedChargeTypeChanged(newValue, oldValue));\n            this._rfaSubscriptions.push(sub3);\n        });\n    }\n\n    private removeObservables(): void {\n        if (this._rfaSubscriptions) {\n            this._rfaSubscriptions.forEach(x => {\n                if (x) {\n                    x.dispose();\n                    x = null;\n                }\n            });\n            this._rfaSubscriptions = [];\n        } else {\n            this._rfaSubscriptions = [];\n        }\n    }\n\n    private populate(): void {\n        if (this.task) {\n            if (this.appliances) {\n                if (this.appliances.find(x => x.id === this.task.applianceId)) {\n                    this.selectedApplianceId = this.task.applianceId;\n                }\n                if (this.task.applianceType) {\n                    if (this.appliances.find(x => x.applianceType === this.task.applianceType)) {\n                        this._selectedApplianceType = this.task.applianceType;\n                    }\n                }\n            }\n            if (this.actionTypes) {\n                if (this.actionTypes.find(x => x.jobType === this.task.jobType)) {\n                    this.selectedActionType = this.task.jobType;\n                }\n            }\n            if (this.chargeTypes) {\n                if (this.chargeTypes.find(x => x.chargeType === this.task.chargeType)) {\n                    this.selectedChargeType = this.task.chargeType;\n                }\n            }\n        }\n    }\n\n    private loadJob(jobId: string): Promise<void> {\n        return this._jobService.getJob(jobId).then((job) => {\n            this._job = job;\n        });\n    }\n\n    private filterAppliances(): void {\n        if (this.isNewTask === false) {\n            if (this.task && this._firstVisitJobCode && this.appliances) {\n                if (this.task.jobType === this._firstVisitJobCode) {\n                    this.appliances = this.appliances.filter(x => !x.parentId && this._firstVisitRestrictions.find(fv => fv !== x.applianceType));\n                }\n            }\n        }\n    }\n\n    private populateErrorMessage(): Promise<void> {\n        return this._labelService.getGroup(\"newTask\")\n            .then((labels) => {\n                this.chargeTypeErrorMsg = ObjectHelper.getPathValue(labels, \"chargeTypeInvalidErrorMsg\");\n                this.actionTypeErrorMsg = ObjectHelper.getPathValue(labels, \"actionTypeInvalidErrorMsg\");\n            });\n    }\n\n    private createNew(): Promise<void> {\n        if (this.isCompleteTriggeredAlready) {\n            return Promise.resolve();\n        }\n        this.isCompleteTriggeredAlready = true;\n        let task: Task = new Task(true, true);\n        task.chargeType = this.selectedChargeType;\n        task.applianceType = this._selectedApplianceType;\n        task.applianceId = this.selectedApplianceId;\n        task.jobType = this.selectedActionType;\n        task.activities = [];\n        task.previousVisits = [];\n        task.sequence = this._visitNumber;\n        task.id = this._newTaskId;\n        task.fieldTaskId = Task.getFieldTaskId(this._newTaskId);\n\n        return this._businessRulesService.getQueryableRuleGroup(\"chargeService\")\n            .then(ruleGroup => ruleGroup.getBusinessRule<string>(\"noChargePrefix\"))\n            .then(noChargePrefix => {\n\n                task.isCharge = Task.isChargeableTask(this.selectedChargeType, noChargePrefix);\n\n                return this._taskService.createTask(this.jobId, task)\n                    .then(() => this._taskService.updateTaskAppliance(this.jobId,\n                        task.id,\n                        this._selectedApplianceType,\n                        this.selectedApplianceId,\n                        this.selectedActionType,\n                        this.selectedChargeType)\n                    )\n                    .then(() => {\n                        this.notifyDataStateChanged();\n                        return this._chargeService.startCharges(this.jobId);\n                    })\n                    .then(() => {\n                        this.showInfo(this.getLabel(\"objectName\"), this.getLabel(\"taskSaved\"));\n                        this._router.navigateToRoute(\"activities\");\n                    });\n            });\n    }\n\n    private updateExisting(): Promise<void> {\n        if (this.appliances) {\n            let app = this.appliances.find(x => x.id === this.selectedApplianceId);\n            if (app) {\n                this._selectedApplianceType = app.applianceType;\n            }\n        }\n\n        const isApplianceTypeChanged = this.task.applianceId !== this.selectedApplianceId;\n        const isActionTypeChanged = this.task.jobType !== this.selectedActionType;\n        const isChargeTypeChanged = this.task.chargeType !== this.selectedChargeType;\n\n        return this.validateAllRules()\n            .then(() => this._taskService.updateTaskAppliance(this.jobId,\n                this.task.id,\n                this._selectedApplianceType,\n                this.selectedApplianceId,\n                this.selectedActionType,\n                this.selectedChargeType))\n            .then((task) => this._eventAggregator.publish(TaskConstants.UPDATE_DATA_STATE, task))\n            .then(() => this._eventAggregator.publish(JobServiceConstants.JOB_DATA_STATE_CHANGED))\n            .then(() => this._eventAggregator.publish(ChargeServiceConstants.CHARGE_UPDATE_START, this.jobId))\n            .then(() => {\n                if (isApplianceTypeChanged) {\n                    this.showInfo(this.getLabel(\"objectName\"), this.getLabel(\"applianceTypeChanged\"));\n                }\n\n                if (isActionTypeChanged) {\n                    this.showInfo(this.getLabel(\"objectName\"), this.getLabel(\"actionTypeChanged\"));\n                }\n\n                if (isChargeTypeChanged) {\n                    this.showInfo(this.getLabel(\"objectName\"), this.getLabel(\"chargeTypeChanged\"));\n                }\n            })\n            .then(() => this._router.navigateToRoute(\"activity\", {taskId: this.task.id}))\n            .then(() => Promise.resolve());\n\n    }\n\n}\n"],"sourceRoot":"../../../.."}