{"version":3,"sources":["hema/presentation/modules/tasks/taskMain.ts"],"names":[],"mappings":"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","file":"taskMain.js","sourcesContent":["/// <reference path=\"./../../../../../typings/app.d.ts\" />\n\nimport { inject } from \"aurelia-framework\";\nimport { Router, RouterConfiguration, RouteConfig, NavigationInstruction } from \"aurelia-router\";\nimport { ITaskService } from \"../../../business/services/interfaces/ITaskService\";\nimport { TaskService } from \"../../../business/services/taskService\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\nimport { EditableViewModel } from \"../../models/editableViewModel\";\nimport { CatalogService } from \"../../../business/services/catalogService\";\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\nimport { ValidationService } from \"../../../business/services/validationService\";\nimport { JobService } from \"../../../business/services/jobService\";\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\nimport { DataState } from \"../../../business/models/dataState\";\nimport { EngineerService } from \"../../../business/services/engineerService\";\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { JobServiceConstants } from \"../../../business/services/constants/jobServiceConstants\";\nimport { AnimationService } from \"../../../../common/ui/services/animationService\";\nimport { IAnimationService } from \"../../../../common/ui/services/IAnimationService\";\nimport { Task } from \"../../../business/models/task\";\nimport { ITaskFactory } from \"../../factories/interfaces/ITaskFactory\";\nimport { TaskFactory } from \"../../factories/taskFactory\";\nimport {IPageService} from \"../../services/interfaces/IPageService\";\nimport {PageService} from \"../../services/pageService\";\nimport { ObjectHelper } from \"../../../../common/core/objectHelper\";\n\n@inject(JobService, EngineerService, TaskService, LabelService, EventAggregator, DialogService, ValidationService, BusinessRuleService, CatalogService, AnimationService, TaskFactory, PageService)\nexport class TaskMain extends EditableViewModel {\n    public router: Router;\n\n    public jobId: string;\n    public taskId: string;\n    public currentTask: Task;\n    public actionType: string;\n    public taskIds: string[];\n    public applianceId: string;\n    public applianceType: string;\n    public chargeType: string;\n    public card: HTMLElement;\n    public visitCount: number;\n    public isFullScreen: boolean;\n    public isDoTodayTask: boolean;\n\n    private _childRoutes: RouteConfig[];\n\n    private _taskService: ITaskService;\n    private _itemPosition: number;\n    private _animationService: IAnimationService;\n    private _taskSubscriptions: Subscription[];\n    private _taskFactory: ITaskFactory;\n    private _pageService: IPageService;\n    private _landingPage: string;\n\n    constructor(jobService: IJobService,\n        engineerService: IEngineerService,\n        taskService: ITaskService,\n        labelService: ILabelService,\n        eventAggregator: EventAggregator,\n        dialogService: DialogService,\n        validationService: IValidationService,\n        businessRuleService: IBusinessRuleService,\n        catalogService: ICatalogService,\n        animationService: IAnimationService,\n        taskFactory: ITaskFactory,\n        pageService: IPageService) {\n        super(jobService, engineerService, labelService, eventAggregator, dialogService, validationService, businessRuleService, catalogService);\n        this._taskService = taskService;\n        this._animationService = animationService;\n        this.taskIds = [];\n        this._taskSubscriptions = [];\n        this._taskFactory = taskFactory;\n        this.isFullScreen = window.isFullScreen;\n        this._pageService = pageService;\n    }\n\n    public configureRouter(config: RouterConfiguration, childRouter: Router, ...args: any[]): void {\n        this.router = childRouter;\n        this._landingPage = (args && \n                                args.length >= 3 && \n                                args[2] instanceof NavigationInstruction && \n                                (<NavigationInstruction> args[2]).params && \n                                (<NavigationInstruction> args[2]).params.taskId) ? \n                                    this._pageService.getLastVisitedPage(ObjectHelper.getClassName(this), (<NavigationInstruction> args[2]).params.taskId) || \"details\" :\n                                    \"details\";\n        this.setupChildRoutes();\n        config.map(this._childRoutes);\n    }\n\n    public activateAsync(params: { jobId: string, taskId: string }): Promise<void> {\n        this.jobId = params.jobId;\n        this.taskId = params.taskId;\n\n        return this.loadBusinessRules()\n            .then(() => this.load())\n            .then(() => this.showContent());\n    }\n\n    public deactivateAsync(): Promise<void> {\n        this._taskSubscriptions.forEach(subscription => {\n            subscription.dispose();\n        });\n        return Promise.resolve();\n    }\n\n    public navigateToRoute(name: string): void {\n        this.router.navigateToRoute(name);\n    }\n    public swipeFunction(swipeDirection: string): void {\n        if (swipeDirection === \"left\") {\n            this._animationService.swipe(this.card, this.taskIds, this._itemPosition, swipeDirection, \"slide-in-right\", \"slide-out-left\", 300).then((position) => {\n                this.router.parent.navigate(this.router.parent.currentInstruction.fragment.replace(this.taskIds[this._itemPosition], this.taskIds[position]));\n                this._itemPosition = position;\n            })\n                .catch();\n        } else {\n            this._animationService.swipe(this.card, this.taskIds, this._itemPosition, swipeDirection, \"slide-in-left\", \"slide-out-right\", 300).then((position) => {\n                this.router.parent.navigate(this.router.parent.currentInstruction.fragment.replace(this.taskIds[this._itemPosition], this.taskIds[position]));\n                this._itemPosition = position;\n            })\n                .catch();\n        }\n    }\n\n    public changeApplianceType(event: MouseEvent): void {\n        event.stopPropagation();\n        this.router.navigateToRoute(\"task-appliance\", { jobId: this.jobId, taskId: this.taskId });\n    }\n\n    protected loadModel(): Promise<void> {\n        return Promise.all([\n            this.loadTasks(this.jobId),\n            this._jobService.getJob(this.jobId)\n        ])\n            .then(([task, job]) => {\n                if (task) {\n                    this.isDoTodayTask = task.isMiddlewareDoTodayTask;\n                    this.actionType = task.jobType;\n                    this._taskSubscriptions.push(\n                        this._eventAggregator.subscribe(JobServiceConstants.JOB_DATA_STATE_CHANGED, () => this.updateDataState())\n                    );\n                    this.updateDataState();\n                }\n            });\n    }\n\n    private setupChildRoutes(): void {\n        this._childRoutes = [\n            {\n                route: \"\",\n                redirect: this._landingPage\n            },\n            {\n                route: \"details\",\n                moduleId: \"hema/presentation/modules/tasks/taskItem\",\n                name: \"details\",\n                nav: true,\n                title: \"Details\",\n                settings: {\n                    tabGroupParent: \"activities\",\n                    dataState: DataState.notVisited,\n                    canEditCancelledJob: true,\n                    hideIfNotDoToday: true\n                }\n            },\n            {\n                route: \"previous-activities\",\n                moduleId: \"hema/presentation/modules/tasks/taskVisitDetails\",\n                name: \"previous-activities\",\n                nav: true,\n                title: \"Previous Visits\",\n                settings: {\n                    tabGroupParent: \"activities\",\n                    dataState: DataState.dontCare,\n                    canEditCancelledJob: true,\n                    hideIfNotDoToday: false\n                }\n            }\n        ];\n    }\n\n    private updateDataState(): void {\n        this._taskService.getTaskItem(this.jobId, this.taskId)\n            .then((task) => {\n                if (task) {\n                    let detailsRoute = this._childRoutes.find(r => r.route === \"details\");\n                    if (detailsRoute) {\n                        detailsRoute.settings.dataState = task.dataState;\n                    }\n                }\n            });\n    }\n\n    private loadTasks(jobId: string): Promise<Task> {\n        return this._taskService.getTasksAndCompletedTasks(jobId)\n            .then(tasks => {\n                if (tasks) {\n                    this.taskIds = tasks.map(t => t.id);\n                    this._itemPosition = this.taskIds.indexOf(this.taskId);\n                    let currentTask = tasks.find(x => x.id === this.taskId);\n                    if (currentTask) {\n                        this.applianceId = currentTask.applianceId;\n                        this.applianceType = currentTask.applianceType;\n                        this.chargeType = currentTask.chargeType;\n                        let summary = this._taskFactory.createTaskSummaryViewModel(currentTask);\n                        if (summary) {\n                            this.visitCount = summary.visitCount;\n                        }\n                    }\n                    this.currentTask = currentTask;\n                    return currentTask;\n                } else {\n                    return undefined;\n                }\n            });\n    }\n}\n"],"sourceRoot":"../../../.."}