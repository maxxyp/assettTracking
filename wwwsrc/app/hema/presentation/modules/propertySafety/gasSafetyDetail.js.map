{"version":3,"sources":["hema/presentation/modules/propertySafety/gasSafetyDetail.ts"],"names":[],"mappings":"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","file":"gasSafetyDetail.js","sourcesContent":["/// <reference path=\"./../../../../../typings/app.d.ts\" />\n\nimport { inject } from \"aurelia-framework\";\nimport { ICatalogService } from \"../../../business/services/interfaces/ICatalogService\";\nimport { CatalogService } from \"../../../business/services/catalogService\";\nimport { ButtonListItem } from \"../../../../common/ui/elements/models/buttonListItem\";\nimport { IPropertySafetyService } from \"../../../business/services/interfaces/IPropertySafetyService\";\nimport { PropertySafetyService } from \"../../../business/services/propertySafetyService\";\nimport { PropertyGasSafetyDetail as PropertyGasSafetyDetailBusinessModel } from \"../../../business/models/propertyGasSafetyDetail\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { IJobService } from \"../../../business/services/interfaces/IJobService\";\nimport { JobService } from \"../../../business/services/jobService\";\nimport { observable } from \"aurelia-binding\";\nimport { EditableViewModel } from \"../../models/editableViewModel\";\nimport { ValidationService } from \"../../../business/services/validationService\";\nimport { IValidationService } from \"../../../business/services/interfaces/IValidationService\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { BusinessRuleService } from \"../../../business/services/businessRuleService\";\nimport { IBusinessRuleService } from \"../../../business/services/interfaces/IBusinessRuleService\";\nimport { UnsafeReason } from \"../../../business/models/unsafeReason\";\nimport { PropertyUnsafeDetail } from \"../../../business/models/propertyUnsafeDetail\";\nimport { EngineerService } from \"../../../business/services/engineerService\";\nimport { IEngineerService } from \"../../../business/services/interfaces/IEngineerService\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { CatalogConstants } from \"../../../business/services/constants/catalogConstants\";\n\n@inject(CatalogService, LabelService, PropertySafetyService, EventAggregator, DialogService,\n    JobService, EngineerService, ValidationService, BusinessRuleService)\nexport class GasSafetyDetail extends EditableViewModel {\n\n    public iniEliReadingLookup: ButtonListItem[];\n    @observable()\n    public iniEliReadingSelected: string;\n    public noEliReadingsReasonLookup: ButtonListItem[];\n    public noEliReadingsReasonSelected: string;\n    public safetyAdviceNoticeLeftLookup: ButtonListItem[];\n    public safetyAdviceNoticeLeftSelected: boolean;\n    public reasonWhyText: string;\n    public gasInstallationTightnessTestDoneLookup: ButtonListItem[];\n    @observable()\n    public gasInstallationTightnessTestDoneSelected: boolean;\n    @observable()\n    public pressureDrop: number;\n    public gasMeterInstallationSatisfactoryLookup: ButtonListItem[];\n    @observable()\n    public gasMeterInstallationSatisfactorySelected: string;\n    public gasMeterInstallationSatisfactoryDisabled: boolean;\n\n    /* unsafe situation */\n    public reasons: UnsafeReason[];\n    public report: string;\n    public conditionAsLeftLookup: ButtonListItem[];\n    @observable()\n    public conditionAsLeftSelected: string;\n    public cappedTurnedOffLookup: ButtonListItem[];\n    @observable()\n    public cappedTurnedOffSelected: string;\n    public cappedTurnedOffSelectedDisabled: boolean;\n    public labelAttachedRemovedLookup: ButtonListItem[];\n    public labelAttachedRemovedSelected: string;\n    public ownedByCustomerLookup: ButtonListItem[];\n    public ownedByCustomerSelected: boolean;\n    public letterLeftLookup: ButtonListItem[];\n    public letterLeftSelected: boolean;\n    public signatureObtainedLookup: ButtonListItem[];\n    public signatureObtainedSelected: boolean;\n    /* unsafe situation */\n\n    public pressureDropDecimalPlaces: number;\n    public isLandlordJob: boolean;\n    public showUnsafeWarningMsg: boolean;\n\n    private _propertySafetyService: IPropertySafetyService;\n    private _pressureDropThreshold: number;\n    private _readyToShowToast: boolean;\n    private _gasMeterInstallationSatisfactoryNotApplicableOption: string;\n    private _gasMeterInstallationSatisfactoryNotApplicableOptionYes: string;\n    private _labelAttachedDisableOptions: string[];\n    private _cappedTurnedOffDisabledOptions: string[];\n    private _gasMeterInstallationSatisfactoryNotApplicableOptionInstaPerm: string;\n    private _gasSafetyModel: PropertyGasSafetyDetailBusinessModel;\n    private _conditionAsLeftDisableOptions: string[];\n    private _conditionAsLeftSelectedOptions: string[];\n    private _notToCurrentStdConditionAsLeftOptionSelected: string[];\n    private _cappedTurnedOffDisabledOptionsForNotToCurrentStd: string[];\n    private _labelAttachedDisabledOptionsForNotToCurrentStd: string[];\n    private _notToCurrentStdConditionAsLeftOptionSelectedSS: string;\n    private _conditionAsLeftImmediatelyDangerousOption: string;\n    private _cappedTurnedOffOptionsForWarningMsg: string[];\n\n    constructor(catalogService: ICatalogService,\n                labelService: ILabelService,\n                propertySafetyService: IPropertySafetyService,\n                eventAggregator: EventAggregator,\n                dialogService: DialogService,\n                jobService: IJobService,\n                engineerService: IEngineerService,\n                validationService: IValidationService,\n                businessRuleService: IBusinessRuleService) {\n        super(jobService, engineerService, labelService, eventAggregator, dialogService, validationService, businessRuleService, catalogService);\n\n        this._propertySafetyService = propertySafetyService;\n        this.iniEliReadingLookup = [];\n        this.noEliReadingsReasonLookup = [];\n        this.gasMeterInstallationSatisfactoryLookup = [];\n        this.gasMeterInstallationSatisfactoryDisabled = false;\n        this.cappedTurnedOffSelectedDisabled = false;\n        this.showUnsafeWarningMsg = false;\n    }\n\n    private static numericComparisonSorter(): (a: any, b: any) => number {\n        return (a, b) => {\n            let aVal = +a[CatalogConstants.SAFETY_READING_CAT_DESCRIPTION].replace(\"<\", \"0\").replace(\">\", \"100\");\n            let bVal = +b[CatalogConstants.SAFETY_READING_CAT_DESCRIPTION].replace(\"<\", \"0\").replace(\">\", \"100\");\n\n            if (aVal > bVal) {\n                return 1;\n            }\n            if (aVal < bVal) {\n                return -1;\n            }\n            return 0;\n        };\n    }\n\n    public activateAsync(): Promise<any> {\n        return this.loadBusinessRules()\n            .then(() => this.buildValidationRules())\n            .then(() => this.buildBusinessRules())\n            .then(() => this.loadCatalogs())\n            .then(() => this.load())\n            .then(() => this.removeOptionFromGasMeterInstallationSatisfactoryLookup(this._gasMeterInstallationSatisfactoryNotApplicableOption))\n            .then(() => this.showContent());\n    }\n\n    public iniEliReadingSelectedChanged(newValue: string, oldValue: string): Promise<void> {\n        return this.populateGasUnsafeReasons(this._readyToShowToast);\n    }\n\n    public gasInstallationTightnessTestDoneSelectedChanged(newValue: boolean, oldValue: boolean): Promise<void> {\n        if (newValue === null || newValue === undefined || this.gasInstallationTightnessTestDoneSelected === false) {\n            this.pressureDrop = undefined;\n            this.gasMeterInstallationSatisfactoryDisabled = false;\n        }\n\n        if (newValue === false) {\n            this.conditionAsLeftSelected = undefined;\n            this.cappedTurnedOffSelected = undefined;\n            this.labelAttachedRemovedSelected = undefined;\n            this.removeOptionFromGasMeterInstallationSatisfactoryLookup(this._gasMeterInstallationSatisfactoryNotApplicableOptionYes);\n            this.removeOptionFromConditionAsLeftLookup(this._notToCurrentStdConditionAsLeftOptionSelectedSS);\n        } else if (newValue === true) {\n            return this.resetOptionFromGasMeterInstallationSatisfactoryLookup(this._gasMeterInstallationSatisfactoryNotApplicableOptionInstaPerm)\n                .then(() => this.resetOptionFromConditionAsLeftLookup())\n                .then(() => this.populateGasUnsafeReasons(this._readyToShowToast));\n        }\n        return this.resetOptionFromGasMeterInstallationSatisfactoryLookup(this._gasMeterInstallationSatisfactoryNotApplicableOptionInstaPerm)\n            .then(() => this.populateGasUnsafeReasons(this._readyToShowToast));\n    }\n\n    public pressureDropChanged(newValue: number, oldValue: number): Promise<void> {\n\n        if (newValue > this._pressureDropThreshold) {\n            this.conditionAsLeftSelected = undefined;\n            this.cappedTurnedOffSelected = undefined;\n            this.labelAttachedRemovedSelected = undefined;\n            this.gasMeterInstallationSatisfactorySelected = \"No\";\n            this.gasMeterInstallationSatisfactoryDisabled = true;\n        } else {\n            this.gasMeterInstallationSatisfactoryDisabled = false;\n        }\n\n        // disable ConditionAsLeft buttons SS, XC if pressuredrop > 8.\n        this.conditionAsLeftLookup.map(btn => {\n            btn.disabled = (this._conditionAsLeftDisableOptions.indexOf(btn.value) > -1 && newValue > this._pressureDropThreshold);\n        });\n\n        return this.populateGasUnsafeReasons(this._readyToShowToast);\n    }\n\n    public gasMeterInstallationSatisfactorySelectedChanged(newValue: string, oldValue: string): Promise<void> {\n\n        return this.populateGasUnsafeReasons(this._readyToShowToast);\n    }\n\n    public conditionAsLeftSelectedChanged(newValue: string): void {\n        // disable Not Applicable CappedTurnedOff Option button when ConditionAsLeft selected value is equal to anyone of these (AR, ID, XC).\n        // disable Capped, Not Capped, TuredOff, Not TurnedOff CappedTurnedOff Option buttons when ConditionAsLeft selected value is equal to Not to current std.\n        this.cappedTurnedOffLookup.forEach(btn => {\n            btn.disabled = (this._conditionAsLeftSelectedOptions.some(option => option === newValue) && this._cappedTurnedOffDisabledOptions.indexOf(btn.value) > -1) ||\n                (this._notToCurrentStdConditionAsLeftOptionSelected.some(option => option === newValue) &&\n                    this._cappedTurnedOffDisabledOptionsForNotToCurrentStd.indexOf(btn.value) > -1);\n\n            this.cappedTurnedOffSelected = (btn.disabled && btn.value === this.cappedTurnedOffSelected) ? undefined : this.cappedTurnedOffSelected;\n        });\n\n        // disable all the CappedTurnedOff label attached/removed Option buttons except Attached option when ConditionAsLeft selected value is equal to anyone of these (AR, ID, XC).\n        // disable Attached and Not attached label attached/removed Option buttons when ConditionAsLeft selected value is equal to Not to current std.\n        this.labelAttachedRemovedLookup.forEach(btn => {\n            btn.disabled = (this._conditionAsLeftSelectedOptions.some(option => option === newValue) && this._labelAttachedDisableOptions.indexOf(btn.value) > -1) ||\n                (this._notToCurrentStdConditionAsLeftOptionSelected.some(option => option === newValue) &&\n                    this._labelAttachedDisabledOptionsForNotToCurrentStd.indexOf(btn.value) > -1);\n            this.labelAttachedRemovedSelected = (btn.disabled && btn.value === this.labelAttachedRemovedSelected) ? undefined : this.labelAttachedRemovedSelected;\n        });\n\n        this.showUnsafeWarningMsg = this.showUnsafeWarningMessage();\n    }\n\n    public cappedTurnedOffSelectedChanged(newValue: string): void {\n        this.showUnsafeWarningMsg = this.showUnsafeWarningMessage();\n    }\n\n    public get isNoEliReadingTaken(): boolean {\n        return this.iniEliReadingSelected === CatalogConstants.SAFETY_READING_CAT_NO_READING_TAKEN;\n    }\n\n    protected loadModel(): Promise<void> {\n        return this._jobService.getJob(this.jobId)\n            .then((job) => {\n                if (job) {\n                    this.isLandlordJob = job.isLandlordJob;\n                } else {\n                    this.isLandlordJob = false;\n                }\n            })\n            .then(() => this._propertySafetyService.getPropertySafetyDetails(this.jobId))\n            .then((safetyDetail) => {\n                this._readyToShowToast = false;\n                if (safetyDetail) {\n                    if (safetyDetail.propertyGasSafetyDetail) {\n                        this.iniEliReadingSelected = safetyDetail.propertyGasSafetyDetail.eliReading;\n                        this.gasInstallationTightnessTestDoneSelected = safetyDetail.propertyGasSafetyDetail.gasInstallationTightnessTestDone;\n                        this.gasMeterInstallationSatisfactorySelected = safetyDetail.propertyGasSafetyDetail.gasMeterInstallationSatisfactory;\n                        this.noEliReadingsReasonSelected = safetyDetail.propertyGasSafetyDetail.eliReadingReason;\n                        this.reasonWhyText = safetyDetail.propertyGasSafetyDetail.safetyAdviseNoticeLeftReason;\n                        this.pressureDrop = safetyDetail.propertyGasSafetyDetail.pressureDrop;\n                        this.safetyAdviceNoticeLeftSelected = safetyDetail.propertyGasSafetyDetail.safetyAdviseNoticeLeft;\n                        this._gasSafetyModel = safetyDetail.propertyGasSafetyDetail;\n                        this.setInitialDataState(safetyDetail.propertyGasSafetyDetail.dataStateId, safetyDetail.propertyGasSafetyDetail.dataState);\n                    } else {\n                        this._gasSafetyModel = new PropertyGasSafetyDetailBusinessModel();\n                    }\n\n                    if (safetyDetail.propertyUnsafeDetail) {\n                        this.report = safetyDetail.propertyUnsafeDetail.report;\n                        this.conditionAsLeftSelected = safetyDetail.propertyUnsafeDetail.conditionAsLeft;\n                        this.cappedTurnedOffSelected = safetyDetail.propertyUnsafeDetail.cappedTurnedOff;\n                        this.labelAttachedRemovedSelected = safetyDetail.propertyUnsafeDetail.labelAttachedRemoved;\n                        this.ownedByCustomerSelected = safetyDetail.propertyUnsafeDetail.ownedByCustomer;\n                        this.letterLeftSelected = safetyDetail.propertyUnsafeDetail.letterLeft;\n                        this.signatureObtainedSelected = safetyDetail.propertyUnsafeDetail.signatureObtained;\n                    } else {\n                        this.clearUnsafeDetail();\n                    }\n                } else {\n                    this._gasSafetyModel = new PropertyGasSafetyDetailBusinessModel();\n                    this.clearUnsafeDetail();\n                }\n\n                return this.populateGasUnsafeReasons(this._readyToShowToast)\n                    .then(() => {\n                        this._readyToShowToast = true;\n                    });\n            });\n    }\n\n    protected saveModel(): Promise<void> {\n        if (this.reasons && this.reasons.length === 0) {\n            this.clearUnsafeDetail();\n        }\n\n        this._gasSafetyModel.eliReading = this.iniEliReadingSelected;\n        this._gasSafetyModel.eliReadingReason = this.isNoEliReadingTaken ? this.noEliReadingsReasonSelected : undefined;\n        this._gasSafetyModel.gasInstallationTightnessTestDone = this.gasInstallationTightnessTestDoneSelected;\n        this._gasSafetyModel.gasMeterInstallationSatisfactory = this.gasMeterInstallationSatisfactorySelected;\n        this._gasSafetyModel.pressureDrop = this.pressureDrop;\n        this._gasSafetyModel.safetyAdviseNoticeLeft = this.safetyAdviceNoticeLeftSelected;\n        this._gasSafetyModel.safetyAdviseNoticeLeftReason = this.reasonWhyText;\n\n        let gasUnsafeDetailModel: PropertyUnsafeDetail = new PropertyUnsafeDetail();\n\n        gasUnsafeDetailModel.cappedTurnedOff = this.cappedTurnedOffSelected;\n        gasUnsafeDetailModel.conditionAsLeft = this.conditionAsLeftSelected;\n        gasUnsafeDetailModel.labelAttachedRemoved = this.labelAttachedRemovedSelected;\n        gasUnsafeDetailModel.ownedByCustomer = this.ownedByCustomerSelected;\n        gasUnsafeDetailModel.signatureObtained = this.signatureObtainedSelected;\n        gasUnsafeDetailModel.letterLeft = this.letterLeftSelected;\n        gasUnsafeDetailModel.report = this.report;\n        gasUnsafeDetailModel.reasons = this.reasons ? this.reasons.map(r => r.catalogId) : [];\n\n        this._gasSafetyModel.dataState = this.getFinalDataState();\n\n        return this._propertySafetyService.saveGasSafetyDetails(this.jobId, this._gasSafetyModel, gasUnsafeDetailModel);\n    }\n\n    protected clearModel(): Promise<void> {\n        this._readyToShowToast = false;\n        this.iniEliReadingSelected = undefined;\n        this.gasInstallationTightnessTestDoneSelected = undefined;\n        this.gasMeterInstallationSatisfactorySelected = undefined;\n        this.noEliReadingsReasonSelected = undefined;\n        this.reasonWhyText = undefined;\n        this.pressureDrop = undefined;\n        this.safetyAdviceNoticeLeftSelected = undefined;\n\n        this.clearReasons();\n\n        this.clearUnsafeDetail();\n        this._readyToShowToast = true;\n        return this.resetOptionFromGasMeterInstallationSatisfactoryLookup(this._gasMeterInstallationSatisfactoryNotApplicableOptionInstaPerm);\n    }\n\n    private buildBusinessRules(): Promise<void> {\n        this._pressureDropThreshold = this.getBusinessRule<number>(\"pressureDropThreshold\");\n        this.pressureDropDecimalPlaces = this.getBusinessRule<number>(\"pressureDropDecimalPlaces\");\n        this._gasMeterInstallationSatisfactoryNotApplicableOption = this.getBusinessRule<string>(\"gasMeterInstallationSatisfactoryNotApplicableOption\");\n        this._gasMeterInstallationSatisfactoryNotApplicableOptionYes = this.getBusinessRule<string>(\"gasMeterInstallationSatisfactoryNotApplicableOptionYes\");\n        this._labelAttachedDisableOptions = (this.getBusinessRule<string>(\"labelAttachedDisableOptions\") || \"\").split(\",\");\n        this._cappedTurnedOffDisabledOptions = (this.getBusinessRule<string>(\"cappedTurnedOffDisabledOptions\") || \"\").split(\",\");\n        this._gasMeterInstallationSatisfactoryNotApplicableOptionInstaPerm = (this.getBusinessRule<string>(\"gasMeterInstallationSatisfactoryNotApplicableOptionInstaPerm\") || \"\");\n        this._conditionAsLeftDisableOptions = (this.getBusinessRule<string>(\"conditionAsLeftDisableOptions\") || \"\").split(\",\");\n        this._conditionAsLeftSelectedOptions = (this.getBusinessRule<string>(\"conditionAsLeftSelectedOptions\") || \"\").split(\",\");\n        this._notToCurrentStdConditionAsLeftOptionSelected = (this.getBusinessRule<string>(\"notToCurrentStdConditionAsLeftOptionSelected\") || \"\").split(\",\");\n        this._cappedTurnedOffDisabledOptionsForNotToCurrentStd = (this.getBusinessRule<string>(\"cappedTurnedOffDisabledOptionsForNotToCurrentStd\") || \"\").split(\",\");\n        this._labelAttachedDisabledOptionsForNotToCurrentStd = (this.getBusinessRule<string>(\"labelAttachedDisabledOptionsForNotToCurrentStd\") || \"\").split(\",\");\n        this._notToCurrentStdConditionAsLeftOptionSelectedSS = (this.getBusinessRule<string>(\"notToCurrentStdConditionAsLeftOptionSelectedSS\") || \"\");\n\n        return this._businessRuleService.getQueryableRuleGroup(\"gasSafety\").then((gasSafetyRuleGroup) => {\n            this._conditionAsLeftImmediatelyDangerousOption = gasSafetyRuleGroup.getBusinessRule<string>(\"conditionAsLeftImmediatelyDangerousOption\");\n            this._cappedTurnedOffOptionsForWarningMsg = gasSafetyRuleGroup.getBusinessRule<string>(\"cappedTurnedOffOptionsForWarningMsg\").split(\",\");\n        });\n    }\n\n    private removeOptionFromGasMeterInstallationSatisfactoryLookup(option: string): void {\n        if (this.isLandlordJob || this.gasInstallationTightnessTestDoneSelected) {\n            let buttonListItem = this.gasMeterInstallationSatisfactoryLookup\n                .find(btnListItem => (btnListItem.value === option));\n            if (buttonListItem) {\n                let index = this.gasMeterInstallationSatisfactoryLookup.indexOf(buttonListItem);\n                if (index !== -1) {\n                    this.gasMeterInstallationSatisfactoryLookup.splice(index, 1);\n                }\n            }\n        }\n    }\n\n    // repopulate list and then remove the item as per removeOptionFromGasMeterInstallationSatisfactoryLookup\n    private resetOptionFromGasMeterInstallationSatisfactoryLookup(option: string): Promise<void> {\n        this.gasMeterInstallationSatisfactoryLookup = [];\n        return this._catalogService.getSafetyReasonCats(CatalogConstants.SAFETY_REASON_CAT_GROUP_GAS_INST_SAT)\n            .then((lookup) => {\n                this.gasMeterInstallationSatisfactoryLookup = this.toButtonListItemArray(lookup,\n                    CatalogConstants.SAFETY_REASON_CAT_DESCRIPTION,\n                    CatalogConstants.SAFETY_REASON_CAT_DESCRIPTION);\n\n                this.removeOptionFromGasMeterInstallationSatisfactoryLookup(this._gasMeterInstallationSatisfactoryNotApplicableOption);\n            });\n\n    }\n\n    private removeOptionFromConditionAsLeftLookup(option: string): void {\n        if (this.isLandlordJob) {\n            let buttonListItem = this.conditionAsLeftLookup\n                .find(btnListItem => (btnListItem.value === option));\n            if (buttonListItem) {\n                let index = this.conditionAsLeftLookup.indexOf(buttonListItem);\n                if (index !== -1) {\n                    this.conditionAsLeftLookup.splice(index, 1);\n                }\n            }\n        }\n    }\n\n    // repopulate list and then remove the item as per removeOptionFromConditionAsLeftLookup\n    private resetOptionFromConditionAsLeftLookup(): Promise<void> {\n        this.conditionAsLeftLookup = [];\n        return this._catalogService.getSafetyNoticeTypes()\n            .then(safetyNoticeTypes => {\n                this.conditionAsLeftLookup = this.toButtonListItemArray(safetyNoticeTypes,\n                    CatalogConstants.SAFETY_NOTICE_TYPE_ID,\n                    CatalogConstants.SAFETY_NOTICE_TYPE_DESCRIPTION);\n            });\n    }\n\n    private loadCatalogs(): Promise<void> {\n        let catalogPromises = [\n            this._catalogService.getSafetyActions()\n                .then(safetyActions => {\n                    this.cappedTurnedOffLookup = this.toButtonListItemArray(safetyActions, CatalogConstants.SAFETY_ACTION_ID, CatalogConstants.SAFETY_ACTION_DESCRIPTION);\n                }),\n            this.resetOptionFromConditionAsLeftLookup(),\n            this._catalogService.getSafetyNoticeStatuses()\n                .then(safetyNoticeStatus => {\n                    this.labelAttachedRemovedLookup = this.toButtonListItemArray(safetyNoticeStatus, CatalogConstants.SAFETY_NOTICE_STATUS_ID, CatalogConstants.SAFETY_NOTICE_STATUS_DESCRIPTION);\n                })\n        ];\n        return Promise.all(catalogPromises)\n            .then(() =>\n                Promise.all([\n                    this._catalogService.getSafetyReadingCats(CatalogConstants.SAFETY_READING_CAT_GROUP_INIT_ELI_READING),\n                    this._catalogService.getSafetyReasonCats(CatalogConstants.SAFETY_REASON_CAT_GROUP_ELI_READ_WHY_NOT),\n                    this._catalogService.getSafetyReasonCats(CatalogConstants.SAFETY_REASON_CAT_GROUP_GAS_INST_SAT),\n                    this.buildNoYesList(),\n                    this.buildNoYesList(),\n                    this.buildNoYesList(),\n                    this.buildNoYesList(),\n                    this.buildNoYesList()])\n                    .then((promiseResults) => {\n\n                        let iniEliReadingCatalog: any[] = promiseResults[0];\n                        let noEliReadingCatalog: any[] = promiseResults[1];\n                        let gasMeterInstallationSatisfactoryCatalog: any[] = promiseResults[2];\n\n                        this.iniEliReadingLookup = this.toButtonListItemArray(iniEliReadingCatalog,\n                            CatalogConstants.SAFETY_READING_CAT_ID,\n                            CatalogConstants.SAFETY_READING_CAT_DESCRIPTION,\n                            GasSafetyDetail.numericComparisonSorter());\n\n                        // the catalog itself doesn't have a value for \"no eli readings taken\"\n                        const noEliReadingslabelKey = \"noEliReadings\";\n                        this.iniEliReadingLookup.push(new ButtonListItem(this.labels[noEliReadingslabelKey], CatalogConstants.SAFETY_READING_CAT_NO_READING_TAKEN, false));\n\n                        this.noEliReadingsReasonLookup = this.toButtonListItemArray(noEliReadingCatalog,\n                            CatalogConstants.SAFETY_REASON_CAT_DESCRIPTION,\n                            CatalogConstants.SAFETY_REASON_CAT_DESCRIPTION);\n\n                        this.gasMeterInstallationSatisfactoryLookup = this.toButtonListItemArray(gasMeterInstallationSatisfactoryCatalog,\n                            CatalogConstants.SAFETY_REASON_CAT_DESCRIPTION,\n                            CatalogConstants.SAFETY_REASON_CAT_DESCRIPTION);\n\n                        this.safetyAdviceNoticeLeftLookup = promiseResults[3];\n                        this.gasInstallationTightnessTestDoneLookup = promiseResults[4];\n\n                        this.ownedByCustomerLookup = promiseResults[5];\n                        this.letterLeftLookup = promiseResults[6];\n                        this.signatureObtainedLookup = promiseResults[7];\n                    }));\n    }\n\n    private populateGasUnsafeReasons(isToastRequired: boolean): Promise<void> {\n        const pressureDropThreshold: number = this.getBusinessRule<number>(\"pressureDropThreshold\");\n        const installationSatisfactoryNoType: string = this.getBusinessRule<string>(\"gasInstallationNotSatisfactoryNoType\");\n        const installationSatisfactoryNoMeterType: string = this.getBusinessRule<string>(\"gasInstallationNotSatisfactoryNoMeterType\");\n\n        return this._propertySafetyService.populateGasUnsafeReasons(this.pressureDrop,\n            this.gasMeterInstallationSatisfactorySelected,\n            pressureDropThreshold,\n            installationSatisfactoryNoType,\n            installationSatisfactoryNoMeterType,\n            this.iniEliReadingSelected === CatalogConstants.SAFETY_READING_CAT_NO_READING_TAKEN)\n            .then((latestUnsafeReasons) => {\n\n                let currentWarnings: string[] = [];\n\n                if (this.reasons) {\n                    this.reasons.forEach(reason => {\n                        currentWarnings.push(reason.label);\n                    });\n                }\n\n                this.reasons = latestUnsafeReasons;\n\n                if (this.reasons) {\n                    /* If there are reasons that we didn't have before then show a toast for them */\n                    this.reasons.forEach(reason => {\n                        reason.label = this.getParameterisedLabel(reason.lookupId + \"Unsafe\", reason.params);\n                        if (isToastRequired && currentWarnings.indexOf(reason.label) === -1) {\n                            this.showWarning(this.getLabel(\"unsafeToast\"), reason.label);\n                        }\n                    });\n                }\n            })\n            .then(() => this.validateAllRules());\n    }\n\n    private clearUnsafeDetail(): void {\n        this.report = undefined;\n        this.conditionAsLeftSelected = undefined;\n        this.cappedTurnedOffSelected = undefined;\n        this.labelAttachedRemovedSelected = undefined;\n        this.ownedByCustomerSelected = undefined;\n        this.letterLeftSelected = undefined;\n        this.signatureObtainedSelected = undefined;\n    }\n\n    private clearReasons(): void {\n        this.reasons = [];\n        this.gasMeterInstallationSatisfactoryDisabled = false;\n    }\n\n    private shouldValidateReportFields(): boolean {\n        let isAMandatoryUnsafeReasonPresent = this.reasons && this.reasons.filter(x => x.isMandatory).length > 0;\n        let isAnyUnsafeReasonPresent = this.reasons && this.reasons.length > 0;\n        let isAnyReportFieldCompleted = !!(this.conditionAsLeftSelected || this.cappedTurnedOffSelected || this.labelAttachedRemovedSelected\n            || this.ownedByCustomerSelected || this.letterLeftSelected || this.signatureObtainedSelected\n            || this.report);\n\n        return isAMandatoryUnsafeReasonPresent || (isAnyUnsafeReasonPresent && isAnyReportFieldCompleted);\n    }\n\n    private buildValidationRules(): Promise<void> {\n        return this.buildValidation([\n            {property: \"reasonWhyText\", condition: () => this.safetyAdviceNoticeLeftSelected === true},\n            {property: \"pressureDrop\", condition: () => this.gasInstallationTightnessTestDoneSelected === true},\n            {\n                property: \"noEliReadingsReasonSelected\",\n                condition: () => this.iniEliReadingSelected === CatalogConstants.SAFETY_READING_CAT_NO_READING_TAKEN\n            },\n            {\n                property: \"conditionAsLeftSelected\",\n                groups: [\"unsafeReport\"],\n                condition: () => this.shouldValidateReportFields()\n            },\n            {\n                property: \"cappedTurnedOffSelected\",\n                groups: [\"unsafeReport\"],\n                condition: () => this.shouldValidateReportFields()\n            },\n            {\n                property: \"labelAttachedRemovedSelected\",\n                groups: [\"unsafeReport\"],\n                condition: () => this.shouldValidateReportFields()\n            },\n            {\n                property: \"ownedByCustomerSelected\",\n                groups: [\"unsafeReport\"],\n                condition: () => this.shouldValidateReportFields()\n            },\n            {\n                property: \"letterLeftSelected\",\n                groups: [\"unsafeReport\"],\n                condition: () => this.shouldValidateReportFields()\n            },\n            {\n                property: \"signatureObtainedSelected\",\n                groups: [\"unsafeReport\"],\n                condition: () => this.shouldValidateReportFields()\n            },\n            {property: \"report\", groups: [\"unsafeReport\"], condition: () => this.shouldValidateReportFields()}\n        ]);\n    }\n\n    private showUnsafeWarningMessage(): boolean {\n        return this.conditionAsLeftSelected\n            && this.cappedTurnedOffSelected\n            && this.conditionAsLeftSelected === this._conditionAsLeftImmediatelyDangerousOption\n            && this._cappedTurnedOffOptionsForWarningMsg.some(c => this.cappedTurnedOffSelected === c);\n    }\n}\n"],"sourceRoot":"../../../.."}