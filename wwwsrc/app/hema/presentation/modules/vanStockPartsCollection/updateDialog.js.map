{"version":3,"sources":["hema/presentation/modules/vanStockPartsCollection/updateDialog.ts"],"names":[],"mappings":";;;;;;;;;;;;IAKA;QAUI,sBAAY,gBAAkC,EAAE,aAA4B;YACxE,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;YACzB,IAAI,CAAC,UAAU,GAAG,gBAAgB,CAAC;YACnC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;YAEpC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;gBAChD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,KAAK,CAAC,CAAC;gBACzD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC;YAChE,CAAC;QACL,CAAC;QAEM,+BAAQ,GAAf;YAAA,iBAoBC;YAlBG,IAAM,wBAAwB,GAAG,UAAC,MAAc,EAAE,MAAc;gBAC5D,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACf,KAAI,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;oBAC3B,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;oBAC5B,MAAM,CAAC;gBACX,CAAC;gBAED,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YACjC,CAAC,CAAC;YAEF,IAAI,CAAC,cAAc,CAAC,IAAI,CACpB,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,mBAAmB,CAAC;iBAC/D,SAAS,CAAC,wBAAwB,CAAC,EACxC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;iBAClD,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,CAAC,CAEzC,CAAC;YACF,IAAI,CAAC,SAAS,EAAE,CAAC;QACrB,CAAC;QAEM,+BAAQ,GAAf;YACI,CAAC,IAAI,CAAC,cAAc,IAAI,EAAE,CAAC;iBACtB,OAAO,CAAC,UAAA,YAAY;gBACjB,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACf,YAAY,CAAC,OAAO,EAAE,CAAC;gBAC3B,CAAC;YACL,CAAC,CAAC,CAAC;QACX,CAAC;QAEM,6CAAsB,GAA7B;YACI,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;QACrG,CAAC;QAEO,gCAAS,GAAjB;YACI,IAAM,eAAe,GAAG,IAAI,CAAC,IAAI;mBACN,IAAI,CAAC,IAAI,CAAC,IAAI;mBACd,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACtE,IAAI,CAAC,WAAW,GAAG,CAAC,eAAe,CAAC;QACxC,CAAC;QAhEQ,YAAY;YADxB,0BAAM,CAAC,iCAAgB,EAAE,iCAAa,CAAC;6CAWN,iCAAgB,EAAiB,iCAAa;WAVnE,YAAY,CAiExB;QAAD,mBAAC;KAjED,AAiEC,IAAA;IAjEY,oCAAY","file":"updateDialog.js","sourcesContent":["import {BindingEngine, Disposable, inject} from \"aurelia-framework\";\nimport {DialogController} from \"aurelia-dialog\";\nimport {PartCollectionItemViewModel} from \"./viewModels/partCollectionItemViewModel\";\n\n@inject(DialogController, BindingEngine)\nexport class UpdateDialog {\n\n    public part: PartCollectionItemViewModel;\n    public myVanAreas: string[];\n    public controller: DialogController;\n    public isEmptyQuantity: boolean;\n    public isAreaValid: boolean;\n    private _bindingEngine: BindingEngine;\n    private _subscriptions: Disposable[];\n\n    constructor(dialogController: DialogController, bindingEngine: BindingEngine) {\n        this._subscriptions = [];\n        this.controller = dialogController;\n        this._bindingEngine = bindingEngine;\n\n        if (this.controller) {\n            this.controller.settings.lock = true;\n            this.part = this.controller.settings.model.part;\n            this.isEmptyQuantity = this.part.quantityCollected === 0;\n            this.myVanAreas = this.controller.settings.model.myVanAreas;\n        }\n    }\n\n    public attached(): void {\n\n        const quantityCollectedChanged = (newVal: number, oldVal: number) => {\n            if (newVal === 0) {\n                this.part.area = undefined;\n                this.isEmptyQuantity = true;\n                return;\n            }\n\n            this.isEmptyQuantity = false;\n        };\n\n        this._subscriptions.push(\n            this._bindingEngine.propertyObserver(this.part, \"quantityCollected\")\n                .subscribe(quantityCollectedChanged),\n            this._bindingEngine.propertyObserver(this.part, \"area\")\n                .subscribe(() => this.checkArea()),\n\n        );\n        this.checkArea();\n    }\n\n    public detached(): void {\n        (this._subscriptions || [])\n            .forEach(subscription => {\n                if (subscription) {\n                    subscription.dispose();\n                }\n            });\n    }\n\n    public toggleNoPartsCollected(): void {\n        this.part.area = undefined;\n        this.part.quantityCollected = this.part.quantityCollected === 0 ? this.part.quantityExpected : 0;\n    }\n\n    private checkArea(): void {\n        const isThereABadChar = this.part\n                                && this.part.area\n                                && this.part.area.match(/[^\\x20-\\x7E|\\xA3]/g);\n        this.isAreaValid = !isThereABadChar;\n    }\n}\n"],"sourceRoot":"../../../.."}