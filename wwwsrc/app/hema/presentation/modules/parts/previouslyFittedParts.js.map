{"version":3,"sources":["hema/presentation/modules/parts/previouslyFittedParts.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;IAcA;QAA2C,yCAAa;QAQpD,+BAAY,YAA2B,EACnC,eAAgC,EAChC,aAA4B,EAC5B,WAAyB,EACzB,WAAyB;YAJ7B,YAKI,kBAAM,YAAY,EAAE,eAAe,EAAE,aAAa,CAAC,SAKtD;YAJG,KAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,KAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,KAAI,CAAC,cAAc,GAAG,GAAG,CAAC;YAC1B,KAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;;QAC5C,CAAC;QAEM,6CAAa,GAApB,UAAqB,MAAyB;YAA9C,iBAkBC;YAjBG,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YAErB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;gBACV,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC;gBAC9C,IAAI,CAAC,YAAY,CAAC,yBAAyB,CAAC,MAAM,CAAC,KAAK,CAAC;aAC5D,CAAC;iBACD,IAAI,CAAC,UAAC,EAAc;oBAAb,aAAK,EAAE,aAAK;gBAChB,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;gBAChB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACP,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC;wBAClC,IAAI,MAAA;wBACJ,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,MAAM,EAApB,CAAoB,CAAC;qBAC3C,CAAC,EAHiB,CAGjB,CACL,CAAC;gBACN,CAAC;gBACD,KAAI,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC,CAAC,CAAC;QACP,CAAC;QAtCQ,qBAAqB;YADjC,0BAAM,CAAC,2BAAY,EAAE,0CAAe,EAAE,8BAAa,EAAE,yBAAW,EAAE,yBAAW,CAAC;qDAUtD,0CAAe;gBACjB,8BAAa;WAVvB,qBAAqB,CAuCjC;QAAD,4BAAC;KAvCD,AAuCC,CAvC0C,6BAAa,GAuCvD;IAvCY,sDAAqB","file":"previouslyFittedParts.js","sourcesContent":["import { inject } from \"aurelia-framework\";\nimport { BaseViewModel } from \"../../models/baseViewModel\";\nimport { ILabelService } from \"../../../business/services/interfaces/ILabelService\";\nimport { LabelService } from \"../../../business/services/labelService\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { DialogService } from \"aurelia-dialog\";\nimport { PartService } from \"../../../business/services/partService\";\nimport { IPartService } from \"../../../business/services/interfaces/IPartService\";\nimport { TaskService } from \"../../../business/services/taskService\";\nimport { ITaskService } from \"../../../business/services/interfaces/ITaskService\";\nimport { Part } from \"../../../business/models/part\";\nimport { Task } from \"../../../business/models/task\";\n\n@inject(LabelService, EventAggregator, DialogService, PartService, TaskService)\nexport class PreviouslyFittedParts extends BaseViewModel {\n\n    public parts: {part: Part, task: Task}[];\n    public readonly vanStockStatus: string;\n    public isFullScreen: boolean;\n    private _partService: IPartService;\n    private _taskService: ITaskService;\n\n    constructor(labelService: ILabelService,\n        eventAggregator: EventAggregator,\n        dialogService: DialogService,\n        partService: IPartService,\n        taskService: ITaskService) {\n        super(labelService, eventAggregator, dialogService);\n        this._partService = partService;\n        this._taskService = taskService;\n        this.vanStockStatus = \"V\";\n        this.isFullScreen = window.isFullScreen;\n    }\n\n    public activateAsync(params: { jobId: string }): Promise<any> {\n        this.parts = [];\n\n   return Promise.all([\n            this._partService.getFittedParts(params.jobId),\n            this._taskService.getAllTasksEverAtProperty(params.jobId),\n        ])\n        .then(([parts, tasks]) => {\n            this.parts = [];\n            if (parts) {\n                 parts.forEach(part => this.parts.push({\n                     part,\n                     task: tasks.find(t => t.id === part.taskId)\n                    })\n                );\n            }\n            this.showContent();\n        });\n    }\n}\n"],"sourceRoot":"../../../.."}