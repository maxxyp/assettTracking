{"version":3,"sources":["hema/core/pollingHelper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA;QAAA;QAkBA,CAAC;QAhBuB,2BAAa,GAAjC,UAAkC,QAAgC,EAAE,SAAwB;YAAxB,0BAAA,EAAA,cAAwB;;;;;;iCAEjF,IAAI;4BACP,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;gCACpB,MAAM,kBAAA;4BACV,CAAC;4BAEK,YAAY,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;4BACvC,qBAAM,OAAO,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,EAAA;;4BAAxC,SAAwC,CAAC;4BACtB,qBAAM,QAAQ,EAAE,EAAA;;4BAA7B,UAAU,GAAG,SAAgB;4BAEnC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gCACb,MAAM,kBAAA;4BACV,CAAC;;;;;;SAER;QACL,oBAAC;IAAD,CAlBA,AAkBC,IAAA;IAlBY,sCAAa","file":"pollingHelper.js","sourcesContent":["export class PollingHelper {\r\n\r\n    public static async pollIntervals(delegate: () => Promise<boolean>, intervals: number[] = []): Promise<void> {\r\n\r\n        while (true) {\r\n            if (!intervals.length) {\r\n                break;\r\n            }\r\n\r\n            const thisInterval = intervals.shift();\r\n            await Promise.delay(thisInterval * 1000);\r\n            const shouldQuit = await delegate();\r\n\r\n            if (shouldQuit) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}