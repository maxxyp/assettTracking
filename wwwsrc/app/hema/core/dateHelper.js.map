{"version":3,"sources":["hema/core/dateHelper.ts"],"names":[],"mappings":"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","file":"dateHelper.js","sourcesContent":["import * as moment from \"moment\";\r\nimport { StringHelper } from \"../../common/core/stringHelper\";\r\nimport { IAppointmentBand } from \"../business/models/reference/IAppointmentBand\";\r\n\r\nexport class DateHelper {\r\n    public static jsonISO8601RegEx: RegExp = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/;\r\n    public static jsonISO8601Format: string = \"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\";\r\n    public static jsonDateTimeFormat: string = \"YYYY-MM-DD[T]HH:mm:ss[Z]\";\r\n    public static jsonDateTimeRegEx: RegExp = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/;\r\n    public static jsonDateFormat: string = \"YYYY-MM-DD\";\r\n    public static jsonDateRegEx: RegExp = /\\d{4}-\\d{2}-\\d{2}Z/;\r\n    public static timeFormat: string = \"HH:mm\";\r\n\r\n    public static getTodaysDate(): Date {\r\n        return moment().toDate();\r\n    }\r\n\r\n    public static getTimestampMs(): number {\r\n        return new Date().getTime();\r\n    }\r\n\r\n    public static isDate(value: any): boolean {\r\n        return value === null || value === undefined ? false : Object.prototype.toString.call(value) === \"[object Date]\";\r\n    }\r\n\r\n    public static isValidDate(value: Date): boolean {\r\n        return !isNaN(value.getTime());\r\n    }\r\n\r\n    public static isJsonISO8601String(date: string): boolean {\r\n        if (StringHelper.isString(date)) {\r\n            let matches = date.match(DateHelper.jsonISO8601RegEx);\r\n            return matches && matches.length > 0;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static toJsonISO8601String(date: Date): string {\r\n        if (!DateHelper.isDate(date)) {\r\n            return undefined;\r\n        } else {\r\n            return moment(date).format(DateHelper.jsonISO8601Format);\r\n        }\r\n    }\r\n\r\n    public static fromJsonISO8601String(json: string): Date {\r\n        if (json === undefined) {\r\n            return undefined;\r\n        } else if (json === null) {\r\n            return null;\r\n        } else {\r\n            let m = moment.utc(json, DateHelper.jsonISO8601Format, true);\r\n            return m.isValid() ? m.toDate() : undefined;\r\n        }\r\n    }\r\n\r\n    public static isJsonDateTimeString(date: string): boolean {\r\n        if (StringHelper.isString(date)) {\r\n            let matches = date.match(DateHelper.jsonDateTimeRegEx);\r\n            return matches && matches.length > 0;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static toJsonDateTimeString(date: Date): string {\r\n        if (!DateHelper.isDate(date)) {\r\n            return undefined;\r\n        } else {\r\n            return moment(date).format(DateHelper.jsonDateTimeFormat);\r\n        }\r\n    }\r\n\r\n    public static fromJsonDateTimeString(json: string): Date {\r\n        if (json === undefined) {\r\n            return undefined;\r\n        } else if (json === null) {\r\n            return null;\r\n        } else {\r\n            let m = moment(json, DateHelper.jsonDateTimeFormat, true);\r\n            return m.isValid() ? m.toDate() : undefined;\r\n        }\r\n    }\r\n\r\n    public static isJsonDateString(date: string): boolean {\r\n        if (StringHelper.isString(date)) {\r\n            let matches = date.match(DateHelper.jsonDateRegEx);\r\n            return matches && matches.length > 0;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static toJsonDateString(date: Date): string {\r\n        if (!DateHelper.isDate(date)) {\r\n            return undefined;\r\n        } else {\r\n            return moment(date).format(DateHelper.jsonDateFormat);\r\n        }\r\n    }\r\n\r\n    public static fromJsonDateString(json: string): Date {\r\n        if (json === undefined) {\r\n            return undefined;\r\n        } else if (json === null) {\r\n            return null;\r\n        } else {\r\n            const dateJson = (json.length > 10) ? json.substr(0, 10) : json;\r\n            let m = moment(dateJson, DateHelper.jsonDateFormat, true);\r\n            return m.isValid() ? m.toDate() : undefined;\r\n        }\r\n    }\r\n\r\n    public static dateIsOnSunday(date: Date): boolean {\r\n        let flag: boolean = false;\r\n        if (moment(date).day() === 0) { // sunday\r\n            flag = true;\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    public static dateIsOnFriday(date: Date): boolean {\r\n        let flag: boolean = false;\r\n        if (moment(date).day() === 5) { // friday\r\n            flag = true;\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    public static dateIsOnSaturday(date: Date): boolean {\r\n        let flag: boolean = false;\r\n        if (moment(date).day() === 6) { // saturday\r\n            flag = true;\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    public static dateInMondayToThursDay(date: Date): boolean {\r\n        let flag: boolean = false;\r\n        switch (moment(date).day()) {\r\n            case 1: // monday\r\n            case 2: // tuesday\r\n            case 3: // wednesday\r\n            case 4: // thursday\r\n                flag = true;\r\n                break;\r\n            default:\r\n                flag = false;\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    public static dateInMondayToFriday(date: Date): boolean {\r\n        let flag: boolean = false;\r\n        switch (moment(date).day()) {\r\n            case 1: // monday\r\n            case 2: // tuesday\r\n            case 3: // wednesday\r\n            case 4: // thursday\r\n            case 5: // friday\r\n                flag = true;\r\n                break;\r\n            default:\r\n                flag = false;\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    // parse time range '10:00-12:00' to appropriate object\r\n    public static parseTimeRangeSlot(timeSlotRange: string): { start: moment.Moment, end: moment.Moment } {\r\n        let timeslot: { start: moment.Moment, end: moment.Moment } = <{ start: moment.Moment, end: moment.Moment }>{};\r\n        if (timeSlotRange) {\r\n            let start = timeSlotRange.split(\"-\")[0];\r\n            let end = timeSlotRange.split(\"-\")[1];\r\n            if (start) {\r\n                timeslot.start = moment(start, DateHelper.timeFormat);\r\n            }\r\n            if (end) {\r\n                timeslot.end = moment(end, DateHelper.timeFormat);\r\n            }\r\n        }\r\n        return timeslot;\r\n    }\r\n\r\n    public static timeStringToJsonDateTimeString(timeString: string): string {\r\n        if (timeString) {\r\n            return moment(timeString, DateHelper.timeFormat).format(DateHelper.jsonDateTimeFormat);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    public static parseAppointmentStartTime(appointmentBand: IAppointmentBand): moment.Moment {\r\n        if (appointmentBand && appointmentBand.appointmentBandDescription) {\r\n            let start = appointmentBand.appointmentBandDescription.split(\"-\")[0];\r\n            if (start) {\r\n                start = start.trim();\r\n                start = StringHelper.splice(start, 3, 0, \":\");\r\n                return moment(start, DateHelper.timeFormat);\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    public static getEstimatedDurationOfAppointmentMaxValue(startTime: number, estimatedEndTimeInMinutes: number): number {\r\n        // convert hours into minutes\r\n        let startTimeInMinutes: number = startTime * 60;\r\n        return (estimatedEndTimeInMinutes - startTimeInMinutes) - 1;\r\n    }\r\n\r\n    public static convertDateTime(fromString: string): Date {\r\n        if (DateHelper.isJsonISO8601String(fromString)) {\r\n            return DateHelper.fromJsonISO8601String(fromString);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static getHourMinutes(timestamp: Date): string {\r\n        return moment(timestamp).seconds(0).milliseconds(0).format(\"HH:mm\");\r\n    }\r\n\r\n    public static getDurationMinutes(firsTimestamp: Date, secondTimestamp: Date, decimalPlaces: number = 1): string {\r\n        let date1 = moment(firsTimestamp).seconds(0).milliseconds(0).toISOString();\r\n        let date2 = moment(secondTimestamp).seconds(0).milliseconds(0).toISOString();\r\n        const ms = moment(date2).diff(moment(date1));\r\n        return moment.duration(ms).asMinutes().toFixed(decimalPlaces).toString();\r\n    }\r\n\r\n    public static isSameDay(timestamp: Date, currentDate: Date): boolean {\r\n        return (timestamp) && (moment(timestamp).isSame(moment(currentDate), \"day\"));\r\n    }\r\n\r\n    // moment.min and moment.max does not play well\r\n    // with dates without times. \r\n    // hence the following function\r\n    public static getMinDate(values: string[]): string {\r\n        let minValue = values[0];\r\n        let minDateValue = new Date(values[0]);\r\n        values.forEach((dt: any, index) => {\r\n            if (new Date(dt) < minDateValue) {\r\n                minValue = dt;\r\n                minDateValue = new Date(dt);\r\n            }\r\n        });\r\n        return minValue;\r\n    }\r\n\r\n    public static getDate(time: string): Date {\r\n        if (time) {\r\n            let hours = parseInt(time.split(\":\")[0], 10);\r\n            let minutes = parseInt(time.split(\":\")[1], 10);\r\n            let currentDate = moment();\r\n            currentDate.set(\"hours\", hours);\r\n            currentDate.set(\"minutes\", minutes);\r\n            return currentDate.toDate();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static getTimeDiffInMins(date1: Date, date2: Date): number {\r\n        return moment(date1).diff(moment(date2), \"minutes\");\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}