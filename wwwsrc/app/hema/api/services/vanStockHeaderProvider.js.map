{"version":3,"sources":["hema/api/services/vanStockHeaderProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiBA,IAAM,gBAAgB,GAA6B,EAAE,QAAQ,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC;IAEjF;QASI,gCAAY,UAAuB,EAAE,eAAiC,EAAE,cAA+B,EAAE,UAAuB,EAAE,eAAiC;YAC/J,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YACxC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QAC5C,CAAC;QAEM,iDAAgB,GAAvB,UAAwB,aAA4B;YAChD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACxC,CAAC;QAEY,2CAAU,GAAvB,UAAwB,SAAiB;;;;;;;4BAC/B,OAAO,GAAkB,CAAC,IAAI,CAAC,cAAc,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BACpE,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,WAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;4BAE1D,UAAU,GAAY,KAAK,CAAC;;;;4BAEd,qBAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,EAAA;;4BAA9D,UAAU,GAAG,CAAC,SAAgD,CAAC,CAAC,UAAU,CAAC;;;;;;4BAI/E,OAAO,CAAC,IAAI,CACR,EAAE,IAAI,EAAE,mBAAmB,EAAE,KAAK,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,CAC9D,CAAC;4BAEE,QAAQ,GAAG,gBAAgB,CAAC;;;;4BAEf,qBAAM,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,EAAA;;4BAA7C,MAAM,GAAG,SAAoC;4BACjD,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC5E,QAAQ,GAAG,MAAM,CAAC;gCAClB,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;4BACxD,CAAC;iCAEG,CAAA,QAAQ,KAAK,gBAAgB,CAAA,EAA7B,yBAA6B;4BAC7B,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE,CAAC;iCAEjD,CAAA,MAAM,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,SAAS,KAAK,SAAS,CAAA,EAAzE,wBAAyE;4BACzE,QAAQ,GAAG,MAAM,CAAC;;;4BAEd,cAAc,GAAG;;;;gDACA,qBAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,EAAA;;4CAApD,QAAQ,GAAG,CAAA,SAAyC,KAAI,EAAE;4CAC1D,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,KAAK,mBAAQ,CAAC,OAAO,EAA5B,CAA4B,CAAC,CAAC;4CAC3D,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,KAAK,mBAAQ,CAAC,IAAI,EAAzB,CAAyB,CAAC,IAAI,EAAE,CAAC;4CACjE,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,KAAK,mBAAQ,CAAC,IAAI,EAAzB,CAAyB,CAAC,IAAI,EAAE,CAAC;4CACpE,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;4CACvG,sBAAO,GAAG,IAAI,GAAG,CAAC,eAAe,IAAI,GAAG,CAAC,eAAe,CAAC,QAAQ,IAAI,SAAS,EAAC;;;iCAClF,CAAC;4BAEe,qBAAM,cAAc,EAAE,EAAA;;4BAAjC,QAAQ,GAAG,SAAsB;iCACnC,QAAQ,EAAR,yBAAQ;4BACU,qBAAM,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAA;;4BAA7D,WAAW,GAAG,SAA+C;4BAEjE,EAAE,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gCAC/D,QAAQ,GAAG,WAAW,CAAC;gCACvB,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;4BACxD,CAAC;;;;;;;4BAOjB,OAAO,CAAC,IAAI,CACR,EAAE,IAAI,EAAE,gBAAgB,EAAE,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,EAC/D,EAAE,IAAI,EAAE,gBAAgB,EAAE,KAAK,EAAE,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,CACnE,CAAC;4BAEF,sBAAO,OAAO,EAAC;;;;SAClB;QA9EQ,sBAAsB;YADlC,qCAAM,CAAC,uBAAU,EAAE,iCAAe,EAAE,+BAAc,EAAE,uBAAU,EAAE,iCAAe,CAAC;;WACpE,sBAAsB,CA+ElC;QAAD,6BAAC;KA/ED,AA+EC,IAAA;IA/EY,wDAAsB","file":"vanStockHeaderProvider.js","sourcesContent":["import { IHttpHeaderProvider } from \"../../../common/resilience/services/interfaces/IHttpHeaderProvider\";\r\nimport { IHttpHeader } from \"../../../common/core/IHttpHeader\";\r\nimport { inject } from \"aurelia-dependency-injection\";\r\nimport { IGpsService } from \"../../../common/geo/IGpsService\";\r\nimport { GpsService } from \"../../../common/geo/gpsService\";\r\nimport { EngineerService } from \"../../business/services/engineerService\";\r\nimport { IEngineerService } from \"../../business/services/interfaces/IEngineerService\";\r\nimport { Guid } from \"../../../common/core/guid\";\r\nimport { GeoPosition } from \"../../../common/geo/models/geoPosition\";\r\nimport { StorageService } from \"../../business/services/storageService\";\r\nimport { IStorageService } from \"../../business/services/interfaces/IStorageService\";\r\nimport { GeoService } from \"../../../common/geo/geoService\";\r\nimport { IGeoService } from \"../../../common/geo/IGeoService\";\r\nimport { JobCacheService } from \"../../business/services/jobCacheService\";\r\nimport { IJobCacheService } from \"../../business/services/interfaces/IJobCacheService\";\r\nimport { JobState } from \"../../business/models/jobState\";\r\n\r\nconst DUMMY_GEOPOSTION: GeoPosition = <GeoPosition>{ latitude: 0, longitude: 0 };\r\n@inject(GpsService, EngineerService, StorageService, GeoService, JobCacheService)\r\nexport class VanStockHeaderProvider implements IHttpHeaderProvider {\r\n\r\n    private _staticHeaders: IHttpHeader[];\r\n    private _gpsService: IGpsService;\r\n    private _engineerService: IEngineerService;\r\n    private _storageService: IStorageService;\r\n    private _geoService: IGeoService;\r\n    private _jobCacheService: IJobCacheService;\r\n\r\n    constructor(gpsService: IGpsService, engineerService: IEngineerService, storageService: IStorageService, geoService: IGeoService, jobCacheService: IJobCacheService) {\r\n        this._gpsService = gpsService;\r\n        this._engineerService = engineerService;\r\n        this._storageService = storageService;\r\n        this._geoService = geoService;\r\n        this._jobCacheService = jobCacheService;\r\n    }\r\n\r\n    public setStaticHeaders(staticHeaders: IHttpHeader[]): void {\r\n        this._staticHeaders = staticHeaders;\r\n    }\r\n\r\n    public async getHeaders(routeName: string): Promise<IHttpHeader[]> {\r\n        const headers: IHttpHeader[] = (this._staticHeaders || []).slice(0);\r\n        headers.push({ name: \"X-Request-ID\", value: Guid.newGuid() });\r\n\r\n        let isSignedOn: boolean = false;\r\n        try {\r\n            isSignedOn = (await this._engineerService.getCurrentEngineer()).isSignedOn;\r\n        } catch (error) {\r\n\r\n        }\r\n        headers.push(\r\n            { name: \"X-Engineer-Status\", value: isSignedOn.toString() }\r\n        );\r\n\r\n        let location = DUMMY_GEOPOSTION;\r\n        try {\r\n            let result = await this._gpsService.getLocation();\r\n            if (result && result.latitude !== undefined && result.longitude !== undefined) {\r\n                location = result;\r\n                this._storageService.setLastKnownLocation(location);\r\n            }\r\n\r\n            if (location === DUMMY_GEOPOSTION) {\r\n                result = this._storageService.getLastKnownLocation();\r\n\r\n                if (result && result.latitude !== undefined && result.longitude !== undefined) {\r\n                    location = result;\r\n                } else {\r\n                    let getJobPostCode = async () => {\r\n                        const jobsToDo = await this._jobCacheService.getJobsToDo() || [];\r\n                        const liveJob = jobsToDo.find(x => x.state === JobState.arrived);\r\n                        const liveJobs = jobsToDo.filter(x => x.state !== JobState.done) || [];\r\n                        const attendedJob = jobsToDo.filter(x => x.state === JobState.done) || [];\r\n                        const job = liveJob ? liveJob : liveJobs.length && liveJobs[0] || attendedJob.length && attendedJob[0];\r\n                        return job && job.customerAddress && job.customerAddress.postCode || undefined;\r\n                    };\r\n\r\n                    const postCode = await getJobPostCode();\r\n                    if (postCode) {\r\n                        let geoPosition = await this._geoService.getGeoPosition(postCode);\r\n\r\n                        if (geoPosition && geoPosition.latitude && geoPosition.longitude) {\r\n                            location = geoPosition;\r\n                            this._storageService.setLastKnownLocation(location);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n        headers.push(\r\n            { name: \"X-Engineer-Lat\", value: location.latitude.toString() },\r\n            { name: \"X-Engineer-Lon\", value: location.longitude.toString() }\r\n        );\r\n\r\n        return headers;\r\n    }\r\n}\r\n"],"sourceRoot":"../../.."}