{"version":3,"sources":["hema/business/models/charge/chargeableTask.ts"],"names":[],"mappings":"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","file":"chargeableTask.js","sourcesContent":["import { Task } from \"../task\";\r\nimport { ChargeableBase } from \"./chargeableBase\";\r\nimport * as bignumber from \"bignumber\";\r\nimport { ChargeablePartItem } from \"./chargeablePartItem\";\r\nimport { ChargeableLabourItem } from \"./chargeableLabourItem\";\r\nimport { PrimeSubCharge } from \"./primeSubCharge\";\r\nimport { IActivityCmpnentVstStatus } from \"../reference/IActivityCmpnentVstStatus\";\r\n\r\nexport class ChargeableTask extends ChargeableBase {\r\n    public task: Task;\r\n    public chargeDescription: string;\r\n    public isLabourCharge: boolean;\r\n    public isPartsCharge: boolean;\r\n    public vat: bignumber.BigNumber;\r\n    public discountAmount: bignumber.BigNumber;\r\n    public discountCode: string;\r\n    public discountText: string;\r\n    public vatCode: string;\r\n    public isSubsequent: boolean;\r\n    public labourItem: ChargeableLabourItem;\r\n    public partItems: ChargeablePartItem [];\r\n    public fixedPriceQuotationAmount: bignumber.BigNumber;\r\n    public error: boolean;\r\n    public errorDescription: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.partItems = [];\r\n        this.isLabourCharge = false;\r\n        this.isPartsCharge = false;\r\n        this.isSubsequent = false;\r\n        this.labourItem = new ChargeableLabourItem();\r\n        this.fixedPriceQuotationAmount = new bignumber.BigNumber(0);\r\n        this.error = false;\r\n        this.errorDescription = \"\";\r\n        this.discountAmount = new bignumber.BigNumber(0);\r\n    }\r\n\r\n    public get partItemsCharge(): bignumber.BigNumber {\r\n\r\n        let total = new bignumber.BigNumber(0);\r\n\r\n        if (this.partItems) {\r\n            this.partItems.forEach(x => {\r\n                if (x.netAmount) {\r\n                    total = total.plus(x.netAmount);\r\n                }\r\n            });\r\n        }\r\n        return total;\r\n    }\r\n\r\n    public get calculatedVatAmount(): bignumber.BigNumber {\r\n        return this.calculateVatAmount(this.netTotal, this.vat);\r\n    }\r\n\r\n    public get grossTotal(): bignumber.BigNumber {\r\n        let value = this.calculateGrossAmount(this.netTotal, this.vat);\r\n\r\n        return value.round(2);\r\n    }\r\n\r\n    public get netTotal(): bignumber.BigNumber {\r\n        let total = new bignumber.BigNumber(0);\r\n\r\n        if (this.fixedPriceQuotationAmount && this.fixedPriceQuotationAmount.greaterThan(0)) {\r\n            return this.fixedPriceQuotationAmount;\r\n        }\r\n\r\n        total = total.plus(this.partItemsCharge);\r\n\r\n        if (this.labourItem) {\r\n            if (this.labourItem.netAmount && this.labourItem.netAmount.greaterThan(0)) {\r\n                total = total.plus(this.labourItem.netAmount);\r\n            }\r\n        }\r\n\r\n        if (this.discountAmount) {\r\n            if (this.discountAmount.greaterThan(total)) {\r\n                total = new bignumber.BigNumber(0);\r\n            } else if (this.discountAmount.greaterThan(0)) {\r\n                total = total.minus(this.discountAmount);\r\n            }\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    public get fixedPriceAmount(): bignumber.BigNumber {\r\n        let total = new bignumber.BigNumber(0);\r\n\r\n        if (this.labourItem.isFixed) {\r\n            total = this.labourItem.netAmount;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    public get useFixedPriceQuotation(): boolean {\r\n        if (this.fixedPriceQuotationAmount && this.fixedPriceQuotationAmount.greaterThan(0)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public updateLabourItem(description: string, chargePair: PrimeSubCharge, isFixed: boolean): void {\r\n        if (this.labourItem) {\r\n            this.labourItem.isFixed = isFixed;\r\n            this.labourItem.description = description;\r\n            this.labourItem.chargePair = chargePair;\r\n            this.labourItem.vat = this.vat;\r\n        }\r\n    }\r\n\r\n    public addPartItem(description: string, netAmount: bignumber.BigNumber, isReturn: boolean, isWarranty: boolean,\r\n                       qty: number, qtyCharged: number, refId: string, returnQty: number, warrantyQty: number,\r\n                       previous: boolean = false, status: string = \"\"): void {\r\n\r\n        let partItem = new ChargeablePartItem();\r\n        partItem.description = description;\r\n        partItem.vat = this.vat;\r\n        partItem.isReturn = isReturn;\r\n        partItem.isWarranty = isWarranty;\r\n        partItem.qty = qty;\r\n        partItem.qtyCharged = qtyCharged;\r\n        partItem.stockReferenceId = refId;\r\n        partItem.netAmount = netAmount;\r\n        partItem.returnQty = returnQty;\r\n        partItem.warrantyQty = warrantyQty;\r\n        partItem.isFromPreviousActivity = previous;\r\n        partItem.status = status;\r\n\r\n        this.partItems.push(partItem);\r\n    }\r\n\r\n    public setErrorsPrimeAndSubCharges(ignoreSubsequentCharges: boolean): void {\r\n\r\n        if (this && this.isLabourCharge && this.labourItem && this.labourItem.chargePair) {\r\n\r\n            const {labourItem, isSubsequent} = this;\r\n            const {isFixed, chargePair} = labourItem;\r\n            const {noPrimeChargesFound, noSubsequentChargesFound} = chargePair;\r\n\r\n            if (!isFixed) {\r\n                if (noPrimeChargesFound && !isSubsequent) {\r\n                    this.error = true;\r\n                    this.errorDescription = \"no prime charge intervals found\";\r\n                } else if (noSubsequentChargesFound && !ignoreSubsequentCharges && isSubsequent) {\r\n                    this.error = true;\r\n                    this.errorDescription = \"no subsequent charge intervals found\";\r\n                }\r\n            } else {\r\n                if (noPrimeChargesFound && !isSubsequent) {\r\n                    this.error = true;\r\n                    this.errorDescription = \"no prime charge found for standard labour\";\r\n                } else if (noSubsequentChargesFound && !ignoreSubsequentCharges && isSubsequent) {\r\n                    this.error = true;\r\n                    this.errorDescription = \"no subsequent charge found for standard labour\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get getTotalPreviousChargeableTimeForTask(): number {\r\n        let totalChargeableTime: number = 0;\r\n\r\n        for (let i: number = 0; i < this.task.activities.length; i++) {\r\n            let activity = this.task.activities[i];\r\n            if (activity && activity.chargeableTime) {\r\n                totalChargeableTime += activity.chargeableTime;\r\n            }\r\n        }\r\n\r\n        return totalChargeableTime;\r\n    }\r\n\r\n    public shouldCharge(statuses: IActivityCmpnentVstStatus [], chargeStatusCodes: string [] ): boolean {\r\n\r\n        if (this.error) {\r\n            return false;\r\n        }\r\n\r\n        if (this.task.status) {\r\n\r\n            const status = statuses.find(a => a.status === this.task.status);\r\n\r\n            if (status && chargeStatusCodes) {\r\n                const index = chargeStatusCodes.findIndex(c => c === status.jobStatusCategory);\r\n                return index > -1;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public setChargeableTaskAsError(message: string): void {\r\n        this.error = true;\r\n        this.errorDescription = message;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../../../.."}