{"version":3,"sources":["hema/business/models/job.ts"],"names":[],"mappings":"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","file":"job.js","sourcesContent":["import { Appointment } from \"./appointment\";\nimport { Visit } from \"./visit\";\nimport { Contact } from \"./contact\";\nimport { Risk } from \"./risk\";\nimport { Premises } from \"./premises\";\nimport { Task } from \"./task\";\nimport { History } from \"./history\";\nimport { JobState } from \"./jobState\";\nimport { PropertySafety } from \"./propertySafety\";\nimport { PartsDetail } from \"./partsDetail\";\nimport { Charge } from \"./charge/charge\";\nimport { Address as AddressBusinessModel } from \"./address\";\nimport { CustomerContact } from \"./customerContact\";\nimport { RiskAcknowledgement } from \"./riskAcknowledgement\";\nimport { NumberHelper } from \"../../core/numberHelper\";\nimport { DateHelper } from \"../../core/dateHelper\";\nimport { JobNotDoingReason } from \"./jobNotDoingReason\";\nimport { PropertySafetyType } from \"./propertySafetyType\";\nimport { Guid } from \"../../../common/core/guid\";\nimport { Part } from \"./part\";\n\nexport class Job {\n    public id: string;\n    public isBadlyFormed: {isBadlyFormed: boolean, reason?: string};\n    public uniqueId: string; // jobs with the same id can be returned from WMIS\n    public wmisTimestamp: string; // keep as string for the time being, we only need to know if/when this changes\n    public position: number;\n    public customerId: string;\n    public risks: Risk[];\n\n    // added by #15745, risks go back to WMIS via appliance object, so need to participate in CRUD tracking\n    public deletedRisks: Risk[];\n\n    public contact: Contact;\n    public premises: Premises;\n    public customerAddress: AddressBusinessModel;\n    public customerContact: CustomerContact;\n    public visit: Visit;\n\n    public tasks: Task[];\n    public tasksNotToday: Task[];\n\n    public specialInstructions: string;\n    public history: History;\n    public propertySafetyType: PropertySafetyType;\n    public propertySafety: PropertySafety;\n\n    public dispatchTime: Date;\n    public enrouteTime: Date;\n    public onsiteTime: Date;\n    public completionTime: Date;\n    public pendingTime: Date;\n    public allocationTime: Date;\n    public holdTime: Date;\n    public cancellationTime: Date;\n\n    public state: JobState;\n\n    public appointment: Appointment;\n    public partsDetail: PartsDetail;\n    public charge: Charge;\n    public isLandlordJob: boolean;\n    public wasOriginallyLandlordJob: boolean;\n    public riskAcknowledgement: RiskAcknowledgement;\n    public jobNotDoingReason: JobNotDoingReason;\n\n    constructor() {\n        this.state = JobState.idle;\n        this.riskAcknowledgement = new RiskAcknowledgement();\n        this.uniqueId = Guid.newGuid();\n    }\n\n    public static hasCharge(job: Job): boolean {\n        return job && job.tasks && job.tasks.some(task => task.isCharge);\n    }\n\n    public static isActive(job: Job): boolean {\n        return !!job && job.state !== JobState.idle && job.state !== JobState.done;\n    }\n\n    public static getTasksAndCompletedTasks(job: Job): Task[] {\n        // tasks are stored in their presentation order.  We want completed tasks at the end\n        //  so the combined list of tasks emerging from here will be in the desired presentation order.\n        //  todo: should ordering be done explicitly at the UI?\n        return (job.tasks || []).concat(job.tasksNotToday || []);\n    }\n\n    public static hasHazardAndRisk(job: Job): { hasHazard: boolean, hasRisk: boolean } {\n        let risks = job.risks || [];\n\n        return {\n            hasHazard: risks.some(risk => risk.isHazard),\n            hasRisk: risks.some(risk => !risk.isHazard)\n        };\n    }\n\n    public static isLandlordJob(job: Job): boolean {\n        return !!(job\n                    && job.tasks\n                    && job.tasks.some(task =>\n                        task\n                        && !task.isNotDoingTask\n                        && task.jobType === \"AS\"\n                        && task.applianceType === \"INS\"\n                        )\n        );\n    }\n\n    public static fromJson(raw: any): Job {\n\n        let job = new Job();\n\n        Object.assign(job, raw);\n\n        job.dispatchTime = DateHelper.convertDateTime(raw.dispatchTime);\n        job.enrouteTime = DateHelper.convertDateTime(raw.enrouteTime);\n        job.onsiteTime = DateHelper.convertDateTime(raw.onsiteTime);\n        job.completionTime = DateHelper.convertDateTime(raw.completionTime);\n        job.pendingTime = DateHelper.convertDateTime(raw.pendingTime);\n        job.allocationTime = DateHelper.convertDateTime(raw.allocationTime);\n        job.holdTime = DateHelper.convertDateTime(raw.holdTime);\n        job.cancellationTime = DateHelper.convertDateTime(raw.cancellationTime);\n\n        // todo put in Risks.fromJson(...)\n        if (raw.risks) {\n            raw.risks.forEach((risk: any) => risk.date = DateHelper.convertDateTime(risk.date));\n            job.risks = raw.risks;\n        }\n\n        if (raw.deletedRisks) {\n            raw.deletedRisks.forEach((risk: any) => risk.date = DateHelper.convertDateTime(risk.date));\n            job.deletedRisks = raw.deletedRisks;\n        }\n\n        // todo put in Visit.fromJson...\n        if (raw.visit) {\n            const {timeSlotFrom, timeSlotTo} = raw.visit;\n            job.visit.timeSlotFrom = DateHelper.convertDateTime(timeSlotFrom);\n            job.visit.timeSlotTo = DateHelper.convertDateTime(timeSlotTo);\n        }\n\n        // todo put in Task.fromJson\n        if (raw.tasks) {\n            raw.tasks.forEach((task: any) => {\n                if (task.activities) {\n                    task.activities.forEach((activity: any) => {\n                        activity.date = DateHelper.convertDateTime(activity.date);\n\n                        if (activity.parts && activity.parts.length > 0) {\n                            activity.parts.forEach((part: any) => Part.fromJson(part));\n                        }\n                    });\n                }\n            });\n\n            job.tasks = raw.tasks;\n        }\n\n        if (raw.tasksNotToday) {\n            raw.tasksNotToday.forEach((task: any) => {\n                if (task.activities) {\n                    task.activities.forEach((activity: any) => {\n                        activity.date = DateHelper.convertDateTime(activity.date);\n                    });\n                }\n            });\n\n            job.tasksNotToday = raw.tasksNotToday;\n        }\n\n        // todo put in History.fromJson ...\n\n        if (raw.history) {\n            if (raw.history.tasks) {\n                raw.history.tasks.forEach((task: any) => {\n                    task.activities.forEach((activity: any) => {\n                        activity.date = DateHelper.convertDateTime(activity.date);\n                    });\n                });\n            }\n\n            if (raw.history.appliances) {\n                raw.history.appliances.forEach((appliance: any) => {\n                    appliance.contractExpiryDate = DateHelper.convertDateTime(appliance.contractExpiryDate);\n\n                    if (appliance.safety && appliance.safety.previousApplianceUnsafeDetail) {\n                        appliance.safety.previousApplianceUnsafeDetail.date =\n                            DateHelper.convertDateTime(appliance.safety.previousApplianceUnsafeDetail.date);\n                    }\n                });\n            }\n\n            job.history = raw.history;\n        }\n\n        // todo put in Appointment.fromJson...\n        if (raw.appointment) {\n            raw.appointment.promisedDate = DateHelper.convertDateTime(raw.appointment.promisedDate);\n            job.appointment = raw.appointment;\n        }\n\n        // todo put in PartBasket\n\n        if (raw.partsDetail) {\n            let {partsToday, partsBasket} = raw.partsDetail;\n\n            if (partsToday && partsToday.parts && partsToday.parts.length > 0) {\n                partsToday.parts.forEach((p: any) => Part.fromJson(p));\n            }\n\n            if (partsBasket) {\n\n                partsBasket.lastPartGatheredTime = DateHelper.convertDateTime(partsBasket.lastPartGatheredTime);\n\n                let {partsInBasket, partsToOrder, manualPartDetail} = partsBasket;\n\n                if (partsInBasket && partsInBasket.length > 0) {\n                    partsInBasket.forEach((p: any) => Part.fromJson(p));\n                }\n\n                if (partsToOrder && partsToOrder.length > 0) {\n                    partsToOrder.forEach((p: any) => Part.fromJson(p));\n                }\n\n                if (manualPartDetail && manualPartDetail.price) {\n                    manualPartDetail.price = NumberHelper.convertToBigNumber(manualPartDetail.price);\n                }\n            }\n\n            job.partsDetail = raw.partsDetail;\n        }\n\n        // todo put in chargeableMain\n\n        if (raw.charge) {\n            job.charge.discountAmount = NumberHelper.convertToBigNumber(raw.charge.discountAmount);\n            job.charge.netTotal = NumberHelper.convertToBigNumber(raw.charge.netTotal);\n            job.charge.chargeTotal = NumberHelper.convertToBigNumber(raw.charge.chargeTotal);\n            job.charge.totalVatAmount = NumberHelper.convertToBigNumber(raw.charge.totalVatAmount);\n\n            if (raw.charge.tasks) {\n                raw.charge.tasks.map((chargeableTask: any) => {\n\n                    if (chargeableTask.task) {\n\n                        chargeableTask.task.activities = chargeableTask.task.activities.map((activity: any) => {\n                            activity.date = DateHelper.convertDateTime(activity.date);\n                            return activity;\n                        });\n\n                        chargeableTask.vat = NumberHelper.convertToBigNumber(chargeableTask.vat);\n                        chargeableTask.discountAmount = NumberHelper.convertToBigNumber(chargeableTask.discountAmount);\n                        chargeableTask.fixedPriceQuotationAmount = NumberHelper.convertToBigNumber(chargeableTask.fixedPriceQuotationAmount);\n                        if (chargeableTask.labourItem) {\n                            chargeableTask.labourItem.netAmount = NumberHelper.convertToBigNumber(chargeableTask.labourItem.netAmount);\n                            chargeableTask.labourItem.vat = NumberHelper.convertToBigNumber(chargeableTask.labourItem.vat);\n\n                            if (chargeableTask.labourItem.chargePair) {\n                                let pair = chargeableTask.labourItem.chargePair;\n                                pair.primeCharge = NumberHelper.convertToBigNumber(pair.primeCharge);\n                                pair.subsequentCharge = NumberHelper.convertToBigNumber(pair.subsequentCharge);\n                            }\n                        }\n                        if (chargeableTask.partItems) {\n                            chargeableTask.partItems.forEach((partItem: any) => {\n                                partItem.netAmount = NumberHelper.convertToBigNumber(partItem.netAmount);\n                                partItem.vat = NumberHelper.convertToBigNumber(partItem.vat);\n                            });\n                        }\n                    }\n                    return chargeableTask;\n                });\n            }\n\n            job.charge = raw.charge;\n        }\n\n        return job;\n    }\n\n    public static isIncompleteSerialization(job: Job): boolean {\n        if (job && job.charge && job.charge.tasks && job.charge.tasks.length > 0) {\n            return job.charge.tasks.some(task => typeof task.calculatedVatAmount === \"undefined\");\n        }\n        return false;\n    }\n}\n"],"sourceRoot":"../../.."}