{"version":3,"sources":["hema/business/models/partsBasket.ts"],"names":[],"mappings":";;;;;;;;;;;;;IAIA;QAAkC,+BAAiB;QAmB/C,yCAAyC;QAEzC;YAAA,YACI,kBAAM,qBAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,SAMrC;YAJG,KAAI,CAAC,gCAAgC,GAAG,KAAK,CAAC;YAE9C,KAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YACvB,KAAI,CAAC,aAAa,GAAG,EAAE,CAAC;;QAC5B,CAAC;QACL,kBAAC;IAAD,CA7BA,AA6BC,CA7BiC,qCAAiB,GA6BlD;IA7BY,kCAAW","file":"partsBasket.js","sourcesContent":["import {DataStateProvider} from \"./dataStateProvider\";\nimport {Part} from \"./part\";\nimport {DataState} from \"./dataState\";\n\nexport class PartsBasket  extends DataStateProvider {\n    public lastPartGatheredTime: Date;\n\n    public partsToOrder: Part[]; // this property has the actual list of parts to order, use this when sending back to API\n    public partsInBasket: Part[];\n\n    public showAddPartManually: boolean;\n    public showSearchFavourites: boolean;\n    public showRemainingAddPartManuallyFields: boolean;\n    public manualPartDetail: Part;\n\n    // public partsRequired: boolean;\n    public hasAtLeastOneWrongActivityStatus: boolean;\n\n    public taskStatus: string;\n\n    public deliverPartsToSite: boolean;\n    public dataStateGroup: any;\n    public partsListValidation: string;\n    // public partsInBasketRequired: boolean;\n\n    constructor() {\n        super(DataState.dontCare, \"parts\");\n\n        this.hasAtLeastOneWrongActivityStatus = false;\n\n        this.partsToOrder = [];\n        this.partsInBasket = [];\n    }\n}\n"],"sourceRoot":"../../.."}