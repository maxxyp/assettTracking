{"version":3,"sources":["hema/business/models/jobLoggingHelper.ts"],"names":[],"mappings":";;;IAGA;QAAA;QAuDA,CAAC;QAnDU,6CAAkB,GAAzB,UAA0B,QAAa;YAEnC,+BAA+B;YAC/B,IAAI,GAAG,GAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,GAAG;gBACxD,0FAA0F;gBAC1F,6DAA6D;gBAC7D,MAAM,CAAC,GAAG,KAAK,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;YACnD,CAAC,CAAC,CAAC,CAAC;YAEJ,uDAAuD;YACvD,GAAG,CAAC,eAAe,GAAG,SAAS,CAAC;YAChC,GAAG,CAAC,eAAe,GAAG,SAAS,CAAC;YAChC,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC;YACzB,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC;YACxB,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC;YACtB,GAAG,CAAC,aAAa,GAAG,SAAS,CAAC;YAE9B,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,GAAG,CAAC,OAAO,CAAC,KAAK,GAAI,SAAS,CAAC;YACnC,CAAC;YAED,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,GAAG,SAAS,EAArB,CAAqB,CAAC,CAAC;YAC5D,CAAC;YAED,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;gBACX,IAAA,yCAAW,CAAoB;gBACtC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;oBACd,EAAE,CAAC,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBAC/B,WAAW,CAAC,gBAAgB,CAAC,sBAAsB,GAAG,SAAS,CAAC;oBACpE,CAAC;oBAED,EAAE,CAAC,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;wBAC5B,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,sBAAsB,GAAG,SAAS,EAAvC,CAAuC,CAAC,CAAC;oBACvF,CAAC;oBACD,EAAE,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;wBAC3B,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,sBAAsB,GAAG,SAAS,EAAvC,CAAuC,CAAC,CAAC;oBACtF,CAAC;gBACL,CAAC;gBACD,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,IAAI,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;oBACjE,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,sBAAsB,GAAG,SAAS,EAAvC,CAAuC,CAAC,CAAC;gBAC9F,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,2BAAY,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBACrD,MAAM,CAAC,aAAa,CAAC;YACzB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,MAAM,CAAC,GAAG,CAAC;YACf,CAAC;QACL,CAAC;QACL,uBAAC;IAAD,CAvDA,AAuDC,IAAA;IAvDY,4CAAgB","file":"jobLoggingHelper.js","sourcesContent":["import { Job } from \"./job\";\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\n\nexport class JobLoggingHelper {\n\n    public lastLoggedJob: Job;\n\n    public prepareLoggableJob(jobModel: Job): Job | \"Not changed\" {\n\n        // take a clone of the jobModel\n        let job: Job = JSON.parse(JSON.stringify(jobModel, (key, val) => {\n            // as we clone, lets get rid of the dataState guids - these get updated even when the user\n            //  is not editing data, so would give false positive changes\n            return key === \"dataStateId\" ? undefined : val;\n        }));\n\n        // clear parts of the business model that do not change\n        job.customerContact = undefined;\n        job.customerAddress = undefined;\n        job.premises = undefined;\n        job.contact = undefined;\n        job.visit = undefined;\n        job.tasksNotToday = undefined;\n\n        if (job.history) {\n            job.history.tasks =  undefined;\n        }\n\n        if (job.charge && job.charge.tasks) {\n            job.charge.tasks.forEach(task => task.task = undefined);\n        }\n\n        if (job.partsDetail) {\n            const {partsBasket} = job.partsDetail;\n            if (partsBasket) {\n                if (partsBasket.manualPartDetail) {\n                    partsBasket.manualPartDetail.patchVanStockEngineers = undefined;\n                }\n\n                if (partsBasket.partsInBasket) {\n                    partsBasket.partsInBasket.forEach(part => part.patchVanStockEngineers = undefined);\n                }\n                if (partsBasket.partsToOrder) {\n                    partsBasket.partsToOrder.forEach(part => part.patchVanStockEngineers = undefined);\n                }\n            }\n            if (job.partsDetail.partsToday && job.partsDetail.partsToday.parts) {\n                job.partsDetail.partsToday.parts.forEach(part => part.patchVanStockEngineers = undefined);\n            }\n        }\n\n        if (ObjectHelper.isComparable(job, this.lastLoggedJob)) {\n            return \"Not changed\";\n        } else {\n            this.lastLoggedJob = job;\n            return job;\n        }\n    }\n}\n"],"sourceRoot":"../../.."}