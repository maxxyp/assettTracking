{"version":3,"sources":["hema/business/models/applianceElectricalSafetyDetail.ts"],"names":[],"mappings":";;;;;;;;;;;;;IAGA;QAAqD,mDAAiB;QA0DlE;mBACI,kBAAM,qBAAS,CAAC,QAAQ,EAAE,YAAY,CAAC;QAC3C,CAAC;QAEa,yCAAS,GAAvB,UAAwB,+BAAgE;YACpF,2HAA2H;YAC3H,IAAI,kBAAkB,GAAG,CAAC,YAAY,EAAE,yBAAyB,EAAE,WAAW,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;YAEjH,IAAI,iBAAiB,GAAG,MAAM,CAAC,mBAAmB,CAAC,+BAA+B,CAAC;iBACtD,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAvC,CAAuC,CAAC,CAAC;YAErF,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAM,+BAAgC,CAAC,IAAI,CAAC,KAAK,SAAS,EAA1D,CAA0D,CAAC,CAAC;QACtG,CAAC;QACL,sCAAC;IAAD,CAvEA,AAuEC,CAvEoD,qCAAiB,GAuErE;IAvEY,0EAA+B","file":"applianceElectricalSafetyDetail.js","sourcesContent":["import {DataStateProvider} from \"./dataStateProvider\";\nimport {DataState} from \"./dataState\";\n\nexport class ApplianceElectricalSafetyDetail extends DataStateProvider {\n    public electricalApplianceType: string;  // e,m,w\n\n    public mainEarthChecked: string;\n    public gasBondingChecked: string;\n    public waterBondingChecked: string;\n    public otherBondingChecked: string;\n    public supplementaryBondingOrFullRcdProtectionChecked: string;\n    public ringContinuityReadingDone: string;\n\n    public leInsulationResistance: number;\n    public showLeInsulationResistanceReasonWhyNot: boolean;\n    public leInsulationResistanceReasonWhyNot: string;\n\n    public neInsulationResistance: number;\n    public showNeInsulationResistanceReasonWhyNot: boolean;\n    public neInsulationResistanceReasonWhyNot: string;\n\n    public lnInsulationResistance: number;\n    public showLnInsulationResistanceReasonWhyNot: boolean;\n    public lnInsulationResistanceReasonWhyNot: string;\n\n    public systemType: string;\n    public finalEliReadingDone: boolean;\n    public finalEliReading: number;\n    public readingSafeAccordingToTops: boolean;\n    public isRcdPresent: boolean;\n\n    public circuitRcdRcboProtected: string;\n    public rcdTripTimeReading: number;\n    public rcboTripTimeReading: number;\n    public applianceEarthContinuityReadingDone: boolean;\n    public applianceEarthContinuityReading: number;\n\n    public isApplianceHardWired: boolean;\n    public mcbFuseRating: string;\n    public showMcbFuseRatingReasonWhyNot: boolean;\n    public mcbFuseRatingReasonWhyNot: string;\n\n    public applianceFuseRating: string;\n    public showApplianceFuseRatingReasonWhyNot: boolean;\n    public applianceFuseRatingReasonWhyNot: string;\n\n    public isPartP: boolean;\n    public partPReason: string;\n\n    public workedOnLightingCircuit: boolean;\n    public cpcInLightingCircuitOk: boolean;\n\n    public installationSatisfactory: boolean;\n\n    public microwaveLeakageReading: number;\n    public showMicrowaveLeakageReadingReasonWhyNot: boolean;\n    public microwaveLeakageReadingReasonWhyNot: string;\n\n    public applianceSafe: boolean;\n    public applianceInstallationSatisfactory: boolean;\n\n    constructor() {\n        super(DataState.dontCare, \"appliances\");\n    }\n\n    public static isTouched(applianceElectricalSafetyDetail: ApplianceElectricalSafetyDetail): boolean {\n        // these are the fundamental properties that are always set that do not really indicate if the user has touched this record\n        let propertiesToIgnore = [\"systemType\", \"electricalApplianceType\", \"dataState\", \"dataStateGroup\", \"dataStateId\"];\n\n        let propertiesToCheck = Object.getOwnPropertyNames(applianceElectricalSafetyDetail)\n                                    .filter(prop => propertiesToIgnore.indexOf(prop) === -1);\n\n        return propertiesToCheck.some(prop => (<any>applianceElectricalSafetyDetail)[prop] !== undefined);\n    }\n}\n"],"sourceRoot":"../../.."}