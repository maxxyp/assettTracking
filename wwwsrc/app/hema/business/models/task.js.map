{"version":3,"sources":["hema/business/models/task.ts"],"names":[],"mappings":"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","file":"task.js","sourcesContent":["import {Activity} from \"./activity\";\nimport {TaskVisit} from \"./taskVisit\";\nimport {DataStateProvider} from \"./dataStateProvider\";\nimport {DataState} from \"./dataState\";\nimport {NumberHelper} from \"../../../common/core/numberHelper\";\nimport {StringHelper} from \"../../../common/core/stringHelper\";\n\nexport class Task extends DataStateProvider {\n    public id: string;\n    public fieldTaskId: string;\n    public jobType: string;\n    public applianceType: string;\n    public applianceId: string;\n    public chargeType: string;\n\n    public supportingText: string;\n    public specialRequirement: string;\n\n    public problemDesc: string;\n    public applianceMake: string;\n    public applianceModel: string;\n    public applianceErrorCode: string;\n    public applianceErrorDesc: string;\n\n    public activity: string;\n    public productGroup: string;\n    public partType: string;\n    public faultActionCode: string;\n    public sequence: number;\n\n    public discountCode: string;\n    public fixedPriceQuotationAmount: number;\n\n    public workDuration: number;\n    public chargeableTime: number;\n    public status: string;\n    public report: string;\n    public chirpCodes: string[];\n    public workedOnCode: string;\n    public adviceOutcome: string;\n    public adviceCode: string;\n    public adviceComment: string;\n    public activities: Activity[];\n    public endTime: string;\n    public startTime: string;\n    public previousVisits: TaskVisit[];\n    public isNewRFA: boolean;\n    public isMiddlewareDoTodayTask: boolean;\n    public isNotDoingTask: boolean;\n    public isTaskThatSetsJobAsNoAccessed: boolean;\n\n    public isPotentiallyPartLJReportable: boolean;\n    public isPartLJReportable: boolean;\n\n    public isCharge: boolean;\n    public orderNo: number; // just to order the task by\n\n    public isFirstVisit: boolean;\n    public showMainPartSelectedWithInvalidActivityTypeMessage: boolean;\n    public showMainPartSelectedWithInvalidProductGroupTypeMessage: boolean;\n    public showMainPartSelectedWithInvalidPartTypeMessage: boolean;\n    public hasMainPart: boolean;\n    public mainPartPartType: string;\n\n    constructor(isCurrentTask: boolean, isNewRFA: boolean) {\n        super(isCurrentTask ? DataState.notVisited : DataState.dontCare, isCurrentTask ? \"activities\" : \"previous-jobs\");\n        this.isNewRFA = isNewRFA;\n        this.orderNo = 1;\n        this.isMiddlewareDoTodayTask = true;\n        this.showMainPartSelectedWithInvalidActivityTypeMessage = false;\n        this.showMainPartSelectedWithInvalidProductGroupTypeMessage = false;\n        this.showMainPartSelectedWithInvalidPartTypeMessage = false;\n        this.hasMainPart = false;\n    }\n\n    public static isChargeableTask(chargeType: string, noChargePrefix: string): boolean {\n\n        if (chargeType === undefined) {\n            return false;\n        }\n\n        if (noChargePrefix === undefined) {\n            return false;\n        }\n\n        if (noChargePrefix === \"\") {\n            return false;\n        }\n\n        if (chargeType === \"\") {\n            return false;\n        }\n\n        const lenNoChargePrefix = noChargePrefix.length;\n\n        return chargeType.substr(0, lenNoChargePrefix) !== noChargePrefix;\n    }\n\n    public static getNextTaskId(tasks: Task[]): string {\n        if (!tasks || !tasks.length) {\n            return null;\n        }\n\n        let sortedExistingTaskIds = tasks\n            .filter(task => task && task.id)\n            .map(task => task.id)\n            .sort();\n\n        if (!sortedExistingTaskIds.length) {\n            return null;\n        }\n\n        let maxExistingTaskId =  sortedExistingTaskIds.pop();\n\n        if (maxExistingTaskId.length < 3) {\n            return null;\n        }\n\n        // if id is 123456789001 then root is 123456789 and suffix is 001\n        let idRoot = maxExistingTaskId.substr(0, maxExistingTaskId.length - 3);\n        let idSuffix = maxExistingTaskId.substr(maxExistingTaskId.length - 3);\n\n        if (!NumberHelper.canCoerceToNumber(idSuffix)) {\n            return null;\n        }\n\n        let nextIdSuffix = (NumberHelper.coerceToNumber(idSuffix) + 1).toString();\n\n        if (nextIdSuffix.length > 3) {\n            return null;\n        }\n\n        let paddedNextIdSuffix = StringHelper.padLeft(nextIdSuffix, \"0\", 3);\n\n        return idRoot + paddedNextIdSuffix;\n    }\n\n    public static getFieldTaskId(taskId: string): string {\n        /*  Jairam says that fieldTaskId should be a 8 digit number, e.g. \"00003902\".\n            It should be unique across all new tasks generated for the job.\n        */\n        if (taskId.length < 8) {\n            return StringHelper.padLeft(taskId, \"0\", 8);\n        } else {\n            return taskId.substr(taskId.length - 8);\n        }\n    }\n}\n"],"sourceRoot":"../../.."}