{"version":3,"sources":["hema/business/services/jobService.ts"],"names":[],"mappings":"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","file":"jobService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\nimport * as Logging from \"aurelia-logging\";\nimport { inject } from \"aurelia-framework\";\nimport { IJobService } from \"./interfaces/IJobService\";\nimport { FftService } from \"../../api/services/fftService\";\nimport { IFFTService } from \"../../api/services/interfaces/IFFTService\";\nimport { Job } from \"../models/job\";\nimport { BusinessException } from \"../models/businessException\";\nimport { StateMachine } from \"./stateMachine/stateMachine\";\nimport { JobState } from \"../models/jobState\";\nimport { State } from \"./stateMachine/state\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { DataStateSummary } from \"../models/dataStateSummary\";\nimport { WorkRetrievalServiceConstants } from \"./constants/workRetrievalServiceConstants\";\nimport { IJobStatusRequest } from \"../../api/models/fft/jobs/status/IJobStatusRequest\";\nimport { JobServiceConstants } from \"./constants/jobServiceConstants\";\nimport { IEngineerService } from \"./interfaces/IEngineerService\";\nimport { EngineerService } from \"./engineerService\";\nimport { IJobFactory } from \"../factories/interfaces/IJobFactory\";\nimport { JobFactory } from \"../factories/jobFactory\";\nimport { DateHelper } from \"../../core/dateHelper\";\nimport { IJobCacheService } from \"./interfaces/IJobCacheService\";\nimport { JobCacheService } from \"./jobCacheService\";\nimport { ICatalogService } from \"./interfaces/ICatalogService\";\nimport { CatalogService } from \"./catalogService\";\nimport { IBusinessRuleService } from \"../services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../services/businessRuleService\";\nimport { IPartFactory } from \"../factories/interfaces/IPartFactory\";\nimport { PartFactory } from \"../factories/partFactory\";\nimport { ArchiveService } from \"./archiveService\";\nimport { IArchiveService } from \"./interfaces/IArchiveService\";\nimport { IPartsOrderedRequest } from \"../../api/models/fft/jobs/orderparts/IPartsOrderedRequest\";\nimport { IJobUpdateRequest } from \"../../api/models/fft/jobs/jobupdate/IJobUpdateRequest\";\nimport { JobApiFailure } from \"../models/jobApiFailure\";\nimport { QueryableBusinessRuleGroup } from \"../models/businessRules/queryableBusinessRuleGroup\";\nimport { DataState } from \"../models/dataState\";\nimport { TaskBusinessRuleHelper } from \"../models/businessRules/taskBusinessRuleHelper\";\nimport { JobNotDoingReason } from \"../models/jobNotDoingReason\";\nimport * as moment from \"moment\";\nimport { JobPartsCollection } from \"../models/jobPartsCollection\";\nimport { Threading } from \"../../../common/core/threading\";\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\nimport { VanStockService } from \"./vanStockService\";\nimport { IVanStockService } from \"./interfaces/IVanStockService\";\nimport { IJobUpdate } from \"../../api/models/fft/jobs/jobupdate/IJobUpdate\";\nimport { IPartsOrderedTasks } from \"../../api/models/fft/jobs/orderparts/IPartsOrderedTasks\";\nimport { FeatureToggleService } from \"./featureToggleService\";\nimport { IFeatureToggleService } from \"./interfaces/IFeatureToggleService\";\nimport { AppConstants } from \"../../../appConstants\";\nimport { IToastItem } from \"../../../common/ui/elements/models/IToastItem\";\nimport { Guid } from \"../../../common/core/guid\";\n\n@inject(EngineerService, FftService, JobFactory, JobCacheService, EventAggregator, CatalogService, BusinessRuleService,\n    PartFactory, ArchiveService, VanStockService, FeatureToggleService)\nexport class JobService implements IJobService {\n    private _engineerService: IEngineerService;\n    private _fftService: IFFTService;\n    private _jobFactory: IJobFactory;\n    private _jobCacheService: IJobCacheService;\n    private _eventAggregator: EventAggregator;\n    private _businessRuleService: IBusinessRuleService;\n    private _partFactory: IPartFactory;\n    private _archiveService: IArchiveService;\n    private _vanStockService: IVanStockService;\n    private _featureToggleService: IFeatureToggleService;\n\n    private _stateMachine: StateMachine<JobState>;\n\n    private _logger: Logging.Logger;\n    private _isReVisitTabsAlreadyDone: boolean;\n\n    constructor(engineerService: IEngineerService,\n        fftService: IFFTService,\n        jobFactory: IJobFactory,\n        jobCacheService: IJobCacheService,\n        eventAggregator: EventAggregator,\n        catalogService: ICatalogService,\n        businessRuleService: IBusinessRuleService,\n        partFactory: IPartFactory,\n        archiveService: IArchiveService,\n        vanStockService: IVanStockService,\n        featureToggleService: IFeatureToggleService) {\n\n        this._engineerService = engineerService;\n        this._fftService = fftService;\n        this._jobFactory = jobFactory;\n        this._jobCacheService = jobCacheService;\n        this._eventAggregator = eventAggregator;\n        this._businessRuleService = businessRuleService;\n        this._partFactory = partFactory;\n        this._archiveService = archiveService;\n        this._vanStockService = vanStockService;\n        this._featureToggleService = featureToggleService;\n\n        this._stateMachine = new StateMachine<JobState>([\n            new State(JobState.idle, \"Idle\", [JobState.enRoute]),\n            new State(JobState.enRoute, \"Go en-route\", [JobState.arrived, JobState.deSelect]),\n            new State(JobState.deSelect, \"De-select\", [JobState.enRoute]),\n            new State(JobState.arrived, \"Arrive\", [JobState.complete]),\n            new State(JobState.complete, \"Complete\", [JobState.done]),\n            new State(JobState.done, \"Done\", [])\n        ]);\n        this._logger = Logging.getLogger(\"JobService\");\n        this._isReVisitTabsAlreadyDone = false;\n    }\n\n    public getJobsToDo(): Promise<Job[]> {\n        return this._jobCacheService.getJobsToDo();\n    }\n\n    public getWorkListJobApiFailures(): Promise<JobApiFailure[]> {\n        return this._jobCacheService.getWorkListJobApiFailures();\n    }\n\n    public getPartsCollections(): Promise<JobPartsCollection[]> {\n        return this._jobCacheService.getPartsCollections();\n    }\n\n    public async completePartsCollections(): Promise<void> {\n        let partsCollections = await this.getPartsCollections() || [];\n        partsCollections.forEach(partsCollection => partsCollection.done = true);\n        await this._jobCacheService.setPartsCollections(partsCollections);\n    }\n\n    public getJob(id: string): Promise<Job> {\n        return this._jobCacheService.getJob(id);\n    }\n\n    public setJob(job: Job): Promise<void> {\n        return this._jobCacheService.setJob(job);\n    }\n\n    public getActiveJobId(): Promise<string> {\n        return this.getActiveJob()\n            .then(activeJob => {\n                return activeJob ? activeJob.id : null;\n            });\n    }\n\n    public isJobEditable(jobId: string): Promise<boolean> {\n        return this.getJob(jobId)\n            .then(job => {\n                return job ? job.state === JobState.arrived : false;\n            });\n    }\n\n    public areAllJobsDone(): Promise<boolean> {\n        return this.getJobsToDo()\n            .then(jobs => {\n                if (jobs && jobs.length > 0) {\n                    let res = jobs.some(j => j.state !== JobState.done);\n                    return !res;\n                } else {\n                    return true;\n                }\n            });\n    }\n\n    public getJobState(jobId: string): Promise<State<JobState>> {\n        return this.getJob(jobId)\n            .then((job) => {\n                if (job) {\n                    return this._stateMachine.lookupState(job.state);\n                } else {\n                    throw new BusinessException(this, \"getJobState.notFound\", \"Job not found '{0}'\", [jobId], null);\n                }\n            });\n    }\n\n    public getJobTargetStates(jobId: string): Promise<State<JobState>[]> {\n        return this.getJob(jobId)\n            .then((job) => {\n                if (job) {\n                    return this._stateMachine.getTargetStates(job.state);\n                } else {\n                    throw new BusinessException(this, \"getJobTargetStates.notFound\", \"Job not found '{0}'\", [jobId], null);\n                }\n            });\n    }\n\n    public async setJobState(jobId: string, newState: JobState): Promise<void> {\n        const job = await this.getJob(jobId);\n\n        if (!this._stateMachine.trySetState(job.state, newState)) {\n            throw new BusinessException(this, \"setJobState.trySetState\", \"Unable to set the state to '{0}' for job '{1}'\", [newState, jobId], null);\n        }\n\n        job.state = newState;\n\n        switch (job.state) {\n            case JobState.idle:\n                job.onsiteTime = new Date();\n                break;\n\n            case JobState.arrived:\n                job.onsiteTime = new Date();\n                job.completionTime = null;\n                let taskItemRuleGroup = await this._businessRuleService.getQueryableRuleGroup(\"taskItem\");\n                const intervalInMinutes: number = taskItemRuleGroup.getBusinessRule<number>(\"intervalInMinutes\");\n                this.initTaskTimes(job, intervalInMinutes);\n                break;\n\n            case JobState.enRoute:\n                job.enrouteTime = new Date();\n                job.onsiteTime = null;\n                job.completionTime = null;\n                break;\n\n            case JobState.deSelect:\n                job.cancellationTime = new Date();\n                job.onsiteTime = null;\n                job.completionTime = null;\n                job.state = JobState.idle;\n                break;\n\n            case JobState.complete:\n                job.completionTime = new Date();\n                /* if the job has been completed then we will post the data back with no status update\n                    so return the state machine to idle\n                    */\n                job.state = JobState.done;\n                break;\n        }\n        return this.jobCompletion(job, job.state === JobState.done);\n    }\n\n    public getDataStateSummary(jobId: string): Promise<DataStateSummary> {\n        return this.getJob(jobId)\n            .then((job) => {\n                // dataStateCompletionOverrideGroup not getting updated when relaunching the app (set activity status to noaccess and relaunch the app)\n                // the below code fixes the data state issue\n                let p = Promise.resolve();\n                if (!!job.jobNotDoingReason && !DataStateSummary.dataStateCompletionOverrideGroup && job.state === JobState.arrived) {\n                    p = this.setJobNoAccessed(job);\n                }\n\n                return p.then(() => {\n                    return new DataStateSummary(job);\n                });\n            })\n            .catch(() => {\n                return null;\n            });\n    }\n\n    public requiresAppointment(jobId: string): Promise<boolean> {\n        return this._businessRuleService.getQueryableRuleGroup(\"taskItem\")\n            .then((ruleGroup: QueryableBusinessRuleGroup) => {\n                let visitStatuses: string[] = ruleGroup.getBusinessRuleList<string>(\"appointmentRequiredActivityStatus\");\n                return this.getJob(jobId).then((job) => {\n                    if (!job) {\n                        return false;\n                    }\n                    for (let i: number = 0; i < job.tasks.length; i++) {\n                        if (job.tasks[i] && job.tasks[i].status) {\n                            if (visitStatuses.indexOf(job.tasks[i].status) > -1) { // found\n                                if (!job.appointment) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                    return false;\n                });\n            });\n    }\n\n    public async setJobNoAccessed(job: Job): Promise<void> {\n\n        let isATaskSetAsNoAccessed = job.tasks.some(task => task.isTaskThatSetsJobAsNoAccessed);\n        let areAllTasksSetAsCancelled = job.tasks.every(task => task.isNotDoingTask);\n\n        let areTasksSayingWeAreNoAccessed = isATaskSetAsNoAccessed || areAllTasksSetAsCancelled;\n\n        let isTransitionIntoNoAccess = areTasksSayingWeAreNoAccessed;\n        let isTransitionOutOfNoAccess = job.jobNotDoingReason && !areTasksSayingWeAreNoAccessed;\n\n        if (isTransitionIntoNoAccess && isATaskSetAsNoAccessed) {\n            let noAccessingTask = job.tasks.find(task => task.isTaskThatSetsJobAsNoAccessed);\n            let otherTasks = job.tasks.filter(task => task !== noAccessingTask);\n\n            otherTasks.forEach(otherTask => {\n                otherTask.status = noAccessingTask.status;\n                otherTask.dataState = DataState.dontCare;\n            });\n\n            job.cancellationTime = new Date();\n        }\n\n        if (isTransitionOutOfNoAccess) {\n            let taskBusinessRules = await this._businessRuleService.getRuleGroup(\"taskItem\");\n            let remainingNoAccessStatusTasks = job.tasks.filter(task => TaskBusinessRuleHelper.isNotDoingJobStatus(taskBusinessRules, task.status));\n            remainingNoAccessStatusTasks.forEach(task => {\n                task.status = undefined;\n                task.dataState = DataState.notVisited;\n            });\n        }\n\n        job.jobNotDoingReason = isATaskSetAsNoAccessed ? JobNotDoingReason.taskNoAccessed\n            : areAllTasksSetAsCancelled ? JobNotDoingReason.allTasksCancelled\n                : undefined;\n\n        if (job.jobNotDoingReason) {\n            DataStateSummary.dataStateCompletionOverrideGroup = \"activities\";\n        } else {\n            DataStateSummary.clearDataStateCompletionOverrideGroup();\n        }\n    }\n\n    public async checkIfJobFinishTimeNeedsToBeUpdated(): Promise<boolean> {\n        let job = await this.getActiveJob();\n        let businessRules = await this._businessRuleService.getQueryableRuleGroup(\"jobService\");\n        let jobDoingStatuses: string = businessRules.getBusinessRule<string>(\"jobDoingStatuses\");\n\n        let activeTasks = job.tasks.filter(task => jobDoingStatuses.indexOf(task.status) > -1);\n        if (activeTasks.length) {\n            const jobEndTimeInDate = DateHelper.getDate(activeTasks[activeTasks.length - 1].endTime);\n            const durationDiffInMins: number = DateHelper.getTimeDiffInMins(new Date(), jobEndTimeInDate);\n\n            return durationDiffInMins >= JobServiceConstants.JOB_FINISH_TIME_DIFF_MAX_IN_MINS;\n        }\n        return false;\n    }\n\n    private initTaskTimes(job: Job, intervalInMinutes: number): void {\n        job.tasks.forEach((task, index, tasks) => {\n            task.startTime = index === 0\n                                ?  moment(job.onsiteTime)\n                                    .format(\"HH:mm\")\n                                : tasks[index - 1].endTime;\n            task.endTime = moment(task.startTime, \"HH:mm\")\n                            .add(intervalInMinutes, \"minutes\")\n                            .format(\"HH:mm\");\n            task.workDuration = intervalInMinutes;\n            task.chargeableTime = intervalInMinutes;\n        });\n    }\n\n    private getActiveJob(): Promise<Job> {\n        return this.getJobsToDo()\n            .then(jobs => jobs && jobs.find(job => Job.isActive(job)));\n    }\n\n    private async jobCompletion(job: Job, isFullCompletion: boolean): Promise<void> {\n\n        const jobFactoryBusinessRules = await this._businessRuleService.getQueryableRuleGroup(\"jobFactory\");\n        const engineer = await this._engineerService.getCurrentEngineer();\n        let canThisJobBeCompleted: boolean = true;\n        const everyTaskIsVo = job.tasks\n           .every(task => task.status === jobFactoryBusinessRules.getBusinessRule<string>(\"NotVisitedOtherActivityStatus\"));\n\n        const buildJobStatusUpdateRequest = async () => {\n            try {\n                const statusCode = await this._jobFactory.getJobStatusCode(job);\n                if (!statusCode) {\n                    // only hit API if we have transitioned to a \"real\" status code, not \"internal working\" etc\n                    return undefined;\n                }\n\n                const reason = statusCode === jobFactoryBusinessRules.getBusinessRule<string>(\"statusNoVisit\")\n                    ? job.tasks.filter(task => task.status === jobFactoryBusinessRules.getBusinessRule<string>(\"NotVisitedOtherActivityStatus\")\n                        && task.report)\n                    [0].report || \"\"\n                    : \"\";\n\n                return <IJobStatusRequest>{\n                    data: {\n                        timestamp: DateHelper.toJsonDateTimeString(new Date()),\n                        statusCode,\n                        jobId: job.id,\n                        visitId: job.visit && job.visit.id,\n                        reason\n                    }\n                };\n            } catch (error) {\n                this._logger.error(\"Error building job status update\", error && error.toString());\n                return undefined;\n            }\n        };\n\n        const buildPartsOrderRequest = async () => {\n            try {\n                // see DF_1826, cancelled or no access jobs should not send parts\n                const request = !job.jobNotDoingReason && await this._partFactory.createPartsOrderedForTask(job);\n                return request && request.tasks && request.tasks.length\n                    ? request\n                    : undefined;\n            } catch (error) {\n                this._logger.error(\"Error building job parts order update\", error && error.toString());\n                return undefined;\n            }\n        };\n\n        const buildJobUpdateRequest = async () => {\n            try {\n                if (everyTaskIsVo) {\n                    return undefined;\n                }\n                const originalJob = (await this._jobCacheService.getWorkListJobs())\n                    .find(o => job.id === o.id);\n                let jobUpdate = await this._jobFactory.createJobApiModel(job, engineer, originalJob);\n                // if a funky string came down to us in the original job then lets keep it\n                let stringsToRetain = ObjectHelper.getAllStringsFromObject(originalJob);\n                ObjectHelper.sanitizeObjectStringsForJobUpdate(jobUpdate, stringsToRetain);\n                return jobUpdate;\n            } catch (error) {\n                this._logger.error(\"Error building job update\", error);                \n                canThisJobBeCompleted = false;                   \n                return undefined;             \n            }\n        };\n\n        const buildMaterialConsumedRequest = async () => {\n            try {\n                return !!this._featureToggleService.isAssetTrackingEnabled() && !job.jobNotDoingReason ?\n                    await this._partFactory.getPartsConsumedOnJob(job) : undefined;\n            } catch (error) {\n                this._logger.error(\"Error building material consumption request\", error && error.toString());\n                return undefined;\n            }\n        };\n\n        const sendJobStatusUpdate = async (request: IJobStatusRequest) => {\n            this._logger.info(\"jobStatusUpdate\", { data: request });\n            await this._fftService.jobStatusUpdate(job.id, request);\n        };\n\n        const sendPartsRequest = async (request: IPartsOrderedTasks) => {\n            this._logger.info(\"partsOrder\", { data: request });\n            await this._fftService.orderPartsForJob(job.id, <IPartsOrderedRequest>{ data: request });\n        };\n\n        const sendJobUpdate = async (request: IJobUpdate) => {\n            this._logger.info(\"jobUpdate\", { data: request });\n            await this._fftService.updateJob(job.id, <IJobUpdateRequest>{ data: request });\n            this._eventAggregator.publish(JobServiceConstants.JOB_COMPLETED, request);\n        };\n\n        const sendMaterialConsumption = async (partsConsumed: { stockReferenceId: string, quantityConsumed: number, isVanStock: boolean }[]) => {\n            try {\n                if (!!partsConsumed.length) {\n                    partsConsumed.forEach(async part => await this._vanStockService.registerMaterialConsumption({\n                        stockReferenceId: part.stockReferenceId,\n                        quantityConsumed: part.quantityConsumed,\n                        jobId: part.isVanStock ? undefined : job.id\n                    }));\n                }\n            } catch (error) {\n                this._logger.error(\"material consumption call failed\", error && error.toSting());\n            }\n        };\n\n        const sendMaterialReturn = async (jobUpdate: IJobUpdate) => {\n            try {\n                if (!this._featureToggleService.isAssetTrackingEnabled() || !!job.jobNotDoingReason) {\n                    return;\n                }\n\n                const returnedParts = (jobUpdate && jobUpdate.job && jobUpdate.job.tasks || [])\n                    .map(task => task && task.partsNotUsed || [])\n                    .reduce((acc, curr) => [...acc, ...curr], [])\n                    .map(part => ({\n                        stockReferenceId: part.stockReferenceId,\n                        quantityReturned: part.quantityNotUsed,\n                        jobId: job.id,\n                        reason: part.reasonCode\n                    }));\n\n                returnedParts.forEach(async part => await this._vanStockService.registerMaterialReturn(part));\n            } catch (error) {\n                this._logger.error(\"material return call failed\", error && error.toSting());\n            }\n        };\n\n        const saveJob = async () => {\n            this._logger.info(\"saving job\");\n            await this._jobCacheService.setJob(job);\n        };\n\n        const publishJobStateChangedEvent = () => {\n            this._eventAggregator.publish(JobServiceConstants.JOB_STATE_CHANGED);\n        };\n\n        const saveArchive = async () => {\n            await this._archiveService.addUpdateJobState(job, engineer, JobState.complete);\n        };\n\n        const sendEventsAndResetDataState = async (jobUpdate: IJobUpdate) => {\n            DataStateSummary.clearDataStateCompletionOverrideGroup();\n            this._eventAggregator.publish(JobServiceConstants.JOB_COMPLETION_REFRESH, true);\n            let businessRules = await this._businessRuleService.getQueryableRuleGroup(\"jobService\");\n            let delay = businessRules.getBusinessRule<number>(\"jobCompleteRefreshDelayMs\") || 5000;\n            Threading.delay(() => this._eventAggregator.publish(WorkRetrievalServiceConstants.REQUEST_WORK_AND_REFRESH_WORK_LIST), delay);\n            this._isReVisitTabsAlreadyDone = false;\n        };\n\n        // keep these as close to each other as possible, basically build eveything and send it at the end\n        const jobStatusUpdateRequest = await buildJobStatusUpdateRequest();\n        if (!isFullCompletion) {\n            if (jobStatusUpdateRequest) {\n                await sendJobStatusUpdate(jobStatusUpdateRequest);\n                saveJob();\n                publishJobStateChangedEvent();\n            }\n            return;\n        }\n\n        const partsReqeust = await buildPartsOrderRequest();\n        const jobUpdateRequest = await buildJobUpdateRequest();\n\n        if (canThisJobBeCompleted) {\n            if (jobStatusUpdateRequest) {\n                await sendJobStatusUpdate(jobStatusUpdateRequest);\n            }\n    \n            if (partsReqeust) {\n                await sendPartsRequest(partsReqeust);\n            }\n    \n            if (jobUpdateRequest) {\n                await sendJobUpdate(jobUpdateRequest);\n                await sendMaterialReturn(jobUpdateRequest);\n            }\n    \n            const materialConsumedRequest = await buildMaterialConsumedRequest();\n            if (materialConsumedRequest) {\n                await sendMaterialConsumption(materialConsumedRequest);\n            }\n    \n            // keep save immediatley after we want to know that we have put stuff into resilience before setting the job as done\n            await saveJob();\n            await saveArchive();\n            publishJobStateChangedEvent();\n            await sendEventsAndResetDataState(jobUpdateRequest);\n        } else {\n            let content: string = (!this._isReVisitTabsAlreadyDone)\n                    ? \"We have detected an issue completing this job.\"\n                    + \" Please revisit all the pages/tabs to ensure if the forms have been filled in correctly and then press Complete button again to retry job completion.\"\n                    : \"We have detected an issue sending this job back to WMIS. So please contact help desk for the further assitance and support\";\n\n            this._eventAggregator.publish(AppConstants.APP_TOAST_ADDED, <IToastItem>{\n                    id: Guid.newGuid(),\n                    title: \"Job completion\",\n                    style: \"danger\",\n                    content,\n                    autoDismiss: false,\n                    dismissTime: 0\n                });\n            this._isReVisitTabsAlreadyDone = true;\n            // setting job back to arrived status\n            job.state = JobState.arrived;\n            // this is just close the job completion progress modal popup.\n            this._eventAggregator.publish(JobServiceConstants.JOB_COMPLETION_REFRESH, false);  \n            // this would set requestedState in state button back to arrived.          \n            publishJobStateChangedEvent();\n        }       \n    }\n}\n"],"sourceRoot":"../../.."}