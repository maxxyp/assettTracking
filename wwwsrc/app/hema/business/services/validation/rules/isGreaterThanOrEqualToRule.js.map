{"version":3,"sources":["hema/business/services/validation/rules/isGreaterThanOrEqualToRule.ts"],"names":[],"mappings":";;;IAGA;QAGI,oCAAY,GAAW;YACnB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QACpB,CAAC;QAEM,yCAAI,GAAX,UAAY,KAAU;YAClB,IAAI,SAAS,GAAG,2BAAY,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACtD,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;YACzD,CAAC;QACL,CAAC;QACL,iCAAC;IAAD,CAfA,AAeC,IAAA;IAfY,gEAA0B","file":"isGreaterThanOrEqualToRule.js","sourcesContent":["import {IValidationRule} from \"../IValidationRule\";\nimport {NumberHelper} from \"../../../../../common/core/numberHelper\";\n\nexport class IsGreaterThanOrEqualToRule implements IValidationRule {\n    private _min: number;\n\n    constructor(min: number) {\n        this._min = min;\n    }\n\n    public test(value: any): Promise<boolean> {\n        let tryCoerce = NumberHelper.tryCoerceToNumber(value);\n        if (!tryCoerce.isValid) {\n            return Promise.resolve(false);\n        } else {\n            return Promise.resolve(tryCoerce.value >= this._min);\n        }\n    }\n}\n"],"sourceRoot":"../../../../.."}