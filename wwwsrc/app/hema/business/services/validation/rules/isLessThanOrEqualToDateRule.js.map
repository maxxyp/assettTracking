{"version":3,"sources":["hema/business/services/validation/rules/isLessThanOrEqualToDateRule.ts"],"names":[],"mappings":";;;IAIA;QAGI,qCAAY,GAAS;YACjB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QACpB,CAAC;QAEM,0CAAI,GAAX,UAAY,KAAU;YAClB,EAAE,CAAC,CAAC,CAAC,uBAAU,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,uBAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC9D,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChC,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBAE9B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YACrF,CAAC;QACL,CAAC;QACL,kCAAC;IAAD,CAjBA,AAiBC,IAAA;IAjBY,kEAA2B","file":"isLessThanOrEqualToDateRule.js","sourcesContent":["import {IValidationRule} from \"../IValidationRule\";\nimport {DateHelper} from \"../../../../core/dateHelper\";\nimport * as moment from \"moment\";\n\nexport class IsLessThanOrEqualToDateRule implements IValidationRule {\n    private _max: Date;\n\n    constructor(max: Date) {\n        this._max = max;\n    }\n\n    public test(value: any): Promise<boolean> {\n        if (!DateHelper.isDate(value) || !DateHelper.isValidDate(value)) {\n            return Promise.resolve(false);\n        } else {\n            let maxDate = moment(this._max);\n            let valueDate = moment(value);\n\n            return Promise.resolve(valueDate.isBefore(maxDate) || valueDate.isSame(maxDate));\n        }\n    }\n}\n"],"sourceRoot":"../../../../.."}