{"version":3,"sources":["hema/business/services/customerInfoService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAWA,IAAM,qBAAqB,GAAW,EAAE,CAAC;IAGzC;QAUI,6BAAY,oBAA2C,EAAE,sBAA+C,EAAE,YAA2B;YACjI,IAAI,MAAM,GAAG,oBAAoB,CAAC,gBAAgB,EAA8B,CAAC;YAEjF,IAAI,CAAC,gCAAgC,GAAG,MAAM,CAAC,+BAA+B,IAAI,qBAAqB,CAAC;YACxG,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,sBAAsB,IAAI,KAAK,CAAC;YAEtE,IAAI,CAAC,uBAAuB,GAAG,sBAAsB,CAAC;YACtD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC/B,CAAC;QAEY,iDAAmB,GAAhC,UAAiC,UAAkB,EAAE,KAAe;;;;oBAChE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;wBAChC,MAAM,gBAAC;oBACX,CAAC;oBAEG,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;oBAEvD,EAAE,CAAC,CAAC,KAAK;2BACF,CAAC,cAAc;2BACf,uBAAU,CAAC,cAAc,EAAE,IAAI,cAAc,GAAG,CAAC,IAAI,CAAC,gCAAgC,GAAG,EAAE,GAAG,IAAI,CACzG,CAAC,CAAC,CAAC;wBACC,MAAM,gBAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAC;oBAC/C,CAAC;;;;SACJ;QAEY,qCAAO,GAApB,UAAqB,UAAkB;;;oBACnC,sBAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAC;;;SAC9C;QAEM,0DAA4B,GAAnC,UAAoC,QAAsC;YACtE,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,SAAS,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAC9F,CAAC;QAEa,gDAAkB,GAAhC,UAAiC,UAAkB;;;;;gCAClC,qBAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qBAAqB,CAAC,EAAA;;4BAAjE,MAAM,GAAG,SAAwD;4BACjE,eAAe,GAAG,MAAM,IAAI,MAAM,CAAC,uBAAuB,CAAC;4BAC/D,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,EAAE;gCACtE,SAAS,EAAE,IAAI;gCACf,aAAa,EAAE,eAAe;gCAC9B,UAAU,EAAE,IAAI;6BACnB,CAAC,CAAC;4BACH,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,GAAG,uBAAU,CAAC,cAAc,EAAE,CAAC;;;;;SACnE;QArDQ,mBAAmB;YAD/B,qCAAM,CAAC,2CAAoB,EAAE,+CAAsB,EAAE,2BAAY,CAAC;;WACtD,mBAAmB,CAsD/B;QAAD,0BAAC;KAtDD,AAsDC,IAAA;IAtDY,kDAAmB","file":"customerInfoService.js","sourcesContent":["import {IConfigurationService} from \"../../../common/core/services/IConfigurationService\";\nimport {ILabelService} from \"./interfaces/ILabelService\";\nimport {ICustomerInfoService} from \"./interfaces/ICustomerInfoService\";\nimport {LabelService} from \"./labelService\";\nimport {ConfigurationService} from \"../../../common/core/services/configurationService\";\nimport {inject} from \"aurelia-dependency-injection\";\nimport {ICustomerInfoConfiguration} from \"./interfaces/ICustomerInfoConfiguration\";\nimport {AppIntegrationRegistry} from \"../../../common/core/services/appIntegrationRegistry\";\nimport {IAppIntegrationRegistry} from \"../../../common/core/services/IAppIntegrationRegistry\";\nimport { DateHelper } from \"../../core/dateHelper\";\n\nconst DEFAULT_REOPEN_EXPIRY: number = 30;\n\n@inject(ConfigurationService, AppIntegrationRegistry, LabelService)\nexport class CustomerInfoService implements ICustomerInfoService {\n\n    private _customerInfoAutoLaunch: boolean;\n    private _customerInfoReOpenExpiryMinutes: number;\n\n    private _appIntegrationRegistry: IAppIntegrationRegistry;\n    private _labelService: ILabelService;\n\n    private _lastInvocations: { [index: string]: number };\n\n    constructor(configurationService: IConfigurationService, appIntegrationRegistry: IAppIntegrationRegistry, labelService: ILabelService) {\n        let config = configurationService.getConfiguration<ICustomerInfoConfiguration>();\n\n        this._customerInfoReOpenExpiryMinutes = config.customerInfoReOpenExpiryMinutes || DEFAULT_REOPEN_EXPIRY;\n        this._customerInfoAutoLaunch = config.customerInfoAutoLaunch || false;\n\n        this._appIntegrationRegistry = appIntegrationRegistry;\n        this._labelService = labelService;\n        this._lastInvocations = {};\n    }\n\n    public async openAppIfNotVisited(premisesId: string, force?: boolean): Promise<void> {\n        if (!this._customerInfoAutoLaunch) {\n            return;\n        }\n\n        let lastInvocation = this._lastInvocations[premisesId];\n\n        if (force\n            || !lastInvocation\n            || DateHelper.getTimestampMs() >= lastInvocation + (this._customerInfoReOpenExpiryMinutes * 60 * 1000)\n        ) {\n            return this.launchCustomerInfo(premisesId);\n        }\n    }\n\n    public async openApp(premisesId: string): Promise<void> {\n        return this.launchCustomerInfo(premisesId);\n    }\n\n    public registerCustomerTipsCallback(callback: (premisesId: string) => void): { dispose: () => void } {\n        return this._appIntegrationRegistry.customerInfo.subscribe.customerTipsComplete(callback);\n    }\n\n    private async launchCustomerInfo(premisesId: string): Promise<void> {\n        let labels = await this._labelService.getGroup(\"customerInfoService\");\n        let returnToAppText = labels && labels.customerInfoReturnToApp;\n        this._appIntegrationRegistry.customerInfo.navigateTo.premises(premisesId, {\n            returnUri: true,\n            returnUriText: returnToAppText,\n            fullScreen: true\n        });\n        this._lastInvocations[premisesId] = DateHelper.getTimestampMs();\n    }\n}\n"],"sourceRoot":"../../.."}