{"version":3,"sources":["hema/business/services/appointmentBookingService.ts"],"names":[],"mappings":"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","file":"appointmentBookingService.js","sourcesContent":["import { inject } from \"aurelia-framework\";\nimport { IAppointmentBookingService } from \"./interfaces/IAppointmentBookingService\";\nimport { JobService } from \"./jobService\";\nimport { IJobService } from \"./interfaces/IJobService\";\nimport { Job } from \"../models/job\";\nimport { Appointment } from \"../models/appointment\";\nimport { DateHelper } from \"../../core/dateHelper\";\nimport * as moment from \"moment\";\nimport { BusinessRuleService } from \"./businessRuleService\";\nimport { IBusinessRuleService } from \"./interfaces/IBusinessRuleService\";\n\n@inject(JobService, BusinessRuleService)\nexport class AppointmentBookingService implements IAppointmentBookingService {\n    private _jobService: IJobService;\n    private _businessRuleService: IBusinessRuleService;\n    constructor(jobService: IJobService, businessRuleService: IBusinessRuleService) {\n        this._jobService = jobService;\n        this._businessRuleService = businessRuleService;\n    }\n\n    public getGeneralAccessInformation(jobId: string): Promise<string> {\n        return this._jobService.getJob(jobId).then((job: Job) => {\n            if (job && job.premises) {\n                return job.premises.accessInfo;\n            } else {\n                return undefined;\n            }\n        });\n    }\n\n    public save(appointment: Appointment): Promise<void> {\n        return this._jobService.getJob(appointment.jobId).then((job: Job) => {\n            job.appointment = appointment;\n            return this._jobService.setJob(job);\n        });\n    }\n\n    public removeAppointment(jobId: string): Promise<void> {\n        return this._jobService.getJob(jobId).then((job: Job) => {\n            job.appointment = undefined;\n            return this._jobService.setJob(job);\n        });\n    }\n\n    public load(jobId: string): Promise<Appointment> {\n        return this._jobService.getJob(jobId).then((job: Job) => {\n            return job.appointment;\n        });\n    }\n\n    public hasParts(jobId: string): Promise<boolean> {\n        return this.getPartJobStatusRule().then((rule: string) => {\n            return this._jobService.getJob(jobId).then((job: Job) => {\n                if (job && job.partsDetail && job.partsDetail.partsBasket\n                    && job.partsDetail.partsBasket.partsToOrder \n                    && job.partsDetail.partsBasket.partsToOrder.some(x => x.partOrderStatus === rule)) {\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n        });\n    }\n\n    public checkCutOffTimeExceededWithParts(promisedDateOnly: Date, promisedTimeOnly: Date, cutOffTime: string): boolean {         \n        return (DateHelper.dateInMondayToFriday(promisedDateOnly) || DateHelper.dateIsOnSunday(promisedDateOnly)) ?\n                        this.checkIfCutoffTimeHasBeenExceeded(cutOffTime, moment(promisedTimeOnly).format(DateHelper.timeFormat)) :\n                        true;    \n    }\n\n    public checkIfAppointmentNeedsToBeRebooked(appointmentDate: Date, startTime: Date, cutOffTime: string): boolean {\n        let tomorrow = moment(DateHelper.getTodaysDate()).add(1, \"days\");\n        let daysDiff = moment(appointmentDate).startOf(\"day\").diff(tomorrow.startOf(\"day\"), \"days\");\n        let rebook =  (daysDiff < 0) ? true : false;\n        \n        if (daysDiff === 0) {\n            if (this.checkIfCutoffTimeHasBeenExceeded(cutOffTime, moment(startTime).format(DateHelper.timeFormat))) {\n                rebook = true;\n            } else if (DateHelper.dateIsOnSunday(appointmentDate)) {\n                rebook = true;\n            }\n        }\n        return rebook;        \n    }\n\n    public getNexAppointmentDateWithParts(date: Date): Date {\n        let nextDate: Date;\n        if (DateHelper.dateIsOnSunday(date)) {\n            nextDate = moment(date).add(1, \"day\").toDate();\n        } else {\n            nextDate = date;\n        }\n        return nextDate;\n    }\n\n    private checkIfCutoffTimeHasBeenExceeded(cutOffTime: string, timeToBeTested: string): boolean {\n        let cutOffTimeMoment = moment(cutOffTime, DateHelper.timeFormat);\n        let promisedTime = DateHelper.parseTimeRangeSlot(timeToBeTested).start;\n        if (promisedTime.add(1, \"minute\").isAfter(cutOffTimeMoment)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private getPartJobStatusRule(): Promise<string> {\n        return this._businessRuleService.getQueryableRuleGroup(\"partsBasket\")\n            .then((ruleGroup) => {\n                return ruleGroup.getBusinessRule<string>(\"partOrderStatus\");\n            });\n    }\n}\n"],"sourceRoot":"../../.."}