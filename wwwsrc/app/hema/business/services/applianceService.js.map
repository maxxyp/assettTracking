{"version":3,"sources":["hema/business/services/applianceService.ts"],"names":[],"mappings":"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","file":"applianceService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport { inject } from \"aurelia-framework\";\nimport { IApplianceService } from \"./interfaces/IApplianceService\";\nimport { Job } from \"../models/job\";\nimport { Appliance } from \"../models/appliance\";\nimport { History as HistoryBusinessModel } from \"../models/history\";\nimport { IJobService } from \"./interfaces/IJobService\";\nimport { JobService } from \"./jobService\";\nimport { BusinessException } from \"../models/businessException\";\nimport { ArrayHelper } from \"../../../common/core/arrayHelper\";\nimport { ICatalogService } from \"../../business/services/interfaces/ICatalogService\";\nimport { CatalogService } from \"../../business/services/catalogService\";\nimport { IBusinessRuleService } from \"../../business/services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../../business/services/businessRuleService\";\nimport { QueryableBusinessRuleGroup } from \"../models/businessRules/queryableBusinessRuleGroup\";\nimport { ApplianceSafety } from \"../models/applianceSafety\";\nimport { ApplianceElectricalSafetyDetail } from \"../models/applianceElectricalSafetyDetail\";\nimport { ApplianceElectricalUnsafeDetail } from \"../models/applianceElectricalUnsafeDetail\";\nimport { IObjectType } from \"../models/reference/IObjectType\";\nimport { DataState } from \"../models/dataState\";\nimport { BaseApplianceFactory } from \"../../common/factories/baseApplianceFactory\";\nimport { IBaseApplianceFactory } from \"../../common/factories/interfaces/IBaseApplianceFactory\";\nimport { BridgeBusinessService } from \"../../business/services/bridgeBusinessService\";\nimport { IBridgeBusinessService } from \"../../business/services/interfaces/IBridgeBusinessService\";\nimport { Guid } from \"../../../common/core/guid\";\nimport { IStorageService } from \"./interfaces/IStorageService\";\nimport { StorageService } from \"./storageService\";\nimport { DataStateManager } from \"../../common/dataStateManager\";\nimport { IDataStateManager } from \"../../common/IDataStateManager\";\nimport { TaskService } from \"./taskService\";\nimport { ITaskService } from \"./interfaces/ITaskService\";\nimport { IconDetailItem } from \"../../../common/ui/elements/models/iconDetailItem\";\nimport { AdaptCssClassConstants } from \"../../presentation/constants/adaptCssClassConstants\";\nimport { AdaptAvailabilityAttributeType } from \"./constants/adaptAvailabilityAttributeType\";\nimport { ExternalApplianceAppModel } from \"../models/adapt/externalApplianceAppModel\";\nimport { ApplianceOperationType } from \"../models/applianceOperationType\";\n\n@inject(JobService, CatalogService, BusinessRuleService, BaseApplianceFactory, BridgeBusinessService, StorageService, DataStateManager, TaskService)\nexport class ApplianceService implements IApplianceService {\n    private _jobService: IJobService;\n    private _catalogService: ICatalogService;\n    private _businessRulesService: IBusinessRuleService;\n    private _bridgeBusinessService: IBridgeBusinessService;\n    private _baseApplianceFactory: IBaseApplianceFactory;\n    private _storageService: IStorageService;\n    private _dataStateManager: IDataStateManager;\n    private _taskService: ITaskService;\n\n    constructor(jobService: IJobService, catalogService: ICatalogService, businessRulesService: IBusinessRuleService,\n        baseApplianceFactory: IBaseApplianceFactory, bridgeBusinessService: IBridgeBusinessService,\n        storageService: IStorageService, dataStateManager: IDataStateManager, taskService: ITaskService) {\n        this._jobService = jobService;\n        this._catalogService = catalogService;\n        this._businessRulesService = businessRulesService;\n        this._bridgeBusinessService = bridgeBusinessService;\n        this._baseApplianceFactory = baseApplianceFactory;\n        this._storageService = storageService;\n        this._dataStateManager = dataStateManager;\n        this._taskService = taskService;\n    }\n\n    public getChildApplianceId(jobId: string, parentApplianceId: string): Promise<string> {\n        return this.getAppliances(jobId)\n            .then(appliances => {\n\n                let appliance = appliances.find(a => a.id === parentApplianceId);\n\n                if (!appliance) {\n                    throw new BusinessException(this, \"getChildApplianceId\", \"applianceId not found\", null, null);\n                }\n\n                return appliance.childId;\n            })\n            .catch(ex => {\n                throw new BusinessException(this, \"getChildApplianceId\", \"could not get appliance\", null, ex);\n            });\n    }\n\n    public getAppliances(jobId: string): Promise<Appliance[]> {\n\n        return Promise.all<Job, QueryableBusinessRuleGroup, IObjectType[], string>([\n            this._jobService.getJob(jobId),\n            this._businessRulesService.getQueryableRuleGroup(\"applianceService\"),\n            this._catalogService.getObjectTypes(),\n            this._storageService.getWorkingSector()\n        ])\n            .then(([job, ruleGroup, catalog, sector]) => {\n\n                this.senatizeDescription(job, ruleGroup);\n                let isElectricalEngineer = ruleGroup.getBusinessRule<string>(\"electricalWorkingSector\") === sector;\n\n                // electrical and gas engineers need to see the appliance list sorted with their own type of appliance higher\n                //  e.g. gas engineer sees gas appliances first, then electrical (the other), and vice versa\n                let applianceCategoryPriorities = ruleGroup.getBusinessRuleList<string>(isElectricalEngineer\n                    ? \"electricalApplianceCategorySortOrder\"\n                    : \"gasApplianceCategorySortOrder\");\n\n                return this.orderAppliances(job, applianceCategoryPriorities, catalog)\n                    .filter(appliance => !appliance.isDeleted && !appliance.isExcluded);\n            })\n            .catch(ex => {\n                throw new BusinessException(this, \"appliances\", \"could not get appliances\", null, ex);\n            }\n            );\n    }\n\n    public getAppliancesForLandlordsCertificate(jobId: string): Promise<Appliance[]> {\n        return this.getAppliances(jobId).then((appliances: Appliance[]): Appliance[] => {\n            return appliances.filter(a => a.isSafetyRequired && !a.isInstPremAppliance && !a.isExcluded);\n        });\n    }\n\n    public getAppliance(jobId: string, applianceId: string): Promise<Appliance> {\n        return this.getAppliances(jobId)\n            .then(appliances => {\n\n                let appliance = appliances.find(a => a.id === applianceId);\n\n                if (!appliance) {\n                    throw new BusinessException(this, \"appliances\", \"applianceId not found\", null, null);\n                }\n\n                return appliance;\n            })\n            .catch(ex => {\n                throw new BusinessException(this, \"appliances\", \"could not get appliance\", null, ex);\n            });\n    }\n\n    public createAppliance(jobId: string, appliance: Appliance): Promise<void> {\n        let childApplianceIndicator: string;\n        let childAppliance: Appliance = null;\n        let engineerWorkingSector: string = undefined;\n\n        return this._storageService.getWorkingSector()\n            .then((sector) => {\n                if (sector) {\n                    engineerWorkingSector = sector;\n                } else {\n                    throw new BusinessException(\"applianceService\", \"createAppliance\", \"Required engineer working sector not found\", null, null);\n                }\n            })\n            .then(() => this._jobService.getJob(jobId))\n            .then(job => {\n                if (job) {\n\n                    // first check if its a parent and child or just a normal appliance\n                    // if it is a parent child, then create the child but dont save\n                    return this._businessRulesService.getQueryableRuleGroup(\"applianceService\")\n                        .then((businessRuleGroup) => {\n                            if (businessRuleGroup) {\n                                return businessRuleGroup.getBusinessRule<string>(\"childApplianceIndicator\");\n                            } else {\n                                throw new BusinessException(\"applianceService\", \"createAppliance\", \"Required business rule group not found\", null, null);\n                            }\n                        })\n                        .then((childApplianceIndicatorRule) => {\n                            if (childApplianceIndicatorRule) {\n                                childApplianceIndicator = childApplianceIndicatorRule;\n                                return null;\n                            } else {\n                                throw new BusinessException(\"applianceService\", \"createAppliance\", \"Required business rule not found\", null, null);\n                            }\n                        })\n                        .then(() => this._catalogService.getObjectTypes())\n                        .then((applianceTypeCatalog: IObjectType[]) => {\n\n                            let parentCatalogItem = applianceTypeCatalog.find(a => a.applianceType === appliance.applianceType);\n                            if (parentCatalogItem) {\n                                let childCatalogItem = applianceTypeCatalog.find(a =>\n                                    a.association === childApplianceIndicator &&\n                                    a.associationNumber === parentCatalogItem.associationNumber);\n\n                                if (childCatalogItem) {\n                                    // there is a child appliance needed\n                                    childAppliance = new Appliance();\n                                    childAppliance.id = Guid.newGuid();\n                                    childAppliance.parentId = appliance.id;\n                                    appliance.childId = childAppliance.id;\n\n                                    childAppliance.applianceType = childCatalogItem.applianceType;\n\n                                    childAppliance.flueType = appliance.flueType;\n\n                                    childAppliance.locationDescription = appliance.locationDescription;\n                                    childAppliance.isCreated = true;\n\n                                    return this._baseApplianceFactory.populateBusinessModelFields(childAppliance, engineerWorkingSector)\n                                        .then(() => {\n                                            // cannot set to notVisited because the baseApplianceFactory.populateApplianceDataState logic\n                                            //  will in most scenarios convert to dontCare\n                                            childAppliance.dataState = DataState.invalid;\n                                        });\n                                } else {\n                                    return Promise.resolve();\n                                }\n                            } else {\n                                return Promise.resolve();\n                            }\n                        })\n                        .then(() => {\n                            this.ensureHistoryExists(job);\n                            appliance.isCreated = true;\n\n                            job.history.appliances.push(appliance);\n                            if (childAppliance) {\n                                job.history.appliances.push(childAppliance);\n                            }\n\n                            return this._dataStateManager.updateAppliancesDataState(job);\n                        })\n                        .then(() => this._jobService.setJob(job));\n\n                } else {\n                    throw new BusinessException(this, \"appliances\", \"no current job selected\", null, null);\n                }\n            });\n    }\n\n    public updateAppliance(jobId: string, appliance: Appliance, setIsUpdated: boolean, updateMakeAndModel: boolean): Promise<void> {\n        return this._jobService.getJob(jobId)\n            .then(job => {\n                if (job) {\n                    this.ensureHistoryExists(job);\n\n                    let existingApplianceIndex: number = job.history.appliances.findIndex(a => a.id === appliance.id);\n\n                    if (existingApplianceIndex >= 0) {\n                        let existingAppliance = job.history.appliances[existingApplianceIndex];\n\n                        if (appliance.flueType !== existingAppliance.flueType && appliance.safety && appliance.safety.applianceGasSafety) {\n                            appliance.safety.applianceGasSafety.chimneyInstallationAndTests = undefined;\n                        }\n\n                        if (setIsUpdated) {\n                            appliance.isUpdated = true;\n                        }\n                        job.history.appliances[existingApplianceIndex] = appliance;\n\n                        let p = updateMakeAndModel ? this.ensureAdaptInformationIsSynced(jobId) : Promise.resolve();\n\n                        return p\n                            .then(() => this._dataStateManager.updateApplianceDataState(appliance, job))\n                            .then(() => this._jobService.setJob(job));\n                    } else {\n                        throw new BusinessException(this, \"appliances\", \"saving appliance that does not exist\", null, null);\n                    }\n                } else {\n                    throw new BusinessException(this, \"appliances\", \"no current job selected\", null, null);\n                }\n            });\n    }\n\n    public getApplianceSafetyDetails(jobId: string, applianceId: string): Promise<ApplianceSafety> {\n        return this.getAppliance(jobId, applianceId)\n            .then(appliance => appliance.safety);\n    }\n\n    public saveApplianceSafetyDetails(jobId: string, applianceId: string, applianceSafety: ApplianceSafety, setIsUpdated: boolean, updateAdaptMakeAndModel: boolean): Promise<void> {\n        return this.getAppliance(jobId, applianceId)\n            .then(appliance => {\n                appliance.safety = applianceSafety;\n\n                return this.updateAppliance(jobId, appliance, setIsUpdated, updateAdaptMakeAndModel);\n            });\n    }\n\n    public saveElectricalSafetyDetails(jobId: string, applianceId: string,\n        safetyDetail: ApplianceElectricalSafetyDetail,\n        unsafeDetail: ApplianceElectricalUnsafeDetail,\n        setIsUpdated: boolean): Promise<void> {\n\n        return this.getAppliance(jobId, applianceId)\n            .then(appliance => {\n                if (appliance) {\n                    appliance.safety.applianceElectricalSafetyDetail = safetyDetail;\n                    appliance.safety.applianceElectricalUnsafeDetail = unsafeDetail;\n\n                    return this.updateAppliance(jobId, appliance, setIsUpdated, false);\n                } else {\n                    // todo: throw error\n                    throw new BusinessException(this, \"appliances\", \"no current appliance\", null, null);\n                }\n            });\n    }\n\n    public async isFullGcCode(gcCode: string): Promise<boolean> {\n        const ruleGroup = await this._businessRulesService.getQueryableRuleGroup(\"applianceService\");\n        const rule = ruleGroup.getBusinessRule<string>(\"fullGcCodeLength\");\n        return !!gcCode && parseInt(rule, 10) === gcCode.length;\n    }\n\n    public async ensureAdaptInformationIsSynced(jobId: string): Promise<void> {\n        const job = jobId && await this._jobService.getJob(jobId);\n        if (!job) {\n            return;\n        }\n\n        const createIcon = (className: string, key: string) => <IconDetailItem>{ iconClassName: className, title: key};\n        const ruleGroup = await this._businessRulesService.getQueryableRuleGroup(\"applianceService\");\n        const rule = ruleGroup.getBusinessRule<string>(\"fullGcCodeLength\");\n        const isFullGcCode = (gcCode: string) => !!gcCode && parseInt(rule, 10) === gcCode.length;\n\n        const appliances = (job.history && job.history.appliances || [])\n                .filter(appliance => appliance && !appliance.isDeleted);\n\n        // reset any appliances that the user has changed gc code or are invalid\n        const appliancesToReset = appliances\n            .filter(appliance => !isFullGcCode(appliance.gcCode)\n                                    || (appliance.adaptInfo && appliance.adaptInfo.gcCode !== appliance.gcCode));\n\n        appliancesToReset\n            .forEach(appliance => {\n                appliance.adaptInfo = undefined;\n                appliance.headerIcons = [];\n            });\n\n        const appliancesThatShouldBeSynced = appliances\n            .filter(appliance =>  isFullGcCode(appliance.gcCode)\n                                    && !appliance.adaptInfo);\n\n        const getAndAttachAdaptInfo = async (appliance: Appliance) => {\n\n            let adaptInfo: ExternalApplianceAppModel;\n            try {\n                appliance.headerIcons = [createIcon(AdaptCssClassConstants.BUSY, \"loading\")];\n                adaptInfo = await this._bridgeBusinessService.getApplianceInformation(appliance.gcCode);\n                if (adaptInfo.foundInAdapt) {\n\n                    appliance.safety.applianceGasSafety.applianceMake = adaptInfo.manufacturer && adaptInfo.manufacturer.substr(0, 10);\n\n                    appliance.safety.applianceGasSafety.applianceModel = adaptInfo.description && adaptInfo.description.substr(0, 10);\n\n                    appliance.headerIcons = [];\n\n                    if (adaptInfo.safetyNotice) {\n                        appliance.headerIcons.push(createIcon(AdaptCssClassConstants.SAFETY_ISSUE, \"gcStatusSafetyIssue\"));\n                    }\n\n                    if (adaptInfo.availabilityStatus === AdaptAvailabilityAttributeType.FOLIO) {\n                        appliance.headerIcons.push(createIcon(AdaptCssClassConstants.FOLIO, \"gcStatusFolio\"));\n                    } else if (adaptInfo.availabilityStatus === AdaptAvailabilityAttributeType.WITHDRAWN) {\n                        appliance.headerIcons.push(createIcon(AdaptCssClassConstants.WITHDRAWN, \"gcStatusWithdrawn\"));\n                    } else if (adaptInfo.availabilityStatus === AdaptAvailabilityAttributeType.REDUCED_PARTS_LIST) {\n                        appliance.headerIcons.push(createIcon(AdaptCssClassConstants.RESTRICTED, \"gcStatusRsl\"));\n                    } else if (adaptInfo.availabilityStatus === AdaptAvailabilityAttributeType.SERVICE_LISTED) {\n                        appliance.headerIcons.push(createIcon(AdaptCssClassConstants.SERVICE_LISTED, \"gcStatusSl\"));\n                    }\n\n                    if (adaptInfo.ceased) {\n                        appliance.headerIcons.push(createIcon(AdaptCssClassConstants.CEASED, \"gcStatusCeased\"));\n                    }\n                } else {\n                    appliance.headerIcons = [createIcon(AdaptCssClassConstants.ERROR_ADAPT, \"adaptError\")];\n                }\n\n            } catch (error) {\n                appliance.headerIcons = [createIcon(AdaptCssClassConstants.ERROR_ADAPT, \"adaptError\")];\n            } finally {\n                // fallback logic - try to give a decent default to model\n                if (!appliance.safety.applianceGasSafety.applianceModel && appliance.description) {\n                    appliance.safety.applianceGasSafety.applianceModel = appliance.description.substr(0, 10);\n                }\n\n                appliance.adaptInfo = { gcCode: appliance.gcCode, info: adaptInfo};\n            }\n        };\n\n        await Promise.map(appliancesThatShouldBeSynced, appliance => getAndAttachAdaptInfo(appliance));\n    }\n\n    public async replaceAppliance(jobId: string, appliance: Appliance, oldApplianceId: string): Promise<void> {\n        await this.createAppliance(jobId, appliance);\n\n        let job = await this._jobService.getJob(jobId);\n        if (job) {\n            let tasks = job.tasks && job.tasks.filter(x => x.applianceId === oldApplianceId);\n            if (tasks && tasks.length) {\n                await Promise.map(tasks, task => this._taskService.updateTaskAppliance(jobId, task.id, appliance.applianceType, appliance.id, task.jobType, task.chargeType));\n            }\n            let oldAppliance = job.history.appliances.find(a => a.id === oldApplianceId);\n            await this.deleteOrExcludeAppliance(jobId, oldApplianceId, ApplianceOperationType.delete);\n\n            if (oldAppliance.childId) {\n                await this.deleteOrExcludeAppliance(jobId, oldAppliance.childId, ApplianceOperationType.delete);\n            }\n        } else {\n            throw new BusinessException(this, \"replaceAppliance\", \"job not exist\", null, null);\n        }\n    }\n\n    public deleteOrExcludeAppliance(jobId: string, applianceId: string, operation: ApplianceOperationType): Promise<void> {\n        return this._jobService.getJob(jobId)\n            .then(job => {\n                if (job) {\n                    let appliance = job.history.appliances.find(a => a.id === applianceId);\n                    if (appliance) {\n                        appliance.isDeleted = operation === ApplianceOperationType.delete ? true : undefined;\n                        appliance.isExcluded = operation === ApplianceOperationType.exclude ? true : undefined;\n                    } else {\n                        throw new BusinessException(this, \"appliances\", \"deleting appliance that does not exist\", null, null);\n                    }\n                    // todo crossover between appliances and tasks here\n                    let tasksWithAppliance = job.tasks && job.tasks.filter(x => x.applianceId === applianceId);\n                    tasksWithAppliance.forEach((task) => {\n                        task.applianceId = undefined;\n                        task.applianceType = undefined;\n                        task.dataState = DataState.invalid;\n                    });\n\n                    return this._dataStateManager.updateAppliancesDataState(job)\n                        .then(() => this._dataStateManager.updatePropertySafetyDataState(job))\n                        .then(() => this._jobService.setJob(job));\n                } else {\n                    throw new BusinessException(this, \"appliances\", \"no current job selected\", null, null);\n                }\n            });\n    }\n\n    private ensureHistoryExists(job: Job): void {\n        if (!job.history) {\n            job.history = new HistoryBusinessModel();\n            job.history.appliances = [];\n        } else if (!job.history.appliances) {\n            job.history.appliances = [];\n        }\n    }\n\n    private removeBadCharactersFromApplianceDesc(regex: string, appliance: Appliance): void {\n\n        // if WMIS returns description with trailing full stop replace with empty string\n        if (regex) {\n            let desc = appliance.description;\n            if (desc) {\n                appliance.description = desc.replace(new RegExp(regex), \"\");\n            }\n        }\n    }\n\n    private orderAppliances(job: Job, categoryPriorities: string[], catalog: IObjectType[]): Appliance[] {\n        // the default ordering for appliances should be:\n        //  0) child appliances must be shown immediately after their parent\n        //  1) the appliance for task 001, then 002, then 003, etc. (i.e. in task id order)\n        //  2) for a gas job: the remaining appliances, ordered by gas, then electric, then other\n        //     for an electrical job: the remaining appliances, ordered by electric, then gas, then other\n        let orderedAppliances: Appliance[] = [];\n\n        if (job.history) {\n            let appliances = job.history.appliances;\n\n            if (appliances) {\n                let addApplianceOnce = (appliance: Appliance): void => {\n                    if (appliance && !orderedAppliances.find(app => app.id === appliance.id)) {\n                        orderedAppliances.push(appliance);\n                    }\n                };\n\n                // handles making sure that parent/child pairs are always added as a\n                //   pair, and in the correct order.  It is possible that the child may be fed in before the parent.\n                let addApplianceOrPair = (appliance: Appliance): void => {\n                    if (appliance) {\n                        // check for a child being added first\n                        if (appliance.parentId) {\n                            let parentApp = appliances.find(a => a.id === appliance.parentId);\n                            addApplianceOnce(parentApp);\n                        }\n\n                        addApplianceOnce(appliance);\n\n                        // check for a parent being added first\n                        if (appliance.childId) {\n                            let childApp = appliances.find(a => a.id === appliance.childId);\n                            addApplianceOnce(childApp);\n                        }\n                    }\n                };\n\n                if (job.tasks) {\n                    // add appliances for today's tasks, in task order\n                    ArrayHelper.sortByColumn(job.tasks, \"id\");\n                    job.tasks.forEach(task => {\n                        let appliance = appliances.find(app => app.id === task.applianceId);\n                        addApplianceOrPair(appliance);\n                    });\n                }\n\n                let applianceAndTypeCodes = appliances.map(app => {\n                    let catalogItem = catalog.find(c => c.applianceType === app.applianceType);\n\n                    return {\n                        appliance: app,\n                        code: catalogItem ? catalogItem.applianceCategory : undefined\n                    };\n                });\n\n                /* add appliance based on their categories */\n                categoryPriorities.forEach(category => {\n                    applianceAndTypeCodes\n                        .filter(app => app.code === category)\n                        .forEach(app => addApplianceOrPair(app.appliance));\n                });\n\n                /* finally any that we have missed because they didn't have a category */\n                appliances.forEach((appliance) => addApplianceOrPair(appliance));\n            }\n        }\n\n        return orderedAppliances;\n    }\n\n    private senatizeDescription(job: Job, ruleGroup: QueryableBusinessRuleGroup): void {\n        // reference: DF_553, in some cases, for e.g. First Visit, WMIS adds a trailing '.', so remove here.\n        // todo remove this when WMIS clean up their appliance description for first visits\n\n        let regex = ruleGroup.getBusinessRule<string>(\"removeCharactersDescription\");\n        if (regex && job.history.appliances) {\n            job.history.appliances.forEach(appliance => this.removeBadCharactersFromApplianceDesc(regex, appliance));\n        }\n    }\n}\n"],"sourceRoot":"../../.."}