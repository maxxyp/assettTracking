{"version":3,"sources":["hema/business/services/notificationService.ts"],"names":[],"mappings":"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","file":"notificationService.js","sourcesContent":["import {EventAggregator} from \"aurelia-event-aggregator\";\nimport {inject} from \"aurelia-dependency-injection\";\nimport {Router} from \"aurelia-router\";\nimport {ConsumableServiceConstants} from \"./constants/consumableServiceConstants\";\nimport {MessageServiceConstants} from \"./constants/messageServiceConstants\";\nimport {ConsumablesBasket} from \"../../presentation/modules/parts/consumablesBasket\";\nimport {VanStockConstants} from \"./constants/vanStockConstants\";\nimport {IMessageService} from \"./interfaces/IMessageService\";\nimport {IVanStockService} from \"./interfaces/IVanStockService\";\nimport {MessageService} from \"./messageService\";\nimport {VanStockService} from \"./vanStockService\";\nimport {INotificationService} from \"./interfaces/INotificationService\";\nimport {SoundConstants} from \"./constants/soundConstants\";\nimport {IStorageService} from \"./interfaces/IStorageService\";\nimport {StorageService} from \"./storageService\";\nimport { AppConstants } from \"../../../appConstants\";\nimport { IToastItem } from \"../../../common/ui/elements/models/IToastItem\";\nimport { Guid } from \"../../../common/core/guid\";\n\nconst CONSUMABLES_ROUTE_NAME = \"consumables\";\nconst MESSAGES_ROUTE_NAME = \"messages\";\nconst GROUP_VANSTOCK_CONSUMABLES = \"VANSTOCK_SOURCE\";\n\n@inject(EventAggregator, Router, MessageService, VanStockService, StorageService)\nexport class NotificationService implements INotificationService {\n    private _eventAggregator: EventAggregator;\n    private _router: Router;\n    private _messageService: IMessageService;\n    private _vanStockService: IVanStockService;\n    private _storage: IStorageService;\n\n    constructor(eventAggregator: EventAggregator, router: Router,\n                messageService: IMessageService, vanStockService: IVanStockService, storage: IStorageService) {\n\n        this._eventAggregator = eventAggregator;\n        this._router = router;\n\n        this._messageService = messageService;\n        this._vanStockService = vanStockService;\n        this._storage = storage;\n    }\n\n    public initRouterBadgeEventSubs(): void {\n\n        const notCurrentlyOnRoute = (routeName: string) => {\n\n            if (!this._router) {\n                return false;\n            }\n\n            if (!this._router.currentInstruction) {\n                return false;\n            }\n\n            if (this._router.currentInstruction.params) {\n                return this._router.currentInstruction.params.childRoute !== routeName;\n            }\n\n            return false;\n        };\n\n        // badge updates for consumables, only do if not on current page\n        this._eventAggregator.subscribe(ConsumableServiceConstants.CONSUMABLE_ADDED, async () => {\n            // if on consumables page then no need to update read flag\n            if (notCurrentlyOnRoute(\"consumables-basket\")) {\n                this.updateBadge(CONSUMABLES_ROUTE_NAME, 1);\n                await this._storage.setConsumablesRead(false);\n            }\n        });\n\n        this._eventAggregator.subscribe(ConsumablesBasket.READ_CONSUMBALES_BASKET, async () => {\n            this.updateBadge(CONSUMABLES_ROUTE_NAME);\n        });\n\n        // badge updates for messages\n        this._eventAggregator.subscribe(MessageServiceConstants.MESSAGE_SERVICE_UPDATED, (badgeCount: number) => {\n            this.updateBadge(MESSAGES_ROUTE_NAME, badgeCount);\n\n        });\n\n        // badge updates for van stock, check if any outbound items\n        this._eventAggregator.subscribe(VanStockConstants.VANSTOCK_UPDATED, async () => {\n\n            const notOnRoute = notCurrentlyOnRoute(\"in-out-stock\");\n\n            const items = await this._vanStockService.getMaterialRequests();\n            const badgeCount = items.outboundMaterials.filter(i => i.isUnread).length;\n\n            // if read all items or on different page and updates\n            if (badgeCount === 0 || notOnRoute && badgeCount) {\n                this.updateBadge(CONSUMABLES_ROUTE_NAME, badgeCount, GROUP_VANSTOCK_CONSUMABLES);\n            }\n\n            if (badgeCount) {\n                this._eventAggregator.publish(SoundConstants.NOTIFICATION_SOUND);\n\n                const msg = badgeCount > 1 ? \"parts\" : \"part\";\n                this._eventAggregator.publish(AppConstants.APP_TOAST_ADDED, <IToastItem>{\n                    id: Guid.newGuid(),\n                    title: \"Reservation Request\",\n                    style: \"warning\",\n                    content: `You have just received a ${msg} reservation request`,\n                    autoDismiss: false\n                });\n            }\n\n        });\n    }\n\n    // only call post router setup, i.e. router.ensureConfigured\n    public updateInitialRouterBadgeCounts(): Promise<void> {\n        return this._router.ensureConfigured().then(() => {\n\n            this.updateBadge(\"messages\", this._messageService.unreadCount);\n\n            return this._vanStockService.getMaterialRequests().then(items => {\n                const badgeCount = items.outboundMaterials.filter(i => i.isUnread).length;\n                this.updateBadge(CONSUMABLES_ROUTE_NAME, badgeCount, GROUP_VANSTOCK_CONSUMABLES);\n            });\n\n        });\n    }\n\n    private updateBadge(route: string, count: number = 0, groupId: string = route): void {\n\n        if (!this._router) {\n            return;\n        }\n\n        let routeObject = this._router.routes.find(r => r.route === route);\n\n        if (!routeObject) {\n            return;\n        }\n\n        const {settings} = routeObject;\n        const {counts = {}} = settings;\n\n        counts[groupId] = count;\n\n        const badgeCount = Object.keys(counts).reduce((a, b) => a + counts[b], 0);\n\n        routeObject.settings = {...settings, badgeCount, counts};\n    }\n}\n"],"sourceRoot":"../../.."}