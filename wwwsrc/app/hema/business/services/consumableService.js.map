{"version":3,"sources":["hema/business/services/consumableService.ts"],"names":[],"mappings":"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","file":"consumableService.js","sourcesContent":["import { inject } from \"aurelia-framework\";\nimport { ConsumablesBasket } from \"../models/consumablesBasket\";\nimport { ConsumablePart } from \"../models/consumablePart\";\nimport { IConsumableService } from \"./interfaces/IConsumableService\";\nimport { IStorageService } from \"./interfaces/IStorageService\";\nimport { StorageService } from \"./storageService\";\nimport { FftService } from \"../../api/services/fftService\";\nimport { IFFTService } from \"../../api/services/interfaces/IFFTService\";\nimport { IConsumable } from \"../../api/models/fft/engineers/IConsumable\";\nimport { IEngineerService } from \"./interfaces/IEngineerService\";\nimport { EngineerService } from \"./engineerService\";\nimport { Engineer } from \"../models/engineer\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { ConsumableServiceConstants } from \"./constants/consumableServiceConstants\";\nimport * as moment from \"moment\";\nimport {IOrderConsumablesRequest} from \"../../api/models/fft/engineers/IOrderConsumablesRequest\";\nimport {IOrderConsumables} from \"../../api/models/fft/engineers/IOrderConsumables\";\n@inject(StorageService, FftService, EngineerService, EventAggregator)\nexport class ConsumableService implements IConsumableService {\n    private _storageService: IStorageService;\n    private _fftService: IFFTService;\n    private _engineerService: IEngineerService;\n    private _eventAggregator: EventAggregator;\n\n    constructor(\n        storageService: IStorageService,\n        fftService: IFFTService,\n        engineerService: IEngineerService,\n        eventAggregator: EventAggregator) {\n        this._storageService = storageService;\n        this._fftService = fftService;\n        this._engineerService = engineerService;\n        this._eventAggregator = eventAggregator;\n    }\n\n    public getConsumablesBasket(): Promise<ConsumablesBasket> {\n        return this._storageService.getConsumablePartsBasket().then((basket) => {\n            if (basket) {\n                basket.partsInBasket = basket.partsInBasket.sort((a: any, b: any) => {\n                    return (a.dateAdded <= b.dateAdded ? 1 : -1);\n                });\n                return basket;\n            } else {\n                return new ConsumablesBasket();\n            }\n        });\n    }\n    public placeOrder(consumablesPartsBasket: ConsumablesBasket): Promise<ConsumablesBasket> {\n        let engineer: Engineer;\n        let consumablesOrderItems: ConsumablePart[];\n        let orderItems: IConsumable[] = [];\n        return this._engineerService.getCurrentEngineer()\n            .then((signedOnEngineer: Engineer) => {\n                engineer = signedOnEngineer;\n            }).then(() => {\n                consumablesOrderItems = consumablesPartsBasket.partsInBasket.filter((part) => part.sent === false);\n                consumablesOrderItems.forEach(item => {\n                    orderItems.push(<IConsumable>{ stockReferenceId: item.referenceId, quantityOrdered: item.quantity });\n                });\n\n                let orderConsumables = <IOrderConsumables> {\n                    engineerId: engineer.id,\n                    consumables: orderItems\n                };\n\n                let orderConsumablesRequest = <IOrderConsumablesRequest> {\n                    data: orderConsumables\n                };\n\n                // order comsumables is a critical packet so always returns success. failed packets are queued. so no need to wait for the promise to resolve.\n                this._fftService.orderConsumables(engineer.id, orderConsumablesRequest);\n                consumablesPartsBasket = this.setProcessedOrderItemsToSent(consumablesPartsBasket);\n                this._eventAggregator.publish(ConsumableServiceConstants.CONSUMABLE_ADDED, 0);\n                this.saveBasket(consumablesPartsBasket);\n                return consumablesPartsBasket;\n            });\n\n    }\n    public removeConsumableFromBasket(referenceId: string): Promise<ConsumablesBasket> {\n        return this.getConsumablesBasket().then(basket => {\n            let existingBasketPart = basket.partsInBasket.find(a => a.referenceId === referenceId && a.sent === false);\n            if (existingBasketPart) {\n                basket.partsInBasket.splice(basket.partsInBasket.indexOf(existingBasketPart), 1);\n            }\n            this.saveBasket(basket);\n            this.orderItemCount().then((total) => this._eventAggregator.publish(ConsumableServiceConstants.CONSUMABLE_ADDED, total));\n            return basket;\n        });\n    }\n\n    public addConsumableToBasket(part: ConsumablePart): Promise<ConsumablesBasket> {\n        return this.getConsumablesBasket().then(basket => {\n            // check to see if the part exists already and is not deleted or sent\n            let foundPart = basket.partsInBasket.findIndex(basketPart => basketPart.referenceId === part.referenceId && basketPart.sent === false && basketPart.deleted === false);\n            if (foundPart > - 1) {\n                // found..  add to it\n                basket.partsInBasket[foundPart].quantity = basket.partsInBasket[foundPart].quantity + part.quantity;\n            } else {\n                // no part found just push to basket\n                basket.partsInBasket.push(new ConsumablePart(part.referenceId, part.description, part.quantity));\n            }\n            this.saveBasket(basket);\n            this.orderItemCount().then((total) => this._eventAggregator.publish(ConsumableServiceConstants.CONSUMABLE_ADDED, total));\n            return basket;\n        });\n\n    }\n\n    public saveBasket(basket: ConsumablesBasket): Promise<void> {\n        return this._storageService.setConsumablePartsBasket(basket);\n    }\n    public addFavourite(part: ConsumablePart): Promise<ConsumablesBasket> {\n        return this.getConsumablesBasket().then(basket => {\n            let foundPart = basket.favourites.findIndex(basketPart => basketPart.referenceId === part.referenceId);\n            if (foundPart === - 1) {\n                basket.favourites.push(part);\n                this.saveBasket(basket);\n            }\n            return basket;\n        });\n    }\n\n    public removeFavourite(itemIndex: number): Promise<ConsumablesBasket> {\n        return this.getConsumablesBasket().then(basket => {\n            basket.favourites.splice(itemIndex, 1);\n            this.saveBasket(basket);\n            return basket;\n        });\n\n    }\n    public orderItemCount(): Promise<number> {\n        let total: number = 0;\n        return this.getConsumablesBasket().then(basket => {\n            basket.partsInBasket.filter((p) => p.sent === false).forEach((part) => {\n                total += part.quantity;\n            });\n            return total;\n        });\n    }\n\n    public clearOldOrders(daysOld: number): Promise<ConsumablesBasket> {\n        let today: number = new Date().getTime();\n        let remainder: number;\n        return this.getConsumablesBasket().then(basket => {\n            let filteredParts: ConsumablePart[] = basket.partsInBasket.filter((pib) => {\n                let dateAdded: Date = moment(pib.dateAdded).toDate();\n                remainder = today - dateAdded.getTime();\n                remainder = remainder / (1000 * 60 * 60 * 24);\n                if ((remainder < daysOld && pib.sent === true) || pib.sent === false) {\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n            basket.partsInBasket = filteredParts;\n            this.saveBasket(basket);\n            return basket;\n        });\n    }\n    private setProcessedOrderItemsToSent(basket: ConsumablesBasket): ConsumablesBasket {\n        for (let i: number = 0; i < basket.partsInBasket.length; i++) {\n            basket.partsInBasket[i].sent = true;\n            basket.partsInBasket[i].favourite = false;\n        }\n        return basket;\n    }\n}\n"],"sourceRoot":"../../.."}