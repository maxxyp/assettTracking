{"version":3,"sources":["hema/business/services/vanStockService.ts"],"names":[],"mappings":"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","file":"vanStockService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\nimport { inject } from \"aurelia-framework\";\nimport { IVanStockPatchFactory } from \"../factories/interfaces/IVanStockPatchFactory\";\nimport { VanStockPatchFactory } from \"../factories/vanStockPatchFactory\";\nimport { VanStockPatchListItem } from \"../models/vanStockPatchListItem\";\nimport { VanStockSector } from \"../models/vanStockSector\";\nimport { VanStockService as ApiVanStockService } from \"../../api/services/vanStockService\";\nimport { IVanStockService as IApiVanStockService } from \"../../api/services/interfaces/IVanStockService\";\nimport { IVanStockService as IBusinessVanStockService } from \"./interfaces/IVanStockService\";\nimport { VanStockPatch } from \"../models/vanStockPatch\";\nimport * as Logging from \"aurelia-logging\";\nimport { MaterialWithQuantities } from \"../models/materialWithQuantities\";\nimport { MaterialSearchResult } from \"../models/materialSearchResult\";\nimport { ISort } from \"../../common/models/ISort\";\nimport { VanStockServiceConstants } from \"./constants/vanStockServiceConstants\";\nimport { VanStockEngine } from \"./vanStockEngine\";\nimport { IVanStockEngine } from \"./interfaces/IVanStockEngine\";\nimport { MaterialRequest } from \"../models/materialRequest\";\nimport { Material } from \"../models/material\";\nimport { MaterialCollection } from \"../models/materialCollection\";\nimport { MaterialHighValueTool } from \"../models/materialHighValueTool\";\nimport { MaterialToCollect } from \"../models/materialToCollect\";\nimport { Guid } from \"../../../common/core/guid\";\nimport { VanStockStatus } from \"../vanStockStatus\";\n\nexport const STOCK_REFERENCE_ID_REGEX = /^[a-z0-9]{6}$/i;\nconst AREA_REG_EX = /^@Area:(?:[a-z0-9]?)/i;\nconst JOB_REG_EX = /^#Job:(?:[0-9]?)/i;\n\n// there is a function in side arrayHelper.ts which has a know  bug\n// that function can not deal with arrays with undefined values.\n// as the arrayhelper function is used in existing code elsewhere in the app\n// its been decided to use this just for van stock.\nconst sortByColumnName = (columnSort: ISort) => (a: any, b: any): number => {\n    let aValue = a[columnSort.sortBy] || \" \"; // becouse for the undefined values the sorting does not behave\n    let bValue = b[columnSort.sortBy] || \" \";\n    if (aValue.length > 1) {\n        aValue = aValue.trim();\n    }\n\n    if (bValue.length > 1) {\n        bValue = bValue.trim();\n    }\n\n    if (!aValue && !bValue) {\n        return 0;\n    } else if (aValue && !bValue) {\n        return -1;\n    } else if (!aValue && bValue) {\n        return 1;\n    } else {\n        const value1 = aValue.toString().toUpperCase(); // ignore upper and lowercase\n        const value2 = bValue.toString().toUpperCase(); // ignore upper and lowercase\n        if (value1 < value2) {\n            return columnSort.sortOrderAsc ? -1 : 1;\n        } else if (value1 > value2) {\n            return columnSort.sortOrderAsc ? 1 : -1;\n        } else {\n            return 0;\n        }\n    }\n};\n\n@inject(ApiVanStockService, VanStockPatchFactory, VanStockEngine)\nexport class VanStockService implements IBusinessVanStockService {\n    private _vanStockService: IApiVanStockService;\n    private _vanStockPatchFactory: IVanStockPatchFactory;\n    private _vanStockEngine: IVanStockEngine;\n    private _patchCache: { sector: string, code: string, patch: VanStockPatch }[];\n    private _logger: Logging.Logger;\n\n    constructor(vanStockService: IApiVanStockService,\n        vanStockPatchFactory: IVanStockPatchFactory,\n        vanStockEngine: IVanStockEngine) {\n        this._vanStockService = vanStockService;\n        this._vanStockPatchFactory = vanStockPatchFactory;\n        this._vanStockEngine = vanStockEngine;\n        this._patchCache = [];\n        this._logger = Logging.getLogger(\"VanStockService\");\n    }\n\n    public async getPatchCodes(sector: string): Promise<VanStockPatchListItem[]> {\n        let patch = await this._vanStockService.getVanstockPatchCodes(sector);\n        return this._vanStockPatchFactory.createVanStockPatchListBusinessModel(patch);\n    }\n\n    public getSectors(): VanStockSector[] {\n        return [\n            { sectorCode: \"PatchGas\", sectorDescription: \"Gas Services\" },\n            { sectorCode: \"PatchES\", sectorDescription: \"Electrical Services\" }\n        ];\n    }\n\n    // todo: remove this old version stuff\n    public async getEngineersWithPart(code: string, sector: string, gcCode: string): Promise<{ name: string, phone: string }[]> {\n        try {\n            let patchRecord = this._patchCache.find(item => item.sector === sector && item.code === code);\n            if (!patchRecord) {\n                let patchApiModel = await this._vanStockService.getVanstockPatch(code, sector);\n                patchRecord = { sector, code, patch: (this._vanStockPatchFactory.createVanStockPatchBusinessModel(patchApiModel) || <VanStockPatch>{ engineers: [] }) };\n                this._patchCache.push(patchRecord);\n            }\n\n            return patchRecord.patch.engineers\n                .filter(engineer => engineer.parts.some(engineersGcCode => gcCode === engineersGcCode))\n                .map(engineer => ({ name: engineer.name, phone: engineer.phone }));\n\n        } catch (err) {\n            this._logger.error(\"Unable to find patch data\", err);\n            return [];\n        }\n    }\n\n    public async getHighValueToolList(currentCount: number, searchString?: string): Promise<MaterialHighValueTool[]> {\n        let search = (data: MaterialHighValueTool[]): MaterialHighValueTool[] => {\n            if (searchString) {\n                let filteredData: MaterialHighValueTool[] = [];\n                if (STOCK_REFERENCE_ID_REGEX.test(searchString)) {\n                    // this is stock reference id or description\n                    filteredData = data.filter((v) => {\n                        return v && (v.materialCode && v.materialCode.toUpperCase().indexOf(searchString.toUpperCase()) > -1\n                            || v.description && v.description.toUpperCase().indexOf(searchString.toUpperCase()) > -1);\n                    });\n                } else {\n                    // search in all fields\n                    filteredData = data.filter((v) => {\n                        if (v && v.description && v.materialCode) {\n                            return v.description.toUpperCase().indexOf(searchString.toUpperCase()) > -1\n                                || v.materialCode.toUpperCase().indexOf(searchString.toUpperCase()) > -1;\n                        } return false;\n                    });\n                }\n                return filteredData;\n            }\n            return data;\n        };\n\n        let fulllist = await this._vanStockEngine.getHighValueToolList();\n\n        return search(fulllist)\n            .slice(0, currentCount);\n    }\n\n    public async getHighValueToolTotal(searchString?: string): Promise<number> {\n        const list = await this.getHighValueToolList(99999, searchString);\n        return list ? list.length : 0;\n    }\n\n    public async searchLocalVanStock(currentCount: number, sort?: ISort, searchString?: string): Promise<MaterialWithQuantities[]> {\n        let search = (data: MaterialWithQuantities[]): MaterialWithQuantities[] => {\n            if (searchString) {\n                let filteredData: MaterialWithQuantities[] = [];\n                if (AREA_REG_EX.test(searchString)) {\n                    let areaSearchString = searchString.trim().replace(VanStockServiceConstants.AREA_SEARCH_PREFIX, \"\");\n                    // this is area\n                    filteredData = data.filter((v) => {\n                        return v && v.area && v.area.toUpperCase().indexOf(areaSearchString.toUpperCase()) > -1;\n                    });\n                } else if (JOB_REG_EX.test(searchString)) {\n                    let jobSearchString = searchString.trim().replace(VanStockServiceConstants.JOB_SEARCH_PREFIX, \"\");\n                    // this is jobId\n                    filteredData = data.filter((v) => {\n                        return v && v.jobId && v.jobId.toUpperCase().indexOf(jobSearchString.toUpperCase()) > -1;\n                    });\n                } else if (STOCK_REFERENCE_ID_REGEX.test(searchString)) {\n                    // this is stock reference id or description\n                    filteredData = data.filter((v) => {\n                        return v && (v.stockReferenceId && v.stockReferenceId.toUpperCase().indexOf(searchString.toUpperCase()) > -1\n                            || v.description && v.description.toUpperCase().indexOf(searchString.toUpperCase()) > -1);\n                    });\n                } else {\n                    // search in all fields\n                    filteredData = data.filter((v) => {\n                        if (v && v.description && v.stockReferenceId) {\n                            return v.description.toUpperCase().indexOf(searchString.toUpperCase()) > -1\n                                || v.stockReferenceId.toUpperCase().indexOf(searchString.toUpperCase()) > -1;\n                        } return false;\n                    });\n                }\n                return filteredData;\n            }\n            return data;\n        };\n\n        let fulllist = await this._vanStockEngine.getLocalMaterial();\n        if (sort) {\n            fulllist = fulllist.sort(sortByColumnName(sort));\n        }\n\n        return search(fulllist)\n            .slice(0, currentCount);\n    }\n\n    public async getLocalVanStockTotal(searchString?: string): Promise<number> {\n        const list = await this.searchLocalVanStock(99999, null, searchString);\n        return list ? (list.length > 0 ? list.map(a => a.quantity).reduce((a, c) => a + c) : 0) : 0;\n    }\n\n    public async getLocalVanStockLineTotal(searchString?: string): Promise<number> {\n        const list = await this.searchLocalVanStock(99999, null, searchString);\n        return list ? list.length : 0;\n    }\n\n    public async getLocalVanStockAreaLookup(): Promise<string[]> {\n        const materials: MaterialWithQuantities[] = await this._vanStockEngine.getLocalMaterial();\n        const unique = ((value: string, index: number, self: string[]): boolean => {\n            return self[index] && self.indexOf(value) === index;\n        });\n        return await materials.map(m => m.area).filter(unique);\n    }\n\n    public getBindableVanStockStatusFlag(): VanStockStatus {\n        return this._vanStockEngine.getBindableVanStockStatusFlag();\n    }\n\n    public getBindableMaterialSearchResult(stockReferenceId: string, forceRefresh?: boolean): MaterialSearchResult {\n        return this._vanStockEngine.getBindableMaterialSearchResult(stockReferenceId, forceRefresh);\n    }\n\n    public getPartsToCollect(): Promise<{ toCollect: MaterialToCollect[], collected: MaterialCollection[], expectedReturns: Material[] }> {\n        return this._vanStockEngine.getPartsToCollect();\n    }\n\n    public getMaterialRequests(): Promise<{ inboundMaterials: MaterialRequest[], outboundMaterials: MaterialRequest[] }> {\n        return this._vanStockEngine.getMaterialRequests();\n    }\n\n    public getReturns(): Promise<Material[]> {\n        return this._vanStockEngine.getReturns();\n    }\n\n    public registerMaterialRequestReads(arg: { requestIds: (number | Guid)[] }): Promise<void> {\n        return this._vanStockEngine.registerMaterialRequestReads(arg);\n    }\n\n    public registerMaterialZoneUpdate(arg: { stockReferenceId: string, area: string }): Promise<void> {\n        return this._vanStockEngine.registerMaterialZoneUpdate(arg);\n    }\n\n    public registerMaterialCollection(arg: { dispatchId: number, quantityCollected: number }): Promise<void> {\n        return this._vanStockEngine.registerMaterialCollection(arg);\n    }\n\n    public registerMaterialReturn(arg: { stockReferenceId: string, quantityReturned: number, reason: string, jobId?: string }): Promise<void> {\n        return this._vanStockEngine.registerMaterialReturn(arg);\n    }\n\n    public registerMaterialRequest(arg: {\n        stockReferenceId: string,\n        description: string,\n        quantityRequested: number,\n        engineerId: string,\n        engineerName: string,\n        engineerPhone: string,\n        owner: string\n    }): Promise<number | Guid> {\n        return this._vanStockEngine.registerMaterialRequest(arg);\n    }\n\n    public registerMaterialRequestWithdrawl(arg: { requestId: number | Guid }): Promise<void> {\n        return this._vanStockEngine.registerMaterialRequestWithdrawl(arg);\n    }\n\n    public registerMaterialTransfer(arg: { requestId: number | Guid }): Promise<void> {\n        return this._vanStockEngine.registerMaterialTransfer(arg);\n    }\n\n    public registerMaterialConsumption(arg: { stockReferenceId: string, quantityConsumed: number, jobId?: string }): Promise<void> {\n        return this._vanStockEngine.registerMaterialConsumption(arg);\n    }\n}\n"],"sourceRoot":"../../.."}