{"version":3,"sources":["hema/business/services/charge/chargePartsHelperService.ts"],"names":[],"mappings":"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","file":"chargePartsHelperService.js","sourcesContent":["import * as Logging from \"aurelia-logging\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { ChargeableTask } from \"../../models/charge/chargeableTask\";\nimport { IPartService } from \"../interfaces/IPartService\";\nimport { Part } from \"../../models/part\";\nimport { PartService } from \"../partService\";\nimport { IChargePartsHelperService } from \"../interfaces/charge/IChargePartsHelperService\";\nimport * as bignumber from \"bignumber\";\nimport { IChargePartsCatalogDependencies } from \"../interfaces/charge/IChargePartsCatalogDependencies\";\n\n@inject(PartService)\nexport class ChargePartsHelperService implements IChargePartsHelperService {\n\n    private _logger: Logging.Logger;\n    private _partService: IPartService;\n\n    constructor(partService: IPartService) {\n\n        this._partService = partService;\n        this._logger = Logging.getLogger(\"ChargePartsHelperService\");\n    }\n\n    /**\n     *\n     * @param {ChargeableTask} chargeableTask\n     * @param {string} jobId\n     * @param {boolean} shouldChargeForParts\n     * @param {IChargePartsCatalogDependencies} dependencies\n     * @returns {Promise<ChargeableTask>}\n     */\n    public async addPartsCharge(chargeableTask: ChargeableTask, jobId: string,\n                                shouldChargeForParts: boolean, dependencies: IChargePartsCatalogDependencies): Promise<ChargeableTask> {\n\n        const {visitStatuses, notUsedStatusCode, excludePartStatusPrevious, vanStockPartOrderStatus} = dependencies;\n\n        let partsToday = await this._partService.getTodaysParts(jobId);\n\n        let first: ChargeableTask = chargeableTask;\n\n        if (partsToday && partsToday.parts && partsToday.parts.length > 0) {\n            this._logger.debug(\"Today's parts found\", partsToday.parts);\n            first = this.createPartChargeableItems(chargeableTask, partsToday.parts, shouldChargeForParts);\n        }\n\n        let second = await this.addVanStockPartsCharge(first, jobId, shouldChargeForParts, vanStockPartOrderStatus);\n        return this.addPartsChargePreviousActivity(second, shouldChargeForParts, visitStatuses, notUsedStatusCode, excludePartStatusPrevious);\n    }\n\n    /**\n     *\n     * @param {ChargeableTask} chargeableTask\n     * @param {string} jobId\n     * @param {boolean} shouldCharge\n     * @param {string} vanStockPartOrderStatus\n     * @returns {Promise<ChargeableTask>}\n     */\n    private async addVanStockPartsCharge(chargeableTask: ChargeableTask, jobId: string,\n                                         shouldCharge: boolean, vanStockPartOrderStatus: string): Promise<ChargeableTask> {\n\n        const partBasketBusinessModel = await this._partService.getPartsBasket(jobId);\n\n        if (partBasketBusinessModel\n            && partBasketBusinessModel.partsToOrder\n            && partBasketBusinessModel.partsToOrder.length > 0) {\n\n            this._logger.debug(\"Van stock parts found\", partBasketBusinessModel.partsToOrder);\n\n            let parts = partBasketBusinessModel.partsToOrder.filter(p => p.partOrderStatus === vanStockPartOrderStatus);\n\n            return this.createPartChargeableItems(chargeableTask, parts, shouldCharge);\n        }\n\n        return chargeableTask;\n    }\n\n    /**\n     *\n     * @param {ChargeableTask} chargeableTask\n     * @param {boolean} isPart\n     * @param {string[]} visitStatuses\n     * @param {string} notUsedStatusCode\n     * @param {string[]} excludePartStatusPrevious\n     * @returns {ChargeableTask}\n     */\n    private addPartsChargePreviousActivity(chargeableTask: ChargeableTask, isPart: boolean,\n                                                   visitStatuses: string [], notUsedStatusCode: string, excludePartStatusPrevious: string []): ChargeableTask {\n\n        if (!chargeableTask.task || !chargeableTask.task.activities || chargeableTask.task.activities.length === 0) {\n            return chargeableTask;\n        }\n\n        const {task} = chargeableTask;\n        const {activities} = task;\n\n        // filter activities we can carry forward charges:\n        // i.e.  Complete, Another Visit Reqd, Field Manager Reqd,  Parts Reqd, Wait Advice\n        // c, ia, if, ip, wa\n\n        const chargeableActivities = activities.filter(a => visitStatuses.some(vs => vs === a.status)\n            && a.parts && a.parts.length > 0);\n\n        let parts: Part[] = [];\n        chargeableActivities.forEach(activity => {\n\n            if (activity.parts && activity.parts.length > 0) {\n\n                // if an NU record is present, it represents an amount that needs to be subtracted from\n                //  a adjoining FP record (only ordered parts can be NU'ed, van stock cannot)\n                let notUsed: { [stockReferenceId: string]: number; } = {};\n                for (const p of activity.parts.filter(a => a.status === notUsedStatusCode)) {\n                    notUsed[p.stockReferenceId] = (notUsed[p.stockReferenceId] || 0) + p.quantity;\n                }\n\n                let getAndChalkOffQuantityToReturn = (thisPartQuantity: number, stockReferenceId: string) => {\n                    let amountLeftToAllocate = notUsed[stockReferenceId];\n                    if (!amountLeftToAllocate || amountLeftToAllocate <= 0) {\n                        return undefined;\n                    }\n\n                    let amountToAllocateHere = amountLeftToAllocate <= thisPartQuantity\n                                                ? amountLeftToAllocate\n                                                : thisPartQuantity;\n\n                    notUsed[stockReferenceId] = notUsed[stockReferenceId] - amountToAllocateHere;\n                    return amountToAllocateHere;\n                };\n\n                // for FP parts (ordered parts), any warranty amount has not been subtracted in the FP line and so we need to\n                //  hunt for a CP line for that part to see its warranty amount.\n                // for U* parts (van stock) they already have their warranty amounts subtracted (!)\n                let claimedWarrantied: { [stockReferenceId: string]: number; } = {};\n                for (const p of activity.parts.filter(a => a.status === \"CP\")) {\n                    claimedWarrantied[p.stockReferenceId] = (claimedWarrantied[p.stockReferenceId] || 0) + p.quantity;\n                }\n\n                let getAndChalkOffQuantityWarrantied = (thisPartQuantity: number, stockReferenceId: string) => {\n                    let amountLeftToAllocate = claimedWarrantied[stockReferenceId];\n                    if (!amountLeftToAllocate || amountLeftToAllocate <= 0) {\n                        return undefined;\n                    }\n\n                    let amountToAllocateHere = amountLeftToAllocate <= thisPartQuantity\n                                                ? amountLeftToAllocate\n                                                : thisPartQuantity;\n\n                    claimedWarrantied[stockReferenceId] = claimedWarrantied[stockReferenceId] - amountToAllocateHere;\n                    return amountToAllocateHere;\n                };\n\n                activity.parts\n                    .forEach(part => {\n                            // beware - this bit mutates data, and this change to the underlying data is relied upon when we send\n                            //  charges information back to WMIS.\n                            if (part.status === \"FP\") {\n                                let returnedQuantity = getAndChalkOffQuantityToReturn(part.quantity, part.stockReferenceId);\n                                if (returnedQuantity) {\n                                    part.notUsedReturn.quantityToReturn = returnedQuantity;\n                                }\n                            }\n\n                            if (part.status === \"FP\" || part.status === \"UP\") {\n                                let warrantiedQuantity = getAndChalkOffQuantityWarrantied(part.quantity, part.stockReferenceId);\n                                if (warrantiedQuantity) {\n                                    part.warrantyReturn.isWarrantyReturn = true;\n                                    part.warrantyReturn.quantityToClaimOrReturn = warrantiedQuantity;\n                                }\n                            }\n                    });\n\n                const partsToChargeFor = activity.parts\n                    .filter(p => !excludePartStatusPrevious.some(s => s === p.status));\n\n                parts.push(...partsToChargeFor);\n            }\n        });\n\n        return this.createPartChargeableItems(chargeableTask, parts, isPart && task.isCharge, true);\n    }\n\n    /**\n     *\n     * @param {ChargeableTask} chargeableTask\n     * @param {Part[]} parts\n     * @param {boolean} charge\n     * @param {boolean} previous\n     * @returns {ChargeableTask}\n     */\n    private createPartChargeableItems(chargeableTask: ChargeableTask, parts: Part[], charge: boolean, previous: boolean = false): ChargeableTask {\n\n        let qty = 0;\n        let description = \"\";\n        let stockReferenceId = \"\";\n        let isWarranty = false;\n        let isReturn = false;\n        let qtyCharged = 0;\n\n        const partsFiltered = parts.filter(p => p.taskId === chargeableTask.task.id);\n\n        if (!partsFiltered || partsFiltered.length === 0) {\n            return chargeableTask;\n        }\n\n        for (const part of partsFiltered) {\n\n            this._logger.debug(\"Parts found\", [part]);\n\n            qty = part.quantity;\n            let totalCharge = new bignumber.BigNumber(0);\n\n            let returnQty = 0;\n            let warrantyQty = 0;\n\n            if (!part || !part.price) {\n                break;\n            }\n\n            description = part.description || part.stockReferenceId;\n            stockReferenceId = part.stockReferenceId;\n\n            // if no charge, add part but set value to 0\n            if (!chargeableTask.task.isCharge || !charge) {\n                chargeableTask.addPartItem(description, new bignumber.BigNumber(0), false, false,\n                    qty, 0, stockReferenceId, 0, 0, previous);\n            } else {\n                let qtyToChargeFor = part.quantity;\n\n                if (part.warrantyReturn && part.warrantyReturn.isWarrantyReturn) {\n                    if (part.warrantyReturn.quantityToClaimOrReturn > 0) {\n                        warrantyQty = part.warrantyReturn.quantityToClaimOrReturn;\n                        isWarranty = true;\n                        qtyToChargeFor -= warrantyQty;\n                    }\n                }\n\n                if (part.notUsedReturn && part.notUsedReturn.quantityToReturn > 0) {\n                    returnQty = part.notUsedReturn.quantityToReturn;\n                    isReturn = true;\n                    qtyToChargeFor -= returnQty;\n                }\n\n                if (charge && qtyToChargeFor > 0 && part.price.greaterThan(0)) {\n                    totalCharge = new bignumber.BigNumber(part.price).times(qtyToChargeFor);\n                }\n\n                qtyCharged = qtyToChargeFor;\n\n                chargeableTask.addPartItem(description, totalCharge, isReturn, isWarranty, qty, qtyCharged, stockReferenceId, returnQty, warrantyQty, previous, part.status);\n\n                this._logger.debug(\"Part added to chargeableTask\", [chargeableTask]);\n            }\n        }\n\n        return chargeableTask;\n    }\n}\n"],"sourceRoot":"../../../.."}