{"version":3,"sources":["hema/business/services/charge/chargeService.ts"],"names":[],"mappings":"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","file":"chargeService.js","sourcesContent":["import * as Logging from \"aurelia-logging\";\nimport { ChargeServiceConstants } from \"../constants/chargeServiceConstants\";\nimport { IChargeService } from \"../interfaces/charge/IChargeService\";\nimport { ChargeableTask } from \"../../models/charge/chargeableTask\";\nimport { IJobService } from \"../interfaces/IJobService\";\nimport { ICatalogService } from \"../interfaces/ICatalogService\";\nimport { Task } from \"../../models/task\";\nimport { CatalogService } from \"../catalogService\";\nimport { JobService } from \"../jobService\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport * as moment from \"moment\";\nimport { Charge } from \"../../models/charge/charge\";\nimport * as bignumber from \"bignumber\";\nimport { BusinessRuleService } from \"../businessRuleService\";\nimport { IBusinessRuleService } from \"../interfaces/IBusinessRuleService\";\nimport { Job } from \"../../models/job\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { DataState } from \"../../models/dataState\";\nimport { BusinessException } from \"../../models/businessException\";\nimport { IDiscount } from \"../../models/reference/IDiscount\";\nimport { IActivityCmpnentVstStatus } from \"../../models/reference/IActivityCmpnentVstStatus\";\nimport { JobServiceConstants } from \"../constants/jobServiceConstants\";\nimport { Router } from \"aurelia-router\";\nimport { IVat } from \"../../models/reference/IVat\";\nimport { ChargeCatalogHelperService } from \"./chargeCatalogHelperService\";\nimport { IChargeCatalogHelperService } from \"../interfaces/charge/IChargeCatalogHelperService\";\nimport { IJcChargeRules } from \"../../models/reference/IJcChargeRules\";\nimport { ChargePartsHelperService } from \"./chargePartsHelperService\";\nimport { IChargePartsHelperService } from \"../interfaces/charge/IChargePartsHelperService\";\nimport { ChargeLabourHelperService } from \"./chargeLabourHelperService\";\nimport { IChargeLabourHelperService } from \"../interfaces/charge/IChargeLabourHelperService\";\nimport { IChargePartsCatalogDependencies } from \"../interfaces/charge/IChargePartsCatalogDependencies\";\nimport { IChargeLabourCatalogDependencies } from \"../interfaces/charge/IChargeLabourCatalogDependencies\";\n\n@inject(JobService, CatalogService, BusinessRuleService, EventAggregator,\n    ChargeCatalogHelperService, ChargePartsHelperService, ChargeLabourHelperService)\nexport class ChargeService implements IChargeService {\n\n    private _jobService: IJobService;\n    private _catalogService: ICatalogService;\n\n    private _businessRuleService: IBusinessRuleService;\n    private _chargeCatalogHelper: IChargeCatalogHelperService;\n    private _chargePartsHelperService: IChargePartsHelperService;\n    private _chargeLabourHelperService: IChargeLabourHelperService;\n    private _partsChargeCatalogDependencies: IChargePartsCatalogDependencies;\n    private _chargeLabourCatalogDependencies: IChargeLabourCatalogDependencies;\n\n    // business rules\n    private _dateFormatVat: string;\n    private _chargeRulesDateFormat: string;\n\n    private _discountPercentageCode: string;\n    private _discountFixedCode: string;\n    private _noDiscountCode: string;\n    private _fixedPriceQuotationCurrencyUnit: number;\n\n    private _eventAggregator: EventAggregator;\n    private _chargesUpdated: boolean;\n    private _chargeStatusCatCodes: string[];\n    private _excludeChargeStatusCatCode: string;\n    private _activityComponentVisitStatuses: IActivityCmpnentVstStatus[];\n    private _chargeMethodCodeLength: number;\n    private _logger: Logging.Logger;\n    private _vats: IVat[];\n    private _discounts: IDiscount[];\n    private _incompleteStatus: string[];\n\n    constructor(jobService: IJobService, catalogService: ICatalogService,\n                businessRuleService: IBusinessRuleService, eventAggregator: EventAggregator\n        , chargeCatalogHelper: IChargeCatalogHelperService\n        , chargePartsHelperService: IChargePartsHelperService, chargeLabourHelperService: IChargeLabourHelperService) {\n\n        this._jobService = jobService;\n        this._catalogService = catalogService;\n        this._businessRuleService = businessRuleService;\n        this._eventAggregator = eventAggregator;\n        this._chargesUpdated = true;\n        this._activityComponentVisitStatuses = [];\n        this._vats = [];\n        this._discounts = [];\n        this._chargeCatalogHelper = chargeCatalogHelper;\n        this._chargePartsHelperService = chargePartsHelperService;\n        this._chargeLabourHelperService = chargeLabourHelperService;\n        this._logger = Logging.getLogger(\"ChargeService\");\n        this._incompleteStatus = [];\n        this._partsChargeCatalogDependencies = <IChargePartsCatalogDependencies>{};\n        this._chargeLabourCatalogDependencies = <IChargeLabourCatalogDependencies>{};\n\n        this._eventAggregator.subscribe(ChargeServiceConstants.CHARGE_UPDATE_START, (jobId: string) => this.startCharges(jobId));\n    }\n\n    /**\n     *\n     * @param {Job} job\n     * @param {number} monthLimit\n     * @returns {boolean}\n     */\n    public static previousChargeSameAppliance(job: Job, monthLimit: number = 12): boolean {\n\n        if (!Job.hasCharge(job)) {\n            return false;\n        }\n\n        const existTasksWherePreviousAppliance = job.tasks.filter(task => {\n\n            if (!task.isCharge) {\n                return false;\n            }\n\n            if (!job || !job.history || !job.history.tasks) {\n                return false;\n\n            }\n\n            const {history} = job;\n            const {tasks} = history;\n\n            const oldestAllowed = moment(new Date()).subtract(monthLimit, \"months\");\n\n            return tasks.some(previousTask => {\n                if (previousTask.activities && previousTask.activities.length > 0) {\n                    return previousTask.activities.some(activity =>\n                        moment(activity.date).isAfter(oldestAllowed) && previousTask.applianceType === task.applianceType\n                    );\n                }\n                return false;\n            });\n\n        });\n\n        return existTasksWherePreviousAppliance && existTasksWherePreviousAppliance.length > 0;\n    }\n\n    /**\n     *\n     * @param {Job} job\n     * @param {Router} router\n     */\n    public static showHideChargeRoute(job: Job, router: Router): void {\n\n        if (router && router.routes) {\n            const jobHasCharge = Job.hasCharge(job);\n            let route = router.routes.find(r => r.name === \"charges\");\n            route.settings.visible = jobHasCharge;\n        }\n    }\n\n    /**\n     * applies charges, but also refereshes data state. We have this becuase some pages might require\n     * this to be resolved\n     *\n     * @param {string} jobId\n     * @returns {Promise<void>}\n     */\n    public async startCharges(jobId: string): Promise<void> {\n        return this._jobService.getJob(jobId).then(job => {\n\n            let existingTaskIds = (job.tasks || []).map(task => task.id);\n            let chargeableTaskTaskIds = (job.charge.tasks || [])\n                .filter(chargeableTask => chargeableTask.task)\n                .map(chargeableTask => chargeableTask.task.id);\n\n            // chargeableTask retains a reference to tasks, even after they have been removed from the job.tasks array when deleting a newRfa task\n            //  so in the case that an orphan reference exists, we need to not quit early and do a full recalculation\n            //  if we don't, the orphan task reference still remains and contributes to dataState calculations!\n            let doesAnOrphanExist = chargeableTaskTaskIds.some(chargeableTaskTaskId =>\n                existingTaskIds.indexOf(chargeableTaskTaskId) === -1);\n\n            if (!Job.hasCharge(job) && !doesAnOrphanExist) {\n                job.charge.dataState = DataState.dontCare;\n                this._eventAggregator.publish(ChargeServiceConstants.CHARGE_UPDATE_COMPLETED);\n                this._eventAggregator.publish(JobServiceConstants.JOB_DATA_STATE_CHANGED);\n                return Promise.resolve();\n            }\n\n            if (job.charge) {\n                job.charge.dataState = DataState.notVisited;\n                job.charge.chargeOption = undefined;\n                this._eventAggregator.publish(JobServiceConstants.JOB_DATA_STATE_CHANGED);\n            }\n\n            this._chargesUpdated = false;\n            return this._jobService.setJob(job)\n                .then(() => this.applyCharges(jobId))\n                .then((charge => this.saveCharges(charge)))\n                .then(() => {\n                    this._chargesUpdated = true;\n                    this._eventAggregator.publish(ChargeServiceConstants.CHARGE_UPDATE_COMPLETED);\n                    this._eventAggregator.publish(JobServiceConstants.JOB_DATA_STATE_CHANGED);\n                });\n        }).catch(() => {\n            // do nothing. there may not be active jobs\n        });\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    public areChargesUptoDate(): boolean {\n        return this._chargesUpdated === true;\n    }\n\n    /**\n     * go through each task in the job and create a chargeableTask\n     * for each chargeable task decide if to charge for prime or sub prime\n     * apply discounts\n     * update totals\n     * @param {string} jobId\n     * @returns {Promise<Charge>}\n     */\n    public async applyCharges(jobId: string): Promise<Charge> {\n\n        // we are rewriting charges model so  want a reference to discounted tasks to reapply later\n        let discountedTasks: { [index: string]: string } = {};\n        let remarks: string;\n        let chargeOption: string;\n        let complaintActionCategoryCharge: string;\n        let previousChargeSameApplianceConfirmed: boolean;\n\n        let model = new Charge();\n        model.jobId = jobId;\n\n        try {\n\n            let createChargeableTaskPromises: Promise<ChargeableTask>[] = [];\n            let calcChargesPromises: Promise<ChargeableTask>[] = [];\n\n            await this.getRulesAndCatalogData();\n            const charges = await this.loadCharges(jobId);\n\n            if (charges && charges.tasks) {\n                charges.tasks.forEach(ct => discountedTasks[ct.task.id] = ct.discountCode);\n                remarks = charges.remarks;\n                chargeOption = charges.chargeOption;\n                complaintActionCategoryCharge = charges.complaintActionCategoryCharge;\n                previousChargeSameApplianceConfirmed = charges.previousChargeSameApplianceConfirmed;\n            }\n\n            const job = await this._jobService.getJob(jobId);\n\n            // include all tasks (including previous tasks). So that we can establish prime and sub prime, see DF_1768\n            const tasks = [...job.tasks, ...job.tasksNotToday];\n\n            this._logger.debug(\"calculate charges for tasks\", tasks);\n\n            if (!tasks || tasks.length === 0) {\n                return model;\n            }\n\n            // create charge tasks\n            tasks.forEach(task => {\n                if (!this.excludeCharge(task)) { // task status category is excluded, e.g cancelled\n                    createChargeableTaskPromises.push(this.createChargeableTask(task));\n                }\n            });\n\n            // now calculate charges\n            const chargeableTasks = await Promise.all(createChargeableTaskPromises);\n\n            chargeableTasks.forEach(ct => {\n                if (ct.shouldCharge(this._activityComponentVisitStatuses, this._chargeStatusCatCodes)) {\n                    // no error (from initialisation) and task status category is chargeable, e.g. 'D' for 'done'\n                    calcChargesPromises.push(this.calculateCharges(ct, jobId));\n                } else {\n                    calcChargesPromises.push(Promise.resolve(ct));\n                }\n            });\n\n            const newChargeableTasks = await Promise.all(calcChargesPromises);\n\n            if (!newChargeableTasks || newChargeableTasks.length === 0) {\n                return model;\n            }\n\n            model.tasks = newChargeableTasks;\n\n            // work out what each task charge should be, decide if we should use prime or sub\n            model.calculatePrimeAndSubCharges();\n\n            // update net totals for labour items\n            model.tasks.forEach(t => {\n                if (!t.useFixedPriceQuotation && !t.error) {\n                    t.labourItem.netAmount = t.isSubsequent ? t.labourItem.chargePair.subsequentCharge : t.labourItem.chargePair.primeCharge;\n                }\n            });\n\n            // reapply discounts\n\n            model.tasks.forEach(task => {\n                task.discountCode = discountedTasks[task.task.id];\n                const validDiscounts = this._chargeCatalogHelper.getValidDiscounts(this._discounts);\n                this.applyDiscountToTask(task, validDiscounts, this._discountPercentageCode, this._discountFixedCode, this._noDiscountCode);\n            });\n\n            // reapply charge option\n\n            model.complaintActionCategoryCharge = complaintActionCategoryCharge;\n            model.remarks = remarks;\n            model.chargeOption = chargeOption;\n            model.previousChargeSameApplianceConfirmed = previousChargeSameApplianceConfirmed;\n\n            this.updateTotals(model);\n\n            // do not send back tasks marked as completed from the middleware, just needed it to work out prime and sub\n\n            model.tasks = model.tasks.filter(t => t.task.isMiddlewareDoTodayTask);\n\n            return model;\n        } catch (exception) {\n            this._logger.error(exception && exception.toString());\n            return model;\n        }\n    }\n\n    /**\n     *\n     * @param {string} jobId\n     * @returns {Promise<Charge>}\n     */\n    public async loadCharges(jobId: string): Promise<Charge> {\n        const job = await this._jobService.getJob(jobId);\n\n        if (!job || !job.charge || job.charge.tasks.length === 0) {\n            return Promise.resolve(null);\n        }\n\n        job.charge.previousChargeSameAppliance = ChargeService.previousChargeSameAppliance(job);\n        return Promise.resolve(job.charge);\n    }\n\n    /**\n     *\n     * @param {Charge} charges\n     * @returns {Promise<void>}\n     */\n    public async saveCharges(charges: Charge): Promise<void> {\n        const job = await this._jobService.getJob(charges.jobId);\n        job.charge = charges;\n        return this._jobService.setJob(job);\n    }\n\n    /**\n     *\n     * @param {Charge} model\n     */\n    public updateTotals(model: Charge): void {\n        if (model) {\n            model.netTotal = new bignumber.BigNumber(0);\n            model.chargeTotal = new bignumber.BigNumber(0);\n\n            let netT: bignumber.BigNumber = new bignumber.BigNumber(model.netTotal);\n            let totalVatAmount = new bignumber.BigNumber(0);\n            let totalDiscount = new bignumber.BigNumber(0);\n\n            if (netT.greaterThanOrEqualTo(0)) {\n\n                model.tasks.forEach(x => {\n                    totalVatAmount = totalVatAmount.plus(x.calculatedVatAmount.round(2));\n                    netT = netT.plus(x.netTotal.round(2));\n                    if (x.discountAmount) {\n                        totalDiscount = totalDiscount.plus(x.discountAmount.round(2));\n                    }\n                });\n\n                model.totalVatAmount = totalVatAmount;\n                model.netTotal = netT;\n                model.discountAmount = totalDiscount;\n\n                const chargeTotal = netT.plus(totalVatAmount);\n\n                if (chargeTotal.lessThanOrEqualTo(0)) {\n                    model.chargeTotal = new bignumber.BigNumber(0);\n                    model.netTotal = new bignumber.BigNumber(0);\n                    model.totalVatAmount = new bignumber.BigNumber(0);\n                } else {\n                    model.chargeTotal = chargeTotal;\n                }\n\n            }\n            if (new bignumber.BigNumber(model.netTotal).lessThanOrEqualTo(0)) {\n                model.dataState = DataState.dontCare;\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {ChargeableTask} task\n     * @param {IDiscount[]} allDiscounts\n     * @param {string} discountPercentageCode\n     * @param {string} discountFixedCode\n     * @param {string} noDiscountCode\n     */\n    public applyDiscountToTask(task: ChargeableTask, allDiscounts: IDiscount[], discountPercentageCode: string, discountFixedCode: string, noDiscountCode: string): void {\n\n        // if no task, or fixed price (discount not allowed for fixed price), missing discount code exit early\n\n        if (!task) {\n            return;\n        }\n\n        const {fixedPriceQuotationAmount = new bignumber.BigNumber(0), netTotal = new bignumber.BigNumber(0), discountCode} = task;\n\n        if (netTotal.equals(0) || !discountCode || fixedPriceQuotationAmount.greaterThan(0)) {\n            return;\n        }\n\n        // if no discount code set to 0 discount and exit\n        if (discountCode === noDiscountCode) {\n\n            task.discountAmount = undefined;\n            task.discountText = \"\";\n\n            return;\n        }\n\n        // find discount\n        const discount = allDiscounts.find(d => d.discountCode === task.discountCode);\n\n        // if discount not found, or missing attributes exit\n        if (!discount) {\n            return;\n        }\n\n        const {discountCategory, discountValue} = discount;\n\n        if (!discountCategory || !discountValue) {\n            return;\n        }\n\n        // calculate discount\n\n        // initialise to zero otherwise getter grossTotal will be wrong . see test \"applies correct discount after multiple changes\" in chargeService.spec\n        task.discountAmount = new bignumber.BigNumber(0);\n        task.discountCode = discountCode;\n\n        if (discountCategory === discountPercentageCode) {\n            task.discountAmount = new bignumber.BigNumber(discountValue).times(task.netTotal).dividedBy(100).round(2);\n            task.discountText = `${discountValue}% applied`;\n        } else if (discountCategory === discountFixedCode) { // fixed price e.g. #17.01\n            const discValue = new bignumber.BigNumber(discountValue).dividedBy(100).round(2);\n            task.discountAmount = discValue;\n            task.discountText = `£${discValue} applied`;\n        }\n\n        return;\n    }\n\n    /**\n     *\n     * @param {Task} task\n     * @returns {Promise<ChargeableTask>}\n     */\n    private async createChargeableTask(task: Task): Promise<ChargeableTask> {\n\n        const chargeType = await this._catalogService.getChargeType(task.chargeType);\n\n        this._logger.debug(\"Charge type found\", [chargeType]);\n\n        let chargeableTask = new ChargeableTask();\n        chargeableTask.task = task;\n\n        if (!chargeType) {\n            const message = `charge type ${task.chargeType} not found in catalog data`;\n            this._logger.error(message, task);\n            chargeableTask.setChargeableTaskAsError(message);\n            return chargeableTask;\n        }\n\n        chargeableTask.isLabourCharge = chargeType.chargeLabourIndicator === \"Y\";\n        chargeableTask.isPartsCharge = chargeType.chargePartsIndicator === \"Y\";\n        chargeableTask.chargeDescription = chargeType.chargeTypeDescription;\n        chargeableTask.vatCode = chargeType.vatCode;\n        chargeableTask.discountCode = task.discountCode;\n\n        if (task.fixedPriceQuotationAmount && task.fixedPriceQuotationAmount > 0) {\n            this._logger.debug(\"Fixed price quotation detected\", []);\n            chargeableTask.fixedPriceQuotationAmount = new bignumber.BigNumber(task.fixedPriceQuotationAmount).times(this._fixedPriceQuotationCurrencyUnit);\n        }\n\n        this._logger.debug(\"ChargeableTask created, now getting vat rate\", [chargeableTask]);\n\n        const vat = this._chargeCatalogHelper.getVatRate(chargeType.vatCode, chargeableTask.task.startTime, this._dateFormatVat, this._vats);\n\n        this._logger.debug(\"Got VAT\", [vat]);\n        chargeableTask.vat = new bignumber.BigNumber(vat);\n        return chargeableTask;\n    }\n\n    /**\n     * get charge rule from catalog, then use it to determine if we need to calculate parts, labour charges\n     * @param {ChargeableTask} chargeableTask\n     * @param {string} jobId\n     * @returns {Promise<ChargeableTask>}\n     */\n    private async calculateCharges(chargeableTask: ChargeableTask, jobId: string): Promise<ChargeableTask> {\n\n        this._logger.debug(\"Calculating charges for chargeable task\", [chargeableTask]);\n\n        // if error from earlier process, for .e.g. failed to get charge rule reset, if here then presume that issue is now fixed\n        chargeableTask.error = false;\n        chargeableTask.errorDescription = \"\";\n        chargeableTask.partItems = [];\n\n        let jcChargeRule: IJcChargeRules = null;\n        const {jobType, applianceType, chargeType} = chargeableTask.task;\n\n        try {\n            jcChargeRule = await this._chargeCatalogHelper.getJobCodeChargeRule(jobType, applianceType, chargeType,\n                this._chargeRulesDateFormat, this._chargeMethodCodeLength);\n\n            this._logger.debug(\"Charge rule found\", [jcChargeRule]);\n\n            const isPrime = jcChargeRule && jcChargeRule.primeJobProcessIndicator === \"Y\";\n            chargeableTask.isSubsequent = !isPrime;\n\n            // important - be careful changing the order of if blocks\n\n            if (chargeableTask.useFixedPriceQuotation) {\n                // if fixed price\n                this._logger.debug(\"Fixed price quotation, initialise empty part item, no point doing further calculations\", []);\n                chargeableTask.addPartItem(\"\", new bignumber.BigNumber(0), false, false, 0, 0, \"\", 0, 0);\n                return Promise.resolve(chargeableTask);\n            }\n\n            // further visit status, e.g. Wait Advice, Further Visit Required etc.\n            // we need to retain the prime and sub charge status but don't need to calculate yet\n            if (this._incompleteStatus.some(s => s === chargeableTask.task.status)) {\n                this._logger.debug(\"I status activity, initialise empty part item, no point doing further calculations\", []);\n                chargeableTask.addPartItem(\"\", new bignumber.BigNumber(0), false, false, 0, 0, \"\", 0, 0);\n                return Promise.resolve(chargeableTask);\n            }\n\n            const chargeWithParts = await this._chargePartsHelperService.addPartsCharge(chargeableTask, jobId,\n                chargeableTask.isPartsCharge, this._partsChargeCatalogDependencies);\n\n            // no parts, add item to indicate 0 parts charge\n            if (chargeWithParts.partItems.length === 0) {\n                chargeableTask.addPartItem(\"\", new bignumber.BigNumber(0), false, false, 0, 0, \"\", 0, 0);\n            }\n            // calculate labour charge\n            // you will need a start time in order to calculate labour charge\n            if (!chargeableTask.task.startTime) {\n                return Promise.resolve(chargeWithParts);\n            }\n\n            return await this._chargeLabourHelperService.calculateLabourCharge(chargeWithParts, jcChargeRule, this._chargeLabourCatalogDependencies);\n        } catch (exception) {\n\n            this._logger.error(exception && exception.toString());\n\n            if (!jcChargeRule) {\n\n                // check task and task start time, cannot get charge rule if no task start time initialised, for example\n                // on first visit to screen no need to set error\n\n                if (chargeableTask.isLabourCharge === true && chargeableTask.task && chargeableTask.task.startTime) {\n                    const chargeRuleErrorMessage = \"job code charge rules not found in catalog data\";\n                    this._logger.error(chargeRuleErrorMessage, chargeableTask);\n                    chargeableTask.setChargeableTaskAsError(chargeRuleErrorMessage);\n                    return chargeableTask;\n                }\n                // part type charge jobs will not map to a job charge rule so ok to return with no error\n            }\n            const message: string = \"failed to calculate charges\";\n            this._logger.error(new BusinessException(this, \"chargeService\", message, null, chargeableTask).toString());\n            chargeableTask.setChargeableTaskAsError(message);\n\n            return chargeableTask;\n        }\n    }\n\n    /**\n     *\n     * @param {Task} task\n     * @returns {boolean}\n     */\n    private excludeCharge(task: Task): boolean {\n        if (!task.applianceType) {\n            return true;\n        }\n\n        if (!task.status) {\n            return true;\n        }\n\n        const status = this._activityComponentVisitStatuses.find(a => a.status === task.status);\n\n        if (status && this._excludeChargeStatusCatCode) {\n            return this._excludeChargeStatusCatCode === status.jobStatusCategory;\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * @returns {Promise<void>}\n     */\n    private async getRulesAndCatalogData(): Promise<void> {\n        const ruleGroup = await this._businessRuleService.getQueryableRuleGroup(\"chargeService\");\n        // setup rules\n        this._dateFormatVat = ruleGroup.getBusinessRule<string>(\"dateFormatVat\");\n        this._chargeRulesDateFormat = ruleGroup.getBusinessRule<string>(\"chargeRulesDateFormat\");\n        this._fixedPriceQuotationCurrencyUnit = ruleGroup.getBusinessRule<number>(\"fixedPriceQuotationCurrencyUnit\");\n        this._discountPercentageCode = ruleGroup.getBusinessRule<string>(\"discountPercentageCode\");\n        this._discountFixedCode = ruleGroup.getBusinessRule<string>(\"discountFixedCode\");\n        this._noDiscountCode = ruleGroup.getBusinessRule<string>(\"noDiscountCode\");\n        this._excludeChargeStatusCatCode = ruleGroup.getBusinessRule<string>(\"excludeChargeStatusCatCode\");\n        this._chargeMethodCodeLength = ruleGroup.getBusinessRule<number>(\"chargeMethodCodeLength\");\n        this._chargeStatusCatCodes = ruleGroup.getBusinessRuleList<string>(\"chargeStatusCatCodes\");\n\n        this._incompleteStatus = ruleGroup.getBusinessRuleList<string>(\"incompleteVisitStatus\");\n\n        const tieredLabourChargeCurrencyUnit = ruleGroup.getBusinessRule<number>(\"tieredLabourChargeCurrencyUnit\");\n        const fixedLabourChargeCurrencyUnit = ruleGroup.getBusinessRule<number>(\"fixedLabourChargeCurrencyUnit\");\n\n        const visitStatuses = ruleGroup.getBusinessRuleList<string>(\"visitStatuses\");\n        const notUsedStatusCode = ruleGroup.getBusinessRule<string>(\"notUsedStatusCode\");\n        const vanStockPartOrderStatus = ruleGroup.getBusinessRule<string>(\"vanStockPartOrderStatus\");\n        const excludePartStatusPrevious = ruleGroup.getBusinessRuleList<string>(\"excludePartStatusPrevious\");\n\n        const [statuses, vats, primeChargeIntervals, subChargeIntervals, discounts] =\n            await Promise.all([this._catalogService.getActivityComponentVisitStatuses()\n                , this._catalogService.getVats()\n                , this._catalogService.getPrimeChargeIntervals()\n                , this._catalogService.getSubsequentChargeIntervals()\n                , this._catalogService.getDiscounts()\n            ]);\n\n        this._activityComponentVisitStatuses = statuses;\n        this._vats = vats;\n        this._discounts = discounts;\n\n        this._partsChargeCatalogDependencies.excludePartStatusPrevious = excludePartStatusPrevious;\n        this._partsChargeCatalogDependencies.notUsedStatusCode = notUsedStatusCode;\n        this._partsChargeCatalogDependencies.visitStatuses = visitStatuses;\n        this._partsChargeCatalogDependencies.vanStockPartOrderStatus = vanStockPartOrderStatus;\n\n        this._chargeLabourCatalogDependencies.fixedLabourChargeCurrencyUnit = fixedLabourChargeCurrencyUnit;\n        this._chargeLabourCatalogDependencies.tieredLabourChargeCurrencyUnit = tieredLabourChargeCurrencyUnit;\n        this._chargeLabourCatalogDependencies.primeChargeIntervals = primeChargeIntervals;\n        this._chargeLabourCatalogDependencies.subChargeIntervals = subChargeIntervals;\n\n    }\n}\n"],"sourceRoot":"../../../.."}