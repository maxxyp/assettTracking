{"version":3,"sources":["hema/business/services/authenticationService.ts"],"names":[],"mappings":"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","file":"authenticationService.js","sourcesContent":["import { IWhoAmIService } from \"../../api/services/interfaces/IWhoAmIService\";\r\nimport { inject } from \"aurelia-framework\";\r\nimport { WhoAmIService } from \"../../api/services/whoAmIService\";\r\nimport { WhoAmIServiceConstants } from \"./constants/whoAmIServiceConstants\";\r\nimport { IAuthenticationService } from \"./interfaces/IAuthenticationService\";\r\nimport { IConfigurationService } from \"../../../common/core/services/IConfigurationService\";\r\nimport { IHemaConfiguration } from \"../../IHemaConfiguration\";\r\nimport * as Logging from \"aurelia-logging\";\r\nimport { IWhoAmI } from \"../../api/models/fft/whoAmI/IWhoAmI\";\r\nimport { ConfigurationService } from \"../../../common/core/services/configurationService\";\r\nimport { Threading } from \"../../../common/core/threading\";\r\nimport { EventAggregator } from \"aurelia-event-aggregator\";\r\nimport { InitialisationEventConstants } from \"../constants/initialisationEventConstants\";\r\nimport { InitialisationCategory } from \"../models/initialisationCategory\";\r\nimport { InitialisationUpdate } from \"../models/initialisationUpdate\";\r\nimport { AuthenticationServiceConstants } from \"./authenticationServiceConstants\";\r\n\r\nconst { WHO_AM_I_ATTRIBUTES } = WhoAmIServiceConstants;\r\nconst TIMEOUT_ERROR = \"TimeoutError\";\r\n\r\nenum WhoAmICallResultType {\r\n    success,\r\n    timeout,\r\n    httpError\r\n}\r\n\r\ntype WhoAmICallResult = {\r\n    resultType: WhoAmICallResultType,\r\n    whoAmI?: IWhoAmI,\r\n    error?: any\r\n};\r\n\r\n@inject(ConfigurationService, WhoAmIService, EventAggregator, AuthenticationServiceConstants)\r\nexport class AuthenticationService implements IAuthenticationService {\r\n\r\n    private _configurationService: IConfigurationService;\r\n    private _whoAmIService: IWhoAmIService;\r\n    private _logger: Logging.Logger;\r\n    private _eventAggregator: EventAggregator;\r\n    private _authenticationServiceConstants: AuthenticationServiceConstants;\r\n\r\n    constructor(configurationService: IConfigurationService,\r\n                whoAmIService: IWhoAmIService,\r\n                eventAggregator: EventAggregator,\r\n                authenticationServiceConstants: AuthenticationServiceConstants) {\r\n        this._configurationService = configurationService;\r\n        this._whoAmIService = whoAmIService;\r\n        this._eventAggregator = eventAggregator;\r\n        this._authenticationServiceConstants = authenticationServiceConstants;\r\n\r\n        this._logger = Logging.getLogger(\"EngineerAuthentication\");\r\n    }\r\n\r\n    public async authenticate(category: string, isCurrentlySignedOn: boolean): Promise<{hasWhoAmISucceeded: boolean, result?: IWhoAmI}> {\r\n        try {\r\n            let result = await this.pollWhoAmI(category, isCurrentlySignedOn);\r\n            return {hasWhoAmISucceeded: true, result};\r\n        } catch (error) {\r\n            return {hasWhoAmISucceeded: false};\r\n        }\r\n    }\r\n\r\n    private async pollWhoAmI(category: string, isCurrentlySignedOn: boolean): Promise<IWhoAmI> {\r\n        let config = this._configurationService.getConfiguration<IHemaConfiguration>() || <IHemaConfiguration>{};\r\n        // if we are already signed on, don't burden the user with more than one attempt\r\n        let timeoutPollingAttempts = config.whoAmITimeoutRetries || 1;\r\n        let timeoutSecs = Math.round(config.whoAmITimeoutMs || this._authenticationServiceConstants.DEFAULT_TIME_OUT_MS) / 1000;\r\n        let allowedRoles = config.activeDirectoryRoles || [];\r\n\r\n        let timeoutAttemptIndex = 1;\r\n        while (true) {\r\n            let whoAmIResult = await this.makeWhoAmICall(category, timeoutSecs, allowedRoles);\r\n\r\n            if (whoAmIResult.resultType === WhoAmICallResultType.success) {\r\n                // a success\r\n                return whoAmIResult.whoAmI;\r\n            } else if (isCurrentlySignedOn) {\r\n                // a failure, but we are currently signed on so don't bother polling more\r\n                throw whoAmIResult.error;\r\n            } else {\r\n                // observe the polling attempt counter to see how long we go for\r\n                if (timeoutAttemptIndex >= timeoutPollingAttempts) {\r\n                    throw whoAmIResult.error;\r\n                }\r\n                timeoutAttemptIndex += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async makeWhoAmICall(category: string, timeoutSecs: number, allowedRoles: string[]): Promise<WhoAmICallResult> {\r\n\r\n        let timerId: number;\r\n        let startFeedingback = () => {\r\n            this._eventAggregator.publish(InitialisationEventConstants.INITIALISE_CATEGORY,\r\n                <InitialisationCategory>{\r\n                    category,\r\n                    item: `Contacting Authorisation Server. Please wait... (${timeoutSecs} seconds remaining)`,\r\n                    progressValue: 0,\r\n                    progressMax: timeoutSecs\r\n            });\r\n\r\n            let secondsElapsed = 0;\r\n            timerId = Threading.startTimer(() => {\r\n                secondsElapsed += 1;\r\n                this._eventAggregator.publish(InitialisationEventConstants.INITIALISE_UPDATE,\r\n                    <InitialisationUpdate>{\r\n                        item: `Contacting Authorisation Server. Please wait... (${timeoutSecs - secondsElapsed} seconds remaining)`,\r\n                        progressValue: secondsElapsed\r\n                    });\r\n            }, this._authenticationServiceConstants.FEEDBACK_INTERVAL_MS);\r\n        };\r\n\r\n        let stopFeedingback = async (resultType: WhoAmICallResultType) => {\r\n            Threading.stopTimer(timerId);\r\n\r\n            let reasonText = \"\";\r\n            switch (resultType) {\r\n                case WhoAmICallResultType.timeout:\r\n                    reasonText = `Failed - server did not respond within ${timeoutSecs} seconds. Please wait...`;\r\n                    break;\r\n                case WhoAmICallResultType.httpError:\r\n                    reasonText = \"Failed - server returned an error. Please wait...\";\r\n                    break;\r\n                case WhoAmICallResultType.success:\r\n                    reasonText = \"Succeeded\";\r\n                    break;\r\n            }\r\n\r\n            this._eventAggregator.publish(InitialisationEventConstants.INITIALISE_UPDATE,\r\n                <InitialisationUpdate>{\r\n                    item: `Attempt ${reasonText}`,\r\n                    progressValue: timeoutSecs\r\n                });\r\n\r\n            await Promise.delay(resultType === WhoAmICallResultType.success\r\n                ? this._authenticationServiceConstants.SUCCESS_WAIT_MS\r\n                : this._authenticationServiceConstants.FAIL_WAIT_MS\r\n            );\r\n        };\r\n\r\n        try {\r\n            startFeedingback();\r\n            let whoAmI = await this._whoAmIService.whoAmI(WHO_AM_I_ATTRIBUTES, allowedRoles)\r\n                                    .timeout(timeoutSecs * 1000);\r\n            await stopFeedingback(WhoAmICallResultType.success);\r\n\r\n            return <WhoAmICallResult>{resultType: WhoAmICallResultType.success, whoAmI};\r\n        } catch (error) {\r\n            let isTimeoutError = error && error.name === TIMEOUT_ERROR;\r\n            this._logger.warn(\"Unable to reach whoAmIService\", {isTimeoutError, error});\r\n\r\n            await stopFeedingback(isTimeoutError\r\n                                    ? WhoAmICallResultType.timeout\r\n                                    : WhoAmICallResultType.httpError\r\n                                );\r\n\r\n            return <WhoAmICallResult>{\r\n                resultType: isTimeoutError\r\n                                ? WhoAmICallResultType.timeout\r\n                                : WhoAmICallResultType.httpError,\r\n                error\r\n            };\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../../.."}