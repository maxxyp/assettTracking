{"version":3,"sources":["hema/business/services/validationService.ts"],"names":[],"mappings":"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","file":"validationService.js","sourcesContent":["import * as Logging from \"aurelia-logging\";\nimport {IValidationService} from \"./interfaces/IValidationService\";\nimport {CatalogService} from \"./catalogService\";\nimport {ICatalogService} from \"./interfaces/ICatalogService\";\nimport {inject} from \"aurelia-dependency-injection\";\nimport {ValidationController} from \"./validation/validationController\";\nimport {ValidationRuleProperty} from \"./validation/validationRuleProperty\";\nimport {RequiredRule} from \"./validation/rules/requiredRule\";\nimport {IsNumberRule} from \"./validation/rules/isNumberRule\";\nimport {HasLengthBetweenRule} from \"./validation/rules/hasLengthBetweenRule\";\nimport {HasMinLengthRule} from \"./validation/rules/hasMinLengthRule\";\nimport {HasMaxLengthRule} from \"./validation/rules/hasMaxLengthRule\";\nimport {IsBetweenRule} from \"./validation/rules/isBetweenRule\";\nimport {IsGreaterThanOrEqualToRule} from \"./validation/rules/isGreaterThanOrEqualToRule\";\nimport {IsLessThanOrEqualToRule} from \"./validation/rules/isLessThanOrEqualToRule\";\nimport {RegExpRule} from \"./validation/rules/regExpRule\";\nimport {LabelService} from \"./labelService\";\nimport {ILabelService} from \"./interfaces/ILabelService\";\nimport {ValidationCombinedResult} from \"./validation/validationCombinedResult\";\nimport { ValidationPropertyResult } from \"./validation/rules/validationPropertyResult\";\nimport {IDynamicRule} from \"./validation/IDynamicRule\";\nimport {PassesRule} from \"./validation/rules/passesRule\";\nimport {StringHelper} from \"../../../common/core/stringHelper\";\nimport {BusinessException} from \"../models/businessException\";\nimport {IsDateRule} from \"./validation/rules/isDateRule\";\nimport {IsBetweenDateRule} from \"./validation/rules/isBetweenDateRule\";\nimport {IsGreaterThanOrEqualToDateRule} from \"./validation/rules/isGreaterThanOrEqualToDateRule\";\nimport {IsLessThanOrEqualToDateRule} from \"./validation/rules/isLessThanOrEqualToDateRule\";\nimport * as moment from \"moment\";\nimport {HasLengthRule} from \"./validation/rules/hasLengthRule\";\nimport {IValidationRule} from \"./validation/IValidationRule\";\nimport {IValidation} from \"../models/reference/IValidation\";\nimport {ValidationRule} from \"./validation/validationRule\";\nimport {IRuleOptions} from \"./validation/IRuleOptions\";\n\n@inject(CatalogService, LabelService)\nexport class ValidationService implements IValidationService {\n    private _catalogService: ICatalogService;\n    private _labelService: ILabelService;\n\n    private _labels: { [key: string]: string};\n    private _logger: Logging.Logger;\n\n    constructor(catalogService: ICatalogService, labelService: ILabelService) {\n        this._catalogService = catalogService;\n        this._labelService = labelService;\n\n        this._logger = Logging.getLogger(\"ValidationService\");\n    }\n\n    public build(subject: any, key: string, dynamicRules: IDynamicRule[]): Promise<ValidationController> {\n        this._logger.debug(\"Building Validation Controller for \" + key);\n        if (subject && StringHelper.isString(key) && key.length > 0) {\n            return this.loadLabels()\n                .then(() => {\n                    return this._catalogService.getValidations(key)\n                        .then((ruleGroup) => {\n                            let validationController: ValidationController = new ValidationController();\n                            validationController.staticRules = {};\n                            validationController.dynamicRules = {};\n                            validationController.validationRuleProperties = {};\n                            validationController.validationRuleGroups = {};\n\n                            if (ruleGroup) {\n                                ruleGroup.forEach(rule => {\n                                    this.addStaticRule(validationController, rule);\n                                });\n                            }\n\n                            if (dynamicRules) {\n                                dynamicRules.forEach(dynamicRule => this.addDynamicRule(validationController, dynamicRule));\n                            }\n\n                            return validationController;\n                        });\n                });\n        } else {\n            return Promise.reject(new BusinessException(this, \"build\", \"must be called with subject and key\", null, null));\n        }\n    }\n\n    public validate(validationController: ValidationController, subject: any, propertyName?: string): Promise<ValidationCombinedResult> {\n        let validationCombinedResult: ValidationCombinedResult = new ValidationCombinedResult();\n\n        validationCombinedResult.isValid = true;\n        validationCombinedResult.propertyResults = {};\n        validationCombinedResult.groups = [];\n\n        if (validationController && validationController.validationRuleProperties) {\n            /* are we validating a single property or everything */\n            let propNames: string[] = [];\n\n            if (propertyName) {\n                if (StringHelper.endsWith(propertyName, \"*\")) {\n                    let startsWith = propertyName.substr(0, propertyName.length - 1);\n\n                    for (let vrp in validationController.validationRuleProperties) {\n                        if (StringHelper.startsWith(vrp, startsWith)) {\n                            propNames.push(vrp);\n                        }\n                    }\n                } else {\n                    if (validationController.validationRuleProperties[propertyName]) {\n                        propNames = [propertyName];\n                    }\n                }\n            } else {\n                propNames = Object.keys(validationController.validationRuleProperties);\n            }\n\n            propNames.forEach(propName => {\n                /* for each property get its associated groups */\n                validationController.validationRuleProperties[propName].getGroups()\n                    .forEach(groupName => {\n                        /* lookup the group from the validation controller and get all the other properties in it */\n                        if (validationController.validationRuleGroups[groupName]) {\n                            validationController.validationRuleGroups[groupName]\n                                .forEach(groupProperty => {\n                                    /* add all the other group properties if they have not already been added */\n                                    if (propNames.indexOf(groupProperty) < 0) {\n                                        propNames.push(groupProperty);\n                                    }\n                                });\n                        }\n                    });\n            });\n\n            let promises: Promise<ValidationPropertyResult>[] = propNames.map(propName => validationController.validationRuleProperties[propName].validate(subject));\n\n            return Promise.all(promises)\n                .then((results: ValidationPropertyResult[]) => {\n                    results.forEach(result => {\n                        this._logger.debug(\"Is \" + result.property + \" Valid: \" + (result.isValid ? \"Yes\" : \"No\"));\n\n                        let groups = validationController.validationRuleProperties[result.property].getGroups();\n\n                        groups.forEach(group => {\n                            if (validationCombinedResult.groups.indexOf(group) < 0) {\n                                validationCombinedResult.groups.push(group);\n                            }\n                        });\n\n                        validationCombinedResult.propertyResults[result.property] = result;\n                        if (!result.isValid) {\n                            validationCombinedResult.isValid = false;\n                        }\n                    });\n\n                    return validationCombinedResult;\n                })\n                .catch((error) => {\n                    throw new BusinessException(this, \"validationService.validate\", \"Couldnt validate: \" + error, null, null);\n                });\n        } else {\n            return Promise.resolve(validationCombinedResult);\n        }\n    }\n\n    public addDynamicRule(validationController: ValidationController, dynamicRule: IDynamicRule): void {\n        let propName: string = dynamicRule.property as string;\n\n        if (propName) {\n            let validationRuleProperty: ValidationRuleProperty;\n\n            validationController.dynamicRules[propName] = dynamicRule;\n\n            /* if there is an existing static rule then combine with that */\n            if (validationController.validationRuleProperties[propName]) {\n                validationRuleProperty = validationController.validationRuleProperties[propName];\n                this._logger.debug(\"Merging dynamic rule for property \" + propName);\n            } else {\n                /* otherwise create a new rule */\n                validationRuleProperty = new ValidationRuleProperty(propName);\n                validationController.validationRuleProperties[propName] = validationRuleProperty;\n                this._logger.debug(\"Adding static rule for property \" + propName);\n            }\n\n            if (dynamicRule.basedOn && validationController.staticRules[dynamicRule.basedOn]) {\n                this.addRuleOptions(validationRuleProperty, validationController.staticRules[dynamicRule.basedOn]);\n                if (validationController.staticRules[dynamicRule.basedOn].groups) {\n                    dynamicRule.groups = validationController.staticRules[dynamicRule.basedOn].groups.concat(dynamicRule.groups);\n                }\n            }\n\n            if (dynamicRule.groups) {\n                validationRuleProperty.addGroups(dynamicRule.groups);\n                dynamicRule.groups.forEach(group => {\n                    validationController.validationRuleGroups[group] = validationController.validationRuleGroups[group] || [];\n                    validationController.validationRuleGroups[group].push(propName);\n                });\n            }\n\n            this.addRuleOptions(validationRuleProperty, dynamicRule);\n\n            if (dynamicRule.condition) {\n                validationRuleProperty.addCondition(dynamicRule.condition);\n            }\n\n            if (dynamicRule.passes) {\n                dynamicRule.passes.forEach(passes => {\n                    validationRuleProperty.addRule(new PassesRule(passes.test), passes.message);\n                });\n            }\n        }\n    }\n\n    public removeDynamicRule(validationController: ValidationController, propertyName: string): void {\n        if (validationController.dynamicRules[propertyName]) {\n            delete validationController.dynamicRules[propertyName];\n        }\n\n        if (validationController.validationRuleProperties[propertyName]) {\n            let groups = validationController.validationRuleProperties[propertyName].getGroups();\n\n            if (groups) {\n                groups.forEach(groupName => {\n                    if (validationController.validationRuleGroups[groupName]) {\n                        let propertyIndex = validationController.validationRuleGroups[groupName].indexOf(propertyName);\n\n                        if (propertyIndex >= 0) {\n                            validationController.validationRuleGroups[groupName].splice(propertyIndex, 1);\n                        }\n                    }\n                });\n            }\n\n            delete validationController.validationRuleProperties[propertyName];\n        }\n    }\n\n    private loadLabels(): Promise<void> {\n        return this._labels ? Promise.resolve() : this._labelService.getGroup(\"validationRules\")\n            .then((labels) => {\n                this._labels = labels;\n            });\n    }\n\n    private addStaticRule(validationController: ValidationController, validation: IValidation): void {\n        let validationRule = new ValidationRule();\n        validationRule.property = validation.property;\n        validationRule.required = validation.required;\n        validationRule.minLength = validation.minLength;\n        validationRule.maxLength = validation.maxLength;\n        validationRule.min = validation.min;\n        validationRule.max = validation.max;\n        validationRule.allowEmpty = validation.allowEmpty;\n        validationRule.isNumber = validation.isNumber;\n        validationRule.isDate = validation.isDate;\n        validationRule.minDate = validation.minDate;\n        validationRule.maxDate = validation.maxDate;\n        validationRule.message = validation.message;\n        validationRule.regExp = validation.regExp;\n        validationRule.regExpError = validation.regExpError;\n        validationRule.groups = validation.groups ? validation.groups.split(\",\") : undefined;\n        validationRule.isAlphaNumeric = validation.isAlphaNumeric;\n        validationRule.isBaseRule = validation.isBaseRule;\n\n        this._logger.debug(\"Adding static rule for property \" + validationRule.property);\n\n        validationController.staticRules[validationRule.property] = validationRule;\n\n        if (!validationRule.isBaseRule) {\n            let validationRuleProperty: ValidationRuleProperty = new ValidationRuleProperty(validationRule.property);\n            validationController.validationRuleProperties[validationRule.property] = validationRuleProperty;\n\n            if (validationRule.groups) {\n                validationRuleProperty.addGroups(validationRule.groups);\n\n                validationRule.groups.forEach(group => {\n                    validationController.validationRuleGroups[group] = validationController.validationRuleGroups[group] || [];\n                    validationController.validationRuleGroups[group].push(validationRule.property);\n                });\n            }\n\n            this.addRuleOptions(validationRuleProperty, validationRule);\n        }\n    }\n\n    private addRuleOptions(validationRuleProperty: ValidationRuleProperty, ruleOptions: IRuleOptions): void {\n        let requiredRule: RequiredRule;\n\n        let currentRules: IValidationRule[] = validationRuleProperty.getValidationRules();\n        if (currentRules && currentRules.length > 0 && currentRules[0] instanceof RequiredRule) {\n            requiredRule = <RequiredRule>currentRules[0];\n        } else {\n            requiredRule = new RequiredRule();\n            validationRuleProperty.addRule(requiredRule, this.getParameterisedLabel(\"required\"));\n        }\n\n        requiredRule.setRequired(ruleOptions.required);\n\n        if (ruleOptions.isNumber) {\n            validationRuleProperty.addRule(new IsNumberRule(), this.getParameterisedLabel(\"canCoerceToNumber\"));\n        }\n\n        if (ruleOptions.isAlphaNumeric) {\n            validationRuleProperty.addRule(new RegExpRule(new RegExp(\"^[a-zA-Z0-9]*$\")), this.getParameterisedLabel(\"isAlphaNumeric\"));\n        }\n\n        if (ruleOptions.isDate) {\n            validationRuleProperty.addRule(new IsDateRule(), this.getParameterisedLabel(\"isDate\"));\n        }\n\n        if (ruleOptions.minLength !== undefined && ruleOptions.maxLength !== undefined) {\n            if (ruleOptions.minLength === ruleOptions.maxLength) {\n                validationRuleProperty.addRule(new HasLengthRule(ruleOptions.minLength),\n                    this.getParameterisedLabel(\"hasLength\", [ruleOptions.minLength, ruleOptions.maxLength]));\n            } else {\n                validationRuleProperty.addRule(new HasLengthBetweenRule(ruleOptions.minLength, ruleOptions.maxLength),\n                    this.getParameterisedLabel(\"hasLengthBetween\", [ruleOptions.minLength, ruleOptions.maxLength]));\n            }\n        } else if (ruleOptions.minLength !== undefined) {\n            validationRuleProperty.addRule(new HasMinLengthRule(ruleOptions.minLength), this.getParameterisedLabel(\"hasMinLength\", [ruleOptions.minLength]));\n        } else if (ruleOptions.maxLength !== undefined) {\n            validationRuleProperty.addRule(new HasMaxLengthRule(ruleOptions.maxLength), this.getParameterisedLabel(\"hasMaxLength\", [ruleOptions.maxLength]));\n        }\n\n        if (ruleOptions.min !== undefined && ruleOptions.max !== undefined) {\n            validationRuleProperty.addRule(new IsBetweenRule(ruleOptions.min, ruleOptions.max, ruleOptions.allowEmpty), this.getParameterisedLabel(\"isBetween\", [ruleOptions.min, ruleOptions.max]));\n        } else if (ruleOptions.min !== undefined) {\n            validationRuleProperty.addRule(new IsGreaterThanOrEqualToRule(ruleOptions.min), this.getParameterisedLabel(\"isGreaterThanOrEqualTo\", [ruleOptions.min]));\n        } else if (ruleOptions.max !== undefined) {\n            validationRuleProperty.addRule(new IsLessThanOrEqualToRule(ruleOptions.max), this.getParameterisedLabel(\"isLessThanOrEqualTo\", [ruleOptions.max]));\n        }\n\n        if (ruleOptions.minDate !== undefined && ruleOptions.maxDate !== undefined) {\n            validationRuleProperty.addRule(new IsBetweenDateRule(\n                moment(ruleOptions.minDate).toDate(), moment(ruleOptions.maxDate).toDate()), this.getParameterisedLabel(\"isBetweenDate\", [ruleOptions.minDate, ruleOptions.maxDate]));\n        } else if (ruleOptions.minDate !== undefined) {\n            validationRuleProperty.addRule(new IsGreaterThanOrEqualToDateRule(moment(ruleOptions.minDate).toDate()), this.getParameterisedLabel(\"isGreaterThanOrEqualToDate\", [ruleOptions.minDate]));\n        } else if (ruleOptions.maxDate !== undefined) {\n            validationRuleProperty.addRule(new IsLessThanOrEqualToDateRule(moment(ruleOptions.maxDate).toDate()), this.getParameterisedLabel(\"isLessThanOrEqualToDate\", [ruleOptions.maxDate]));\n        }\n\n        if (ruleOptions.regExp !== undefined) {\n            validationRuleProperty.addRule(new RegExpRule(new RegExp(ruleOptions.regExp)), ruleOptions.regExpError ? ruleOptions.regExpError : this.getParameterisedLabel(\"regExp\"));\n        }\n\n        if (ruleOptions.message !== undefined) {\n            validationRuleProperty.setMessage(ruleOptions.message);\n        }\n    }\n\n    private getParameterisedLabel(labelId: string, parameters?: any[]): string {\n        if (this._labels && this._labels[labelId] !== undefined) {\n            let labelText: string = this._labels[labelId];\n\n            if (parameters && parameters.length > 0) {\n                return labelText.replace(/{(\\d+)}/g, (match, idx) => {\n                    return parameters[idx];\n                });\n            } else {\n                return labelText;\n            }\n        } else {\n            return \"<missing validation label>\";\n        }\n    }\n}\n"],"sourceRoot":"../../.."}