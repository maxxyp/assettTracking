{"version":3,"sources":["hema/business/services/referenceDataService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2CA;QAcI,8BAAY,eAAiC,EACzC,YAA2B,EAC3B,UAAuB,EACvB,eAAgC,EAChC,cAA+B,EAC/B,oBAA2C,EAC3C,qBAA4C;YAC5C,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YACxC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YACxC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;YACpD,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;YAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;YAEzD,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC;YACvC,IAAI,0BAA0B,GAAG,oBAAoB,CAAC,gBAAgB,EAA+B,CAAC;YACtG,EAAE,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,0BAA0B,GAAG,0BAA0B,CAAC,yBAAyB,IAAI,IAAI,CAAC,0BAA0B,CAAC;gBAC1H,IAAI,CAAC,yBAAyB,GAAG,0BAA0B,CAAC,wBAAwB,CAAC;YACzF,CAAC;YACD,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;QACzC,CAAC;QAEM,yCAAU,GAAjB;YAAA,iBAgEC;YA/DG,IAAI,CAAC,cAAc,CAAC,IAAI,+CAAsB,CAAC,uBAAuB,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAErF,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE;iBACrB,IAAI,CAAC;gBACF,IAAI,SAAS,GAAgC,EAAE,CAAC;gBAChD,IAAI,eAAe,GAAG,KAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC;gBAE9D,KAAI,CAAC,cAAc,CAAC,IAAI,+CAAsB,CAAC,oCAAoC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAElG,eAAe,CAAC,OAAO,CAAC,UAAA,EAAE;oBACtB,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACjE,CAAC,CAAC,CAAC;gBAEH,KAAI,CAAC,cAAc,CAAC,IAAI,+CAAsB,CAAC,qCAAqC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEnG,MAAM,CAAC,KAAI,CAAC,cAAc,EAAE;qBACvB,IAAI,CAAC,UAAC,WAAW;oBACd,MAAM,CAAC,KAAI,CAAC,kBAAkB,CAAC,WAAW,IAAI,EAAE,EAAE,SAAS,EAAE,eAAe,CAAC;yBACxE,IAAI,CAAC,UAAC,aAAa;wBAChB,IAAI,cAAc,GAAa,EAAE,CAAC;wBAElC,oFAAoF;wBACpF,aAAa,CAAC,OAAO,CAAC,UAAA,EAAE;4BACpB,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;wBACzE,CAAC,CAAC,CAAC;wBAEH,iGAAiG;wBACjG,IAAI,WAAW,GAAsB,EAAE,CAAC;wBACxC,eAAe,CAAC,OAAO,CAAC,UAAA,EAAE;4BACtB,EAAE,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gCAEtC,WAAW,CAAC,IAAI,CAAC;oCACb,IAAI,EAAE,EAAE,CAAC,IAAI;oCACb,IAAI,EAAE,EAAE,CAAC,IAAI;oCACb,gBAAgB,EAAE,EAAE,CAAC,gBAAgB;iCACxC,CAAC,CAAC;4BACP,CAAC;wBACL,CAAC,CAAC,CAAC;wBAEH,MAAM,CAAC,KAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,cAAc,EAAE,SAAS,EAAE,eAAe,CAAC;6BACjF,IAAI,CAAC;4BACF,KAAI,CAAC,kBAAkB,GAAG,yBAAW,CAAC,YAAY,CAAC,KAAI,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;4BACrF,KAAI,CAAC,2BAA2B,GAAG,WAAW,CAAC;4BAC/C,MAAM,CAAC,KAAI,CAAC,2BAA2B,EAAE,CAAC;wBAC9C,CAAC,CAAC,CAAC;oBACX,CAAC,CAAC,CAAC;gBACX,CAAC,CAAC,CAAC;YACX,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,GAAG;gBACP,+EAA+E;gBAC/E,MAAM,CAAC,KAAI,CAAC,wBAAwB,EAAE;qBACjC,IAAI,CAAC,UAAC,wBAAwB;oBAC3B,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;wBAC3B,MAAM,GAAG,CAAC;oBACd,CAAC;oBACD,kEAAkE;gBACtE,CAAC,CAAC;qBACD,KAAK,CAAC;oBACH,IAAI,SAAS,GAAG,IAAI,qCAAiB,CAAC,KAAI,EAAE,YAAY,EAAE,oKACuB,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;oBAC5F,MAAM,SAAS,CAAC;gBACpB,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACX,CAAC;QAEY,6DAA8B,GAA3C;;;;;gCACS,qBAAM,IAAI,CAAC,eAAe,CAAC,yBAAyB,EAAE,EAAA;;4BAA3D,EAAE,CAAC,CAAC,CAAC,CAAA,SAAsD,CAAA,CAAC,CAAC,CAAC;gCAC1D,MAAM,gBAAC,IAAI,EAAC;4BAChB,CAAC;4BAEI,qBAAM,IAAI,CAAC,wBAAwB,EAAE,EAAA;;4BAA1C,EAAE,CAAC,CAAC,CAAC,CAAA,SAAqC,CAAA,CAAC,CAAC,CAAC;gCACzC,MAAM,gBAAC,KAAK,EAAC;4BACjB,CAAC;;;;4BAE0C,KAAA,CAAA,KAAA,2BAAY,CAAA,CAAC,YAAY,CAAA;4BAAC,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;;4BAAxF,+BAA+B,GAAG,CAAC,cAA0B,SAA2B,EAAE,IAAI,CAAC,2BAA2B,EAAC;4BAC/H,qBAAM,IAAI,CAAC,2BAA2B,EAAE,EAAA;;4BAAxC,SAAwC,CAAC;4BACzC,sBAAO,+BAA+B,EAAC;;;4BAEvC,sBAAO,KAAK,EAAC;;;;;SAEpB;QAEM,uCAAQ,GAAf,UAAmB,SAAiB,EAAE,SAAiB,EAAE,UAAe;YAAxE,iBAYC;YAXG,IAAI,WAAW,GAAQ,UAAU,CAAC;YAClC,SAAS,GAAG,SAAS,IAAI,EAAE,CAAC;YAE5B,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAI,+CAAsB,CAAC,kBAAkB,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,CAAC;iBAC/G,KAAK,CAAC,UAAC,GAAG;gBACP,IAAI,SAAS,GAAG,IAAI,qCAAiB,CAAC,KAAI,EAAE,UAAU,EAAE,6DAA6D,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;gBACtJ,IAAM,cAAc,GAAG,IAAI,iDAAuB,CAAC,iEAA+B,CAAC,sBAAsB,EAAE,KAAK,EAC5G,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;gBAClE,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,IAAI,SAAS,CAAC,QAAQ,EAAE,EAAE,cAAc,CAAC,CAAC;gBACtE,MAAM,SAAS,CAAC;YACpB,CAAC,CAAC,CAAC;QACX,CAAC;QAEM,sCAAO,GAAd,UAAkB,SAAiB,EAAE,SAAiB,EAAE,UAAe;YAAvE,iBASC;YARG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAI,+CAAsB,CAAC,kBAAkB,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC;iBAC3G,KAAK,CAAC,UAAC,GAAG;gBACP,IAAI,SAAS,GAAG,IAAI,qCAAiB,CAAC,KAAI,EAAE,SAAS,EAAE,8DAA8D,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;gBACrJ,IAAM,cAAc,GAAG,IAAI,iDAAuB,CAAC,iEAA+B,CAAC,sBAAsB,EAAE,KAAK,EAC5G,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;gBAClE,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,IAAI,SAAS,CAAC,QAAQ,EAAE,EAAE,cAAc,CAAC,CAAC;gBACtE,MAAM,SAAS,CAAC;YACpB,CAAC,CAAC,CAAC;QACX,CAAC;QAEY,oCAAK,GAAlB;;;;;;;4BAEQ,qBAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,+CAAsB,CAAC,kBAAkB,CAAC,EAAA;;4BAA5E,SAA4E,CAAC;;;;;gCAIjF,qBAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,+CAAsB,CAAC,kBAAkB,CAAC,EAAA;;4BAA9E,SAA8E,CAAC;;;;;SAClF;QAED,8FAA8F;QACvF,uDAAwB,GAA/B,UAAgC,WAA0B;YACtD,MAAM,CAAC,WAAW;iBACb,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAApC,CAAoC,CAAC;iBACjD,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,EAA3D,CAA2D,CAAC;iBAC3E,OAAO,EAAE;iBACT,MAAM,CAAC,UAAC,QAAuB,EAAE,cAAc;gBAC5C,qEAAqE;gBACrE,IAAI,kBAAkB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,YAAY,KAAK,cAAc,CAAC,YAAY,EAA9C,CAA8C,CAAC,CAAC;gBAC7F,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAClC,CAAC;gBACD,MAAM,CAAC,QAAQ,CAAC;YACpB,CAAC,EAAE,EAAE,CAAC;iBAEL,GAAG,CAAC,UAAC,UAAuB;gBACzB,MAAM,CAAC;oBACH,IAAI,EAAE,UAAU,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE;oBACpE,IAAI,EAAE,UAAU,CAAC,IAAI;oBACrB,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;iBAChD,CAAC;YACN,CAAC,CAAC,CAAC;QACX,CAAC;QAEM,0CAAW,GAAlB;YACI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;QACnC,CAAC;QAEa,uDAAwB,GAAtC;;;;;gCACsB,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;;4BAAxC,WAAW,GAAG,SAA0B;4BAC5C,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;gCACtC,gCAAgC;gCAChC,MAAM,gBAAC,IAAI,EAAC;4BAChB,CAAC;4BAC4B,qBAAM,IAAI,CAAC,eAAe,CAAC,yBAAyB,EAAE,EAAA;;4BAA/E,sBAAsB,GAAG,SAAsD;4BAC/E,KAAK,GAAG,uBAAU,CAAC,cAAc,EAAE,CAAC;4BACpC,iCAAiC,GAAG,CAAC,sBAAsB,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,0BAA0B,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;4BAEtH,sBAAO,KAAK,IAAI,iCAAiC,EAAC;;;;SACrD;QAEO,0DAA2B,GAAnC;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC;YACrE,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,yBAAyB,CAAC,uBAAU,CAAC,cAAc,EAAE,CAAC,CAAC;QACvF,CAAC;QAEa,6CAAc,GAA5B;;;;;gCACkB,qBAAM,IAAI,CAAC,WAAW,CAAC,2BAA2B,EAAE,EAAA;;4BAA9D,OAAO,GAAG,SAAoD;4BAC9D,gBAAgB,GAAG,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;4BAC9D,sBAAO,IAAI,CAAC,2BAA2B,CAAC,gBAAgB,CAAC,EAAC;;;;SAC7D;QAEO,0DAA2B,GAAnC,UAAoC,SAA4B;YAAhE,iBAKC;YAJG,IAAI,iBAAiB,GAAG,UAAC,IAAY,IAAK,OAAA,KAAI,CAAC,yBAAyB,IAAI,KAAI,CAAC,yBAAyB;iBACrG,IAAI,CAAC,UAAA,gBAAgB,IAAI,OAAA,IAAI,KAAK,gBAAgB,EAAzB,CAAyB,CAAC,EADd,CACc,CAAC;YAEzD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,aAAa,IAAI,OAAA,iBAAiB,CAAC,aAAa,CAAC,IAAI,CAAC,EAArC,CAAqC,CAAC,CAAC;QACpF,CAAC;QAEO,2CAAY,GAApB;YAAA,iBAiBC;YAhBG,IAAI,CAAC,cAAc,CAAC,IAAI,+CAAsB,CAAC,6BAA6B,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAE3F,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,+CAAsB,CAAC,kBAAkB,EAAE,+CAAsB,CAAC,kBAAkB,CAAC;iBACpH,IAAI,CAAC,UAAC,MAAM;gBACT,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACT,MAAM,CAAC,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,+CAAsB,CAAC,kBAAkB,CAAC,CAAC;gBACjF,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,KAAI,CAAC,gBAAgB,CAAC,MAAM,CAC/B,IAAI,+BAAc,CAAC,+CAAsB,CAAC,kBAAkB,EACxD,+CAAsB,CAAC,0BAA0B,EACjD;wBACI,IAAI,yCAAmB,CAAC,+CAAsB,CAAC,sBAAsB,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,IAAI,mDAAwB,CAAC,WAAW,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;wBAC1J,IAAI,yCAAmB,CAAC,+CAAsB,CAAC,qBAAqB,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,IAAI,mDAAwB,CAAC,WAAW,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;qBAC5J,CAAC,CAAC,CAAC;gBAChB,CAAC;YACL,CAAC,CAAC,CAAC;QACX,CAAC;QAED,yCAAyC;QACjC,iDAAkB,GAA1B,UAA2B,QAA2B,EAAE,SAAsC,EAAE,eAA8B;YAA9H,iBAgJC;YA/IG,MAAM,CAAC,IAAI,OAAO,CAAmB,UAAC,OAAO,EAAE,MAAM;gBACjD,KAAI,CAAC,aAAa,EAAE;qBACf,IAAI,CAAC,UAAC,WAA6B;oBAChC,IAAI,aAAa,GAAG,KAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;oBACvE,KAAI,CAAC,cAAc,CAAC,IAAI,+CAAsB,CAAC,2BAA2B,EAAE,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;oBAE1G,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAAE,WAAW,CAAC,CAAC;oBACtD,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;oBAEhD,IAAI,GAAG,GAAG,CAAC,CAAC;oBACZ,IAAI,wBAAwB,GAAqB,EAAE,CAAC,CAAC,kDAAkD;oBACvG,IAAI,oBAAoB,GAAsC,EAAE,CAAC;oBACjE,IAAI,sBAAsB,GAAG,CAAC,CAAC;oBAE/B,IAAI,QAAgB,CAAC;oBACrB,IAAI,YAAoB,CAAC;oBACzB,IAAI,YAAoB,CAAC;oBACzB,IAAI,WAAmB,CAAC;oBACxB,IAAI,IAAY,CAAC;oBACjB,IAAI,UAAkB,CAAC;oBAEvB,IAAI,MAAM,GAAG;wBACT,EAAE,CAAC,CAAC,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;4BAC7B,KAAI,CAAC,cAAc,CAAC,IAAI,2CAAoB,CAAC,2BAA2B,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;4BAEhH,qFAAqF;4BAErF,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BACnC,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC;4BAC/C,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC;4BAC/C,WAAW,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC;4BAC1C,UAAU,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;4BAEvC,uBAAuB;4BACvB,KAAI,CAAC,kCAAkC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,EAC3D,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,EAC/B,aAAa,CAAC,GAAG,CAAC,CAAC,aAAa,EAChC,aAAa,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EACpC,SAAS,EACT,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,EACvB,eAAe,CAAC;iCACf,IAAI,CAAC,UAAC,eAAe;gCAElB,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oCACpC,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC;oCAC5B,UAAU,GAAG,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oCAE9C,uEAAuE;oCAEvE,EAAE,CAAC,CAAC,eAAe,CAAC,IAAI,IAAI,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wCACpD,IAAA,yBAA+G,EAA7G,2BAA0B,EAA1B,+CAA0B,EAAE,2BAA0B,EAA1B,+CAA0B,EAAE,gBAA4B,EAA5B,uCAA4B,CAA0B;wCACtH,YAAY,GAAG,mBAAmB,CAAC;wCACnC,YAAY,GAAG,mBAAmB,CAAC;wCACnC,WAAW,GAAG,WAAW,CAAC;oCAC9B,CAAC;oCAED,uEAAuE;oCAEvE,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK;wCAChC,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;4CACzB,KAAK,EAAE,KAAK;4CACZ,OAAO,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI;4CAChC,YAAY,EAAE,YAAY;4CAC1B,YAAY,EAAE,YAAY;4CAC1B,QAAQ,EAAE,WAAW;4CACrB,OAAO,EAAE,eAAe,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,KAAK,EAAhB,CAAgB,CAAC,CAAC,cAAc,KAAK,OAAO,IAAI,KAAK;4CACxF,iBAAiB,EAAE,KAAK;4CACxB,gBAAgB,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,gBAAgB;4CACrD,MAAM,EAAE,eAAe,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,KAAK,EAAhB,CAAgB,CAAC,CAAC,cAAc,IAAI,SAAS;yCAClF,CAAC,CAAC;oCACP,CAAC,CAAC,CAAC;gCACP,CAAC;4BACL,CAAC,CAAC;iCACD,KAAK,CAAC,UAAA,GAAG;gCACN,IAAM,SAAS,GAAG,4BAA4B,CAAC;gCAC/C,IAAM,cAAc,GAAG,IAAI,iDAAuB,CAAC,iEAA+B,CAAC,sBAAsB,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;gCAC5H,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC;gCACnD,IAAI,GAAG,SAAS,CAAC;gCACjB,MAAM,CAAC,KAAI,CAAC,eAAe,CAAC,yBAAyB,EAAE;qCAClD,IAAI,CAAC,UAAC,YAAY;oCACnB,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,cAAc,KAAK,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,EAA7C,CAA6C,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,YAAY,EAAf,CAAe,CAAC,CAAC,CAAC,CAAC;wCACnI,KAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;oCACxC,CAAC;oCAED,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wCACtC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK;4CAC/B,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;gDACzB,KAAK,OAAA;gDACL,OAAO,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI;gDAChC,YAAY,cAAA;gDACZ,YAAY,cAAA;gDACZ,QAAQ,EAAE,WAAW;gDACrB,OAAO,EAAE,eAAe,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,KAAK,EAAhB,CAAgB,CAAC,CAAC,cAAc,KAAK,OAAO,IAAI,KAAK;gDACxF,iBAAiB,EAAE,IAAI;gDACvB,gBAAgB,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,gBAAgB;gDACrD,MAAM,EAAE,eAAe,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,KAAK,EAAhB,CAAgB,CAAC,CAAC,cAAc,IAAI,SAAS;6CAClF,CAAC,CAAC;wCACP,CAAC,CAAC,CAAC;oCACP,CAAC;gCACL,CAAC,CAAC,CAAC;4BACP,CAAC,CAAC;iCACD,IAAI,CAAC;gCAEF,IAAI,YAAY,GAAmB,IAAI,+BAAc,EAAE,CAAC;gCAExD,0EAA0E;gCAC1E,iBAAiB;gCAEjB,YAAY,CAAC,SAAS,GAAG,QAAQ,CAAC;gCAClC,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC;gCACzB,YAAY,CAAC,MAAM,GAAG,UAAU,CAAC;gCACjC,YAAY,CAAC,YAAY,GAAG,YAAY,CAAC;gCACzC,YAAY,CAAC,YAAY,GAAG,YAAY,CAAC;gCACzC,YAAY,CAAC,QAAQ,GAAG,WAAW,CAAC;gCAEpC,wBAAwB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gCAE5C,sBAAsB,IAAI,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCAElE,oBAAoB,CAAC,IAAI,CAAC;oCACtB,YAAY,EAAK,QAAQ,UAAO;oCAChC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE;oCACzD,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE;oCACzD,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE;iCAC5D,CAAC,CAAC;gCAEH,GAAG,EAAE,CAAC;gCACN,MAAM,EAAE,CAAC;4BACb,CAAC,CAAC,CAAC;wBACX,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,KAAI,CAAC,cAAc,CAAC,IAAI,+CAAsB,CAAC,kCAAkC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;4BAChG,KAAI,CAAC,aAAa,CAAC,wBAAwB,EAAE,+CAAsB,CAAC,sBAAsB,CAAC;iCACtF,IAAI,CAAC,cAAM,OAAA,sBAAsB,GAAG,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAhG,CAAgG,CAAC;iCAC5G,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,wBAAwB,CAAC,EAAjC,CAAiC,CAAC;iCAC7C,KAAK,CAAC,UAAC,GAAG;gCACP,MAAM,CAAC,GAAG,CAAC,CAAC;4BAChB,CAAC,CAAC,CAAC;wBACX,CAAC;oBACL,CAAC,CAAC;oBACF,MAAM,EAAE,CAAC;gBACb,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QAEP,CAAC;QAEO,4CAAa,GAArB;YACI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAiB,+CAAsB,CAAC,kBAAkB,EAAE,+CAAsB,CAAC,sBAAsB,CAAC,CAAC;QAClJ,CAAC;QAEO,mDAAoB,GAA5B,UAA6B,IAAuC;YAApE,iBAyBC;YAvBG,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC7B,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,UAAA,QAAQ;gBAEnD,IAAI,OAAO,GAAgC,EAAE,CAAC;gBAC9C,IAAI,IAAI,GAAgC,EAAE,CAAC;gBAE3C,IAAI,CAAC,eAAe,GAAG,CAAC;wBACpB,UAAU,EAAE,QAAQ,CAAC,EAAE;wBACvB,IAAI,MAAA;qBACP,CAAC,CAAC;gBAEH,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;gBAEpB,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kCAAkC,EAAE,IAAI,CAAC,CAAC;gBAE5D,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;oBAC5D,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC;gBAApD,CAAoD,CACvD,CAAC;YACN,CAAC,CAAC,CAAC;QAEP,CAAC;QAEO,gDAAiB,GAAzB,UAA0B,QAA2B,EAAE,gBAA0B,EAAE,SAAsC,EAAE,eAA8B;YAAzJ,iBAmEC;YAlEG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,KAAI,CAAC,gBAAgB,CAAC,MAAM,CAAiB,+CAAsB,CAAC,kBAAkB,EAAE,+CAAsB,CAAC,qBAAqB,CAAC;qBAChI,IAAI,CAAC,UAAC,WAA6B;oBAChC,IAAI,aAAa,GAAG,KAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;oBACvE,KAAI,CAAC,cAAc,CAAC,IAAI,+CAAsB,CAAC,0BAA0B,EAAE,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;oBAEzG,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;oBACrD,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;oBAE/C,IAAI,GAAG,GAAG,CAAC,CAAC;oBACZ,IAAI,UAAU,GAAqB,EAAE,CAAC;oBAEtC,IAAI,MAAM,GAAG;wBACT,EAAE,CAAC,CAAC,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;4BAC7B,IAAI,CAAC,SAAgB,CAAC;4BAEtB,EAAE,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCAClC,KAAI,CAAC,cAAc,CAAC,IAAI,2CAAoB,CAAC,wBAAwB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;gCAC7G,CAAC,GAAG,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAQ,qBAAqB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC,CAAC;4BACtG,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;4BACnC,CAAC;4BAED,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;gCACZ,KAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,GAAG,EAAE,gBAAgB,EAAE,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;qCAC1J,IAAI,CAAC;oCACF,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;wCACpC,IAAI,YAAY,GAAmB,IAAI,+BAAc,EAAE,CAAC;wCACxD,YAAY,CAAC,SAAS,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wCACjD,YAAY,CAAC,IAAI,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wCAC5C,YAAY,CAAC,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wCAC9C,YAAY,CAAC,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC;wCAE5D,YAAY,CAAC,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC;wCAC5D,YAAY,CAAC,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC;wCACpD,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wCAE9B,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;4CACzB,KAAK,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI;4CAC9B,OAAO,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI;4CAChC,gBAAgB,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,gBAAgB;4CACrD,OAAO,EAAE,eAAe,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,EAAlC,CAAkC,CAAC,CAAC,cAAc,KAAK,OAAO,IAAI,KAAK;4CAC1G,MAAM,EAAE,eAAe,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,EAAlC,CAAkC,CAAC,CAAC,cAAc;yCACvF,CAAC,CAAC;oCACP,CAAC;oCAED,GAAG,EAAE,CAAC;oCACN,MAAM,EAAE,CAAC;gCACb,CAAC,CAAC;qCACD,KAAK,CAAC,UAAC,GAAG;oCACP,MAAM,CAAC,GAAG,CAAC,CAAC;gCAChB,CAAC,CAAC,CAAC;4BACX,CAAC,CAAC,CAAC;wBACP,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,KAAI,CAAC,cAAc,CAAC,IAAI,+CAAsB,CAAC,iCAAiC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC/F,KAAI,CAAC,aAAa,CAAC,UAAU,EAAE,+CAAsB,CAAC,qBAAqB,CAAC;iCACvE,IAAI,CAAC,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC;iCACrB,KAAK,CAAC,UAAC,GAAG;gCACP,MAAM,CAAC,GAAG,CAAC,CAAC;4BAChB,CAAC,CAAC,CAAC;wBACX,CAAC;oBACL,CAAC,CAAC;oBAEF,MAAM,EAAE,CAAC;gBACb,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,qDAAsB,GAA9B,UAA+B,WAA6B,EAAE,QAA2B;YAErF,IAAI,aAAa,GAAqB,EAAE,CAAC;YAEzC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wCACL,CAAC;oBACN,IAAI,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,EAAnC,CAAmC,CAAC,CAAC;oBACzE,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBAEb,kEAAkE;wBAClE,+DAA+D;wBAE/D,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,KAAK,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;4BACtE,oCAAoC;4BACpC,aAAa,CAAC,IAAI,CAAC;gCACf,IAAI,EAAE,UAAU,CAAC,IAAI;gCACrB,YAAY,EAAE,IAAI;gCAClB,aAAa,EAAE,KAAK;gCACpB,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM;gCAC7B,IAAI,EAAE,UAAU,CAAC,IAAI;gCACrB,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,YAAY;gCACzC,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,YAAY;gCACzC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ;gCACjC,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;6BAChD,CAAC,CAAC;wBACP,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,kCAAkC;4BAClC,aAAa,CAAC,IAAI,CAAC;gCACf,IAAI,EAAE,UAAU,CAAC,IAAI;gCACrB,YAAY,EAAE,KAAK;gCACnB,aAAa,EAAE,KAAK;gCACpB,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM;gCAC7B,IAAI,EAAE,UAAU,CAAC,IAAI;gCACrB,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,YAAY;gCACzC,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,YAAY;gCACzC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ;gCACjC,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;6BAChD,CAAC,CAAC;wBACP,CAAC;oBACL,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,wEAAwE;wBACxE,aAAa,CAAC,IAAI,CAAC;4BACf,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS;4BAC9B,YAAY,EAAE,KAAK;4BACnB,aAAa,EAAE,IAAI;4BACnB,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM;4BAC7B,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI;4BACzB,YAAY,EAAE,IAAI;4BAClB,YAAY,EAAE,IAAI;4BAClB,QAAQ,EAAE,IAAI;4BACd,gBAAgB,EAAE,EAAE;yBACvB,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;gBAhDD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE;4BAAlC,CAAC;iBAgDT;wCAGQ,CAAC;oBACN,IAAI,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAhC,CAAgC,CAAC,CAAC;oBAErE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACV,aAAa,CAAC,IAAI,CAAC;4BACf,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;4BACtB,YAAY,EAAE,IAAI;4BAClB,aAAa,EAAE,KAAK;4BACpB,MAAM,EAAE,EAAE;4BACV,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,mBAAmB;4BAC7C,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,mBAAmB;4BAC7C,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ;4BAC9B,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;4BACtB,gBAAgB,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,gBAAgB;yBACjD,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;gBAjBD,wFAAwF;gBACxF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE;4BAA/B,CAAC;iBAgBT;YACL,CAAC;YAED,MAAM,CAAC,aAAa,CAAC;QACzB,CAAC;QAEO,4CAAa,GAArB,UAAyB,IAAS,EAAE,SAAiB;YAArD,iBAIC;YAHG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,+CAAsB,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC;gBAC9F,MAAM,CAAC,KAAI,CAAC,gBAAgB,CAAC,MAAM,CAAI,+CAAsB,CAAC,kBAAkB,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;YACvG,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,iEAAkC,GAA1C,UAA2C,OAAe,EAAE,YAAqB,EAAE,aAAsB,EACrG,MAAgB,EAAE,SAAsC,EAAE,IAAY,EAAE,eAA8B;YAD1G,iBAkFC;YAhFG,MAAM,CAAC,IAAI,OAAO,CAA2D,UAAC,OAAO,EAAE,MAAM;gBAEzF,IAAI,2BAA2B,GAAG,UAAC,IAAS;oBACxC,IAAI,iBAAiB,GAAkB,eAAe,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,cAAc,KAAK,OAAO,EAA7B,CAA6B,CAAC,CAAC;oBACnG,IAAI,GAAG,GAAY,IAAI,CAAC;oBACxB,iBAAiB,CAAC,OAAO,CAAC,UAAA,CAAC;wBACvB,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;wBACzB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BACpD,GAAG,GAAG,KAAK,CAAC;4BAEZ,kFAAkF;4BAClF,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACR,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BACxB,CAAC;wBACL,CAAC;oBACL,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,GAAG,CAAC;gBACf,CAAC,CAAC;gBAEF,IAAI,MAAM,GAIN,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;gBAE3C,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;gBAEvB,IAAI,GAAG,GAAG,CAAC,CAAC;gBACZ,IAAI,qBAAmD,CAAC;gBAExD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACf,qBAAqB,GAAG,KAAI,CAAC,WAAW,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC;gBACpF,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,qBAAqB,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,oCAAoC;gBAC5F,CAAC;gBAED,qBAAqB,CAAC,IAAI,CAAC,UAAC,kBAAkB;oBAC1C,EAAE,CAAC,CAAC,CAAC,kBAAkB,IAAI,CAAC,kBAAkB,CAAC,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC9E,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBAC3B,CAAC;oBAEO,IAAA,8BAAI,EAAE,8BAAI,CAAwB;oBAE1C,EAAE,CAAC,CAAC,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACrC,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;wBACxB,KAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;oBACxC,CAAC;oBAED,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAClC,MAAM,CAAC,IAAI,gBAAQ,IAAI,CAAE,CAAC;oBAE1B,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,GAAG,4BAA4B,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;oBAElE,IAAA,uBAAe,CAAY;oBAEnC,IAAI,MAAM,GAAG;wBACT,EAAE,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;4BAEvB,IAAI,SAAS,GAAU,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;4BAE1C,IAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;4BAE1B,KAAI,CAAC,0BAA0B,CAAC,IAAI,EAAE,SAAS,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;iCACpF,IAAI,CAAC;gCACF,GAAG,EAAE,CAAC;gCACN,MAAM,EAAE,CAAC;4BACb,CAAC,CAAC;iCACD,KAAK,CAAC,UAAC,GAAG;gCACP,MAAM,CAAC,GAAG,CAAC,CAAC;4BAChB,CAAC,CAAC,CAAC;wBACX,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,OAAO,CAAC,MAAM,CAAC,CAAC;wBACpB,CAAC;oBACL,CAAC,CAAC;oBAEF,MAAM,EAAE,CAAC;gBACb,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,yDAA0B,GAAlC,UAAmC,IAAY,EAAE,IAAW,EAAE,aAAsB,EAAE,GAAW,EAAE,gBAA0B,EAAE,SAAmB;YAAlJ,iBAqDC;YApDG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,+CAAsB,CAAC,kBAAkB,EAAE,IAAI,CAAC;iBACpF,IAAI,CAAC,UAAC,MAAM;gBACT,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oBAChB,EAAE,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBACxC,KAAI,CAAC,cAAc,CAAC,IAAI,2CAAoB,CAAC,iBAAiB,GAAG,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;4BACT,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,gBAAgB,CAAC,CAAC;4BACzD,MAAM,CAAC,KAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,+CAAsB,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;wBAC9F,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;4BACtC,MAAM,CAAC,SAAS,CAAC;wBACrB,CAAC;oBACL,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,+BAA+B,CAAC,CAAC;wBACxE,KAAI,CAAC,cAAc,CAAC,IAAI,2CAAoB,CAAC,2BAA2B,GAAG,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;wBAC7F,MAAM,CAAC,SAAS,CAAC;oBACrB,CAAC;gBACL,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;oBACtC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC;oBACvC,KAAI,CAAC,cAAc,CAAC,IAAI,2CAAoB,CAAC,qBAAqB,GAAG,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;oBACvF,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACT,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,cAAc,GAAG,QAAQ,GAAG,eAAe,CAAC,CAAC;wBACpF,KAAI,CAAC,cAAc,CAAC,IAAI,2CAAoB,CAAC,iBAAiB,GAAG,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;wBACnF,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;oBAC1C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,cAAc,GAAG,QAAQ,GAAG,eAAe,CAAC,CAAC;wBACpF,IAAI,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,IAAI,mDAAwB,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,EAA3C,CAA2C,CAAC,CAAC;wBAE/E,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BACxC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gCACxC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oCAChC,IAAI,aAAa,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;oCACtD,OAAO,CAAC,IAAI,CAAC,IAAI,mDAAwB,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;gCACnG,CAAC;4BACL,CAAC;wBACL,CAAC;wBAED,KAAI,CAAC,cAAc,CAAC,IAAI,2CAAoB,CAAC,iBAAiB,GAAG,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;wBACnF,MAAM,CAAC,KAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,+CAAsB,CAAC,kBAAkB,EAC9E,IAAI,yCAAmB,CACnB,IAAI,EACJ,SAAS,EACT,IAAI,EACJ,OAAO,CACV,CAAC;6BACD,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,EAA9B,CAA8B,CAAC,CAAC;oBACpD,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;QACX,CAAC;QAEO,6CAAc,GAAtB,UAAuB,OAAsD;YACzE,IAAI,KAAK,GAAG,OAAO,YAAY,2CAAoB,CAAC,CAAC,CAAC,2DAA4B,CAAC,iBAAiB,CAAC,CAAC,CAAC,2DAA4B,CAAC,mBAAmB,CAAC;YACxJ,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAClD,CAAC;QArsBQ,oBAAoB;YADhC,0BAAM,CAAC,+CAAsB,EAAE,2BAAY,EAAE,uBAAU,EAAE,0CAAe,EAAE,+BAAc,EAAE,2CAAoB,EAAE,6CAAqB,CAAC;qEAkB9G,0CAAe,kBAGT,6CAAqB;WApBvC,oBAAoB,CAssBhC;QAAD,2BAAC;KAtsBD,AAssBC,IAAA;IAtsBY,oDAAoB","file":"referenceDataService.js","sourcesContent":["import * as Logging from \"aurelia-logging\";\r\nimport * as moment from \"moment\";\r\nimport { inject } from \"aurelia-framework\";\r\nimport { IReferenceDataService } from \"./interfaces/IReferenceDataService\";\r\nimport { IndexedDatabaseService } from \"../../../common/storage/indexedDatabaseService\";\r\nimport { FftService } from \"../../api/services/fftService\";\r\nimport { IDatabaseService } from \"../../../common/storage/IDatabaseService\";\r\nimport { IFFTService } from \"../../api/services/interfaces/IFFTService\";\r\nimport { DatabaseSchema } from \"../../../common/storage/models/databaseSchema\";\r\nimport { DatabaseSchemaStore } from \"../../../common/storage/models/databaseSchemaStore\";\r\nimport { DatabaseSchemaStoreIndex } from \"../../../common/storage/models/databaseSchemaStoreIndex\";\r\nimport { ReferenceDataConstants } from \"./constants/referenceDataConstants\";\r\nimport { IReferenceIndex } from \"../../api/models/fft/reference/IReferenceIndex\";\r\nimport { BusinessException } from \"../models/businessException\";\r\nimport { EventAggregator } from \"aurelia-event-aggregator\";\r\nimport { InitialisationEventConstants } from \"../constants/initialisationEventConstants\";\r\nimport { InitialisationCategory } from \"../models/initialisationCategory\";\r\nimport { IAssetService } from \"../../../common/core/services/IAssetService\";\r\nimport { AssetService } from \"../../../common/core/services/assetService\";\r\nimport { InitialisationUpdate } from \"../models/initialisationUpdate\";\r\nimport { ReferenceIndex } from \"../models/reference/referenceIndex\";\r\nimport { ArrayHelper } from \"../../../common/core/arrayHelper\";\r\nimport { ReferenceVersion } from \"../models/reference/referenceVersion\";\r\nimport { ReferenceDataManifest } from \"../models/reference/referenceDataManifest\";\r\nimport { IListObject } from \"../../api/models/fft/reference/IListObject\";\r\nimport { StorageService } from \"./storageService\";\r\nimport { IStorageService } from \"./interfaces/IStorageService\";\r\nimport { IConfigurationService } from \"../../../common/core/services/IConfigurationService\";\r\nimport { IReferenceDataConfiguration } from \"./interfaces/IReferenceDataConfiguration\";\r\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\r\nimport { ConfigurationService } from \"../../../common/core/services/configurationService\";\r\nimport { DateHelper } from \"../../core/dateHelper\";\r\nimport { IReferenceDataGroup } from \"../../api/models/fft/reference/IReferenceDataGroup\";\r\nimport { IReferenceMeta } from \"../../api/models/fft/reference/IReferenceMeta\";\r\nimport { IReferenceDataUpdateRequest } from \"../../api/models/fft/engineers/IReferenceDataUpdateRequest\";\r\nimport { IReferenceDataCatalogConfig } from \"../../api/models/fft/engineers/IReferenceDataCatalogConfig\";\r\nimport { IReferenceDataCatalogConfigItem } from \"../../api/models/fft/reference/IReferenceDataCatalogConfigItem\";\r\nimport { IUpdatePattern } from \"../models/reference/IUpdatePattern\";\r\nimport { AnalyticsExceptionModel } from \"../../../common/analytics/analyticsExceptionModel\";\r\nimport { AnalyticsExceptionCodeConstants } from \"../../../common/analytics/analyticsExceptionCodeConstants\";\r\nimport { ITableIndex } from \"../models/reference/ITableIndex\";\r\n\r\n@inject(IndexedDatabaseService, AssetService, FftService, EventAggregator, StorageService, ConfigurationService, ReferenceDataManifest)\r\nexport class ReferenceDataService implements IReferenceDataService {\r\n    private _databaseService: IDatabaseService;\r\n    private _fftService: IFFTService;\r\n    private _assetService: IAssetService;\r\n    private _storageService: IStorageService;\r\n    private _eventAggregator: EventAggregator;\r\n    private _logger: Logging.Logger;\r\n    private _referenceVersions: ReferenceVersion[];\r\n    private _remoteIndexWhenLastChecked: IReferenceIndex[];\r\n    private _referenceDataStaleMinutes: number;\r\n    private _targetReferenceDataTypes: string[];\r\n    private _doesRefDataNeedsARetry: boolean;\r\n    private _referenceDataManifest: ReferenceDataManifest;\r\n\r\n    constructor(databaseService: IDatabaseService,\r\n        assetService: IAssetService,\r\n        fftService: IFFTService,\r\n        eventAggregator: EventAggregator,\r\n        storageService: IStorageService,\r\n        configurationService: IConfigurationService,\r\n        referenceDataManifest: ReferenceDataManifest) {\r\n        this._databaseService = databaseService;\r\n        this._fftService = fftService;\r\n        this._assetService = assetService;\r\n        this._eventAggregator = eventAggregator;\r\n        this._storageService = storageService;\r\n        this._referenceDataManifest = referenceDataManifest;\r\n        this._referenceVersions = [];\r\n        this._logger = Logging.getLogger(\"ReferenceDataService\");\r\n\r\n        this._referenceDataStaleMinutes = 1440;\r\n        let referenceDataConfiguration = configurationService.getConfiguration<IReferenceDataConfiguration>();\r\n        if (referenceDataConfiguration) {\r\n            this._referenceDataStaleMinutes = referenceDataConfiguration.referenceDataStaleMinutes || this._referenceDataStaleMinutes;\r\n            this._targetReferenceDataTypes = referenceDataConfiguration.targetReferenceDataTypes;\r\n        }\r\n        this._doesRefDataNeedsARetry = false;\r\n    }\r\n\r\n    public initialise(): Promise<void> {\r\n        this.notifyProgress(new InitialisationCategory(\"Initialising Database\", \"\", -1, -1));\r\n\r\n        return this.initDatabase()\r\n            .then(() => {\r\n                let indexKeys: { [key: string]: string[] } = {};\r\n                let localTableIndex = this._referenceDataManifest.all() || [];\r\n\r\n                this.notifyProgress(new InitialisationCategory(\"Loading Local Reference Data Index\", \"\", -1, -1));\r\n\r\n                localTableIndex.forEach(ti => {\r\n                    indexKeys[ti.type] = ti.indexes ? ti.indexes.split(\",\") : [];\r\n                });\r\n\r\n                this.notifyProgress(new InitialisationCategory(\"Loading Remote Reference Data Index\", \"\", -1, -1));\r\n\r\n                return this.getRemoteIndex()\r\n                    .then((remoteIndex) => {\r\n                        return this.populateRemoteData(remoteIndex || [], indexKeys, localTableIndex)\r\n                            .then((remoteCatalog) => {\r\n                                let existingTables: string[] = [];\r\n\r\n                                /* create a list of all the tables we have already populated from the remote data */\r\n                                remoteCatalog.forEach(rc => {\r\n                                    existingTables = existingTables.concat((rc.tables || \"\").split(\",\"));\r\n                                });\r\n\r\n                                /* create an updated list of the local tables with the exising ones we got from remote removed */\r\n                                let updateIndex: IReferenceIndex[] = [];\r\n                                localTableIndex.forEach(ti => {\r\n                                    if (existingTables.indexOf(ti.type) < 0) {\r\n\r\n                                        updateIndex.push({\r\n                                            type: ti.type,\r\n                                            eTag: ti.eTag,\r\n                                            lastModifiedDate: ti.lastModifiedDate\r\n                                        });\r\n                                    }\r\n                                });\r\n\r\n                                return this.populateLocalData(updateIndex, existingTables, indexKeys, localTableIndex)\r\n                                    .then(() => {\r\n                                        this._referenceVersions = ArrayHelper.sortByColumn(this._referenceVersions, \"table\");\r\n                                        this._remoteIndexWhenLastChecked = remoteIndex;\r\n                                        return this.setLastRemoteIndexCheckTime();\r\n                                    });\r\n                            });\r\n                    });\r\n            })\r\n            .catch((err) => {\r\n                /* failed loading reference data see if we have non stale version we can use */\r\n                return this.isReferenceDataOutOfDate()\r\n                    .then((isReferenceDataOutOfDate) => {\r\n                        if (isReferenceDataOutOfDate) {\r\n                            throw err;\r\n                        }\r\n                        // otherwise we can still function with the reference data we have\r\n                    })\r\n                    .catch(() => {\r\n                        let exception = new BusinessException(this, \"initialise\", `Cannot currently retrieve Reference Data from the server\r\n                                            and you do not have a recent enough copy that could be used.`, [], err);\r\n                        throw exception;\r\n                    });\r\n            });\r\n    }\r\n\r\n    public async shouldUserRefreshReferenceData(): Promise<boolean> {\r\n        if (!await this._storageService.getLastSuccessfulSyncTime()) {\r\n            return true;\r\n        }\r\n\r\n        if (!await this.isReferenceDataOutOfDate()) {\r\n            return false;\r\n        }\r\n        try {\r\n            let isThereNewReferenceDataOnServer = !ObjectHelper.isComparable(await this.getRemoteIndex(), this._remoteIndexWhenLastChecked);\r\n            await this.setLastRemoteIndexCheckTime();\r\n            return isThereNewReferenceDataOnServer;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public getItems<T>(storeName: string, indexName: string, indexValue: any): Promise<T[]> {\r\n        let indexValues: any = indexValue;\r\n        indexName = indexName || \"\";\r\n\r\n        return this._databaseService.getAll<T>(ReferenceDataConstants.REFERENCE_DATABASE, storeName, indexName, indexValues)\r\n            .catch((err) => {\r\n                let exception = new BusinessException(this, \"getItems\", \"reference data with keys {0} from store '{1}' was not found\", [indexValues, storeName], err);\r\n                const analyticsModel = new AnalyticsExceptionModel(AnalyticsExceptionCodeConstants.REFERENCE_DATA_SERVICE, false,\r\n                    exception.reference, exception.message, exception.parameters);\r\n                this._logger.error(exception && exception.toString(), analyticsModel);\r\n                throw exception;\r\n            });\r\n    }\r\n\r\n    public getItem<T>(storeName: string, indexName: string, indexValue: any): Promise<T> {\r\n        return this._databaseService.get<T>(ReferenceDataConstants.REFERENCE_DATABASE, storeName, indexName, indexValue)\r\n            .catch((err) => {\r\n                let exception = new BusinessException(this, \"getItem\", \"reference data with key '{0}' from store '{1}' was not found\", [indexValue, storeName], err);\r\n                const analyticsModel = new AnalyticsExceptionModel(AnalyticsExceptionCodeConstants.REFERENCE_DATA_SERVICE, false,\r\n                    exception.reference, exception.message, exception.parameters);\r\n                this._logger.error(exception && exception.toString(), analyticsModel);\r\n                throw exception;\r\n            });\r\n    }\r\n\r\n    public async clear(): Promise<void> {\r\n        try {\r\n            await this._databaseService.close(ReferenceDataConstants.REFERENCE_DATABASE);\r\n        } catch (error) {\r\n            // if the db is not open then .close() throws\r\n        }\r\n        await this._databaseService.destroy(ReferenceDataConstants.REFERENCE_DATABASE);\r\n    }\r\n\r\n    /** clean remote index due to API limitation: .json only and take latest last modified date */\r\n    public generateCleanRemoteIndex(listObjects: IListObject[]): IReferenceIndex[] {\r\n        return listObjects\r\n            .filter(x => x.documentName.indexOf(\".json\") > -1)\r\n            .sort((a, b) => moment(a.lastModifiedDate).diff(moment(b.lastModifiedDate)))\r\n            .reverse()\r\n            .reduce((catalogs: IListObject[], currentCatalog): IListObject[] => {\r\n                // take first unique catalog, it's will be the newest due to the sort\r\n                let uniqueCatalogFound = !catalogs.find(x => x.documentName === currentCatalog.documentName);\r\n                if (uniqueCatalogFound) {\r\n                    catalogs.push(currentCatalog);\r\n                }\r\n                return catalogs;\r\n            }, [])\r\n            // convert API model to Business model\r\n            .map((listObject: IListObject): IReferenceIndex => {\r\n                return {\r\n                    type: listObject.documentName.replace(/\\.[^/.]+$/, \"\").toLowerCase(),\r\n                    eTag: listObject.etag,\r\n                    lastModifiedDate: listObject.lastModifiedDate\r\n                };\r\n            });\r\n    }\r\n\r\n    public getVersions(): ReferenceVersion[] {\r\n        return this._referenceVersions;\r\n    }\r\n\r\n    private async isReferenceDataOutOfDate(): Promise<boolean> {\r\n        let storedIndex = await this.getLocalIndex();\r\n        if (!storedIndex || !storedIndex.length) {\r\n            // we don't have anything at all\r\n            return true;\r\n        }\r\n        let lastSuccessfulSyncTime = await this._storageService.getLastSuccessfulSyncTime();\r\n        let nowMs = DateHelper.getTimestampMs();\r\n        let timeWhenARefreshWouldBeRequiredMs = (lastSuccessfulSyncTime || 0) + (this._referenceDataStaleMinutes * 60 * 1000);\r\n\r\n        return nowMs >= timeWhenARefreshWouldBeRequiredMs;\r\n    }\r\n\r\n    private setLastRemoteIndexCheckTime(): Promise<void> {\r\n        if (this._doesRefDataNeedsARetry) {\r\n            return this._storageService.setLastSuccessfulSyncTime(undefined);\r\n        }\r\n        return this._storageService.setLastSuccessfulSyncTime(DateHelper.getTimestampMs());\r\n    }\r\n\r\n    private async getRemoteIndex(): Promise<IReferenceIndex[]> {\r\n        let indexes = await this._fftService.getRemoteReferenceDataIndex();\r\n        let referenceIndexes = this.generateCleanRemoteIndex(indexes);\r\n        return this.getTargetReferenceDocuments(referenceIndexes);\r\n    }\r\n\r\n    private getTargetReferenceDocuments(indexList: IReferenceIndex[]): IReferenceIndex[] {\r\n        let isATargetDocument = (type: string) => this._targetReferenceDataTypes && this._targetReferenceDataTypes\r\n            .some(expectedDocument => type === expectedDocument);\r\n\r\n        return indexList.filter(documentIndex => isATargetDocument(documentIndex.type));\r\n    }\r\n\r\n    private initDatabase(): Promise<void> {\r\n        this.notifyProgress(new InitialisationCategory(\"Creating Reference Database\", \"\", -1, -1));\r\n\r\n        return this._databaseService.exists(ReferenceDataConstants.REFERENCE_DATABASE, ReferenceDataConstants.REFERENCE_DATABASE)\r\n            .then((exists) => {\r\n                if (exists) {\r\n                    return this._databaseService.open(ReferenceDataConstants.REFERENCE_DATABASE);\r\n                } else {\r\n                    return this._databaseService.create(\r\n                        new DatabaseSchema(ReferenceDataConstants.REFERENCE_DATABASE,\r\n                            ReferenceDataConstants.REFERENCE_DATABASE_VERSION,\r\n                            [\r\n                                new DatabaseSchemaStore(ReferenceDataConstants.REMOTE_REFERENCE_INDEX, \"container\", false, [new DatabaseSchemaStoreIndex(\"container\", \"container\", true)]),\r\n                                new DatabaseSchemaStore(ReferenceDataConstants.LOCAL_REFERENCE_INDEX, \"container\", false, [new DatabaseSchemaStoreIndex(\"container\", \"container\", true)])\r\n                            ]));\r\n                }\r\n            });\r\n    }\r\n\r\n    /* tslint:disable:promise-must-complete*/\r\n    private populateRemoteData(newIndex: IReferenceIndex[], indexKeys: { [key: string]: string[] }, localTableIndex: ITableIndex[]): Promise<ReferenceIndex[]> {\r\n        return new Promise<ReferenceIndex[]>((resolve, reject) => {\r\n            this.getLocalIndex()\r\n                .then((storedIndex: ReferenceIndex[]) => {\r\n                    let updatePattern = this.calculateUpdatePattern(storedIndex, newIndex);\r\n                    this.notifyProgress(new InitialisationCategory(\"Updating From Remote Data\", \"\", 0, updatePattern.length));\r\n\r\n                    this._logger.info(\"Stored Remote Index\", storedIndex);\r\n                    this._logger.info(\"New Remote Index\", newIndex);\r\n\r\n                    let idx = 0;\r\n                    let remoteReferenceDataIndex: ReferenceIndex[] = []; // the etag and grouping of remote ref data tables\r\n                    let docVersionUpdateList: IReferenceDataCatalogConfigItem[] = [];\r\n                    let needToMakeAnUpdateCall = 0;\r\n\r\n                    let document: string;\r\n                    let majorVersion: number;\r\n                    let minorVersion: number;\r\n                    let catSequence: number;\r\n                    let eTag: string;\r\n                    let tablesList: string;\r\n\r\n                    let doNext = () => {\r\n                        if (idx < updatePattern.length) {\r\n                            this.notifyProgress(new InitialisationUpdate(\"Downloading Remote Data '\" + updatePattern[idx].type + \"'\", idx));\r\n\r\n                            // default values, if api call fails, will need default settings currently in indexdb\r\n\r\n                            document = updatePattern[idx].type;\r\n                            majorVersion = updatePattern[idx].majorVersion;\r\n                            minorVersion = updatePattern[idx].minorVersion;\r\n                            catSequence = updatePattern[idx].sequence;\r\n                            tablesList = updatePattern[idx].tables;\r\n\r\n                            // get catalog from api\r\n                            this.populateRemoteCatalogReferenceData(updatePattern[idx].type,\r\n                                updatePattern[idx].retrieveData,\r\n                                updatePattern[idx].deleteCatalog,\r\n                                updatePattern[idx].tables.split(\",\"),\r\n                                indexKeys,\r\n                                updatePattern[idx].eTag,\r\n                                localTableIndex)\r\n                                .then((refDataResponse) => {\r\n\r\n                                    if (!updatePattern[idx].deleteCatalog) {\r\n                                        eTag = refDataResponse.etag;\r\n                                        tablesList = refDataResponse.tables.join(\",\");\r\n\r\n                                        // updates the list of tables in the \"remoteReferenceIndex\" for a group\r\n\r\n                                        if (refDataResponse.meta && updatePattern[idx].retrieveData) {\r\n                                            const { currentMajorVersion = null, currentMinorVersion = null, sequence: refSequence = null } = refDataResponse.meta;\r\n                                            majorVersion = currentMajorVersion;\r\n                                            minorVersion = currentMinorVersion;\r\n                                            catSequence = refSequence;\r\n                                        }\r\n\r\n                                        // updates the list of tables in the \"remoteReferenceIndex\" for a group\r\n\r\n                                        refDataResponse.tables.forEach(table => {\r\n                                            this._referenceVersions.push({\r\n                                                table: table,\r\n                                                version: updatePattern[idx].eTag,\r\n                                                majorVersion: majorVersion,\r\n                                                minorVersion: minorVersion,\r\n                                                sequence: catSequence,\r\n                                                isLocal: localTableIndex.find(t => t.type === table).sourceDocument === \"local\" || false,\r\n                                                lastAttemptFailed: false,\r\n                                                lastModifiedDate: updatePattern[idx].lastModifiedDate,\r\n                                                source: localTableIndex.find(t => t.type === table).sourceDocument || undefined,\r\n                                            });\r\n                                        });\r\n                                    }\r\n                                })\r\n                                .catch(err => {\r\n                                    const errorText = \"failed to get catalog data\";\r\n                                    const analyticsModel = new AnalyticsExceptionModel(AnalyticsExceptionCodeConstants.REFERENCE_DATA_SERVICE, true, errorText);\r\n                                    this._logger.error(errorText, err, analyticsModel);\r\n                                    eTag = undefined;\r\n                                    return this._storageService.getLastSuccessfulSyncTime()\r\n                                        .then((lastSyncTime) => {\r\n                                        if (!lastSyncTime && (localTableIndex.filter(ti => ti.sourceDocument === updatePattern[idx].type) || []).every(t => !t.canItBeEmpty)) {\r\n                                            this._doesRefDataNeedsARetry = true;\r\n                                        }     \r\n                                        \r\n                                        if (tablesList && tablesList.length > 0) {\r\n                                            tablesList.split(\",\").forEach(table => {\r\n                                                this._referenceVersions.push({\r\n                                                    table,\r\n                                                    version: updatePattern[idx].eTag,\r\n                                                    majorVersion,\r\n                                                    minorVersion,\r\n                                                    sequence: catSequence,\r\n                                                    isLocal: localTableIndex.find(t => t.type === table).sourceDocument === \"local\" || false,\r\n                                                    lastAttemptFailed: true,\r\n                                                    lastModifiedDate: updatePattern[idx].lastModifiedDate,\r\n                                                    source: localTableIndex.find(t => t.type === table).sourceDocument || undefined,\r\n                                                });\r\n                                            });\r\n                                        }  \r\n                                    });                                                                      \r\n                                })\r\n                                .then(() => {\r\n\r\n                                    let catalogIndex: ReferenceIndex = new ReferenceIndex();\r\n\r\n                                    // new versions from remote api endpoint, these are required for put calls\r\n                                    // in final block\r\n\r\n                                    catalogIndex.container = document;\r\n                                    catalogIndex.eTag = eTag;\r\n                                    catalogIndex.tables = tablesList;\r\n                                    catalogIndex.majorVersion = majorVersion;\r\n                                    catalogIndex.minorVersion = minorVersion;\r\n                                    catalogIndex.sequence = catSequence;\r\n\r\n                                    remoteReferenceDataIndex.push(catalogIndex);\r\n\r\n                                    needToMakeAnUpdateCall += updatePattern[idx].retrieveData ? 1 : 0;\r\n\r\n                                    docVersionUpdateList.push({\r\n                                        documentName: `${document}.json`,\r\n                                        majorVersion: majorVersion ? majorVersion.toString() : \"\",\r\n                                        minorVersion: minorVersion ? minorVersion.toString() : \"\",\r\n                                        sequenceNumber: catSequence ? catSequence.toString() : \"\"\r\n                                    });\r\n\r\n                                    idx++;\r\n                                    doNext();\r\n                                });\r\n                        } else {\r\n                            this.notifyProgress(new InitialisationCategory(\"Remote From Data Update Complete\", \"\", -1, -1));\r\n                            this.populateTable(remoteReferenceDataIndex, ReferenceDataConstants.REMOTE_REFERENCE_INDEX)\r\n                                .then(() => needToMakeAnUpdateCall > 0 ? this.updateRefDataVersion(docVersionUpdateList) : Promise.resolve())\r\n                                .then(() => resolve(remoteReferenceDataIndex))\r\n                                .catch((err) => {\r\n                                    reject(err);\r\n                                });\r\n                        }\r\n                    };\r\n                    doNext();\r\n                });\r\n        });\r\n\r\n    }\r\n\r\n    private getLocalIndex(): Promise<ReferenceIndex[]> {\r\n        return this._databaseService.getAll<ReferenceIndex>(ReferenceDataConstants.REFERENCE_DATABASE, ReferenceDataConstants.REMOTE_REFERENCE_INDEX);\r\n    }\r\n\r\n    private updateRefDataVersion(list: IReferenceDataCatalogConfigItem[]): Promise<void> {\r\n\r\n        if (!list || list.length === 0) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this._storageService.getEngineer().then(engineer => {\r\n\r\n            let request = <IReferenceDataUpdateRequest>{};\r\n            let data = <IReferenceDataCatalogConfig>{};\r\n\r\n            data.catalogueConfig = [{\r\n                engineerId: engineer.id,\r\n                list\r\n            }];\r\n\r\n            request.data = data;\r\n\r\n            this._logger.info(\"Updating Reference Data Versions\", list);\r\n\r\n            return this._fftService.updateRemoteReferenceData(request).then(() =>\r\n                this._logger.info(\"Updated Reference Data Versions\")\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n    private populateLocalData(newIndex: IReferenceIndex[], exemptFromDelete: string[], indexKeys: { [key: string]: string[] }, localTableIndex: ITableIndex[]): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            this._databaseService.getAll<ReferenceIndex>(ReferenceDataConstants.REFERENCE_DATABASE, ReferenceDataConstants.LOCAL_REFERENCE_INDEX)\r\n                .then((storedIndex: ReferenceIndex[]) => {\r\n                    let updatePattern = this.calculateUpdatePattern(storedIndex, newIndex);\r\n                    this.notifyProgress(new InitialisationCategory(\"Updating From Local Data\", \"\", 0, updatePattern.length));\r\n\r\n                    this._logger.info(\"Stored Local Index\", storedIndex);\r\n                    this._logger.info(\"New Local Index\", newIndex);\r\n\r\n                    let idx = 0;\r\n                    let finalIndex: ReferenceIndex[] = [];\r\n\r\n                    let doNext = () => {\r\n                        if (idx < updatePattern.length) {\r\n                            let p: Promise<any[]>;\r\n\r\n                            if (updatePattern[idx].retrieveData) {\r\n                                this.notifyProgress(new InitialisationUpdate(\"Importing Local Data '\" + updatePattern[idx].type + \"'\", idx));\r\n                                p = this._assetService.loadJson<any[]>(\"services/reference/\" + updatePattern[idx].type + \".json\");\r\n                            } else {\r\n                                p = Promise.resolve(undefined);\r\n                            }\r\n\r\n                            p.then((jsonData) => {\r\n                                this.populateTableReferenceData(updatePattern[idx].type, jsonData, updatePattern[idx].deleteCatalog, idx, exemptFromDelete, indexKeys[updatePattern[idx].type])\r\n                                    .then(() => {\r\n                                        if (!updatePattern[idx].deleteCatalog) {\r\n                                            let catalogIndex: ReferenceIndex = new ReferenceIndex();\r\n                                            catalogIndex.container = updatePattern[idx].type;\r\n                                            catalogIndex.eTag = updatePattern[idx].eTag;\r\n                                            catalogIndex.tables = updatePattern[idx].type;\r\n                                            catalogIndex.majorVersion = updatePattern[idx].majorVersion;\r\n\r\n                                            catalogIndex.minorVersion = updatePattern[idx].minorVersion;\r\n                                            catalogIndex.sequence = updatePattern[idx].sequence;\r\n                                            finalIndex.push(catalogIndex);\r\n\r\n                                            this._referenceVersions.push({\r\n                                                table: updatePattern[idx].type,\r\n                                                version: updatePattern[idx].eTag,\r\n                                                lastModifiedDate: updatePattern[idx].lastModifiedDate,\r\n                                                isLocal: localTableIndex.find(t => t.type === updatePattern[idx].type).sourceDocument === \"local\" || false,\r\n                                                source: localTableIndex.find(t => t.type === updatePattern[idx].type).sourceDocument\r\n                                            });\r\n                                        }\r\n\r\n                                        idx++;\r\n                                        doNext();\r\n                                    })\r\n                                    .catch((err) => {\r\n                                        reject(err);\r\n                                    });\r\n                            });\r\n                        } else {\r\n                            this.notifyProgress(new InitialisationCategory(\"Local From Data Update Complete\", \"\", -1, -1));\r\n                            this.populateTable(finalIndex, ReferenceDataConstants.LOCAL_REFERENCE_INDEX)\r\n                                .then(() => resolve())\r\n                                .catch((err) => {\r\n                                    reject(err);\r\n                                });\r\n                        }\r\n                    };\r\n\r\n                    doNext();\r\n                });\r\n        });\r\n    }\r\n\r\n    private calculateUpdatePattern(storedIndex: ReferenceIndex[], newIndex: IReferenceIndex[]): IUpdatePattern[] {\r\n\r\n        let updatePattern: IUpdatePattern[] = [];\r\n\r\n        if (storedIndex) {\r\n            for (let i = 0; i < storedIndex.length; i++) {\r\n                let remoteType = newIndex.find(x => x.type === storedIndex[i].container);\r\n                if (remoteType) {\r\n\r\n                    /* we found no etag - take the lastest (useful for development) */\r\n                    /* we found the catalog in the new data, has it been updated */\r\n\r\n                    if (remoteType.eTag === \"-1\" || storedIndex[i].eTag !== remoteType.eTag) {\r\n                        /* yes so update data from remote */\r\n                        updatePattern.push({\r\n                            type: remoteType.type,\r\n                            retrieveData: true,\r\n                            deleteCatalog: false,\r\n                            tables: storedIndex[i].tables,\r\n                            eTag: remoteType.eTag,\r\n                            majorVersion: storedIndex[i].majorVersion,\r\n                            minorVersion: storedIndex[i].minorVersion,\r\n                            sequence: storedIndex[i].sequence,\r\n                            lastModifiedDate: remoteType.lastModifiedDate\r\n                        });\r\n                    } else {\r\n                        /* no, so just keep data intact */\r\n                        updatePattern.push({\r\n                            type: remoteType.type,\r\n                            retrieveData: false,\r\n                            deleteCatalog: false,\r\n                            tables: storedIndex[i].tables,\r\n                            eTag: remoteType.eTag,\r\n                            majorVersion: storedIndex[i].majorVersion, // * use remote type because new prop that will initially not be there\r\n                            minorVersion: storedIndex[i].minorVersion, // * see above\r\n                            sequence: storedIndex[i].sequence, // * see above\r\n                            lastModifiedDate: remoteType.lastModifiedDate\r\n                        });\r\n                    }\r\n                } else {\r\n                    /* catalog was in the in stored index but not in new index, so delete */\r\n                    updatePattern.push({\r\n                        type: storedIndex[i].container,\r\n                        retrieveData: false,\r\n                        deleteCatalog: true,\r\n                        tables: storedIndex[i].tables,\r\n                        eTag: storedIndex[i].eTag,\r\n                        majorVersion: null,\r\n                        minorVersion: null,\r\n                        sequence: null,\r\n                        lastModifiedDate: \"\"\r\n                    });\r\n                }\r\n            }\r\n\r\n            /* now see if there are any new tables in the remote index that we don't have locally */\r\n            for (let i = 0; i < newIndex.length; i++) {\r\n                let stored = storedIndex.find(x => x.container === newIndex[i].type);\r\n\r\n                if (!stored) {\r\n                    updatePattern.push({\r\n                        type: newIndex[i].type,\r\n                        retrieveData: true,\r\n                        deleteCatalog: false,\r\n                        tables: \"\",\r\n                        majorVersion: newIndex[i].currentMajorVersion,\r\n                        minorVersion: newIndex[i].currentMinorVersion,\r\n                        sequence: newIndex[i].sequence,\r\n                        eTag: newIndex[i].eTag,\r\n                        lastModifiedDate: newIndex[i].lastModifiedDate\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return updatePattern;\r\n    }\r\n\r\n    private populateTable<T>(data: T[], tableName: string): Promise<void> {\r\n        return this._databaseService.removeAll(ReferenceDataConstants.REFERENCE_DATABASE, tableName).then(() => {\r\n            return this._databaseService.setAll<T>(ReferenceDataConstants.REFERENCE_DATABASE, tableName, data);\r\n        });\r\n    }\r\n\r\n    private populateRemoteCatalogReferenceData(catalog: string, retrieveData: boolean, deleteCatalog: boolean,\r\n        tables: string[], indexKeys: { [key: string]: string[] }, etag: string, localTableIndex: ITableIndex[]): Promise<{ meta: IReferenceMeta, tables: string[], etag: string }> {\r\n        return new Promise<{ meta: IReferenceMeta, tables: string[], etag: string }>((resolve, reject) => {\r\n\r\n            let hasTheResponseGotAllTheData = (data: any): boolean => {\r\n                let tablesBelongToDoc: ITableIndex[] = localTableIndex.filter(ti => ti.sourceDocument === catalog);\r\n                let res: boolean = true;\r\n                tablesBelongToDoc.forEach(t => {\r\n                    let table = data[t.type];\r\n                    if (!t.canItBeEmpty && (!table || table.length === 0)) {\r\n                        res = false;\r\n\r\n                        // removing empty table from data object to let it to fall over to the local index\r\n                        if (table) {\r\n                            delete data[t.type];\r\n                        }\r\n                    }\r\n                });\r\n                return res;\r\n            };\r\n\r\n            let result: {\r\n                tables: string[],\r\n                meta: IReferenceMeta,\r\n                etag: string\r\n            } = { tables: [], meta: null, etag: etag };\r\n\r\n            result.tables = tables;\r\n\r\n            let idx = 0;\r\n            let getReferenceDataGroup: Promise<IReferenceDataGroup>;\r\n\r\n            if (retrieveData) {\r\n                getReferenceDataGroup = this._fftService.getRemoteReferenceDataCatalog(catalog);\r\n            } else {\r\n                getReferenceDataGroup = Promise.resolve(undefined); // todo why can't we just exit early\r\n            }\r\n\r\n            getReferenceDataGroup.then((referenceDataGroup) => {\r\n                if (!referenceDataGroup || !referenceDataGroup.meta || !referenceDataGroup.data) {\r\n                    return resolve(result);\r\n                }\r\n\r\n                const { data, meta } = referenceDataGroup;              \r\n\r\n                if (!hasTheResponseGotAllTheData(data)) {\r\n                    result.etag = undefined;\r\n                    this._doesRefDataNeedsARetry = true;\r\n                }\r\n\r\n                result.tables = Object.keys(data);\r\n                result.meta = { ...meta };\r\n\r\n                this._logger.info(catalog + \" documents has got tables \" + result.tables);\r\n\r\n                const { tables: rTables } = result;\r\n\r\n                let doNext = () => {\r\n                    if (idx < rTables.length) {\r\n\r\n                        let tableData: any[] = data[rTables[idx]];\r\n\r\n                        const type = rTables[idx];\r\n\r\n                        this.populateTableReferenceData(type, tableData, deleteCatalog, idx, [], indexKeys[type])\r\n                            .then(() => {\r\n                                idx++;\r\n                                doNext();\r\n                            })\r\n                            .catch((err) => {\r\n                                reject(err);\r\n                            });\r\n                    } else {\r\n                        resolve(result);\r\n                    }\r\n                };\r\n\r\n                doNext();\r\n            }).catch(err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    private populateTableReferenceData(type: string, data: any[], deleteCatalog: boolean, idx: number, exemptFromDelete: string[], indexKeys: string[]): Promise<void> {\r\n        return this._databaseService.storeExists(ReferenceDataConstants.REFERENCE_DATABASE, type)\r\n            .then((exists) => {\r\n                if (deleteCatalog) {\r\n                    if (exemptFromDelete.indexOf(type) === -1) {\r\n                        this.notifyProgress(new InitialisationUpdate(\"Deleting Data '\" + type + \"'\", idx));\r\n                        if (exists) {\r\n                            this._logger.info(\"Deleting \" + type + \" from database\");\r\n                            return this._databaseService.storeRemove(ReferenceDataConstants.REFERENCE_DATABASE, type);\r\n                        } else {\r\n                            this._logger.info(\"Deleting \" + type);\r\n                            return undefined;\r\n                        }\r\n                    } else {\r\n                        this._logger.info(\"Defering \" + type + \" to remote data from database\");\r\n                        this.notifyProgress(new InitialisationUpdate(\"Defering To Remote Data '\" + type + \"'\", idx));\r\n                        return undefined;\r\n                    }\r\n                } else if (exists && data === undefined) {\r\n                    this._logger.info(\"No Change \" + type);\r\n                    this.notifyProgress(new InitialisationUpdate(\"No Change In Data '\" + type + \"'\", idx));\r\n                    return undefined;\r\n                } else {\r\n                    const noOfRows = data ? data.length : 0;\r\n                    if (exists) {\r\n                        this._logger.info(\"Updating \" + type + \" table with \" + noOfRows + \" rows of data\");\r\n                        this.notifyProgress(new InitialisationUpdate(\"Updating Data '\" + type + \"'\", idx));\r\n                        return this.populateTable(data, type);\r\n                    } else {\r\n                        this._logger.info(\"Creating \" + type + \" table with \" + noOfRows + \" rows of data\");\r\n                        let indexes = indexKeys.map(ik => new DatabaseSchemaStoreIndex(ik, ik, false));\r\n\r\n                        for (let i = 0; i < indexKeys.length; i++) {\r\n                            for (let j = 0; j < indexKeys.length; j++) {\r\n                                if (indexKeys[i] !== indexKeys[j]) {\r\n                                    let combinedIndex = indexKeys[i] + \"_\" + indexKeys[j];\r\n                                    indexes.push(new DatabaseSchemaStoreIndex(combinedIndex, [indexKeys[i], indexKeys[j]], false));\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        this.notifyProgress(new InitialisationUpdate(\"Creating Data '\" + type + \"'\", idx));\r\n                        return this._databaseService.storeCreate(ReferenceDataConstants.REFERENCE_DATABASE,\r\n                            new DatabaseSchemaStore(\r\n                                type,\r\n                                undefined,\r\n                                true,\r\n                                indexes\r\n                            ))\r\n                            .then(() => this.populateTable(data, type));\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private notifyProgress(payload: InitialisationUpdate | InitialisationCategory): void {\r\n        let event = payload instanceof InitialisationUpdate ? InitialisationEventConstants.INITIALISE_UPDATE : InitialisationEventConstants.INITIALISE_CATEGORY;\r\n        this._eventAggregator.publish(event, payload);\r\n    }\r\n}\r\n"],"sourceRoot":"../../.."}