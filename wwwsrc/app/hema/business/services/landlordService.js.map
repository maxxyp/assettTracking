{"version":3,"sources":["hema/business/services/landlordService.ts"],"names":[],"mappings":";;;;;;;;;;;;IAmBA;QAQI,yBAAY,UAAuB,EAAE,mBAAyC,EAClE,eAAiC,EAAE,eAAiC,EAAE,gBAAmC;YACjH,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;YAChD,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YACxC,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YACxC,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC9C,CAAC;QAEM,sDAA4B,GAAnC,UAAoC,KAAa;YAAjD,iBA0BC;YAzBG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;gBACf,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,2BAA2B,CAAC;gBAC5E,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC;gBAC9B,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,EAAE;gBAC1C,IAAI,CAAC,iBAAiB,CAAC,oCAAoC,CAAC,KAAK,CAAC;aACrE,CAAC;iBACD,IAAI,CAAC,UAAC,EAAsC;oBAArC,iBAAS,EAAE,WAAG,EAAE,gBAAQ,EAAE,kBAAU;gBACpC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACP,MAAM,IAAI,qCAAiB,CAAC,KAAI,EAAE,8CAA8C,EAAE,yBAAyB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC7H,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC/D,MAAM,IAAI,qCAAiB,CAAC,KAAI,EAAE,8CAA8C,EAAE,6BAA6B,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACjI,CAAC;gBAED,MAAM,CAAC,KAAI,CAAC,gBAAgB,CAAC,+BAA+B,CACxD,GAAG,EACH,QAAQ,EACR,SAAS,EACT,UAAU,CACb,CAAC;YACV,CAAC,CAAC;iBACD,KAAK,CAAC,UAAA,EAAE;gBACL,MAAM,IAAI,qCAAiB,CAAC,KAAI,EAAE,iBAAiB,EAAE,2CAA2C,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;YAChH,CAAC,CAAC,CAAC;QACP,CAAC;QA3CQ,eAAe;YAD3B,0BAAM,CAAC,uBAAU,EAAE,yCAAmB,EAAE,iCAAe,EAAE,iCAAe,EAAE,mCAAgB,CAAC;;WAC/E,eAAe,CA4C3B;QAAD,sBAAC;KA5CD,AA4CC,IAAA;IA5CY,0CAAe","file":"landlordService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\r\nimport {inject} from \"aurelia-framework\";\r\n\r\nimport {ILandlordService} from \"./interfaces/ILandlordService\";\r\nimport {IJobService} from \"./interfaces/IJobService\";\r\nimport {JobService} from \"./jobService\";\r\nimport {LandlordSafetyCertificate as LandlordSafetyCertificateBusinessModel} from \"../models/landlord/landlordSafetyCertificate\";\r\nimport {BusinessException} from \"../models/businessException\";\r\n\r\nimport {BusinessRuleService} from \"./businessRuleService\";\r\nimport {IBusinessRuleService} from \"./interfaces/IBusinessRuleService\";\r\nimport {ILandlordFactory} from \"../factories/interfaces/ILandlordFactory\";\r\nimport {LandlordFactory} from \"../factories/landlordFactory\";\r\nimport {IEngineerService} from \"./interfaces/IEngineerService\";\r\nimport {EngineerService} from \"./engineerService\";\r\nimport { IApplianceService } from \"./interfaces/IApplianceService\";\r\nimport { ApplianceService } from \"./applianceService\";\r\n\r\n@inject(JobService, BusinessRuleService, EngineerService, LandlordFactory, ApplianceService)\r\nexport class LandlordService implements ILandlordService {\r\n\r\n    private _jobService: IJobService;\r\n    private _businessRuleService: IBusinessRuleService;\r\n    private _engineerService: IEngineerService;\r\n    private _landlordFactory: ILandlordFactory;\r\n    private _applianceService: IApplianceService;\r\n\r\n    constructor(jobService: IJobService, businessRuleService: IBusinessRuleService,\r\n                engineerService: IEngineerService, landlordFactory: ILandlordFactory, applianceService: IApplianceService) {\r\n        this._jobService = jobService;\r\n        this._businessRuleService = businessRuleService;\r\n        this._landlordFactory = landlordFactory;\r\n        this._engineerService = engineerService;\r\n        this._applianceService = applianceService;\r\n    }\r\n\r\n    public getLandlordSafetyCertificate(jobId: string): Promise<LandlordSafetyCertificateBusinessModel> {\r\n        return Promise.all([\r\n            this._businessRuleService.getQueryableRuleGroup(\"landlordSafetyCertificate\"),\r\n            this._jobService.getJob(jobId),\r\n            this._engineerService.getCurrentEngineer(),\r\n            this._applianceService.getAppliancesForLandlordsCertificate(jobId)\r\n        ])\r\n        .then(([ruleGroup, job, engineer, appliances]) => {\r\n                if (!job) {\r\n                    throw new BusinessException(this, \"landlordService.getLandlordSafetyCertificate\", \"no current job selected\", null, null);\r\n                }\r\n\r\n                if (!ruleGroup || !ruleGroup.rules || ruleGroup.rules.length < 1) {\r\n                    throw new BusinessException(this, \"landlordService.getLandlordSafetyCertificate\", \"no business rules available\", null, null);\r\n                }\r\n\r\n                return this._landlordFactory.createLandlordSafetyCertificate(\r\n                    job,\r\n                    engineer,\r\n                    ruleGroup,\r\n                    appliances\r\n                );\r\n        })\r\n        .catch(ex => {\r\n            throw new BusinessException(this, \"landlordService\", \"could not get landlord safety certificate\", null, ex);\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":"../../.."}