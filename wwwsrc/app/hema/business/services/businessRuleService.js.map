{"version":3,"sources":["hema/business/services/businessRuleService.ts"],"names":[],"mappings":";;;;;;;;;;;;IAaA;QAII,6BAAY,cAA+B,EAAE,oBAA2C;YACpF,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YAEtC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;QAC5D,CAAC;QAEM,0CAAY,GAAnB,UAAoB,YAAoB;YAAxC,iBAgBC;YAfG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,YAAY,CAAC;iBACrD,IAAI,CAAC,UAAC,IAAqB;gBACxB,IAAI,KAAK,GAAyB,EAAE,CAAC;gBACrC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACP,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;wBACV,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACzB,CAAC,CAAC,CAAC;gBACP,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,GAAG;gBACP,IAAI,SAAS,GAAG,IAAI,qCAAiB,CAAC,KAAI,EAAE,cAAc,EAAE,kCAAkC,EAAE,CAAC,YAAY,CAAC,EAAE,GAAG,CAAC,CAAC;gBACrH,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACzC,MAAK,CAAC,SAAS,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QACX,CAAC;QAEM,mDAAqB,GAA5B,UAA6B,YAAoB;YAAjD,iBAkBC;YAjBG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,YAAY,CAAC;iBACrD,IAAI,CAAC,UAAC,IAAqB;gBACxB,IAAI,SAAS,GAA+B,IAAI,uDAA0B,EAAE,CAAC;gBAC7E,SAAS,CAAC,IAAI,GAAG,YAAY,CAAC;gBAC9B,SAAS,CAAC,KAAK,GAAG,EAAE,CAAC;gBAErB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACP,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC;gBAC3B,CAAC;gBAED,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,GAAG;gBACP,IAAI,SAAS,GAAG,IAAI,qCAAiB,CAAC,KAAI,EAAE,cAAc,EAAE,kCAAkC,EAAE,CAAC,YAAY,CAAC,EAAE,GAAG,CAAC,CAAC;gBACrH,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACzC,MAAK,CAAC,SAAS,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QACX,CAAC;QA9CQ,mBAAmB;YAD/B,0BAAM,CAAC,+BAAc,EAAE,2CAAoB,CAAC;;WAChC,mBAAmB,CA+C/B;QAAD,0BAAC;KA/CD,AA+CC,IAAA;IA/CY,kDAAmB","file":"businessRuleService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\nimport * as Logging from \"aurelia-logging\";\nimport {IBusinessRuleService} from \"./interfaces/IBusinessRuleService\";\nimport {inject} from \"aurelia-framework\";\nimport {CatalogService} from \"./catalogService\";\nimport {ICatalogService} from \"./interfaces/ICatalogService\";\nimport {BusinessException} from \"../models/businessException\";\nimport {QueryableBusinessRuleGroup} from \"../models/businessRules/queryableBusinessRuleGroup\";\nimport {ConfigurationService} from \"../../../common/core/services/configurationService\";\nimport {IConfigurationService} from \"../../../common/core/services/IConfigurationService\";\nimport {IBusinessRule} from \"../models/reference/IBusinessRule\";\n\n@inject(CatalogService, ConfigurationService)\nexport class BusinessRuleService implements IBusinessRuleService {\n    private _catalogService: ICatalogService;\n    private _logger: Logging.Logger;\n\n    constructor(catalogService: ICatalogService, configurationService: IConfigurationService) {\n        this._catalogService = catalogService;\n\n        this._logger = Logging.getLogger(\"BusinessRuleService\");\n    }\n\n    public getRuleGroup(ruleGroupKey: string): Promise<{ [key: string]: any}> {\n        return this._catalogService.getBusinessRules(ruleGroupKey)\n            .then((data: IBusinessRule[]) => {\n                let rules: {[key: string]: any} = {};\n                if (data) {\n                    data.forEach(r => {\n                        rules[r.id] = r.rule;\n                    });\n                }\n                return rules;\n            })\n            .catch((exc) => {\n                let exception = new BusinessException(this, \"getRuleGroup\", \"Getting rule group for key '{0}'\", [ruleGroupKey], exc);\n                this._logger.error(exception.toString());\n                throw(exception);\n            });\n    }\n\n    public getQueryableRuleGroup(ruleGroupKey: string): Promise<QueryableBusinessRuleGroup> {\n        return this._catalogService.getBusinessRules(ruleGroupKey)\n            .then((data: IBusinessRule[]) => {\n                let ruleGroup: QueryableBusinessRuleGroup = new QueryableBusinessRuleGroup();\n                ruleGroup.code = ruleGroupKey;\n                ruleGroup.rules = [];\n\n                if (data) {\n                    ruleGroup.rules = data;\n                }\n\n                return ruleGroup;\n            })\n            .catch((exc) => {\n                let exception = new BusinessException(this, \"getRuleGroup\", \"Getting rule group for key '{0}'\", [ruleGroupKey], exc);\n                this._logger.error(exception.toString());\n                throw(exception);\n            });\n    }\n}\n"],"sourceRoot":"../../.."}