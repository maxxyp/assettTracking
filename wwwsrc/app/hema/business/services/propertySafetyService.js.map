{"version":3,"sources":["hema/business/services/propertySafetyService.ts"],"names":[],"mappings":"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","file":"propertySafetyService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport {inject} from \"aurelia-framework\";\nimport {IPropertySafetyService} from \"./interfaces/IPropertySafetyService\";\nimport {IJobService} from \"./interfaces/IJobService\";\nimport {JobService} from \"./jobService\";\nimport {PropertyGasSafetyDetail as PropertyGasSafetyDetailBusinessModel} from \"../models/propertyGasSafetyDetail\";\nimport {BusinessException} from \"../models/businessException\";\nimport {PropertyElectricalSafetyDetail} from \"../models/propertyElectricalSafetyDetail\";\nimport {PropertyUnsafeDetail} from \"../models/propertyUnsafeDetail\";\nimport {IBusinessRuleService} from \"./interfaces/IBusinessRuleService\";\nimport {BusinessRuleService} from \"./businessRuleService\";\nimport {UnsafeReason} from \"../models/unsafeReason\";\nimport {PropertySafety} from \"../models/propertySafety\";\nimport {QueryableBusinessRuleGroup} from \"../models/businessRules/queryableBusinessRuleGroup\";\nimport {ObjectHelper} from \"../../../common/core/objectHelper\";\nimport {StringHelper} from \"../../../common/core/stringHelper\";\nimport { DataStateManager } from \"../../common/dataStateManager\";\nimport { IDataStateManager } from \"../../common/IDataStateManager\";\n\n@inject(JobService, BusinessRuleService, DataStateManager)\nexport class PropertySafetyService implements IPropertySafetyService {\n    private _jobService: IJobService;\n    private _businessRuleService: IBusinessRuleService;\n\n    private _businessRules: QueryableBusinessRuleGroup;\n    private _dataStateManager: IDataStateManager;\n\n    constructor(jobService: IJobService, businessRuleService: IBusinessRuleService, dataStateManager: IDataStateManager) {\n        this._jobService = jobService;\n        this._businessRuleService = businessRuleService;\n        this._dataStateManager = dataStateManager;\n    }\n\n    public getPropertySafetyDetails(jobId: string): Promise<PropertySafety> {\n        return this._jobService.getJob(jobId).then(job => {\n            return job.propertySafety;\n        });\n    }\n\n    public saveGasSafetyDetails(jobId: string,\n                                safetyDetail: PropertyGasSafetyDetailBusinessModel,\n                                unsafeDetail: PropertyUnsafeDetail): Promise<void> {\n        return this._jobService.getJob(jobId).then(job => {\n            if (job) {\n                if (!job.propertySafety.propertyGasSafetyDetail) {\n                    job.propertySafety.propertyGasSafetyDetail = new PropertyGasSafetyDetailBusinessModel();\n                }\n\n                if (!job.propertySafety.propertyUnsafeDetail) {\n                    job.propertySafety.propertyUnsafeDetail = new PropertyUnsafeDetail();\n                }\n                Object.assign(job.propertySafety.propertyGasSafetyDetail, safetyDetail);\n                Object.assign(job.propertySafety.propertyUnsafeDetail, unsafeDetail);\n                return this._jobService.setJob(job)\n                    .catch(() => {\n                        throw new BusinessException(this, \"saveGasSafetyDetails\", \"error saving property gas safety detail\", null, null);\n                    });\n            } else {\n                throw new BusinessException(this, \"saveGasSafetyDetails\", \"no current job selected\", null, null);\n            }\n        });\n    }\n\n    public saveElectricalSafetyDetails(jobId: string,\n                                       safetyDetail: PropertyElectricalSafetyDetail,\n                                       unsafeDetail: PropertyUnsafeDetail): Promise<void> {\n        return this._jobService.getJob(jobId).then(job => {\n            if (job) {\n                if (!job.propertySafety.propertyElectricalSafetyDetail) {\n                    job.propertySafety.propertyElectricalSafetyDetail = new PropertyElectricalSafetyDetail();\n                }\n                Object.assign(job.propertySafety.propertyElectricalSafetyDetail, safetyDetail);\n                if (!job.propertySafety.propertyUnsafeDetail) {\n                    job.propertySafety.propertyUnsafeDetail = new PropertyUnsafeDetail();\n                }\n                Object.assign(job.propertySafety.propertyUnsafeDetail, unsafeDetail);\n\n                return this._dataStateManager.updateAppliancesDataState(job)\n                    .then(() => this._jobService.setJob(job))\n                    .catch(() => {\n                        throw new BusinessException(this, \"saveElectricalSafetyDetails\", \"error saving electrical safety detail\", null, null);\n                    });\n            } else {\n                throw new BusinessException(this, \"saveElectricalSafetyDetails\", \"no current job selected\", null, null);\n            }\n        });\n    }\n\n    public populateGasUnsafeReasons(pressureDrop: number,\n                                    gasMeterInstallationSatisfactorySelected: string,\n                                    pressureDropThreshold: number,\n                                    installationSatisfactoryNoType: string,\n                                    installationSatisfactoryNoMeterType: string): Promise<UnsafeReason[]> {\n\n        return this.loadBusinessRules()\n            .then(() => {\n                let reasons: UnsafeReason[] = [];\n\n                if (pressureDrop && pressureDrop > pressureDropThreshold) {\n                    reasons.push(this.createUnsafeReason(\"pressureDropGreater8\", [pressureDropThreshold]));\n                } else if (pressureDrop && pressureDrop < pressureDropThreshold) {\n                    reasons.push(this.createUnsafeReason(\"pressureDropLess8\", [pressureDropThreshold], false));\n                }\n\n                if (gasMeterInstallationSatisfactorySelected\n                    && ((gasMeterInstallationSatisfactorySelected === installationSatisfactoryNoType)\n                    || (gasMeterInstallationSatisfactorySelected === installationSatisfactoryNoMeterType))) {\n                    reasons.push(this.createUnsafeReason(\"gasMeterInstallation\", []));\n                }\n                return reasons;\n            });\n    }\n\n    public populateElectricalUnsafeReasons(safetyDetail: PropertyElectricalSafetyDetail,\n                                           unableToCheckSystemType: string,\n                                           ttSystemType: string,\n                                           rcdPresentThreshold: number,\n                                           safeInTopsThreshold: number): Promise<UnsafeReason[]> {\n\n        return this.loadBusinessRules()\n            .then(() => {\n                let reasons: UnsafeReason[] = [];\n\n                if (safetyDetail) {\n                    if (safetyDetail.consumerUnitSatisfactory === false) {\n                        reasons.push(this.createUnsafeReason(\"consumerUnit\", []));\n                    }\n\n                    if (safetyDetail.systemType === unableToCheckSystemType) {\n                        reasons.push(this.createUnsafeReason(\"systemType\", []));\n                    }\n\n                    if (safetyDetail.noEliReadings && safetyDetail.noEliReadings === true) {\n                        reasons.push(this.createUnsafeReason(\"noElectricalEliReading\", []));\n                    } else {\n                        if (safetyDetail.systemType === ttSystemType) {\n                            if (safetyDetail.rcdPresent !== undefined) {\n                                if (safetyDetail.rcdPresent === \"Y\") {\n                                    if (safetyDetail.eliReading > rcdPresentThreshold) {\n                                        reasons.push(this.createUnsafeReason(\"rcdGreater200\", []));\n                                    }\n                                } else {\n                                    reasons.push(this.createUnsafeReason(\"rcdNotPresent\", []));\n                                }\n                            }\n                        } else {\n                            if (safetyDetail.eliReading > safeInTopsThreshold && safetyDetail.eliSafeAccordingToTops === false) {\n                                reasons.push(this.createUnsafeReason(\"topsReadingSafe\", []));\n                            }\n                        }\n                    }\n                }\n\n                return reasons;\n            });\n    }\n\n    private createUnsafeReason(lookupId: string, params: any[], isMandatory: boolean = true): UnsafeReason {\n        return new UnsafeReason(lookupId, this._businessRules.getBusinessRule<string>(lookupId), params, isMandatory);\n    }\n\n    private loadBusinessRules(): Promise<void> {\n        return this._businessRules ? Promise.resolve() : this._businessRuleService.getQueryableRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this)))\n            .then((group) => {\n                this._businessRules = group;\n            });\n    }\n}\n"],"sourceRoot":"../../.."}