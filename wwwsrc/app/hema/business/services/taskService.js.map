{"version":3,"sources":["hema/business/services/taskService.ts"],"names":[],"mappings":"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","file":"taskService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport { inject } from \"aurelia-framework\";\nimport { ITaskService } from \"./interfaces/ITaskService\";\nimport { IJobService } from \"./interfaces/IJobService\";\nimport { JobService } from \"./jobService\";\nimport { Task as TaskBusinessModel } from \"../models/task\";\nimport { BusinessException } from \"../models/businessException\";\nimport { IBusinessRuleService } from \"../services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../services/businessRuleService\";\nimport { Job } from \"../models/job\";\nimport { QueryableBusinessRuleGroup } from \"../models/businessRules/queryableBusinessRuleGroup\";\nimport { TaskBusinessRuleHelper } from \"../models/businessRules/taskBusinessRuleHelper\";\nimport { DataStateManager } from \"../../common/dataStateManager\";\nimport { IDataStateManager } from \"../../common/IDataStateManager\";\nimport { PartService } from \"./partService\";\nimport { IPartService } from \"./interfaces/IPartService\";\nimport { TaskSummaryViewModel } from \"../../presentation/models/taskSummaryViewModel\";\nimport { PropertySafetyType } from \"../models/propertySafetyType\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { UiConstants } from \"../../../common/ui/elements/constants/uiConstants\";\nimport { IToastItem } from \"../../../common/ui/elements/models/IToastItem\";\nimport { Guid } from \"../../../common/core/guid\";\nimport * as moment from \"moment\";\n\n@inject(JobService, BusinessRuleService, DataStateManager, PartService, EventAggregator)\nexport class TaskService implements ITaskService {\n\n    private _jobService: IJobService;\n    private _partService: IPartService;\n    private _businessRulesService: IBusinessRuleService;\n    private _dataStateManager: IDataStateManager;\n    private _eventAggregator: EventAggregator;\n\n    constructor(jobService: IJobService, businessRulesService: IBusinessRuleService,\n        dataStateManager: IDataStateManager,\n        partService: IPartService,\n        eventAggregator: EventAggregator) {\n        this._jobService = jobService;\n        this._businessRulesService = businessRulesService;\n        this._dataStateManager = dataStateManager;\n        this._partService = partService;\n        this._eventAggregator = eventAggregator;\n    }\n\n    public getTasks(jobId: string): Promise<TaskBusinessModel[]> {\n        return this._jobService.getJob(jobId)\n            .then(job => {\n                return job.tasks;\n            })\n            .catch(ex => {\n                throw new BusinessException(this, \"activities\", \"could not get activities\", null, ex);\n            });\n    }\n\n    public getTasksAndCompletedTasks(jobId: string): Promise<TaskBusinessModel[]> {\n        return this._jobService.getJob(jobId)\n            .then(job => {\n                return Job.getTasksAndCompletedTasks(job);\n            })\n            .catch(ex => {\n                throw new BusinessException(this, \"activities\", \"could not get all activities\", null, ex);\n            });\n    }\n\n    public getAllTasksEverAtProperty(jobId: string): Promise<TaskBusinessModel[]> {\n        return this._jobService.getJob(jobId)\n            .then(job => {\n                return Job.getTasksAndCompletedTasks(job).concat(job.history.tasks || []);\n            })\n            .catch(ex => {\n                throw new BusinessException(this, \"activities\", \"could not get activities\", null, ex);\n            });\n    }\n\n    public getTaskItem(jobId: string, taskId: string): Promise<TaskBusinessModel> {\n        return this.getTasksAndCompletedTasks(jobId)\n            .then(tasks => tasks.find(t => t.id === taskId))\n            .catch(ex => {\n                throw new BusinessException(this, \"activities\", \"could not get activity\", null, ex);\n            });\n\n    }\n\n    public updateTaskAppliance(jobId: string, taskId: string, applianceType: string, newApplianceId: string, actionType: string, chargeType: string): Promise<TaskBusinessModel> {\n        return this._jobService.getJob(jobId).then((job) => {\n            if (job) {\n                let currentTask = job.tasks.find(x => x.id === taskId);\n                if (currentTask) {\n                    return this._businessRulesService.getQueryableRuleGroup(\"chargeService\")\n                        .then((ruleGroup: QueryableBusinessRuleGroup) => TaskBusinessModel.isChargeableTask(chargeType, ruleGroup.getBusinessRule<string>(\"noChargePrefix\")))\n                        .then((isChargeableTask: boolean) => {\n                            currentTask.applianceType = applianceType;\n                            currentTask.applianceId = newApplianceId;\n                            currentTask.jobType = actionType;\n                            currentTask.chargeType = chargeType;\n                            currentTask.isCharge = isChargeableTask;\n                            this.checkLandlordJob(job);\n                            return this._dataStateManager.updateAppliancesDataState(job)\n                                .then(() => this._dataStateManager.updatePropertySafetyDataState(job))\n                                .then(() => this._jobService.setJob(job))\n                                .then(() => currentTask)\n                                .catch((err) => { throw new BusinessException(this, \"updateTask\", \"error saving task detail\", null, err); });\n                        });\n                }\n                throw new BusinessException(this, \"updateTaskAppliance\", \"no current task found\", null, null);\n            }\n            throw new BusinessException(this, \"updateTaskAppliance\", \"no current job selected\", null, null);\n        });\n    }\n\n    public async deleteTask(jobId: string, taskId: string): Promise<void> {\n\n        const job = await this._jobService.getJob(jobId);\n            if (job) {\n                let currentTaskIndex = job.tasks.findIndex(task => task.id === taskId);\n                if (currentTaskIndex !== -1) {\n                    try {\n                        // todo: tidy up\n                    const deletedTasksArray = job.tasks.splice(currentTaskIndex, 1);\n                    const deletedTask = deletedTasksArray[0];\n                    await this.removeTaskFromTimeLine(deletedTask, job);\n\n                        await this.populateAppointment(job);\n                        await this._dataStateManager.updateAppliancesDataState(job);\n                        this._dataStateManager.updatePropertySafetyDataState(job);\n                        await this._partService.deletePartsAssociatedWithTask(jobId, taskId);\n                        await this._jobService.setJobNoAccessed(job);\n                        await this._jobService.setJob(job);\n                    } catch (error) {\n                        throw new BusinessException(this, \"deleteTask\", \"error saving task detail\", null, error);\n                    }\n                } else {\n                    throw new BusinessException(this, \"deleteTask\", \"no current task found\", null, null);\n                }\n            } else {\n                throw new BusinessException(this, \"deleteTask\", \"no current job selected\", null, null);\n        }\n    }\n\n    public async createTask(jobId: string, newTask: TaskBusinessModel): Promise<void> {\n\n        const job = await this._jobService.getJob(jobId);\n        if (job) {\n            job.tasks = job.tasks || [];\n            const maxExistingOrderNo = Math.max(...job.tasks.map(task => task.orderNo || 0));\n            newTask.orderNo = maxExistingOrderNo + 1;\n\n            const ruleGroup = await this._businessRulesService.getRuleGroup(\"taskItem\");\n            const liveTasks = job.tasks.filter(task => !TaskBusinessRuleHelper.isNotDoingTaskStatus(ruleGroup, task.status));\n\n            const previousLiveTask = liveTasks[liveTasks.length - 1];\n            newTask.startTime = previousLiveTask\n                ? previousLiveTask.endTime\n                : moment(job.onsiteTime).format(\"HH:mm\");\n\n            newTask.endTime = moment(newTask.startTime, \"HH:mm\")\n                .add(ruleGroup.intervalInMinutes, \"minutes\") // todo: business rule\n                .format(\"HH:mm\");\n\n            job.tasks.push(newTask);\n            this.updateAdvise(job, job.tasks[0]);\n            return this._jobService.setJobNoAccessed(job)\n                .then(() => this._dataStateManager.updatePropertySafetyDataState(job))\n                .then(() => this._jobService.setJob(job))\n                .catch((err) => {\n                    throw new BusinessException(this, \"createTask\", \"error creating task\", null, err);\n                });\n        } else {\n            throw new BusinessException(this, \"createTask\", \"no current job selected\", null, null);\n        }\n    }\n\n    public async updateTaskTimes(jobId: string, taskTimes: TaskSummaryViewModel[]): Promise<void> {\n        let job = await this._jobService.getJob(jobId);\n        if (job) {\n            job.tasks.forEach(task => {\n                const time = taskTimes.find(x => x.id === task.id);\n                if (time) {\n                    task.startTime = time.startTime;\n                    task.endTime = time.endTime;\n                    task.workDuration = time.workDuration;\n                    task.chargeableTime = time.chargeableTime;\n                }\n            });\n            await this._jobService.setJob(job);\n        } else {\n            throw new BusinessException(this, \"updateTaskTimes\", \"no current job selected\", null, null);\n        }\n    }\n\n    public async saveTask(jobId: string, updatedTask: TaskBusinessModel): Promise<void> {\n        const job = await this._jobService.getJob(jobId);\n        if (!job) {\n            throw new BusinessException(this, \"saveTask\", \"no current job selected\", null, null);\n        }\n        let task = job.tasks.find(x => x.id === updatedTask.id);\n        task.report = updatedTask.report;\n        task.chirpCodes = updatedTask.chirpCodes;\n        task.workedOnCode = updatedTask.workedOnCode;\n        task.activity = updatedTask.activity;\n        task.productGroup = updatedTask.productGroup;\n        task.partType = updatedTask.partType;\n        task.faultActionCode = updatedTask.faultActionCode;\n\n        task.endTime = updatedTask.endTime;\n        task.startTime = updatedTask.startTime;\n        task.workDuration = updatedTask.workDuration;\n        task.chargeableTime = updatedTask.chargeableTime;\n\n        task.dataState = updatedTask.dataState;\n        task.isPartLJReportable = updatedTask.isPartLJReportable;\n\n        const taskItemRules = await this._businessRulesService.getRuleGroup(\"taskItem\");\n        const previouslyIsLive = !TaskBusinessRuleHelper.isNotDoingTaskStatus(taskItemRules, task.status);\n        const currentlyIsLive = !TaskBusinessRuleHelper.isNotDoingTaskStatus(taskItemRules, updatedTask.status);\n        \n        task.status = updatedTask.status;\n        task.isFirstVisit = updatedTask.isFirstVisit;\n        task.showMainPartSelectedWithInvalidActivityTypeMessage = updatedTask.showMainPartSelectedWithInvalidActivityTypeMessage;\n        task.showMainPartSelectedWithInvalidProductGroupTypeMessage = updatedTask.showMainPartSelectedWithInvalidProductGroupTypeMessage;\n        task.showMainPartSelectedWithInvalidPartTypeMessage = updatedTask.showMainPartSelectedWithInvalidPartTypeMessage;\n        task.hasMainPart = updatedTask.hasMainPart;\n        task.mainPartPartType = updatedTask.mainPartPartType;\n        this.updateAdvise(job, updatedTask);\n        try {\n\n            // only one task can actively noAccess a job\n            task.isTaskThatSetsJobAsNoAccessed = !job.tasks.some(t => t.id !== updatedTask.id && t.isTaskThatSetsJobAsNoAccessed)\n                && TaskBusinessRuleHelper.isNotDoingJobStatus(taskItemRules, updatedTask.status);\n            task.isNotDoingTask = !currentlyIsLive;\n            await this._jobService.setJobNoAccessed(job);            \n\n            if (previouslyIsLive && !currentlyIsLive) {\n                await this.removeTaskFromTimeLine(task, job);\n            } else if (!previouslyIsLive && currentlyIsLive || task.isTaskThatSetsJobAsNoAccessed) {\n                await this.rebuildTaskTimes(job);\n            }\n\n            this.checkLandlordJob(job);\n\n            await this.populateAppointment(job);\n            await this._dataStateManager.updateAppliancesDataState(job);\n            this._dataStateManager.updatePropertySafetyDataState(job);            \n            await this._jobService.setJob(job);\n        } catch (error) {\n            throw new BusinessException(this, \"saveTask\", \"error saving task detail\", null, error);\n        }\n    }\n\n    public async buildReinstatedTaskTimes(\n        currentTask: { startTime: string, endTime: string, orderNo: number, workDuration: number, chargeableTime: number},\n        jobId: string): Promise<{ startTime: string, endTime: string, workDuration: number, chargeableTime: number}> {\n\n        const job = await this._jobService.getJob(jobId); // todo: can this be safely got from this.viewModel.job instead?\n        const ruleGroup = await this._businessRulesService.getRuleGroup(\"taskItem\");\n        const liveTasks = job.tasks.filter(task => !TaskBusinessRuleHelper.isNotDoingTaskStatus(ruleGroup, task.status));\n\n        const previousSiblings = liveTasks.filter(liveTask => liveTask.orderNo < currentTask.orderNo);\n        const subsequentSiblings = liveTasks.filter(liveTask => liveTask.orderNo > currentTask.orderNo);\n\n        const previousSibling = previousSiblings[previousSiblings.length - 1];\n        const subsequentSibling = subsequentSiblings[0];\n\n        const startTime = previousSibling\n            ? previousSibling.endTime\n            : subsequentSibling\n                ? subsequentSibling.startTime\n                : moment(job.onsiteTime).format(\"HH:mm\");\n\n        return {\n            startTime,\n            endTime: this.addMinutes(startTime, 1),\n            workDuration: 1,\n            chargeableTime: 1\n        };\n    }\n\n    // todo: refator signature\n    public async rebuildTaskTimes(job: Job): Promise<void> {\n        const ruleGroup = await this._businessRulesService.getRuleGroup(\"taskItem\");\n        const liveTasks = job.tasks.filter(task => !TaskBusinessRuleHelper.isNotDoingTaskStatus(ruleGroup, task.status));\n\n        liveTasks.forEach((task, index, tasks) => {\n            task.startTime = tasks[index - 1] && tasks[index - 1].endTime || moment(job.onsiteTime).format(\"HH:mm\");\n            task.endTime = this.addMinutes(task.startTime, task.workDuration || 1);\n        });\n    }\n\n    private async removeTaskFromTimeLine(removedTask: TaskBusinessModel, job: Job): Promise<void> {\n        const ruleGroup = await this._businessRulesService.getRuleGroup(\"taskItem\");\n        const otherLiveSiblings = job.tasks\n            .filter(task => task.id !== removedTask.id\n                            && !TaskBusinessRuleHelper.isNotDoingTaskStatus(ruleGroup, task.status));\n\n        const laterSiblings = otherLiveSiblings.filter(liveTask => liveTask.orderNo > removedTask.orderNo);\n\n        laterSiblings.forEach(laterSibling => {\n            laterSibling.startTime = this.addMinutes(laterSibling.startTime, -1 * removedTask.workDuration);\n            laterSibling.endTime = this.addMinutes(laterSibling.endTime, -1 * removedTask.workDuration);\n        });\n\n        // todo: difficult to use undefined for time values that are bound to timeRangePicker because that will default the times to 00:00\n        //  by the time the user leaves the page\n        removedTask.startTime = \"00:00\";\n        removedTask.endTime = \"00:00\";\n        removedTask.workDuration = 0;\n        removedTask.chargeableTime = 0;\n\n        // edge case: for the slider to remain sane, we must have at least one minute on a multi-visit job.\n        //  for this edge case to kick in we must be deleting/XBing the only task on the job which has minutes,\n        //  and all the others have to have 0 at the time of deleting\n        if (otherLiveSiblings.length && otherLiveSiblings.every(sibling => !sibling.workDuration)) {\n            const adjustedSibling = otherLiveSiblings[otherLiveSiblings.length - 1]; // pick the final task\n            adjustedSibling.workDuration = 1;\n            adjustedSibling.chargeableTime = 1;\n            adjustedSibling.endTime = this.addMinutes(adjustedSibling.endTime, 1);\n        }\n    }\n\n    private addMinutes(time: string, minutesToAdd: number): string {\n        // todo: centralise this somewhere else in one of the helpers\n        return moment(time, \"HH:mm\")\n            .add(minutesToAdd, \"minutes\")\n            .format(\"HH:mm\");\n    }\n\n    private checkLandlordJob(job: Job): void {\n        if (job.isLandlordJob && !Job.isLandlordJob(job)) {\n            // we are transitioning out of a landlord job\n\n            job.isLandlordJob = false;\n\n            // only if there remains a task that is to be done do we alert the user, i.e. if we only have one\n            //  task and that is the landlord task, and the user is cancelling that task, then the job is over\n            //  so no point notifying\n            if (job.tasks.some(task => !task.isNotDoingTask)) {\n                this._eventAggregator.publish(UiConstants.TOAST_ADDED, <IToastItem>{\n                    id: Guid.newGuid(),\n                    title: \"Landlord Job\",\n                    style: \"warning\",\n                    content: `Job ${job.id} is NO LONGER a landlord inspection job.`,\n                    dismissTime: 0\n                });\n            }\n\n        } else if (job.wasOriginallyLandlordJob && !job.isLandlordJob && Job.isLandlordJob(job)) {\n            // we are transitioning in to a landlord job\n            // edge case: gasMeterInstallationSatisfactory = \"N/A\" is not valid for landlord jobs\n            if (job.propertySafetyType === PropertySafetyType.gas\n                && job.propertySafety\n                && job.propertySafety.propertyGasSafetyDetail\n                && job.propertySafety.propertyGasSafetyDetail.gasMeterInstallationSatisfactory === \"N/A\") {\n                    job.propertySafety.propertyGasSafetyDetail.gasMeterInstallationSatisfactory = undefined;\n            }\n\n            job.isLandlordJob = true;\n\n            this._eventAggregator.publish(UiConstants.TOAST_ADDED, <IToastItem>{\n                id: Guid.newGuid(),\n                title: \"Landlord Job\",\n                style: \"warning\",\n                content: `Job ${job.id} has been reinstated as a landlord inspection job.`,\n                dismissTime: 0\n            });\n\n        }\n    }\n\n    private updateAdvise(job: Job, task: TaskBusinessModel): void {\n        // customer advise on both tasks needs to be replicated.\n        // ref: DF_916\n        job.tasks.map(t => {\n            t.adviceCode = task.adviceCode;\n            t.adviceComment = task.adviceComment;\n            t.adviceOutcome = task.adviceOutcome;\n        });\n    }\n\n    private populateAppointment(job: Job): Promise<void> {\n        return Promise.all<QueryableBusinessRuleGroup, QueryableBusinessRuleGroup>([\n            this._businessRulesService.getQueryableRuleGroup(\"taskItem\"),\n            this._businessRulesService.getQueryableRuleGroup(\"appointmentBooking\")\n        ])\n            .then(([taskItemRuleGroup, appointmentBookingRuleGroup]) => {\n                let appointmentAllowedActivityStatus = appointmentBookingRuleGroup.getBusinessRule<string>(\"appointmentAllowedActivityStatus\").split(\",\");\n                // defect DF-1372\n                if (job.appointment) {\n                    let appointmentRequired = job.tasks.some(task => appointmentAllowedActivityStatus.some(status => task.status === status));\n\n                    if (!appointmentRequired) {\n                        job.appointment = undefined;\n                    } else {\n                        // remove all completed, cancelled or deleted tasks\n                        let deletedTaskIds = job.appointment.estimatedDurationOfAppointment\n                            .filter(e => !job.tasks.some(t => t.id === e.taskId))\n                            .map(e => e.taskId);\n\n                        let completedOrCancelledActivityStatuses = taskItemRuleGroup.getBusinessRule<string>(\"completedOrCancelledActivityStatuses\").split(\",\");\n                        let completedOrCancelledTaskIds = job.tasks\n                            .filter(task => completedOrCancelledActivityStatuses.some(status => task.status === status))\n                            .map(task => task.id);\n\n                        deletedTaskIds.concat(completedOrCancelledTaskIds).forEach(taskIdToRemove => {\n                            let taskAppointmentIndex = job.appointment.estimatedDurationOfAppointment.findIndex(a => a.taskId === taskIdToRemove);\n                            if (taskAppointmentIndex >= 0) {\n                                job.appointment.estimatedDurationOfAppointment.splice(taskAppointmentIndex, 1);\n                            }\n                        });\n                    }\n                }\n            });\n    }\n}\n"],"sourceRoot":"../../.."}