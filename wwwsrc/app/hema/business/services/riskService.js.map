{"version":3,"sources":["hema/business/services/riskService.ts"],"names":[],"mappings":"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","file":"riskService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\nimport {inject} from \"aurelia-framework\";\n\nimport {IRiskService} from \"./interfaces/IRiskService\";\nimport {IJobService} from \"./interfaces/IJobService\";\nimport {JobService} from \"./jobService\";\nimport {Risk as RiskBusinessModel} from \"../models/risk\";\nimport {BusinessException} from \"../models/businessException\";\nimport {Guid} from \"../../../common/core/guid\";\nimport {ApplianceService} from \"./applianceService\";\nimport {DateHelper} from \"../../../hema/core/dateHelper\";\nimport { DataState } from \"../models/dataState\";\n\n@inject(JobService, ApplianceService)\nexport class RiskService implements IRiskService {\n    private _jobService: IJobService;\n\n    constructor(jobService: IJobService) {\n        this._jobService = jobService;\n    }\n\n    public getRisks(jobId: string): Promise<RiskBusinessModel[]> {\n        return this._jobService.getJob(jobId).then(job => {\n            return job.risks;\n        }).catch(ex => {\n            throw new BusinessException(this, \"risks\", \"could not get risks\", null, ex);\n        });\n    }\n\n    public getRisk(jobId: string, riskId: string): Promise<RiskBusinessModel> {\n        return this._jobService.getJob(jobId).then(job => {\n            if (job) {\n                let idx = (job.risks || []).findIndex(r => r.id === riskId);\n                if (idx >= 0) {\n                    return job.risks[idx];\n                } else {\n                    throw new BusinessException(this, \"risks\", \"risk does not exist '{0}' for job '{1}'\", [riskId, jobId], null);\n                }\n            } else {\n                throw new BusinessException(this, \"risks\", \"no current job selected '{0}'\", [jobId], null);\n            }\n        });\n    }\n\n    public updateRisk(jobId: string, risk: RiskBusinessModel): Promise<void> {\n        return this._jobService.getJob(jobId).then(job => {\n            if (job) {\n                let idx = (job.risks || []).findIndex(r => r.id === risk.id);\n                if (idx >= 0) {\n                    risk.isUpdated = true;\n                    job.risks[idx] = risk;\n                    return this._jobService.setJob(job);\n                } else {\n                    throw new BusinessException(this, \"risks\", \"risk does not exist to update '{0}' for job '{1}'\", [risk.id, jobId], null);\n                }\n            } else {\n                throw new BusinessException(this, \"risks\", \"no current job selected '{0}'\", [jobId], null);\n            }\n        });\n    }\n\n    public addRisk(jobId: string, risk: RiskBusinessModel): Promise<string> {\n        return this._jobService.getJob(jobId).then(job => {\n            if (job) {\n                if (!job.risks) {\n                    job.risks = [];\n                }\n                risk.id = Guid.newGuid();\n                /* allocate todays date for a new risk */\n                risk.date = DateHelper.getTodaysDate();\n                risk.isCreated = true;\n                job.risks.push(risk);\n                return this._jobService.setJob(job).then(() => risk.id);\n            } else {\n                throw new BusinessException(this, \"risks\", \"no current job selected '{0}'\", [jobId], null);\n            }\n        });\n    }\n\n    public deleteRisk(jobId: string, riskId: string): Promise<void> {\n        return this._jobService.getJob(jobId).then(job => {\n            if (job) {\n                let idx = (job.risks || []).findIndex(r => r.id === riskId);\n                if (idx >= 0) {\n\n                    let removedRisk = job.risks.splice(idx, 1).pop();\n                    if (removedRisk && !removedRisk.isCreated) {\n                        removedRisk.isDeleted = true;\n                        removedRisk.dataState = DataState.dontCare;\n                        job.deletedRisks = job.deletedRisks || [];\n                        job.deletedRisks.push(removedRisk);\n                    }\n\n                    return this._jobService.setJob(job);\n                } else {\n                    throw new BusinessException(this, \"risks\", \"risk does not exist to delete '{0}' for job '{1}'\", [riskId, jobId], null);\n                }\n            } else {\n                throw new BusinessException(this, \"risks\", \"no current job selected '{0}'\", [jobId], null);\n            }\n        });\n    }\n}\n"],"sourceRoot":"../../.."}