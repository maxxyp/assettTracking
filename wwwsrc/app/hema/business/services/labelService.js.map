{"version":3,"sources":["hema/business/services/labelService.ts"],"names":[],"mappings":";;;;;;;;;;;;IAYA;QAKI,sBAAY,cAA+B,EAAE,oBAA2C;YACpF,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACrD,CAAC;QAEM,+BAAQ,GAAf,UAAgB,QAAgB;YAAhC,iBAMC;YALG,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC;gBAC1B,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;oBACvC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBAClD,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,4CAAqB,GAA5B,UAA6B,QAAgB;YACzC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpC,CAAC;QAEO,gCAAS,GAAjB,UAAkB,QAAgB;YAAlC,iBAgBC;YAfG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC;iBAC1C,IAAI,CAAC,UAAC,IAAc;gBACjB,IAAI,MAAM,GAA4B,EAAE,CAAC;gBACzC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACP,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;wBACV,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;oBAC3B,CAAC,CAAC,CAAC;gBACP,CAAC;gBACD,MAAM,CAAC,MAAM,CAAC;YAClB,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,GAAG;gBACP,IAAI,SAAS,GAAG,IAAI,qCAAiB,CAAC,KAAI,EAAE,UAAU,EAAE,6BAA6B,EAAE,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC;gBACxG,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACzC,MAAK,CAAC,SAAS,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QACX,CAAC;QAEO,iCAAU,GAAlB;YAAA,iBAOC;YANG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;qBACnB,IAAI,CAAC,UAAC,MAAM;oBACT,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;oBACtB,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC;gBACxB,CAAC,CAAC,CAAC;QACf,CAAC;QA/CQ,YAAY;YADxB,0BAAM,CAAC,+BAAc,EAAE,2CAAoB,CAAC;;WAChC,YAAY,CAgDxB;QAAD,mBAAC;KAhDD,AAgDC,IAAA;IAhDY,oCAAY","file":"labelService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\nimport * as Logging from \"aurelia-logging\";\nimport {ILabelService} from \"./interfaces/ILabelService\";\nimport {inject} from \"aurelia-framework\";\nimport {CatalogService} from \"./catalogService\";\nimport {ICatalogService} from \"./interfaces/ICatalogService\";\nimport {BusinessException} from \"../models/businessException\";\nimport {ConfigurationService} from \"../../../common/core/services/configurationService\";\nimport {IConfigurationService} from \"../../../common/core/services/IConfigurationService\";\nimport {ILabel} from \"../models/reference/ILabel\";\n\n@inject(CatalogService, ConfigurationService)\nexport class LabelService implements ILabelService {\n    private _catalogService: ICatalogService;\n    private _common: { [key: string]: string};\n    private _logger: Logging.Logger;\n\n    constructor(catalogService: ICatalogService, configurationService: IConfigurationService) {\n        this._catalogService = catalogService;\n        this._logger = Logging.getLogger(\"LabelService\");\n    }\n\n    public getGroup(groupKey: string): Promise<{ [key: string]: string}> {\n        return this.loadCommon().then(() => {\n            return this.loadGroup(groupKey).then((group) => {\n                return Object.assign({}, this._common, group);\n            });\n        });\n    }\n\n    public getGroupWithoutCommon(groupKey: string): Promise<{ [key: string]: string}> {\n        return this.loadGroup(groupKey);\n    }\n\n    private loadGroup(groupKey: string): Promise<{ [key: string]: string}> {\n        return this._catalogService.getLabels(groupKey)\n            .then((data: ILabel[]) => {\n                let labels: {[key: string]: string} = {};\n                if (data) {\n                    data.forEach(l => {\n                        labels[l.id] = l.label;\n                    });\n                }\n                return labels;\n            })\n            .catch((exc) => {\n                let exception = new BusinessException(this, \"getGroup\", \"Getting group for key '{0}'\", [groupKey], exc);\n                this._logger.error(exception.toString());\n                throw(exception);\n            });\n    }\n\n    private loadCommon(): Promise<{ [key: string]: string}> {\n        return this._common ? Promise.resolve(this._common) :\n            this.loadGroup(\"common\")\n                .then((common) => {\n                    this._common = common;\n                    return this._common;\n                });\n    }\n}\n"],"sourceRoot":"../../.."}