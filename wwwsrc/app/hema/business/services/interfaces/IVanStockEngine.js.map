{"version":3,"sources":["hema/business/services/interfaces/IVanStockEngine.ts"],"names":[],"mappings":"","file":"IVanStockEngine.js","sourcesContent":["\nimport { MaterialWithQuantities } from \"../../models/materialWithQuantities\";\nimport { MaterialSearchResult } from \"../../models/materialSearchResult\";\nimport { MaterialRequest } from \"../../models/materialRequest\";\nimport { Material } from \"../../models/material\";\nimport { MaterialCollection } from \"../../models/materialCollection\";\nimport { MaterialHighValueTool } from \"../../models/materialHighValueTool\";\nimport { MaterialToCollect } from \"../../models/materialToCollect\";\nimport { Guid } from \"../../../../common/core/guid\";\nimport { VanStockStatus } from \"../../vanStockStatus\";\n\nexport interface IVanStockEngine {\n    initialise(engineerId: string): Promise<void>;\n    getBindableVanStockStatusFlag(): VanStockStatus;\n\n    getHighValueToolList(): Promise<MaterialHighValueTool[]>;\n    getLocalMaterial(): MaterialWithQuantities[];\n    getBindableMaterialSearchResult(stockReferenceId: string, forceOnlineRefresh?: boolean): MaterialSearchResult;\n\n    getPartsToCollect(): Promise<{toCollect: MaterialToCollect[], collected: MaterialCollection[], expectedReturns: Material[]}>;\n    getMaterialRequests(): Promise<{\n        inboundMaterials: MaterialRequest[],\n        outboundMaterials: MaterialRequest[]\n    }>;\n    getReturns(): Promise<Material[]>;\n    registerMaterialRequestReads(arg: { requestIds: (number | Guid)[] }): Promise<void>;\n    registerMaterialZoneUpdate(arg: { stockReferenceId: string, area: string }): Promise<void>;\n    registerMaterialCollection ( arg: { dispatchId: number, quantityCollected: number }): Promise<void>;\n    registerMaterialReturn  ( arg: { stockReferenceId: string, quantityReturned: number, reason: string, jobId?: string }): Promise<void>;\n    registerMaterialConsumption( arg: { stockReferenceId: string, quantityConsumed: number, jobId?: string}): Promise<void>;\n\n    registerMaterialRequest ( arg: {\n        stockReferenceId: string,\n        description: string,\n        quantityRequested: number,\n        engineerId: string,\n        engineerName: string,\n        engineerPhone: string,\n        owner: string }\n        ): Promise<number | Guid>;\n    registerMaterialRequestWithdrawl ( arg: { requestId: number | Guid }): Promise<void>;\n    registerMaterialTransfer( arg: { requestId: number | Guid }): Promise<void>;\n}\n"],"sourceRoot":"../../../.."}