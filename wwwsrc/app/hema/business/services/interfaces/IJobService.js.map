{"version":3,"sources":["hema/business/services/interfaces/IJobService.ts"],"names":[],"mappings":"","file":"IJobService.js","sourcesContent":["import { Job } from \"../../models/job\";\nimport { JobState } from \"../../models/jobState\";\nimport { State } from \"../stateMachine/state\";\nimport { DataStateSummary } from \"../../models/dataStateSummary\";\nimport { JobApiFailure } from \"../../models/jobApiFailure\";\nimport { JobPartsCollection } from \"../../models/jobPartsCollection\";\n\nexport interface IJobService {\n    getJobsToDo(): Promise<Job[]>;\n\n    getWorkListJobApiFailures(): Promise<JobApiFailure[]>;\n\n    getPartsCollections(): Promise<JobPartsCollection[]>;\n\n    completePartsCollections(): Promise<void>;\n\n    getJob(id: string): Promise<Job>;\n\n    setJob(job: Job): Promise<void>;\n\n    getActiveJobId(): Promise<string>;\n\n    isJobEditable(jobId: string): Promise<boolean>;\n\n    areAllJobsDone(): Promise<boolean>;\n\n    getJobState(jobId: string): Promise<State<JobState>>;\n\n    getJobTargetStates(jobId: string): Promise<State<JobState>[]>;\n\n    setJobState(jobId: string, state: JobState): Promise<void>;\n\n    getDataStateSummary(jobId: string): Promise<DataStateSummary>;\n\n    requiresAppointment(jobId: string): Promise<boolean>;\n\n    setJobNoAccessed(job: Job): Promise<void>;\n\n    checkIfJobFinishTimeNeedsToBeUpdated(): Promise<boolean>;\n}\n"],"sourceRoot":"../../../.."}