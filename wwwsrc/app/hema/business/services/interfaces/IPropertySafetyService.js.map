{"version":3,"sources":["hema/business/services/interfaces/IPropertySafetyService.ts"],"names":[],"mappings":"","file":"IPropertySafetyService.js","sourcesContent":["import {PropertyGasSafetyDetail as PropertyGasSafetyDetailBusinessModel} from \"../../models/propertyGasSafetyDetail\";\nimport {PropertyElectricalSafetyDetail} from \"../../models/propertyElectricalSafetyDetail\";\nimport {PropertyUnsafeDetail} from \"../../models/propertyUnsafeDetail\";\nimport {UnsafeReason} from \"../../models/unsafeReason\";\nimport {PropertySafety} from \"../../models/propertySafety\";\n\nexport interface IPropertySafetyService {\n    getPropertySafetyDetails(jobId: string): Promise<PropertySafety>;\n    saveGasSafetyDetails(jobId: string,\n                         safetyDetail: PropertyGasSafetyDetailBusinessModel,\n                         unsafeDetail: PropertyUnsafeDetail): Promise<void>;\n\n    saveElectricalSafetyDetails(jobId: string,\n                                safetyDetail: PropertyElectricalSafetyDetail,\n                                unsafeDetail: PropertyUnsafeDetail): Promise<void>;\n\n    populateGasUnsafeReasons(pressureDrop: number,\n                             gasMeterInstallationSatisfactorySelected: string,\n                             pressureDropThreshold: number,\n                             installationSatisfactoryNoType: string,\n                             installationSatisfactoryNoMeterType: string,\n                             noEliReadings: boolean): Promise<UnsafeReason[]>;\n\n    populateElectricalUnsafeReasons(safetyDetail: PropertyElectricalSafetyDetail,\n                                    unableToCheckSystemType: string,\n                                    ttSystemType: string,\n                                    rcdPresentThreshold: number,\n                                    safeInTopsThreshold: number): Promise<UnsafeReason[]>;\n}\n"],"sourceRoot":"../../../.."}