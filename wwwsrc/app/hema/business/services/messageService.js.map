{"version":3,"sources":["hema/business/services/messageService.ts"],"names":[],"mappings":"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","file":"messageService.js","sourcesContent":["import { inject } from \"aurelia-framework\";\r\nimport { IMessageService } from \"./interfaces/IMessageService\";\r\nimport { Message } from \"../models/message\";\r\nimport { EventAggregator } from \"aurelia-event-aggregator\";\r\nimport { MessageServiceConstants } from \"./constants/messageServiceConstants\";\r\nimport { IStorageService } from \"./interfaces/IStorageService\";\r\nimport { StorageService } from \"./storageService\";\r\nimport * as moment from \"moment\";\r\nimport { IWorkListMemo } from \"../../api/models/fft/engineers/worklist/IWorkListMemo\";\r\n\r\n@inject(EventAggregator, StorageService)\r\nexport class MessageService implements IMessageService {\r\n\r\n    public unreadCount: number;\r\n    private _lastUpdated: Date;\r\n    private _eventAggregator: EventAggregator;\r\n    private _storageService: IStorageService;\r\n\r\n    constructor(eventAggregator: EventAggregator, storageService: IStorageService) {\r\n        this._eventAggregator = eventAggregator;\r\n        this._storageService = storageService;\r\n        this.unreadCount = 0;\r\n    }\r\n\r\n    public initialise(): Promise<void> {\r\n        return this.archive();\r\n    }\r\n\r\n    public getLiveMessages(): Promise<Message[]> {\r\n        return this.getMessages().filter(m => !m.deleted);\r\n    }\r\n\r\n    public updateMessages(memos: IWorkListMemo[]): Promise<void> {\r\n        // currently no duplicates allowed until unique id is resolved\r\n        if (!memos || !(memos instanceof Array)) {\r\n            return Promise.resolve();\r\n        }\r\n        return this.getMessages()\r\n            .then(messages => {\r\n                memos.forEach(memo => {\r\n                    if (this.memoShouldBeAdded(memo, messages)) {\r\n                        messages.push(new Message(memo.id, memo.memo));\r\n                    }\r\n                });\r\n                this._lastUpdated = new Date();\r\n                return messages;\r\n            })\r\n            .then(messages => this.saveMessages(messages));\r\n    }\r\n\r\n    public markAsRead(message: Message): Promise<void> {\r\n        return this.getMessages()\r\n            .then(messages => {\r\n                let storedMessage = messages.find(m => m.id === message.id);\r\n                if (storedMessage) {\r\n                    storedMessage.read = true;\r\n                }\r\n                return messages;\r\n            })\r\n            .then(messages => this.saveMessages(messages));\r\n    }\r\n\r\n    public delete(message: Message): Promise<void> {\r\n        return this.getMessages()\r\n            .then(messages => messages.filter(m => m.id !== message.id))\r\n            .then(messages => this.saveMessages(messages));\r\n    }\r\n\r\n    public deleteRead(): Promise<void> {\r\n        return this.getMessages()\r\n            .then((messages) => {\r\n                messages.forEach(m => {\r\n                    if (m.read) {\r\n                        m.deleted = true;\r\n                    }\r\n                });\r\n                return messages;\r\n            })\r\n            .then(messages => this.saveMessages(messages));\r\n    }\r\n\r\n    public lastUpdated(): Promise<Date> {\r\n        return Promise.resolve(this._lastUpdated);\r\n    }\r\n\r\n    private async getMessages(): Promise<Message[]> {\r\n        return (await this._storageService.getMessages()) || [];\r\n    }\r\n\r\n    private saveMessages(messages: Message[]): Promise<void> {\r\n        return this._storageService.setMessages(messages)\r\n            .then(() => this.updateUnreadCount())\r\n            .then(() => this._eventAggregator.publish(MessageServiceConstants.MESSAGE_SERVICE_UPDATED, this.unreadCount));\r\n    }\r\n\r\n    private archive(): Promise<void> {\r\n        return this.getMessages()\r\n            .then(messages => messages.filter(message => moment().diff(moment(message.date), \"days\") < 1))\r\n            .then(messages => this.saveMessages(messages));\r\n    }\r\n\r\n    private memoShouldBeAdded(memo: IWorkListMemo, messages: Message[]): boolean {\r\n        return (memo.id && memo.memo && memo.memo.length > 0 && !messages.find(m => m.id === memo.id));\r\n    }\r\n\r\n    private updateUnreadCount(): Promise<void> {\r\n        return this.getLiveMessages().then(messages => { this.unreadCount = messages.filter((m) => m.read === false && m.deleted === false).length; });\r\n    }\r\n}\r\n"],"sourceRoot":"../../.."}