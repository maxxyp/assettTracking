{"version":3,"sources":["hema/business/services/engineerService.ts"],"names":[],"mappings":"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","file":"engineerService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\nimport * as Logging from \"aurelia-logging\";\nimport { inject } from \"aurelia-framework\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { IEngineerService } from \"./interfaces/IEngineerService\";\nimport { FftService } from \"../../api/services/fftService\";\nimport { IFFTService } from \"../../api/services/interfaces/IFFTService\";\nimport { IStorageService } from \"./interfaces/IStorageService\";\nimport { StorageService } from \"./storageService\";\nimport { Engineer } from \"../models/engineer\";\nimport { BusinessException } from \"../models/businessException\";\nimport { IBusinessRuleService } from \"./interfaces/IBusinessRuleService\";\nimport { StringHelper } from \"../../../common/core/stringHelper\";\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\nimport { BusinessRuleService } from \"./businessRuleService\";\nimport { IEngineerStatusRequest } from \"../../api/models/fft/engineers/IEngineerStatusRequest\";\nimport { DateHelper } from \"../../core/dateHelper\";\nimport { EngineerServiceConstants } from \"./constants/engineerServiceConstants\";\nimport { CatalogService } from \"./catalogService\";\nimport { ICatalogService } from \"./interfaces/ICatalogService\";\nimport { IFieldOperativeStatus } from \"../models/reference/IFieldOperativeStatus\";\nimport { IWhoAmIAttributes } from \"../../api/models/fft/whoAmI/IWhoAmIAttributes\";\nimport { IConfigurationService } from \"../../../common/core/services/IConfigurationService\";\nimport { ConfigurationService } from \"../../../common/core/services/configurationService\";\nimport { IHemaConfiguration } from \"../../IHemaConfiguration\";\nimport { UnAuthorisedException } from \"../models/unAuthorisedException\";\nimport { WhoAmIServiceConstants } from \"./constants/whoAmIServiceConstants\";\nimport { IWhoAmI } from \"../../api/models/fft/whoAmI/IWhoAmI\";\nimport { WorkRetrievalServiceConstants } from \"./constants/workRetrievalServiceConstants\";\nimport { AnalyticsConstants } from \"../../../common/analytics/analyticsConstants\";\nimport * as moment from \"moment\";\nimport { ILabelService } from \"./interfaces/ILabelService\";\nimport { LabelService } from \"./labelService\";\nimport { Job } from \"../models/job\";\nimport { IAmIContractEngineer } from \"../../api/models/fft/engineers/IAmIContractEngineer\";\nimport { ApiException } from \"../../../common/resilience/apiException\";\nimport { NumberHelper } from \"../../core/numberHelper\";\n\nconst MAX_EMPLOYEE_ID_CHARACTERS: number = 7;\nconst EMPLOYEE_ID_PREFIX_CHARACTER: string = \"0\";\nconst { WHO_AM_I_EMPLOYEEID_ATTRIBUTE, WHO_AM_I_GIVENNAME_ATTRIBUTE, WHO_AM_I_SN_ATTRIBUTE, WHO_AM_I_TELEPHONE_NUMBER_ATTRIBUTE } = WhoAmIServiceConstants;\nconst ENGINNER_STATE_ELEMENT = \"EngineerState\";\n\n@inject(StorageService, FftService, EventAggregator, CatalogService, BusinessRuleService, ConfigurationService, LabelService)\nexport class EngineerService implements IEngineerService {\n\n    public static OBTAINING_MATS_STATUS: string = \"11\";\n    public static ENGINEER_WORKING_STATUS: string = \"internalWorking\";\n    public isPartCollectionInProgress: boolean;\n\n    private _storageService: IStorageService;\n    private _fftService: IFFTService;\n    private _eventAggregator: EventAggregator;\n    private _catalogService: ICatalogService;\n    private _businessRuleService: IBusinessRuleService;\n    private _configurationService: IConfigurationService;\n    private _labelService: ILabelService;\n\n    private _engineerStatuss: IFieldOperativeStatus[];\n\n    private _signOnId: string;\n    private _signOffId: string;\n\n    private _logger: Logging.Logger;\n\n    constructor(storageService: IStorageService,\n        fftService: IFFTService,\n        eventAggregator: EventAggregator,\n        catalogService: ICatalogService,\n        businessRulesService: IBusinessRuleService,\n        configurationService: IConfigurationService,\n        labelService: ILabelService) {\n        this._storageService = storageService;\n        this._fftService = fftService;\n        this._eventAggregator = eventAggregator;\n        this._catalogService = catalogService;\n        this._businessRuleService = businessRulesService;\n        this._configurationService = configurationService;\n        this._labelService = labelService;\n\n        this._logger = Logging.getLogger(\"EngineerService\");\n        this.isPartCollectionInProgress = false;\n    }\n\n    public async initialise(hasWhoAmISucceeded: boolean, whoAmI?: IWhoAmI): Promise<void> {\n\n        let throwUnauthorised = (message: string, ...args: any[]) => {\n            throw new UnAuthorisedException(this, \"initialise\", message, null, args);\n        };\n\n        let getWhoAmIAttributeValue = (arr: IWhoAmIAttributes[], propName: string) => {\n            let attribute = (arr || []).filter(item => Object.keys(item).length === 1 && Object.keys(item)[0] === propName);\n            return attribute.length ? attribute[0][propName] : \"\";\n        };\n\n        let isAnAllowedRolePresent = (actualRoles: string[], allowedRoles: string[]) => {\n            return actualRoles.some(actualRole =>\n                allowedRoles.some(allowedRole =>\n                    allowedRole.toLowerCase() === actualRole.toLowerCase()\n                )\n            );\n        };\n\n        let tidyEngineerId = (input: string) => {\n            let numericCharacters = (input || \"\").replace(/\\D/g, \"\");\n            return numericCharacters\n                ? StringHelper.padLeft(numericCharacters, EMPLOYEE_ID_PREFIX_CHARACTER, MAX_EMPLOYEE_ID_CHARACTERS)\n                : undefined;\n        };\n\n        let config = this._configurationService.getConfiguration<IHemaConfiguration>();\n        let allowedActiveDirectoryRoles = (config && config.activeDirectoryRoles) || [];\n\n        if (!allowedActiveDirectoryRoles.length) {\n            throwUnauthorised(\"Cannot find activeDirectoryRoles\", config);\n        }\n\n        let engineer = await this.getCurrentEngineer();\n        let isAlreadySignedOn = engineer && engineer.isSignedOn;\n\n        if (!hasWhoAmISucceeded) {\n            if (isAlreadySignedOn) {\n                // special case: if the user a) is already signed in (the app was previously closed/crashed before end of day was triggered)\n                // and b) we have no connectivity, we still authenticate the user\n                return;\n            } else {\n                throwUnauthorised(\"Cannot currently authorise your account as the authentication server is not responding.\", config);\n            }\n        }\n\n        if (!whoAmI || !whoAmI.attributes || !whoAmI.roles) {\n            throwUnauthorised(\"There is a problem with the response from the authentication server.\", whoAmI);\n        }\n\n        let rawEngineerId = getWhoAmIAttributeValue(whoAmI.attributes, WHO_AM_I_EMPLOYEEID_ATTRIBUTE);\n        if (!rawEngineerId) {\n            throwUnauthorised(`Your LAN user account does not have the attribute ${WHO_AM_I_EMPLOYEEID_ATTRIBUTE}.`);\n        }\n\n        let engineerId = tidyEngineerId(rawEngineerId);\n        if (!engineerId) {\n            throwUnauthorised(\"Unable to determine your WMIS engineer id from active directory.\", rawEngineerId);\n        }\n\n        if (!isAnAllowedRolePresent(whoAmI.roles, allowedActiveDirectoryRoles)) {\n            throwUnauthorised(\n                `Your LAN user account does not have one of the required roles ${allowedActiveDirectoryRoles.join(\", \")}.`,\n                allowedActiveDirectoryRoles);\n        }\n\n        if (isAlreadySignedOn) {\n            engineer.roles = whoAmI.roles;\n        } else {\n            engineer = new Engineer();\n            engineer.isSignedOn = false;\n            engineer.status = undefined;\n            engineer.lanId = whoAmI.userid;\n            engineer.id = engineerId;\n            engineer.firstName = getWhoAmIAttributeValue(whoAmI.attributes, WHO_AM_I_GIVENNAME_ATTRIBUTE);\n            engineer.lastName = getWhoAmIAttributeValue(whoAmI.attributes, WHO_AM_I_SN_ATTRIBUTE);\n            engineer.phoneNumber = getWhoAmIAttributeValue(whoAmI.attributes, WHO_AM_I_TELEPHONE_NUMBER_ATTRIBUTE);\n            engineer.roles = whoAmI.roles;\n        }\n\n        await this._storageService.setEngineer(engineer);\n    }\n\n    public getCurrentEngineer(): Promise<Engineer> {\n        return this._storageService.getEngineer()\n            .catch((error) => {\n                throw new BusinessException(this, \"getCurrentEngineer\", \"Getting current engineer\", null, error);\n            });\n    }\n\n    public getAllStatus(): Promise<IFieldOperativeStatus[]> {\n        return this._engineerStatuss ?\n            Promise.resolve(this._engineerStatuss) :\n            this._catalogService.getFieldOperativeStatuses()\n                .then((data) => {\n                    this._engineerStatuss = data;\n                    return this._engineerStatuss;\n                });\n    }\n\n    public setStatus(engineerStatus: string): Promise<void> {\n        return this.loadBusinessRules()\n            .then(() => this._storageService.getEngineer())\n            .then((engineer) => {\n                this.addToAnalytics(engineerStatus, engineer);\n                return engineer;\n            })\n            .then((engineer) => {\n                let oldIsSignedOn = engineer.isSignedOn;\n                let oldStatus = engineer.status;\n                let oldIsWorking = engineer.status === undefined;\n                let newIsWorking = engineerStatus === undefined;\n\n                if (engineerStatus === this._signOnId) {\n                    engineer.isSignedOn = true;\n                    engineer.status = undefined;\n                } else if (engineerStatus === this._signOffId) {\n                    engineer.isSignedOn = false;\n                    engineer.status = undefined;\n                    engineer.isContractor = undefined;\n                } else {\n                    engineer.status = engineerStatus;\n                }\n\n                if (engineer.isSignedOn !== oldIsSignedOn || engineer.status !== oldStatus) {\n                    // \"isWorking\" is a made-up internal-only status, (and so engineerStatus is undefined)\n                    //  so do not send an update to the API\n                    return (newIsWorking ? Promise.resolve() : this.sendStatusOrThrow(engineer, engineerStatus))\n                        // only save if the sendStatus API call has been successful - otherwise when the end of day retry functionality\n                        //  passes through here on retry attempts, it will not trigger as no change in engineer values will be seen\n                        //  as the failed initial atempt changes would have got saved.\n                        .then(() => {\n                            return this._storageService.getJobsToDo()\n                                .then(jobs => {\n                                    if (jobs.some(job => Job.isActive(job))) {\n                                        engineer.status = undefined;\n                                        newIsWorking = true;\n                                    }\n                                });\n                        })\n                        .then(() => this._storageService.setEngineer(engineer))\n                        .then(() => {\n                            let shouldPublishSignedOnChanged = engineer.isSignedOn !== oldIsSignedOn;\n                            let shouldPublishIsWorkingChanged = newIsWorking !== oldIsWorking;\n                            let shouldPublishStatusChanged = shouldPublishSignedOnChanged || shouldPublishIsWorkingChanged || engineer.status !== oldStatus;\n                            let shouldPublishWorkRetrieval = (shouldPublishSignedOnChanged && engineer.isSignedOn)\n                                || (shouldPublishIsWorkingChanged && newIsWorking);\n\n                            if (shouldPublishStatusChanged) {\n                                this._eventAggregator.publish(EngineerServiceConstants.ENGINEER_STATUS_CHANGED);\n                            }\n                            if (shouldPublishSignedOnChanged) {\n                                this._eventAggregator.publish(EngineerServiceConstants.ENGINEER_SIGNED_ON_CHANGED, engineer.isSignedOn);\n                            }\n                            if (shouldPublishIsWorkingChanged) {\n                                this._eventAggregator.publish(EngineerServiceConstants.ENGINEER_WORKING_CHANGED);\n                            }\n                            if (shouldPublishWorkRetrieval) {\n                                this._eventAggregator.publish(WorkRetrievalServiceConstants.REQUEST_WORK_AND_REFRESH_WORK_LIST);\n                            }\n                        });\n\n                } else {\n                    return undefined;\n                }\n            });\n    }\n\n    public getStatus(): Promise<string> {\n        return this._storageService.getEngineer()\n            .then((engineer) => {\n                if (engineer) {\n                    return engineer.status;\n                } else {\n                    return undefined;\n                }\n            });\n    }\n\n    public isWorking(): Promise<boolean> {\n        return this._storageService.getEngineer()\n            .then((engineer) => {\n                if (engineer) {\n                    return engineer.isSignedOn && engineer.status === undefined;\n                } else {\n                    return false;\n                }\n            });\n    }\n\n    public isSignedOn(): Promise<boolean> {\n        return this._storageService.getEngineer()\n            .then((engineer) => {\n                if (engineer) {\n                    return engineer.isSignedOn;\n                } else {\n                    return false;\n                }\n            });\n    }\n\n    public async getEngineerStateText(state: string): Promise<string> {\n        await this.loadBusinessRules();\n        const statuses = await this.getAllStatus();\n\n        if (statuses && statuses.length > 0) {\n            if (statuses && statuses.find(x => x.fieldOperativeStatus === state)) {\n                return statuses.find(x => x.fieldOperativeStatus === state).fieldOperativeStatusDescription;\n            }\n            const labels = await this.getLabels();\n            if (labels) {\n\n                if (state === \"internalWorking\") {\n                    return ObjectHelper.getPathValue(labels, \"working\");\n                }\n\n                if (state === \"internalNotWorking\") {\n                    return ObjectHelper.getPathValue(labels, \"notWorking\");\n                }\n\n                if (state === this._signOnId) {\n                    return ObjectHelper.getPathValue(labels, \"signOn\");\n                } else if (state === this._signOffId) {\n                    return ObjectHelper.getPathValue(labels, \"signOff\");\n                }\n                return state;\n            }\n            return undefined;\n        }\n        return undefined;\n    }\n\n    public async overrideEngineerId(engineer: Engineer): Promise<Engineer> {\n        if (!!engineer && !!engineer.isContractor) {\n            return engineer;\n        }\n\n        let contractEngineerResponse: IAmIContractEngineer;\n        try {\n            contractEngineerResponse = await this._fftService.getAmIContractEngineerInfo(engineer.id);\n        } catch (error) {\n            if (error && error instanceof ApiException) {\n                let statusCode =  (error as ApiException).httpStatusCode;\n\n                if (!!statusCode && statusCode.indexOf(\"404\") >= 0) {\n                    return engineer;\n                }\n            }\n\n            throw new BusinessException(this, \"overrideEngineerId\", \"Unable to get user details (contract engineer check)'{0}'.\", [engineer.id], error);\n        }\n\n        const { engineerId: wmisPayrollId, workdayPayrollId, contractorInd } = contractEngineerResponse;\n\n        if (StringHelper.isEmptyOrUndefinedOrNull(wmisPayrollId)\n            || NumberHelper.isNullOrUndefined(workdayPayrollId)\n            || StringHelper.isEmptyOrUndefinedOrNull(contractorInd)) {\n            throw new BusinessException(this, \"overrideEngineerId\", \"Invalid contract engineer's data received\", null, null);\n        }\n\n        engineer.id = wmisPayrollId;\n        engineer.isContractor = contractorInd;\n        await this._storageService.setEngineer(engineer);\n        return engineer;\n    }\n\n    private loadBusinessRules(): Promise<void> {\n        return this._signOnId && this._signOffId ?\n            Promise.resolve() :\n            this._businessRuleService.getRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this)))\n                .then((businessRules) => {\n                    this._signOnId = ObjectHelper.getPathValue(businessRules, \"signOnId\");\n                    this._signOffId = ObjectHelper.getPathValue(businessRules, \"signOffId\");\n\n                    if (!StringHelper.isString(this._signOnId) || !StringHelper.isString(this._signOffId)) {\n                        throw new BusinessException(this, \"loadBusinessRules\", \"Unable to load signOn and signOff business rules\", null, null);\n                    }\n                });\n    }\n\n    private sendStatusOrThrow(signedOnEngineer: Engineer, engineerStatus: string): Promise<void> {\n        let engineerStatusReport = <IEngineerStatusRequest>{\n            data: {\n                timestamp: DateHelper.toJsonDateTimeString(new Date()),\n                statusCode: engineerStatus\n            }\n        };\n\n        if (engineerStatus === this._signOffId) {\n            return this._fftService.engineerStatusUpdateEod(signedOnEngineer.id, engineerStatusReport)\n                .catch((error) => {\n                    this._logger.error(new BusinessException(this, \"setStatusEod\", \"Setting status '{0}' for engineer '{1}'\", [engineerStatus, signedOnEngineer.id], error).toString());\n                    // we need to feed back to the user if the end-of-day has not gone: the calling code will handle this exception.\n                    throw error;\n                });\n        } else {\n            return this._fftService.engineerStatusUpdate(signedOnEngineer.id, engineerStatusReport)\n                .catch((error) => {\n                    this._logger.error(new BusinessException(this, \"setStatus\", \"Setting status '{0}' for engineer '{1}'\", [engineerStatus, signedOnEngineer.id], error).toString());\n                });\n        }\n    }\n\n    private async addToAnalytics(state: string, engineer: Engineer): Promise<void> {\n        try {\n            const stateText = await this.getEngineerStateText(state);\n            if (stateText && engineer && engineer.id) {\n                this._eventAggregator.publish(AnalyticsConstants.ANALYTICS_EVENT, {\n                    category: AnalyticsConstants.ENGINNER_STATE_CHANGED,\n                    action: stateText,\n                    label: moment().format(AnalyticsConstants.DATE_TIME_FORMAT),\n                    metric: AnalyticsConstants.METRIC\n                });\n            }\n        } catch {\n            // do nothing\n        }\n    }\n\n    private getLabels(): Promise<{ [key: string]: string }> {\n        return this._labelService.getGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(ENGINNER_STATE_ELEMENT)));\n    }\n}\n"],"sourceRoot":"../../.."}