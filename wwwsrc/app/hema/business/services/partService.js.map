{"version":3,"sources":["hema/business/services/partService.ts"],"names":[],"mappings":"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","file":"partService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport { inject } from \"aurelia-framework\";\nimport { IJobService } from \"./interfaces/IJobService\";\nimport { JobService } from \"./jobService\";\nimport { IPartService } from \"./interfaces/IPartService\";\nimport { Part } from \"../models/part\";\nimport { Activity } from \"../models/activity\";\nimport { BusinessException } from \"../models/businessException\";\nimport { Guid } from \"../../../common/core/guid\";\nimport { PartsBasket as PartsBasketBusinessModel } from \"../models/partsBasket\";\nimport { PartsDetail as PartsDetailBusinessModel } from \"../models/partsDetail\";\nimport { WarrantyEstimate } from \"../models/warrantyEstimate\";\nimport { WarrantyEstimateType } from \"../models/warrantyEstimateType\";\nimport { CatalogService } from \"./catalogService\";\nimport { ICatalogService } from \"./interfaces/ICatalogService\";\nimport { IBusinessRuleService } from \"./interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"./businessRuleService\";\nimport { QueryableBusinessRuleGroup } from \"../models/businessRules/queryableBusinessRuleGroup\";\nimport * as moment from \"moment\";\nimport { PartsToday } from \"../models/partsToday\";\nimport { DataState } from \"../models/dataState\";\nimport { PartNotUsedReturn } from \"../models/partNotUsedReturn\";\nimport { PartWarrantyReturn } from \"../models/partWarrantyReturn\";\nimport { IGoodsType } from \"../models/reference/IGoodsType\";\nimport { Appliance } from \"../models/appliance\";\nimport { Job } from \"../models/job\";\n\n@inject(JobService, CatalogService, BusinessRuleService)\nexport class PartService implements IPartService {\n\n    private _jobService: IJobService;\n    private _catalogService: ICatalogService;\n    private _businessRuleService: IBusinessRuleService;\n    private _partsRequiredBusinessRules: QueryableBusinessRuleGroup;\n\n    constructor(jobService: IJobService,\n        catalogService: ICatalogService,\n        businessRuleService: IBusinessRuleService) {\n        this._jobService = jobService;\n        this._catalogService = catalogService;\n        this._businessRuleService = businessRuleService;\n    }\n\n    public async clearMainPartForTask(jobId: string, taskId: string): Promise<void> {\n        let job = await this._jobService.getJob(jobId);\n\n        if (job) {\n            let parts = job.partsDetail\n                            && job.partsDetail.partsBasket\n                            && job.partsDetail.partsBasket.partsToOrder || [];\n\n            let existingMainPart = parts.find(p => p.taskId === taskId && p.isMainPart);\n\n            if (existingMainPart) {\n                existingMainPart.isMainPart = false;\n                if (job.partsDetail.partsBasket.dataState !== DataState.invalid) {\n                    job.partsDetail.partsBasket.dataState = DataState.notVisited;\n                }\n                await this._jobService.setJob(job);\n            }\n\n        } else {\n            throw new BusinessException(this, \"partService.getMainPartForTask\", \"job not found\", [jobId], null);\n        }\n\n    }\n\n    public async getPartStatusValidity(part: Part, job: Job): Promise<boolean> {\n        if (!this._partsRequiredBusinessRules) {\n            this._partsRequiredBusinessRules = await this._businessRuleService.getQueryableRuleGroup(\"partsRequiredInBasket\");\n        }\n\n        let orderPartStatuses = this._partsRequiredBusinessRules.getBusinessRule<string>(\"orderPartStatuses\").split(\",\");\n        let vanStockStatuses = this._partsRequiredBusinessRules.getBusinessRule<string>(\"vanStockStatuses\").split(\",\");\n        let vanStockOrderStatus = this._partsRequiredBusinessRules.getBusinessRule<string>(\"vanPartsInBasket\");\n\n        let validTaskStatusesForThisPart = part.partOrderStatus === vanStockOrderStatus ? vanStockStatuses : orderPartStatuses;\n        let partTask = job.tasks.find(task => task.id === part.taskId);\n\n        return !!partTask && validTaskStatusesForThisPart.some(status => partTask.status === status);\n    }\n\n    public async setPartsRequiredForTask(jobId: string): Promise<boolean> {\n        let job = await this._jobService.getJob(jobId);\n\n        if (job.tasks.length === 1) {\n            job.partsDetail.partsBasket.partsToOrder.forEach(part => {\n                part.taskId = job.tasks[0].id;\n            });\n        }\n\n        let isBasketValid = await this.getPartsBasketStatusValidity(job.partsDetail.partsBasket.partsToOrder, job);\n        job.partsDetail.partsBasket.hasAtLeastOneWrongActivityStatus = !isBasketValid;\n\n        if (isBasketValid) {\n            if (job.partsDetail.partsBasket.dataState === DataState.invalid) {\n                job.partsDetail.partsBasket.dataState = DataState.notVisited;\n            }\n        } else {\n            job.partsDetail.partsBasket.dataState = DataState.invalid;\n        }\n        await this._jobService.setJob(job);\n        return !isBasketValid;\n    }\n\n    public getMainPartForTask(jobId: string, taskId: string): Promise<Part> {\n        return this._jobService.getJob(jobId)\n            .then((job) => {\n                if (job) {\n                    let parts = job.partsDetail\n                            && job.partsDetail.partsBasket\n                            && job.partsDetail.partsBasket.partsToOrder || [];\n\n                    return parts.find(p => (p.taskId === taskId) && p.isMainPart) || null;\n\n                } else {\n                    throw new BusinessException(this, \"partService.getMainPartForTask\", \"job not found\", [jobId], null);\n                }\n            });\n    }\n\n    public getPartsBasket(jobId: string): Promise<PartsBasketBusinessModel> {\n        return this._jobService.getJob(jobId)\n            .then((job) => {\n                if (job) {\n                    return job.partsDetail.partsBasket;\n                } else {\n                    throw new BusinessException(this, \"partService.getPartsBasket\", \"job not found\", [jobId], null);\n                }\n            });\n    }\n\n    public savePartsBasket(jobId: string, partsBasket: PartsBasketBusinessModel): Promise<void> {\n        return this._jobService.getJob(jobId)\n            .then(job => {\n                if (job) {\n                    if (!job.partsDetail) {\n                        job.partsDetail = new PartsDetailBusinessModel();\n                    }\n\n                    if (!job.partsDetail.partsBasket) {\n                        job.partsDetail.partsBasket = new PartsBasketBusinessModel();\n                    }\n\n                    let getTaskMainParts = (parts: Part[]) => parts\n                                        .filter(part => part.isMainPart && part.taskId);\n\n                    let preSaveTaskMainParts = getTaskMainParts(job.partsDetail.partsBasket.partsToOrder);\n                    let newTaskMainParts = getTaskMainParts(partsBasket.partsToOrder);\n\n                    let taskIdsNewlyMainPartedOrChanged = newTaskMainParts\n                                                .filter(newPart => !preSaveTaskMainParts\n                                                                    .some(prevPart => newPart.taskId === prevPart.taskId\n                                                                                        && newPart.id === prevPart.id))\n                                                .map(part => part.taskId);\n\n                    taskIdsNewlyMainPartedOrChanged\n                        .map(taskId => job.tasks.find(task => task.id === taskId))\n                        .filter(task => task && (task.activity || task.productGroup || task.partType))\n                        .forEach(task => {\n                            task.activity = undefined;\n                            task.productGroup = undefined;\n                            task.partType = undefined;\n                            if (task.dataState !== DataState.invalid) {\n                                task.dataState = DataState.notVisited;\n                            }\n                        });\n\n                    job.partsDetail.partsBasket.dataState = partsBasket.dataState;\n                    job.partsDetail.partsBasket.manualPartDetail = partsBasket.manualPartDetail;\n                    job.partsDetail.partsBasket.showAddPartManually = partsBasket.showAddPartManually;\n                    job.partsDetail.partsBasket.showRemainingAddPartManuallyFields = partsBasket.showRemainingAddPartManuallyFields;\n                    job.partsDetail.partsBasket.deliverPartsToSite = partsBasket.deliverPartsToSite;\n                    job.partsDetail.partsBasket.partsToOrder = partsBasket.partsToOrder;\n                    job.partsDetail.partsBasket.hasAtLeastOneWrongActivityStatus = partsBasket.hasAtLeastOneWrongActivityStatus;\n\n                    return this.getPartsBasketStatusValidity(job.partsDetail.partsBasket.partsToOrder, job)\n                        .then(isBasketValid => {\n                            if (isBasketValid) {\n                                if (job.partsDetail.partsBasket.dataState !== DataState.invalid) {\n                                    job.partsDetail.partsBasket.dataState = DataState.valid;\n                                }\n                            } else {\n                                job.partsDetail.partsBasket.dataState = DataState.invalid;\n                            }\n                        })\n                        .then(() => this._jobService.setJob(job));\n                } else {\n                    throw new BusinessException(this, \"partService.savePartsBasket\", \"no current job selected\", null, null);\n                }\n            });\n    }\n\n    public getTodaysParts(jobId: string): Promise<PartsToday> {\n        return this._jobService.getJob(jobId)\n            .then((job) => {\n                if (!job) {\n                    throw new BusinessException(this, \"partService.getTodaysParts\", \"no current job selected\", null, null);\n                }\n\n                let promises: Promise<void>[] = [];\n\n                if (job.partsDetail &&\n                    job.partsDetail.partsToday &&\n                    job.partsDetail.partsToday.parts) {\n                    job.partsDetail.partsToday.parts.forEach(part => {\n                        promises.push(this.getPartWarrantyEstimate(jobId, part.stockReferenceId, part.taskId)\n                            .then(estimate => {\n                                part.warrantyEstimate = estimate;\n                            }));\n                    });\n                }\n\n                return Promise.all(promises).then(() => job.partsDetail.partsToday);\n            });\n    }\n\n    public saveTodaysPartsReturns(jobId: string, dataState: DataState, partReturns: { partId: Guid, warrantyReturn: PartWarrantyReturn, notusedReturn: PartNotUsedReturn }[]): Promise<void> {\n        return this._jobService.getJob(jobId)\n            .then((job) => {\n                if (!job || !job.partsDetail || !job.partsDetail.partsToday || !job.partsDetail.partsToday.parts) {\n                    throw new BusinessException(this, \"partService.saveTodaysParts\", \"no current job selected or no partsToday parts found\", [jobId], null);\n                }\n\n                job.partsDetail.partsToday.dataState = dataState;\n\n                partReturns.forEach(partReturn => {\n                    let part = job.partsDetail.partsToday.parts.find(todaysPart => todaysPart.id === partReturn.partId);\n                    part.warrantyReturn = partReturn.warrantyReturn;\n                    part.notUsedReturn = partReturn.notusedReturn;\n                });\n\n                return this._jobService.setJob(job);\n            });\n    }\n\n    public getFittedParts(jobId: string): Promise<Part[]> {\n\n        return Promise.all([\n            this._catalogService.getGoodsItemStatuses(),\n            this._businessRuleService.getQueryableRuleGroup(\"todaysParts\"),\n            this._jobService.getJob(jobId)\n        ])\n            .then(([partStatuses, ruleGroup, job]) => {\n                if (!job) {\n                    throw new BusinessException(this, \"partService.saveTodaysParts\", \"no current job selected\", null, null);\n                }\n\n                let parts: Part[] = [];\n\n                let notFittedIndicator = ruleGroup.getBusinessRule<string>(\"notFittedIndicator\");\n\n                let isAFittedPart = (part: Part) => partStatuses.find(status => status.status === part.status && status.goodsItemNotFindIndicator === notFittedIndicator);\n\n                if (job.history && job.history.tasks) {\n                    job.history.tasks.forEach(task => {\n                        if (task && task.activities) {\n                            task.activities.forEach(activity => {\n                                if (activity && activity.parts) {\n                                    activity.parts.forEach(part => {\n                                        if (part) {\n                                            if (isAFittedPart(part)) {\n                                                parts.push(part);\n                                            }\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                    });\n                }\n\n                Job.getTasksAndCompletedTasks(job)\n                    .forEach(task => {\n                        if (task && task.activities) {\n                            task.activities.forEach(activity => {\n                                if (activity && activity.parts) {\n                                    activity.parts.forEach(part => {\n                                        if (part && isAFittedPart(part) && !this.isATodaysPart(part, activity, ruleGroup)) {\n                                            parts.push(part);\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                    });\n\n                return parts;\n            });\n    }\n\n    public getPartWarrantyEstimate(jobId: string, stockRefId: string, taskId: string): Promise<WarrantyEstimate> {\n\n        return Promise.all([\n            this._businessRuleService.getQueryableRuleGroup(\"todaysParts\"),\n            this._catalogService.getGoodsType(stockRefId),\n            this._jobService.getJob(jobId)\n        ])\n            .then(([ruleGroup, goodsType, job]) => {\n                let warrantyPeriod = this.getPartWarrantyPeriodOrDefault(goodsType, ruleGroup);\n                let unknownWarrantyEstimateResult = new WarrantyEstimate(false, warrantyPeriod, null, WarrantyEstimateType.unknown);\n                let appliance: Appliance;\n\n                if (!taskId || !job || !job.history || !job.history.appliances) {\n                    return unknownWarrantyEstimateResult;\n                }\n\n                let task = (job.tasks.concat(job.history.tasks || [])).find(t => t.id === taskId);\n                if (task !== undefined) {\n                    appliance = job.history.appliances.find(a => a.id === task.applianceId);\n                    if (!appliance) {\n                        return unknownWarrantyEstimateResult;\n                    }\n                }\n\n                return this.getPartFittedDates(jobId, stockRefId, goodsType, ruleGroup)\n                    .then(partFittedDates => {\n                        let applianceInstallationDate = (appliance && appliance.installationYear) ? moment(`${appliance.installationYear}-12-31`).toDate() : null;\n                        let mostRecentFittedDate = Math.max.apply(null, [applianceInstallationDate, partFittedDates.equivalentPartDate, partFittedDates.samePartDate]);\n                        mostRecentFittedDate = (mostRecentFittedDate === 0 ? null : mostRecentFittedDate);\n\n                        if (warrantyPeriod === 0) {\n                            return new WarrantyEstimate(false, 0, mostRecentFittedDate, WarrantyEstimateType.doesNotHaveWarranty);\n                        }\n\n                        if (this.isDateInWarranty(partFittedDates.samePartDate, warrantyPeriod)) {\n                            return new WarrantyEstimate(true, warrantyPeriod, partFittedDates.samePartDate, WarrantyEstimateType.samePartInstallationDate);\n                        }\n\n                        if (this.isDateInWarranty(partFittedDates.equivalentPartDate, warrantyPeriod)) {\n                            return new WarrantyEstimate(true, warrantyPeriod, partFittedDates.equivalentPartDate, WarrantyEstimateType.equivalentPartInstallationDate);\n                        }\n\n                        let applianceWarrantyPeriod = ruleGroup.getBusinessRule<number>(\"defaultApplianceWarrantyWeeks\");\n                        if (this.isDateInWarranty(applianceInstallationDate, warrantyPeriod)) {\n                            return new WarrantyEstimate(true, applianceWarrantyPeriod, applianceInstallationDate, WarrantyEstimateType.applianceInstallationDate);\n                        }\n\n                        return new WarrantyEstimate(false, warrantyPeriod, mostRecentFittedDate, WarrantyEstimateType.notInWarranty);\n                    });\n            });\n    }\n\n    public async deletePartsAssociatedWithTask(jobId: string, taskId: string): Promise<void> {\n        let job = await this._jobService.getJob(jobId);\n        if (job && job.partsDetail && job.partsDetail.partsBasket) {\n            if (job.partsDetail.partsBasket.partsToOrder) {\n                let partsInBasket: Part[] = job.partsDetail.partsBasket.partsToOrder.slice();\n                partsInBasket.forEach(part => {\n                    if (part.taskId === taskId) {\n                        job.partsDetail.partsBasket.partsToOrder.splice(job.partsDetail.partsBasket.partsToOrder.indexOf(part), 1);\n                    }\n                });\n                let isPartsBasketValid = await this.getPartsBasketStatusValidity(job.partsDetail.partsBasket.partsToOrder, job);\n                job.partsDetail.partsBasket.hasAtLeastOneWrongActivityStatus = !isPartsBasketValid;\n\n                if (isPartsBasketValid) {\n                    if (job.partsDetail.partsBasket.dataState === DataState.invalid) {\n                        job.partsDetail.partsBasket.dataState = DataState.notVisited;\n                    }\n                } else {\n                    job.partsDetail.partsBasket.dataState = DataState.invalid;\n                }\n                return this._jobService.setJob(job);\n            }\n            return;\n        }\n        return;\n    }\n\n    private async getPartsBasketStatusValidity(parts: Part[], job: Job): Promise<boolean> {\n        let mandatoryPartStatuses = [\"IP\"];\n\n        let partValidityResults = await Promise.all(parts.map(part => this.getPartStatusValidity(part, job)));\n        let isAPartInvalid = partValidityResults.some(result => !result);\n\n        let partRequiredTasks = job.tasks.filter(task => mandatoryPartStatuses.some(status => status === task.status));\n        let everyMandatoryTaskIsHappy = partRequiredTasks.every(task => parts.some(part => part.taskId === task.id && part.partOrderStatus === \"O\"));\n\n        job.partsDetail.partsBasket.hasAtLeastOneWrongActivityStatus = !everyMandatoryTaskIsHappy;\n        return everyMandatoryTaskIsHappy && !isAPartInvalid;\n    }\n\n    private getPartWarrantyPeriodOrDefault(goodsType: IGoodsType, ruleGroup: QueryableBusinessRuleGroup): number {\n        let isPartCatalogCurrentlyInDate = (): boolean => {\n\n            const goodsTypeDateFmt = ruleGroup.getBusinessRule<string>(\"goodsTypeDateFmt\") || \"\";\n\n            return (!goodsType.goodsTypeStartDate || moment(goodsType.goodsTypeStartDate, goodsTypeDateFmt).isBefore(moment()))\n                && ((!goodsType.goodsTypeEndDate || goodsType.goodsTypeEndDate === \"\") || moment(goodsType.goodsTypeEndDate, goodsTypeDateFmt).isAfter(moment()));\n        };\n\n        let hasPartCatalogGotAWarrantyPeriod = () => {\n            return goodsType\n                && (!!goodsType.warrantyPeriod || goodsType.warrantyPeriod === 0);\n        };\n\n        return hasPartCatalogGotAWarrantyPeriod() && isPartCatalogCurrentlyInDate()\n            ? goodsType.warrantyPeriod\n            : ruleGroup.getBusinessRule<number>(\"defaultPartWarrantyWeeks\");\n    }\n\n    private getPartFittedDates(\n        jobId: string,\n        stockRefId: string,\n        goodsType: IGoodsType,\n        ruleGroup: QueryableBusinessRuleGroup)\n        : Promise<{ samePartDate: Date, equivalentPartDate: Date }> {\n\n        let getPartWithClassification = (part: Part): Promise<{ part: Part, classification: \"samePart\" | \"equivalentPart\" | \"differentPart\" | \"cannotEstablish\" }> => {\n\n            if (part.stockReferenceId === stockRefId) {\n                return Promise.resolve({ part, classification: <\"samePart\">\"samePart\" });\n            } else if (!goodsType) {\n                return Promise.resolve({ part, classification: <\"cannotEstablish\">\"cannotEstablish\" });\n            } else {\n                return this._catalogService.getGoodsType(part.stockReferenceId)\n                    .then(catalog => (catalog\n                        && catalog.productGroupCode === goodsType.productGroupCode\n                        && catalog.partTypeCode === goodsType.partTypeCode)\n                        ? { part, classification: <\"equivalentPart\">\"equivalentPart\" }\n                        : { part, classification: <\"differentPart\">\"differentPart\" }\n                    );\n            }\n        };\n\n        return this.getFittedParts(jobId)\n            .then(parts => Promise.all(parts.map(part => getPartWithClassification(part))))\n            .then(partsWithClassification => {\n                let samePartDates = partsWithClassification.filter(p => p.classification === \"samePart\")\n                    .map(p => moment(p.part.fittedDate).toDate());\n\n                let equivalentPartDates = partsWithClassification.filter(p => p.classification === \"equivalentPart\")\n                    .map(p => moment(p.part.fittedDate).toDate());\n                return {\n                    samePartDate: samePartDates.length ? Math.max.apply(null, samePartDates) : null,\n                    equivalentPartDate: equivalentPartDates.length ? Math.max.apply(null, equivalentPartDates) : null\n                };\n            });\n    }\n\n    private isDateInWarranty(date: Date, warrantyWeeks: number): boolean {\n        return !!date && moment(date).add(warrantyWeeks, \"weeks\").isAfter();\n    }\n\n    private isATodaysPart(part: Part, activity: Activity, ruleGroup: QueryableBusinessRuleGroup): boolean {\n        return activity.status === ruleGroup.getBusinessRule<string>(\"doTodayActivityStatus\")\n            && part.status === ruleGroup.getBusinessRule<string>(\"toBeFittedPartStatus\");\n    }\n\n}\n"],"sourceRoot":"../../.."}