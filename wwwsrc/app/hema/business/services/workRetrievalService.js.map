{"version":3,"sources":["hema/business/services/workRetrievalService.ts"],"names":[],"mappings":"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","file":"workRetrievalService.js","sourcesContent":["import * as Logging from \"aurelia-logging\";\r\nimport { IWorkRetrievalService } from \"./interfaces/IWorkRetrievalService\";\r\nimport { Job } from \"../models/job\";\r\nimport { JobApiFailure } from \"../models/jobApiFailure\";\r\nimport { EngineerService } from \"./engineerService\";\r\nimport { inject } from \"aurelia-dependency-injection\";\r\nimport { IEngineerService } from \"./interfaces/IEngineerService\";\r\nimport { IFFTService } from \"../../api/services/interfaces/IFFTService\";\r\nimport { FftService } from \"../../api/services/fftService\";\r\nimport { JobFactory } from \"../factories/jobFactory\";\r\nimport { EventAggregator } from \"aurelia-event-aggregator\";\r\nimport { IJobFactory } from \"../factories/interfaces/IJobFactory\";\r\nimport { BusinessException } from \"../models/businessException\";\r\nimport { IJobCacheService } from \"./interfaces/IJobCacheService\";\r\nimport { JobCacheService } from \"./jobCacheService\";\r\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\r\nimport { WorkRetrievalServiceConstants } from \"./constants/workRetrievalServiceConstants\";\r\nimport { BusinessRuleService } from \"./businessRuleService\";\r\nimport { IBusinessRuleService } from \"./interfaces/IBusinessRuleService\";\r\nimport { StringHelper } from \"../../../common/core/stringHelper\";\r\nimport { IJob } from \"../../api/models/fft/jobs/IJob\";\r\nimport { IJobHistory } from \"../../api/models/fft/jobs/history/IJobHistory\";\r\nimport { IMessageService } from \"./interfaces/IMessageService\";\r\nimport { MessageService } from \"./messageService\";\r\nimport { IJobStatusRequest } from \"../../api/models/fft/jobs/status/IJobStatusRequest\";\r\nimport { DateHelper } from \"../../core/dateHelper\";\r\nimport { IWorkListResponse } from \"../../api/models/fft/engineers/worklist/IWorkListResponse\";\r\nimport { IWorkListResponseData } from \"../../api/models/fft/engineers/worklist/IWorkListResponseData\";\r\nimport { IConfigurationService } from \"../../../common/core/services/IConfigurationService\";\r\nimport { ConfigurationService } from \"../../../common/core/services/configurationService\";\r\nimport { IHemaConfiguration } from \"../../IHemaConfiguration\";\r\nimport { Threading } from \"../../../common/core/threading\";\r\nimport { IToastItem } from \"../../../common/ui/elements/models/IToastItem\";\r\nimport { Guid } from \"../../../common/core/guid\";\r\nimport { AppConstants } from \"../../../appConstants\";\r\nimport { UiConstants } from \"../../../common/ui/elements/constants/uiConstants\";\r\nimport { BaseException } from \"../../../common/core/models/baseException\";\r\nimport { IWorkListItem } from \"../../api/models/fft/engineers/worklist/IWorkListItem\";\r\nimport { WorkRetrievalTracker } from \"./workRetrievalTracker\";\r\nimport { JobPartsCollection } from \"../models/jobPartsCollection\";\r\nimport { ToastManager } from \"../../../common/ui/elements/toastManager\";\r\nimport { IPartCollectionResponse } from \"../../api/models/fft/jobs/parts/IPartCollectionResponse\";\r\nimport { AnalyticsExceptionModel } from \"../../../common/analytics/analyticsExceptionModel\";\r\nimport { AnalyticsExceptionCodeConstants } from \"../../../common/analytics/analyticsExceptionCodeConstants\";\r\nimport {SoundConstants} from \"./constants/soundConstants\";\r\n\r\ntype PollingResults = {\r\n    jobs: Job[],\r\n    failures: JobApiFailure[],\r\n    removed: Job[],\r\n    newJobs: string[]\r\n};\r\ntype RetrievalResults = {\r\n    jobs: Job[],\r\n    partsCollections: JobPartsCollection[],\r\n    failures: JobApiFailure[],\r\n    okItems: IWorkListItem[],\r\n    failedItems: IWorkListItem[]\r\n};\r\ntype UpdatedBusinessModels = {\r\n    currentJobs: Job[],\r\n    removedJobs: Job[],\r\n    newJobs: string[],\r\n    currentPartsCollections: JobPartsCollection[],\r\n    removedPartsCollections: JobPartsCollection[]\r\n};\r\n\r\n@inject(EngineerService, FftService, BusinessRuleService, JobFactory, JobCacheService, EventAggregator, MessageService, ConfigurationService, WorkRetrievalTracker, ToastManager)\r\nexport class WorkRetrievalService implements IWorkRetrievalService {\r\n    private _engineerService: IEngineerService;\r\n    private _fftService: IFFTService;\r\n    private _businessRuleService: IBusinessRuleService;\r\n    private _jobFactory: IJobFactory;\r\n    private _jobCacheService: IJobCacheService;\r\n    private _eventAggregator: EventAggregator;\r\n    private _messageService: IMessageService;\r\n    private _configurationService: IConfigurationService;\r\n    private _logger: Logging.Logger;\r\n\r\n    private _businessRules: { [key: string]: any };\r\n\r\n    private _workListPostRequestWorkPollingIntervals: number[];\r\n    private _workListPollingInterval: number;\r\n\r\n    private _refreshWorkListTimerId: number;\r\n    private _activeToastItem: IToastItem;\r\n    private _tracker: WorkRetrievalTracker;\r\n    private _toastManager: ToastManager;\r\n\r\n    constructor(engineerService: IEngineerService,\r\n        fftService: IFFTService,\r\n        businessRuleService: IBusinessRuleService,\r\n        jobFactory: IJobFactory,\r\n        jobCacheService: IJobCacheService,\r\n        eventAggregator: EventAggregator,\r\n        messageService: IMessageService,\r\n        configurationService: IConfigurationService,\r\n        workRetrievalTracker: WorkRetrievalTracker,\r\n        toastManager: ToastManager) {\r\n        this._engineerService = engineerService;\r\n        this._fftService = fftService;\r\n        this._businessRuleService = businessRuleService;\r\n        this._jobFactory = jobFactory;\r\n        this._jobCacheService = jobCacheService;\r\n        this._eventAggregator = eventAggregator;\r\n\r\n        this._logger = Logging.getLogger(\"WorkRetrievalService\");\r\n\r\n        this._messageService = messageService;\r\n        this._configurationService = configurationService;\r\n\r\n        this._refreshWorkListTimerId = -1;\r\n\r\n        this._eventAggregator.subscribe(WorkRetrievalServiceConstants.REQUEST_WORK_AND_REFRESH_WORK_LIST, () => this.sendRequestWorkAndPollWorkList());\r\n        this._eventAggregator.subscribe(WorkRetrievalServiceConstants.REFRESH_WORK_LIST, () => this.refreshWorkList());\r\n\r\n        this._eventAggregator.subscribe(UiConstants.TOAST_REMOVED, () => { this._activeToastItem = undefined; });\r\n\r\n        this._tracker = workRetrievalTracker;\r\n        this._toastManager = toastManager;\r\n    }\r\n\r\n    public async initialise(): Promise<void> {\r\n        let hemaConfiguration = this._configurationService.getConfiguration<IHemaConfiguration>();\r\n\r\n        this._workListPostRequestWorkPollingIntervals = hemaConfiguration.workListPostRequestWorkPollingIntervals;\r\n        this._workListPollingInterval = hemaConfiguration.workListPollingInterval;\r\n\r\n        let rulesGroup = await this._businessRuleService.getRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this)));\r\n\r\n        this._businessRules = rulesGroup;\r\n        this.stopStarRefreshWorkList(true);\r\n    }\r\n\r\n    public stopStarRefreshWorkList(startMonitoring: boolean): void {\r\n        let isPollingSwitchedOn = !!this._workListPollingInterval;\r\n\r\n        if (startMonitoring && isPollingSwitchedOn) {\r\n            this._refreshWorkListTimerId = Threading.startTimer(() => this.refreshWorkList(), this._workListPollingInterval);\r\n        } else {\r\n            if (this._refreshWorkListTimerId !== -1) {\r\n                Threading.stopTimer(this._refreshWorkListTimerId);\r\n                this._refreshWorkListTimerId = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    public sendRequestWorkAndPollWorkList(): Promise<void> {\r\n        this._tracker.setShouldRequestWorkOnNextCall(true);\r\n        return this.refreshWorkList();\r\n    }\r\n\r\n    public async refreshWorkList(): Promise<void> {\r\n        if (this._tracker.requestingStatus) {\r\n            this.logProgress(\"getWorkListAlreadyInProgress\");\r\n            return;\r\n        }\r\n        await this.getWorkList();\r\n        this._eventAggregator.publish(WorkRetrievalServiceConstants.REFRESH_START_STOP);\r\n    }\r\n\r\n    private getIntervals(): number[] {\r\n        return this._tracker.shouldRequestWorkOnNextCall()\r\n            ? [...this._workListPostRequestWorkPollingIntervals]\r\n            // for conventional poll, just one immediate hit (at the moment)\r\n            : [0];\r\n    }\r\n\r\n    private async getWorkList(): Promise<void> {\r\n\r\n        let engineer = await this._engineerService.getCurrentEngineer();\r\n        let canGetWorklist = engineer && engineer.isSignedOn && engineer.status === undefined;\r\n        if (!canGetWorklist) {\r\n            this.logProgress(\"getWorkListWhenNotWorking\");\r\n            return;\r\n        }\r\n\r\n        let intervals = this.getIntervals();\r\n\r\n        this.logProgress(\"getWorkList\");\r\n\r\n        this._tracker.startRequesting();\r\n        this._eventAggregator.publish(WorkRetrievalServiceConstants.REFRESH_START_STOP);\r\n        try {\r\n            if (this._tracker.shouldRequestWorkOnNextCall()) {\r\n                await this.requestWork(engineer.id);\r\n            }\r\n\r\n            let pollResults = await this.pollWorklist(engineer.id, intervals);\r\n\r\n            this.logProgress(\"getWorkListComplete\");\r\n            if (pollResults) {\r\n                await this.notify(pollResults.failures, pollResults.removed, pollResults.newJobs);\r\n            }\r\n\r\n        } catch (err) {\r\n            this.logError(\"getWorkList\", \"getWorkListError\", err);\r\n        }\r\n    }\r\n\r\n    private async requestWork(engineerId: string): Promise<void> {\r\n        this.logProgress(\"requestWork\");\r\n        /*\r\n           On the very first requestForWork of the day, we need to know what the prior workList identifier is\r\n           so that we know when to stop polling after the requestForWork, i.e. stop polling once the identifier coming back changes.\r\n           So in this case, make a workList call first...\r\n       */\r\n        if (!this._tracker.isWorkListIdentifierKnown()) {\r\n            try {\r\n                let response = await this._fftService.getWorkList(engineerId);\r\n                this.registerNewWorkList(response, true);\r\n            } catch (err) {\r\n                // ... but we have seen from the API it may or may not throw a 404 if we ask for worklist before a request for work.\r\n                this.logError(\"preRequestForWorkWorkListRequest\", \"preRequestForWorkWorkListRequest\", err);\r\n                this._tracker.registerFailedWorklist(true);\r\n            }\r\n        }\r\n\r\n        try {\r\n            await this._fftService.requestWork(engineerId);\r\n            this.logProgress(\"requestWorkComplete\");\r\n            this._tracker.setShouldRequestWorkOnNextCall(false);\r\n        } catch (err) {\r\n            this._tracker.failedRequestWork();\r\n            this.logError(\"requestWork\", \"requestWorkError\", err);\r\n            // if the requestForWork call fails, it will be requested next time as we do not set the flag\r\n            throw new BusinessException(this, \"requestWork\", \"An error has occurred requesting work\", [], err);\r\n        }\r\n    }\r\n\r\n    private async pollWorklist(engineerId: string, pollIntervals: number[]): Promise<PollingResults> {\r\n        if (!(pollIntervals && pollIntervals.length)) {\r\n            this.logProgress(\"pollWorklistUnchanged\");\r\n            this._tracker.registerUnchangedWorklist();\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            let thisInterval = pollIntervals.shift();\r\n            this.logProgress(\"pollWorklist\", \"waiting for \" + thisInterval + \"ms\");\r\n            await Promise.delay(thisInterval);\r\n\r\n            let breakCache = this._tracker.hasWorklistFailedPreviously();\r\n            this.logProgress(\"requestWorkList\", engineerId, { breakCache });\r\n\r\n            let response: IWorkListResponse;\r\n            try {\r\n                response = await this._fftService.getWorkList(engineerId, breakCache);\r\n            } catch (error) {\r\n                this._tracker.registerFailedWorklist(true);\r\n                if (!(pollIntervals && pollIntervals.length)) {\r\n                    throw error;\r\n                } else {\r\n                    this.logProgress(\"pollWorklistRetry\");\r\n                    return await this.pollWorklist(engineerId, pollIntervals);\r\n                }\r\n            }\r\n\r\n            this._tracker.deregisterFailedWorklist();\r\n            this.logProgress(\"returnedWorkList\", JSON.stringify(response));\r\n\r\n            // make sure we await the promises here so that this catch handler picks up any errors\r\n            return await this.shouldCompleteWorkListRetrieval(response, pollIntervals)\r\n                ? await this.completeWorklistRetrieval(response)\r\n                : await this.pollWorklist(engineerId, pollIntervals);\r\n\r\n        } catch (err) {\r\n            this._tracker.registerFailedWorklist(false);\r\n            this.logError(\"pollWorklist\", \"pollWorklisterror\", err);\r\n            throw new BusinessException(this, \"pollWorklist\", \"An error has occurred retrieving workList\", [], err);\r\n        }\r\n    }\r\n\r\n    private async completeWorklistRetrieval(workListResponse: IWorkListResponse): Promise<PollingResults> {\r\n        try {\r\n            this.logProgress(\"completeWorklistRetrieval\");\r\n            this.processWorkListMessages(workListResponse.data);\r\n            this.logProgress(\"completeWorklistRetrieval - finished messages\");\r\n\r\n            let allLiveItems = this.getLiveWorklistItems(workListResponse.data.list);\r\n            let itemsToRetrieve = allLiveItems.filter(item => this._tracker.shouldRetrieveItem(item));\r\n            let retrievalResults = await this.retrieveItemsOrErrors(itemsToRetrieve);\r\n\r\n            let updatedModels = await this.appendAndUpdateBusinessModels(retrievalResults, allLiveItems);\r\n            this.setPositions(allLiveItems, updatedModels.currentJobs, updatedModels.currentPartsCollections, retrievalResults.failures);\r\n\r\n            await Promise.all([\r\n                this._jobCacheService.setWorkListJobs(updatedModels.currentJobs),\r\n                this._jobCacheService.setPartsCollections(updatedModels.currentPartsCollections),\r\n                this._jobCacheService.setWorkListJobApiFailures(retrievalResults.failures)\r\n            ]);\r\n\r\n            this._logger.debug(\"registeringjob\", {\r\n                retrievedOk: [...retrievalResults.jobs, ...retrievalResults.partsCollections].map(item => item.id),\r\n                retrievalError: retrievalResults.failures.map(job => job.id)\r\n            });\r\n\r\n            this.registerNewWorkList(workListResponse, false);\r\n            this._tracker.registerItems(retrievalResults.okItems, retrievalResults.failedItems, allLiveItems);\r\n\r\n            return {\r\n                jobs: updatedModels.currentJobs,\r\n                newJobs: updatedModels.newJobs,\r\n                failures: retrievalResults.failures,\r\n                removed: updatedModels.removedJobs\r\n            };\r\n\r\n        } catch (err) {\r\n            this.logError(\"completeWorklistRetrieval\", \"completeWorklistRetrievalError\", err);\r\n            throw new BusinessException(this, \"completeWorklistRetrieval\", \"A job-specific error has occurred\", [], err);\r\n        }\r\n    }\r\n\r\n    private async appendAndUpdateBusinessModels(retrievalResults: RetrievalResults, allLiveItems: IWorkListItem[]): Promise<UpdatedBusinessModels> {\r\n        let {jobs, partsCollections, failures} = retrievalResults;\r\n\r\n        this.logProgress(\"storeWorkList\",\r\n            jobs && jobs.map(item => item && item.id),\r\n            partsCollections && partsCollections.map(item => item.id)\r\n        );\r\n\r\n        let handleRemovedItems = <T extends {id: string, position: number}>(currentItems: T[], workType: string): T[] => {\r\n            let removedItems: T[] = [];\r\n\r\n            // position = -1 means the job will be ignored by business code\r\n            currentItems.forEach(item => {\r\n                // if the job is no longer in the worklist remove it\r\n                if (!allLiveItems.some(liveItem => liveItem.id === item.id && liveItem.workType === workType)) {\r\n                    item.position = -1;\r\n                    removedItems.push(item);\r\n                }\r\n                // if a previously healthy job has errored remove it\r\n                if (failures.some(failedJob => failedJob.id === item.id && failedJob.workType === workType)) {\r\n                    item.position = -1;\r\n                }\r\n            });\r\n            return removedItems;\r\n        };\r\n\r\n        let handleNewOrUpdatedJobs = <T extends {id: string, position: number}>(currentItems: T[], incomingItems: T[], newItems: string []) => {\r\n\r\n            incomingItems.forEach(incomingItem => {\r\n\r\n                let idx = currentItems.findIndex(item => item.id === incomingItem.id);\r\n\r\n                if (idx >= 0) {\r\n                    currentItems[idx] = incomingItem;\r\n                } else {\r\n                    currentItems.push(incomingItem);\r\n                    newItems.push(incomingItem.id);\r\n                }\r\n            });\r\n        };\r\n\r\n        let currentJobs = await this._jobCacheService.getWorkListJobs() || [];\r\n        let removedJobs = handleRemovedItems(currentJobs, \"job\");\r\n        let newPartsCollections: string [] = [];\r\n        let newJobs: string [] = [];\r\n\r\n        handleNewOrUpdatedJobs(currentJobs, jobs, newJobs);\r\n\r\n        let currentPartsCollections: JobPartsCollection[] = await this._jobCacheService.getPartsCollections() || [];\r\n        let removedPartsCollections = handleRemovedItems(currentPartsCollections, \"partsCollection\");\r\n        handleNewOrUpdatedJobs(currentPartsCollections, partsCollections, newPartsCollections);\r\n\r\n        // for (let job of jobs) {\r\n        //     // eventually Howard wants a status acknowledgment for partsCollections too,\r\n        //     //  but only jobs at the moment\r\n        //     await this.sendJobStatusAcknowledged(job.id, job.visit && job.visit.id);\r\n        // }\r\n\r\n        return {currentJobs, newJobs, removedJobs, currentPartsCollections, removedPartsCollections};\r\n    }\r\n\r\n    private setPositions(allLiveItems: IWorkListItem[], jobs: Job[], partsCollections: JobPartsCollection[], failures: JobApiFailure[]): void {\r\n        allLiveItems.forEach((liveItem, index) => {\r\n            let job = (liveItem.workType === \"job\") && jobs.find(item => item.id === liveItem.id);\r\n            if (job && job.position !== -1) {\r\n                job.position = index;\r\n                return;\r\n            }\r\n            let partsCollection = (liveItem.workType === \"partsCollection\") && partsCollections.find(item => item.id === liveItem.id);\r\n            if (partsCollection && partsCollection.position !== -1) {\r\n                partsCollection.position = index;\r\n                return;\r\n            }\r\n            let apiFailure = failures.find(item => item.id === liveItem.id && item.workType === liveItem.workType);\r\n            if (apiFailure && apiFailure.position !== -1) {\r\n                apiFailure.position = index;\r\n            }\r\n        });\r\n    }\r\n\r\n    private processWorkListMessages(workListResponseData: IWorkListResponseData): void {\r\n        this.logProgress(\"processMessages\");\r\n        if (workListResponseData && workListResponseData.memoList) {\r\n            this._messageService.updateMessages(workListResponseData.memoList);\r\n        }\r\n    }\r\n\r\n    private async retrieveItemsOrErrors(itemsToRetrieve: IWorkListItem[]): Promise<RetrievalResults> {\r\n        this.logProgress(\"requestJobs\", itemsToRetrieve && itemsToRetrieve.map(item => item && item.id));\r\n\r\n        let jobItems = itemsToRetrieve.filter(item => this.isWorklistItemLiveJob(item));\r\n        let partsCollectionItems = itemsToRetrieve.filter(item => this.isWorklistItemLivePartsCollection(item));\r\n        try {\r\n            let [jobsAndErrors, partCollectionsAndErrors] = await Promise.all([\r\n                Promise.map(jobItems, worklistItem => this.getWorklistJobOrError(worklistItem)),\r\n                Promise.map(partsCollectionItems, worklistItem => this.getWorklistPartsCollectionOrError(worklistItem))\r\n            ]);\r\n\r\n            let jobs = jobsAndErrors\r\n                .filter(item => !item.isError);\r\n\r\n            let partsCollections = partCollectionsAndErrors\r\n                .filter(item => !item.isError);\r\n\r\n            let failures = [...jobsAndErrors, ...partCollectionsAndErrors]\r\n                .filter(item => item.isError);\r\n\r\n            return {\r\n                    jobs: jobs.map(item => <Job>item.data),\r\n                    partsCollections: partsCollections.map(item => <JobPartsCollection>item.data),\r\n                    failures: failures.map(item => <JobApiFailure>item.data),\r\n                    okItems: [\r\n                        ...jobs.map(item => item.worklistItem),\r\n                        ...partsCollections.map(item => item.worklistItem)\r\n                    ],\r\n                    failedItems: failures.map(item => item.worklistItem)\r\n                };\r\n        } catch (err) {\r\n            this.logError(\"retrieveWorkListJobsOrErrors\", \"retrieveWorkListJobsOrErrorsError\", err);\r\n            throw new BusinessException(this, \"getWorkListJobs\", \"An error has occurred getting all worklist jobs\", [], err);\r\n        }\r\n    }\r\n\r\n    private async getWorklistJobOrError(worklistItem: IWorkListItem): Promise<{ isError: boolean, data: Job | JobApiFailure, worklistItem: IWorkListItem }> {\r\n        this.logProgress(\"getWorklistItem\", worklistItem.id);\r\n\r\n        try {\r\n            let [jobApiModel, jobApiHistory] = await Promise.all([\r\n                this.getWorklistJob(worklistItem),\r\n                this.getWorklistJobHistory(worklistItem)\r\n            ]);\r\n\r\n            await this.sendJobStatusAcknowledged(worklistItem.id, jobApiModel.visit && jobApiModel.visit.id);\r\n\r\n            let job = await this._jobFactory.createJobBusinessModel(worklistItem, jobApiModel, jobApiHistory);\r\n            this.logProgress(\"returnedJobAndJobHistory\");\r\n\r\n            return { isError: false, data: job, worklistItem };\r\n        } catch (err) {\r\n            this.logError(\"getWorklistItemOrError\", \"getWorklistItemOrErrorError\", err);\r\n            return { isError: true, data: <JobApiFailure>{id: worklistItem.id, workType: \"job\"}, worklistItem };\r\n        }\r\n    }\r\n\r\n    private async getWorklistPartsCollectionOrError(worklistItem: IWorkListItem): Promise<{ isError: boolean, data: JobPartsCollection | JobApiFailure, worklistItem: IWorkListItem }> {\r\n\r\n        try {\r\n            const partApiModel = await this.getPartCollection(worklistItem);\r\n            const partCollectionJob = await this._jobFactory.createPartCollectionBusinessModel(worklistItem, partApiModel);\r\n\r\n            this.logProgress(\"returnedPartCollection\");\r\n\r\n            return {isError: false, data: partCollectionJob, worklistItem};\r\n        } catch (err) {\r\n            this.logError(\"getWorkListPartsCollectionOrError\", \"getWorkListPartsCollectionOrError\", err);\r\n            return { isError: true, data: <JobApiFailure>{id: worklistItem.id, workType: \"partsCollection\"}, worklistItem };\r\n        }\r\n    }\r\n\r\n    private async getWorklistJob(worklistItem: IWorkListItem): Promise<IJob> {\r\n        let jobId = worklistItem.id;\r\n        let breakCache = this._tracker.hasItemFailedPreviously(worklistItem);\r\n        this.logProgress(\"requestJobRecord\", jobId, { breakCache });\r\n\r\n        try {\r\n            let job = await this._fftService.getJob(jobId, breakCache);\r\n            if (!job) {\r\n                throw new BusinessException(this, \"getWorklistJob\", \"Empty job '{0}' from API\", [jobId], null);\r\n            }\r\n            return job;\r\n        } catch (err) {\r\n            throw new BusinessException(this, \"getWorklistJob\", \"Getting job '{0}' from API\", [jobId], err);\r\n        }\r\n\r\n    }\r\n\r\n    private async getWorklistJobHistory(worklistItem: IWorkListItem): Promise<IJobHistory> {\r\n        let jobId = worklistItem.id;\r\n        let breakCache = this._tracker.hasItemFailedPreviously(worklistItem);\r\n        this.logProgress(\"requestJobHistory\", jobId, { breakCache });\r\n\r\n        try {\r\n            let jobHistory = await this._fftService.getJobHistory(jobId, breakCache);\r\n            if (!jobHistory) {\r\n                throw new BusinessException(this, \"getWorklistJobHistory\", \"Empty jobHistory '{0}' from API\", [jobId], null);\r\n            }\r\n\r\n            return jobHistory;\r\n        } catch (err) {\r\n            throw new BusinessException(this, \"getWorklistJobHistory\", \"Getting job history '{0}' from API\", [jobId], err);\r\n        }\r\n    }\r\n\r\n    private async getPartCollection(worklistItem: IWorkListItem): Promise<IPartCollectionResponse> {\r\n        const jobId = worklistItem.id;\r\n        let breakCache = this._tracker.hasItemFailedPreviously(worklistItem);\r\n        this.logProgress(\"requestPartsCollection\", jobId, {breakCache });\r\n\r\n        try {\r\n            let partCollection = await this._fftService.getPartsCollection(jobId, breakCache);\r\n\r\n            if (!partCollection) {\r\n                throw new BusinessException(this, \"getPartsCollection\", \"Empty partsCollection '{0}' from API\", [jobId], null);\r\n            }\r\n\r\n            return partCollection;\r\n        } catch (err) {\r\n            throw new BusinessException(this, \"getPartsCollection\", \"Empty partsCollection '{0}' from API\", [jobId], err);\r\n        }\r\n    }\r\n\r\n    private async shouldCompleteWorkListRetrieval(workListResponse: IWorkListResponse, intervals: number[]): Promise<boolean> {\r\n        if (this._tracker.hasWorklistFailedPreviously()) {\r\n            return true;\r\n        }\r\n\r\n        let newTimestamp = this.getTimeStamp(workListResponse);\r\n        let hasTimestampChanged = newTimestamp !== this._tracker.getLastKnownModifiedTimestamp();\r\n        this.logProgress(\"comparingBeforeAndAfterTimestamps\", [this._tracker.getLastKnownModifiedTimestamp(), newTimestamp, \"has changed?: \" + hasTimestampChanged]);\r\n        if (hasTimestampChanged) {\r\n            return true;\r\n        }\r\n\r\n        //  if there are jobs in the response, and this is our first call, but we are not detecting a change in workList,\r\n        //   lets still show the engineer the jobs we have.\r\n        let isEndOfPollingVeryFirstRequestForWork = intervals.length === 0\r\n            && this._tracker.isFirstRequestForWorkOfTheDay()\r\n            && workListResponse && workListResponse.data && workListResponse.data.list && !!workListResponse.data.list.length;\r\n        if (isEndOfPollingVeryFirstRequestForWork) {\r\n            return true;\r\n        }\r\n\r\n        let isAPreviouslyFailedJobInWorkList = workListResponse && workListResponse.data && workListResponse.data.list\r\n            && workListResponse.data.list.some(workListItem => this._tracker.hasItemFailedPreviously(workListItem));\r\n        if (isAPreviouslyFailedJobInWorkList) {\r\n            return true;\r\n        }\r\n\r\n        let isAJobInTodoThatIsNotInWorklist = await this._jobCacheService.existsALiveJobNotInWorklist();\r\n        if (isAJobInTodoThatIsNotInWorklist) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private isWorklistItemLiveJob(worklistItem: IWorkListItem): boolean {\r\n        return worklistItem.workType === ObjectHelper.getPathValue(this._businessRules, \"workTypeJob\")\r\n        && worklistItem.status === ObjectHelper.getPathValue(this._businessRules, \"statusAllocated\");\r\n    }\r\n\r\n    private isWorklistItemLivePartsCollection(worklistItem: IWorkListItem): boolean {\r\n        return worklistItem.workType === ObjectHelper.getPathValue(this._businessRules, \"workTypePartsCollection\")\r\n        && worklistItem.status === ObjectHelper.getPathValue(this._businessRules, \"statusToCollect\");\r\n    }\r\n\r\n    private getLiveWorklistItems(list: IWorkListItem[]): IWorkListItem[] {\r\n\r\n        return list\r\n            .filter(worklistItem => this.isWorklistItemLiveJob(worklistItem) || this.isWorklistItemLivePartsCollection(worklistItem));\r\n    }\r\n\r\n    private registerNewWorkList(workListResponse: IWorkListResponse, isOnlyForTracking: boolean): void {\r\n        let newTimestamp = this.getTimeStamp(workListResponse);\r\n        this.logProgress(\"registerNewTimestamp\", newTimestamp);\r\n        this._tracker.registerNewWorklist(newTimestamp, isOnlyForTracking);\r\n    }\r\n\r\n    private getTimeStamp(workListResponse: IWorkListResponse): string {\r\n        return workListResponse && workListResponse.meta && workListResponse.meta.modifiedTimestamp\r\n            ? workListResponse.meta.modifiedTimestamp\r\n            : undefined;\r\n    }\r\n\r\n    private logProgress(step: string, ...rest: any[]): void {\r\n        this._logger.info(step, rest);\r\n    }\r\n\r\n    private logError(reference: string, message: string, err: any): void {\r\n        let errorString = err ? err.toString() : \"no-error\";\r\n\r\n        let analyticsMsg = (err instanceof BaseException)\r\n            ? message + \" \" + (<BaseException>err).resolvedMessage\r\n            : message + \" \" + errorString;\r\n\r\n        let analyticsModel = new AnalyticsExceptionModel(AnalyticsExceptionCodeConstants.WORK_RETRIVAL_SERVICE, false, analyticsMsg);\r\n        this._logger.error(`${reference} - ${message}`, analyticsModel, errorString);\r\n    }\r\n\r\n    private async notify(failures: JobApiFailure[], removed: Job[], newItems: string []): Promise<void> {\r\n\r\n        let messages: string[] = [];\r\n        let autoDismiss: boolean = true;\r\n\r\n        if (removed && removed.length) {\r\n            let liveJobs = await this._jobCacheService.getJobsToDo();\r\n            let liveJob = liveJobs.find(job => Job.isActive(job));\r\n            let liveJobId = liveJob && liveJob.id;\r\n\r\n            if (liveJobId && removed.some(removedJob => removedJob.id === liveJobId)) {\r\n                messages.push(`The job you are working on (${liveJobId}) has been cancelled!`);\r\n            }\r\n\r\n            let removedTodoJobs = removed.filter(removedJob => removedJob.id !== liveJobId\r\n                && !liveJobs.some(job => job.id === removedJob.id));\r\n            if (removedTodoJobs.length) {\r\n                messages.push(`${removedTodoJobs.length} of todays job(s) have been removed from your worklist.`);\r\n            }\r\n            autoDismiss = false;\r\n        }\r\n\r\n        if (failures && failures.length) {\r\n            let jobList = failures.map(failure => failure.id).join(\", \");\r\n            messages.push(`Failed to load job(s) ${jobList} in the latest work list.`);\r\n        }\r\n\r\n        if (messages.length) {\r\n            this.notifyToast(\"Worklist Update Issue: \" + [\"Worklist Update Issue: \", ...messages].join(\"\\n\"), undefined, autoDismiss);\r\n        }\r\n\r\n        if (newItems && newItems.length) {\r\n            // new jobs identified, notify via sound\r\n            this._eventAggregator.publish(SoundConstants.NOTIFICATION_SOUND, 2);\r\n        }\r\n    }\r\n\r\n    private notifyToast(content: string, details?: string, autoDismiss?: boolean): void {\r\n        if (this._activeToastItem) {\r\n            this._toastManager.closeToast(this._activeToastItem);\r\n        } else {\r\n            let toast = <IToastItem>{\r\n                id: Guid.newGuid(),\r\n                title: \"Work List Retrieval Problem\",\r\n                style: \"warning\",\r\n                autoDismiss: autoDismiss\r\n            };\r\n            toast.content = new Date().toLocaleTimeString() + \" :\" + content;\r\n            toast.toastAction = details && { details };\r\n            this._eventAggregator.publish(AppConstants.APP_TOAST_ADDED, toast);\r\n            this._activeToastItem = toast;\r\n        }\r\n    }\r\n\r\n    private async sendJobStatusAcknowledged(jobId: string, visitId: string): Promise<void> {\r\n        let rulesGroup = await this._businessRuleService.getRuleGroup(\"jobFactory\");\r\n\r\n        const ruleGroupKey = \"statusTaskAcknowledged\";\r\n\r\n        let ackJobReceivedStatus = <IJobStatusRequest>{\r\n            data: {\r\n                jobId,\r\n                reason: null,\r\n                statusCode: rulesGroup[ruleGroupKey],\r\n                timestamp: DateHelper.toJsonDateTimeString(new Date()),\r\n                visitId\r\n            }\r\n        };\r\n\r\n        return this._fftService.jobStatusUpdate(jobId, ackJobReceivedStatus);\r\n    }\r\n}\r\n"],"sourceRoot":"../../.."}