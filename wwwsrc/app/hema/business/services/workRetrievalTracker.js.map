{"version":3,"sources":["hema/business/services/workRetrievalTracker.ts"],"names":[],"mappings":"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","file":"workRetrievalTracker.js","sourcesContent":["\r\nimport { WorkRetrievalRequestingStatus } from \"./workRetrievalRequestingStatus\";\r\nimport { IConfigurationService } from \"../../../common/core/services/IConfigurationService\";\r\nimport { ConfigurationService } from \"../../../common/core/services/configurationService\";\r\nimport { IHemaConfiguration } from \"../../IHemaConfiguration\";\r\nimport { inject } from \"aurelia-dependency-injection\";\r\nimport { IWorkListItem } from \"../../api/models/fft/engineers/worklist/IWorkListItem\";\r\n// todo: back this by proper storage?\r\n@inject(ConfigurationService)\r\nexport class WorkRetrievalTracker {\r\n    public lastRequestTime: Date;\r\n    public lastUpdatedTime: Date;\r\n    public lastFailedTime: Date;\r\n    public requestingStatus: WorkRetrievalRequestingStatus;\r\n    private _configurationService: IConfigurationService;\r\n\r\n    private _requestWorkOnNextCall: boolean;\r\n    private _hasOneCompletionHappened: boolean;\r\n    private _lastKnownModifiedTimestamp: string;\r\n\r\n    private _hasWorklistFailedPreviously: boolean;\r\n    private _knownItems: IWorkListItem[];\r\n\r\n    constructor(configurationService: IConfigurationService) {\r\n        this._configurationService = configurationService;\r\n        // ensure that the first worklist always loads as even in the worst case where no timestamp is returned, null !== undefined.\r\n        this._lastKnownModifiedTimestamp = null;\r\n        this._knownItems = [];\r\n    }\r\n\r\n    public setShouldRequestWorkOnNextCall(val: boolean): void {\r\n        this._requestWorkOnNextCall = val;\r\n    }\r\n\r\n    public shouldRequestWorkOnNextCall(): boolean {\r\n        return !!this._requestWorkOnNextCall;\r\n    }\r\n\r\n    public resetLastKnownModifiedTimestamp(): void {\r\n        this._lastKnownModifiedTimestamp = null;\r\n    }\r\n\r\n    public getLastKnownModifiedTimestamp(): string {\r\n        return this._lastKnownModifiedTimestamp;\r\n    }\r\n\r\n    public isWorkListIdentifierKnown(): boolean {\r\n        return this._lastKnownModifiedTimestamp !== null;\r\n    }\r\n\r\n    public startRequesting(): void {\r\n        this.lastRequestTime = new Date();\r\n        this.requestingStatus = this._requestWorkOnNextCall\r\n            ? WorkRetrievalRequestingStatus.requestingFullRequest\r\n            : WorkRetrievalRequestingStatus.requestingRefresh;\r\n    }\r\n\r\n    public isFirstRequestForWorkOfTheDay(): boolean {\r\n        return this.requestingStatus === WorkRetrievalRequestingStatus.requestingFullRequest\r\n            && !this._hasOneCompletionHappened;\r\n    }\r\n\r\n    public registerItems(okItems: IWorkListItem[], failedItems: IWorkListItem[], allLiveItems: IWorkListItem[]): void {\r\n        this._hasOneCompletionHappened = true;\r\n\r\n        okItems.forEach(item => {\r\n            let existingItem = this._knownItems.find(knownItem => knownItem.id === item.id && knownItem.workType === item.workType);\r\n            if (existingItem) {\r\n                existingItem.timestamp = item.timestamp;\r\n            } else {\r\n                this._knownItems.push(item);\r\n            }\r\n        });\r\n\r\n        failedItems.forEach(item => {\r\n            let existingItem = this._knownItems.find(knownItem => knownItem.id === item.id && knownItem.workType === item.workType);\r\n            if (existingItem) {\r\n                existingItem.timestamp = undefined;\r\n            } else {\r\n                item.timestamp = undefined;\r\n                this._knownItems.push(item);\r\n            }\r\n        });\r\n\r\n        // prune _knownItems once a job has left the worklist\r\n        // (helps if a job enters and leaves the worklist to make sure it is refreshed from the api when it reappears)\r\n        this._knownItems = this._knownItems.filter(item => allLiveItems.some(liveItem => liveItem.id === item.id && liveItem.workType === item.workType));\r\n    }\r\n\r\n    public hasItemFailedPreviously(item: IWorkListItem): boolean {\r\n        return this._knownItems.some(knownItem => knownItem.id === item.id && knownItem.workType === item.workType && !knownItem.timestamp);\r\n    }\r\n\r\n    public shouldRetrieveItem(item: IWorkListItem): boolean {\r\n        if (this._configurationService.getConfiguration<IHemaConfiguration>().worklistAlwaysGetAllJobs) {\r\n            // if we want to brute force get all jobs every time\r\n            return true;\r\n        } else {\r\n            // otherwise we only want changed or previously failed jobs\r\n            return this.hasItemFailedPreviously(item)\r\n                    || !this._knownItems.some(knownJob => knownJob.id === item.id\r\n                                                && knownJob.timestamp === item.timestamp\r\n                                                && knownJob.workType === item.workType);\r\n        }\r\n    }\r\n\r\n    public registerUnchangedWorklist(): void {\r\n        this.requestingStatus = WorkRetrievalRequestingStatus.notRequesting;\r\n    }\r\n\r\n    public registerNewWorklist(timestamp: string, isOnlyForTracking: boolean): void {\r\n        this._lastKnownModifiedTimestamp = timestamp;\r\n        if (!isOnlyForTracking) {\r\n            this.requestingStatus = WorkRetrievalRequestingStatus.notRequesting;\r\n            this.lastUpdatedTime = new Date();\r\n        }\r\n    }\r\n\r\n    public registerFailedWorklist(isOnlyForTracking: boolean): void {\r\n        this._hasWorklistFailedPreviously = true;\r\n        if (!isOnlyForTracking) {\r\n            this.requestingStatus = WorkRetrievalRequestingStatus.notRequesting;\r\n            this.lastFailedTime = new Date();\r\n        }\r\n    }\r\n\r\n    public failedRequestWork(): void {\r\n        this.lastFailedTime = new Date();\r\n        this.requestingStatus = WorkRetrievalRequestingStatus.notRequesting;\r\n    }\r\n\r\n    public deregisterFailedWorklist(): void {\r\n        this._hasWorklistFailedPreviously = false;\r\n    }\r\n\r\n    public hasWorklistFailedPreviously(): boolean {\r\n        return !!this._hasWorklistFailedPreviously;\r\n    }\r\n}\r\n"],"sourceRoot":"../../.."}