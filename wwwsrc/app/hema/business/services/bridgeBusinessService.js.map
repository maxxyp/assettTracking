{"version":3,"sources":["hema/business/services/bridgeBusinessService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmDA,mEAAmE;IAEnE;;OAEG;IAGH;QAeI,+BAAY,gBAAmC,EAAE,UAAuB,EAAE,eAAgC,EAAE,WAAyB,EACjI,oBAA2C,EAAE,mBAAyC,EACtF,iBAAqC,EAAE,cAA+B;YACtE,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;YAC1C,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YACxC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;YAClD,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;YAChD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;YAC5C,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;YAE1D,IAAI,CAAC,oCAAoC,GAAG,CAAC,CAAC,CAAC;QACnD,CAAC;QAEM,0CAAU,GAAjB;YAAA,iBAaC;YAXG,iFAAiF;YACjF,IAAI,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAA8B,CAAC,YAAY,CAAC;YAC5G,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,yCAAmB,CAAC,iBAAiB,EAAE,cAAM,OAAA,KAAI,CAAC,qBAAqB,EAAE,EAA5B,CAA4B,CAAC,CAAC;YAC/G,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC;gBAClC,KAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAoB;gBAC1B,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,wDAAwB,GAA/B,UAAgC,eAAwB;YAAxD,iBAaC;YAXG,IAAI,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAsB,CAAC;YAC1F,IAAI,mBAAmB,GAAG,iBAAiB,IAAI,CAAC,CAAC,iBAAiB,CAAC,oBAAoB,CAAC;YAExF,EAAE,CAAC,CAAC,eAAe,IAAI,mBAAmB,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,oCAAoC,GAAG,qBAAS,CAAC,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,gCAAgC,EAAE,EAAvC,CAAuC,EAAE,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;YAC5J,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,oCAAoC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnD,qBAAS,CAAC,SAAS,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;oBAC/D,IAAI,CAAC,oCAAoC,GAAG,CAAC,CAAC,CAAC;gBACnD,CAAC;YACL,CAAC;QACL,CAAC;QAEM,gEAAgC,GAAvC;YAAA,iBAkDC;YAhDG,IAAI,gBAAgB,GAAG,UAAC,IAAwB;gBAC5C,MAAM,CAAC,IAAI;uBACJ,IAAI,CAAC,gBAAgB;uBACrB,KAAI,CAAC,uCAAuC;uBAC5C,KAAI,CAAC,uCAAuC,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,2BAAY,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,EAAE,MAAM,CAAC,EAAtD,CAAsD,CAAC,CAAC;YAC/H,CAAC,CAAC;YAEF,MAAM,CAAC,OAAO,CAAC,GAAG,CAA0C;gBACxD,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE;gBACzC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE;qBAC5B,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAzD,CAAyD,CAAC;aACtF,CAAC;iBACG,IAAI,CAAC,UAAC,EAA0B;oBAAzB,qBAAa,EAAE,iBAAS;gBAE5B,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBAE9E,EAAE,CAAC,CAAC,aAAa,IAAI,aAAa,CAAC,KAAK,IAAI,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;oBACrE,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,KAAK,KAAK,mBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;wBAEpD,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBAEtF,MAAM,CAAC,KAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;oBACjE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBAEJ,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,EAAE,CAAC,CAAC;wBAEtD,IAAI,eAAe,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,gBAAgB,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;wBAC3E,EAAE,CAAC,CAAC,eAAe,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;4BAC5C,MAAM,CAAC,KAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;wBACvD,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,EAAE,CAAC,CAAC;gBACpD,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,KAAoB;gBACxB,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC9C,KAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;gBAErC,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,2BAAY,CAAC,eAAe,EAAc;oBACpE,EAAE,EAAE,WAAI,CAAC,OAAO,EAAE;oBAClB,KAAK,EAAE,0BAA0B;oBACjC,KAAK,EAAE,SAAS;oBAChB,OAAO,EAAE,wFAAwF;oBACjG,WAAW,EAAE,CAAC;iBACjB,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACX,CAAC;QAED;;;;;;;;;WASG;QACI,+CAAe,GAAtB;YACI,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,CAAC;QACpD,CAAC;QAED;;;;;WAKG;QACI,qDAAqB,GAA5B,UAA6B,KAAa,EAAE,kBAAkC;YAA9E,iBAoGC;YApG2C,mCAAA,EAAA,yBAAkC;YAE1E,IAAI,GAAG,GAA0B,EAAE,CAAC;YAEpC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG;gBAE1C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACP,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;gBAED,EAAE,CAAC,CAAC,kBAAkB,IAAI,GAAG,CAAC,KAAK,KAAK,mBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;oBACvD,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;gBAEO,IAAA,WAAE,EAAE,qBAAO,EAAE,qCAAe,EAAE,uBAAQ,CAAS;gBAEvD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACF,IAAA,qBAAuB,EAAvB,kCAAuB,EAAE,iCAAwB,EAAE,iCAAwB,CAAa;oBAEhG,GAAG,CAAC,UAAU,GAAG,EAAE,CAAC;oBACpB,GAAG,CAAC,iBAAiB,GAAG,aAAa,CAAC;oBACtC,GAAG,CAAC,iBAAiB,GAAG,aAAa,CAAC;oBACtC,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC5B,CAAC;gBAED,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;oBACV,IAAA,6BAAuB,EAAvB,kCAAuB,EAAE,qCAAoB,CAAqB;oBAE1E,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBAExB,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBAEV,IAAA,2BAAc,EAAE,wCAA2B,EAAE,yCAA4B,EAAE,2BAAc,EACzF,+BAAkB,EAAE,uCAA0B,EAAE,yCAA4B,CAChE;wBAEhB,GAAG,CAAC,eAAe,GAAG,eAAe,CAAC;wBACtC,GAAG,CAAC,aAAa,GAAG,aAAa,CAAC;wBAClC,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC;wBAC1B,GAAG,CAAC,UAAU,GAAG,QAAQ,CAAC;wBAC1B,GAAG,CAAC,UAAU,GAAG,cAAc,CAAC;wBAChC,GAAG,CAAC,WAAW,GAAG,eAAe,CAAC;wBAElC,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAClC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCACd,GAAG,CAAC,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;4BAClC,CAAC;4BACD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCACd,GAAG,CAAC,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;4BAClC,CAAC;wBACL,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACH,IAAA,6BAAmB,CAAc;oBAEzC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBAET,IAAA,yBAAa,EAAE,sCAA0B,EAAE,uCAA2B,EAAE,yBAAa,EACrF,6BAAiB,EAAE,qCAAyB,EAAE,uCAA2B,CAC9D;wBAEf,GAAG,CAAC,cAAc,GAAG,cAAc,CAAC;wBACpC,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC;wBAChC,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC;wBACxB,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC;wBACxB,GAAG,CAAC,SAAS,GAAG,aAAa,CAAC;wBAC9B,GAAG,CAAC,UAAU,GAAG,cAAc,CAAC;wBAEhC,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCACb,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;4BACjC,CAAC;4BACD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCACb,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;4BACjC,CAAC;wBACL,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,MAAM,CAAC,KAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,GAAG,CAAC;qBACjD,KAAK,CAAC,UAAA,GAAG;oBAEN,IAAM,OAAO,GAAG,iFAAiF,CAAC;oBAClG,IAAM,KAAK,GAAG,yBAAyB,CAAC;oBAExC,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,2BAAY,CAAC,eAAe,EAAc;wBACpE,EAAE,EAAE,WAAI,CAAC,OAAO,EAAE;wBAClB,KAAK,OAAA;wBACL,KAAK,EAAE,SAAS;wBAChB,OAAO,SAAA;wBACP,WAAW,EAAE,CAAC;qBACjB,CAAC,CAAC;oBAEH,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;oBAEjC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACP,CAAC;QAED;;;;WAIG;QACI,uDAAuB,GAA9B,UAA+B,eAAuB;YAAtD,iBA4BC;YA3BG,IAAI,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;YAEzD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,eAAe,CAAC;iBACnD,IAAI,CAAC,UAAC,QAA6B;gBAChC,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;oBAExD,mDAAmD;oBACnD,IAAI,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAzD,CAAyD,CAAC,CAAC;oBAE5G,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;wBAEzC,IAAI,aAAa,GAA2B,EAAE,CAAC;wBAC/C,MAAM,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,aAAa,CAAC,IAAI,OAAlB,aAAa,EAAS,CAAC,CAAC,UAAU,GAAlC,CAAmC,CAAC,CAAC;wBAEzD,IAAI,4BAA4B,GAAG,KAAI,CAAC,2CAA2C,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;wBACrG,MAAM,CAAC,KAAI,CAAC,uBAAuB,CAAC,aAAa,EAAE,4BAA4B,CAAC,CAAC;oBAErF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;wBACX,MAAM,IAAI,qCAAiB,CAAC,KAAI,EAAE,sBAAsB,EAAE,sCAAoC,eAAe,gBAAa,EAAE,CAAC,eAAe,CAAC,EAAE,KAAK,CAAC,CAAC;oBAC1J,CAAC,CAAC,CAAC;gBAEP,CAAC;gBACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,qDAAyB,CAAC,KAAK,CAAC,CAAC,CAAC;YACjE,CAAC,CAAC;iBACD,KAAK,CAAC,UAAA,KAAK;gBACR,MAAM,IAAI,qCAAiB,CAAC,KAAI,EAAE,8CAA8C,EAAE,wCAAwC,EAAE,CAAC,eAAe,CAAC,EAAE,KAAK,CAAC,CAAC;YAC1J,CAAC,CAAC,CAAC;QACX,CAAC;QAED;;;;WAIG;QACI,4CAAY,GAAnB,UAAoB,MAAc;YAC9B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACvF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,MAAM,CAAC;YAClB,CAAC;QACL,CAAC;QAEM,kDAAkB,GAAzB;YAAA,iBAQC;YAPG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,2BAAY,CAAC,WAAW,CAAC,2BAAY,CAAC,YAAY,CAAC,yBAAW,CAAC,CAAC,CAAC;iBACnH,IAAI,CAAC,UAAC,SAAS;gBACZ,IAAI,eAAe,GAAG,SAAS,CAAC,eAAe,CAAS,sCAAsC,CAAC,CAAC;gBAChG,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;oBAClB,KAAI,CAAC,uCAAuC,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC9E,CAAC;YACL,CAAC,CAAC,CAAC;QACX,CAAC;QAEY,6CAAa,GAA1B;;;;;;4BAEQ,iBAAiB,GAAG,IAAI,mCAAgB,EAAE,CAAC;4BAC/C,iBAAiB,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;;;;4BAGrC,qBAAM,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,EAAA;;4BAA1C,SAA0C,CAAC;4BAE3B,qBAAM,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,EAAA;;4BAAnD,OAAO,GAAG,SAAyC;4BACzD,iBAAiB,CAAC,QAAQ,GAAG,IAAI,CAAC;4BAClC,iBAAiB,CAAC,OAAO,GAAG,OAAO,CAAC;;;;;gCAGxC,sBAAO,iBAAiB,EAAC;;;;SAC5B;QAEO,qDAAqB,GAA7B;YAAA,iBAMC;YALG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE;iBACnC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW;gBAC5B,CAAC,CAAC,KAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC;gBACzC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAFF,CAEE,CAAC,+DAA+D;aACtF,CAAC;QACV,CAAC;QAEO,wDAAwB,GAAhC,UAAiC,UAAoB;YACjD,IAAI,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,IAAI,IAAI,CAAC,SAAS,CAAC,EAAnB,CAAmB,CAAC,CAAC;YAC7D,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QACjD,CAAC;QAEO,4CAAY,GAApB,UAAqB,aAAqB,EAAE,cAAoB;YAC5D,MAAM,CAAC,CAAC,cAAc,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC5E,CAAC;QAEO,qDAAqB,GAA7B,UAA8B,4BAAkD;YAAhF,iBAwBC;YAvBG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,EAAE;iBAChD,IAAI,CAAC,UAAC,MAAM;gBACT,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACT,IAAI,oBAAkB,GAAG,4BAA4B,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,oBAAoB,CAAC,EAA3D,CAA2D,CAAC,CAAC;oBAC/H,MAAM,CAAC,oBAAoB,GAAG,KAAI,CAAC,wBAAwB,CAAC,4BAA4B,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,SAAS,EAAX,CAAW,CAAC,CAAC,CAAC;oBAEhH,EAAE,CAAC,CAAC,oBAAkB,IAAI,oBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;wBAClD,MAAM,CAAC,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,MAAM,CAAC;6BAC5C,IAAI,CAAC;4BACF,IAAI,QAAQ,GAAG,oBAAkB,CAAC,GAAG,CAAC,UAAA,SAAS;gCAC3C,IAAI,IAAI,GAAG,KAAI,CAAC,YAAY,CAAC,wCAAwC,CAAC,SAAS,CAAC,CAAC;gCACjF,MAAM,CAAC,KAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,IAAI,+BAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACrI,CAAC,CAAC,CAAC;4BAEH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;wBACjC,CAAC,CAAC;6BACD,IAAI,CAAC;4BACF,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,6DAA6B,CAAC,oBAAoB,EAAE,oBAAkB,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,gBAAgB,EAAlB,CAAkB,CAAC,CAAC,CAAC;wBACvI,CAAC,CAAC,CAAC;oBACX,CAAC;gBACL,CAAC;gBACD,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC,CAAC,CAAC;QACX,CAAC;QAEO,gDAAgB,GAAxB,UAAyB,aAAmC,EAAE,GAAQ;YAAtE,iBA+DC;YA9DG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;gBACnB,GAAG,CAAC,WAAW,GAAG,IAAI,yBAAW,EAAE,CAAC;YACxC,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC/B,GAAG,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI,yBAAwB,EAAE,CAAC;YACjE,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACpD,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,oBAAoB,GAAG,GAAG,CAAC,UAAU,CAAC;YACtE,CAAC;YAED,IAAI,kBAAkB,GAAG,aAAa,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,oBAAoB,CAAC,EAAhF,CAAgF,CAAC,CAAC;YACrI,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,oBAAoB,GAAG,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,SAAS,EAAX,CAAW,CAAC,CAAC,CAAC;YAEtH,EAAE,CAAC,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;gBAClD,IAAI,oBAAkB,GAAwB,EAAE,CAAC;gBAEjD,IAAI,yBAAyB,GAAoB,EAAE,CAAC;gBAEpD,yBAAyB,GAAG,kBAAkB,CAAC,GAAG,CAAC,UAAC,YAAY;oBAC5D,MAAM,CAAC,KAAI,CAAC,eAAe,CAAC,YAAY,CAAC,YAAY,CAAC,gBAAgB,CAAC;yBAClE,IAAI,CAAC,UAAC,mBAAmB;wBACtB,IAAI,iBAAiB,GAAG,KAAI,CAAC,YAAY,CAAC,wCAAwC,CAAC,YAAY,CAAC,CAAC;wBAEjG,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;4BACtB,IAAI,wBAAwB,GAAG,mBAAmB,CAAC,MAAM;gCACrD,CAAC,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,mBAAmB,CAAC,MAAM,GAAG,GAAG,CAAC;gCAC3D,CAAC,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;4BAEjC,EAAE,CAAC,CAAC,wBAAwB,KAAK,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;gCACvD,iBAAiB,CAAC,gCAAgC,GAAG,IAAI,CAAC;gCAC1D,iBAAiB,CAAC,KAAK,GAAG,wBAAwB,CAAC;4BACvD,CAAC;wBACL,CAAC;wBAED,oBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBAC/C,CAAC,CAAC,CAAC;gBACX,CAAC,CAAC,CAAC;gBAEH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;qBACxC,IAAI,CAAC;oBACF,CAAA,KAAA,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,YAAY,CAAA,CAAC,IAAI,WAAI,oBAAkB,EAAE;oBACrE,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,GAAG,qBAAS,CAAC,UAAU,CAAC;oBAE7D,uGAAuG;oBACvG,8EAA8E;oBAC9E,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC;yBAC9B,IAAI,CAAC;wBACF,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,6DAA6B,CAAC,oBAAoB,EAC5E,oBAAkB,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,EAAE,EAAP,CAAO,CAAC,CAC1C,CAAC;wBACF,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,yCAAmB,CAAC,sBAAsB,CAAC,CAAC;oBAC9E,CAAC,CAAC,CAAC;;gBACX,CAAC,CAAC;qBACD,KAAK,CAAC,UAAC,KAAK;oBACT,wCAAwC;oBACxC,MAAM,IAAI,qCAAiB,CAAC,KAAI,EAAE,sCAAsC,EAAE,iEAAiE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC9J,CAAC,CAAC,CAAC;YACX,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC;QACL,CAAC;QAEO,2EAA2C,GAAnD,UAAoD,MAAqB;YACrE,uEAAuE;YACvE,mIAAmI;YACnI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACrB,CAAC;QAEO,uDAAuB,GAA/B,UAAgC,aAAqC,EAAE,0BAAyE;YAE5I,IAAI,YAAY,GAAG,UAAC,IAA0B,IAAK,OAAA,aAAa,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,aAAa,KAAK,IAAI,CAAC,aAAa;mBACtH,CAAC,IAAI,CAAC,cAAc,KAAK,SAAS,IAAI,CAAC,OAAO,CAAC,cAAc,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC,EADb,CACa,CAC7F,EAFkD,CAElD,CAAC;YAEF,IAAI,MAAM,GAAG,IAAI,qDAAyB,CAAC,IAAI,CAAC,CAAC;YAEjD,MAAM,CAAC,WAAW,GAAG,0BAA0B,CAAC,WAAW,CAAC;YAC5D,MAAM,CAAC,YAAY,GAAG,0BAA0B,CAAC,YAAY,CAAC;YAE9D,MAAM,CAAC,MAAM,GAAG,YAAY,CAAC,iDAAuB,CAAC,iBAAiB,CAAC,CAAC;YACxE,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC,iDAAuB,CAAC,aAAa,CAAC,CAAC;YAE1E,4FAA4F;YAC5F,kFAAkF;YAClF,EAAE,CAAC,CAAC,YAAY,CAAC,iDAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC9C,MAAM,CAAC,kBAAkB,GAAG,+DAA8B,CAAC,KAAK,CAAC;YACrE,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,iDAAuB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACzD,MAAM,CAAC,kBAAkB,GAAG,+DAA8B,CAAC,SAAS,CAAC;YACzE,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,iDAAuB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;gBAClE,MAAM,CAAC,kBAAkB,GAAG,+DAA8B,CAAC,kBAAkB,CAAC;YAClF,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,iDAAuB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC9D,MAAM,CAAC,kBAAkB,GAAG,+DAA8B,CAAC,cAAc,CAAC;YAC9E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,kBAAkB,GAAG,+DAA8B,CAAC,EAAE,CAAC;YAClE,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QApcQ,qBAAqB;YAFjC,0BAAM,CAAC,mCAAgB,EAAE,uBAAU,EAAE,0CAAe,EAAE,yBAAW,EAAE,2CAAoB,EAAE,yCAAmB,EAAE,qCAAiB,EAAE,+BAAc,CAAC;6DAiBlD,0CAAe;WAfjG,qBAAqB,CAqcjC;QAAD,4BAAC;KArcD,AAqcC,IAAA;IArcY,sDAAqB","file":"bridgeBusinessService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\nimport * as Logging from \"aurelia-logging\";\nimport { inject } from \"aurelia-framework\";\nimport * as moment from \"moment\";\nimport { IBridgeBusinessService } from \"./interfaces/IBridgeBusinessService\";\nimport { IBridgeApiService } from \"../../api/services/interfaces/IBridgeApiService\";\nimport { BridgeApiService } from \"../../api/services/bridgeApiService\";\nimport { IAdaptModel } from \"../../api/models/adapt/IAdaptModel\";\nimport { IAdaptModelAttribute } from \"../../api/models/adapt/IAdaptModelAttribute\";\nimport { AdaptAttributeConstants } from \"./constants/adaptAttributeConstants\";\nimport { IAdaptModelResponse } from \"../../api/models/adapt/IAdaptModelResponse\";\nimport { IAdaptPartsSelectedResponse } from \"../../api/models/adapt/IAdaptPartsSelectedResponse\";\nimport { AdaptAvailabilityAttributeType } from \"./constants/adaptAvailabilityAttributeType\";\nimport { ExternalApplianceAppModel } from \"../models/adapt/externalApplianceAppModel\";\nimport { UserSettings } from \"../models/adapt/UserSettings\";\nimport { BusinessException } from \"../models/businessException\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { IJobService } from \"./interfaces/IJobService\";\nimport { JobService } from \"./jobService\";\nimport { Threading } from \"../../../common/core/threading\";\nimport { JobState } from \"../models/jobState\";\nimport { Part as PartBusinessModel } from \"../models/part\";\nimport { Job } from \"../models/job\";\nimport { PartFactory } from \"../factories/partFactory\";\nimport { IPartFactory } from \"../factories/interfaces/IPartFactory\";\nimport { PartsDetail } from \"../models/partsDetail\";\nimport { JobServiceConstants } from \"./constants/jobServiceConstants\";\nimport { AdaptBusinessServiceConstants } from \"./constants/adaptBusinessServiceConstants\";\nimport { DataState } from \"../models/dataState\";\nimport { IConfigurationService } from \"../../../common/core/services/IConfigurationService\";\nimport { ConfigurationService } from \"../../../common/core/services/configurationService\";\nimport { IHemaConfiguration } from \"../../IHemaConfiguration\";\nimport { BusinessRuleService } from \"./businessRuleService\";\nimport { IBusinessRuleService } from \"./interfaces/IBusinessRuleService\";\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\nimport { PartsBasket, PartsBasket as PartsBasketBusinessModel } from \"../models/partsBasket\";\nimport { StringHelper } from \"../../../common/core/stringHelper\";\nimport { BaseException } from \"../../../common/core/models/baseException\";\nimport { IAdaptPartSelected } from \"../../api/models/adapt/IAdaptPartSelected\";\nimport { ConsumableService } from \"./consumableService\";\nimport { IConsumableService } from \"./interfaces/IConsumableService\";\nimport { ConsumablePart } from \"../models/consumablePart\";\nimport { ICatalogService } from \"./interfaces/ICatalogService\";\nimport { CatalogService } from \"./catalogService\";\nimport * as bignumber from \"bignumber\";\nimport { IQuoteCustomerDetails } from \"../../api/models/adapt/IQuoteCustomerDetails\";\nimport { AppConstants } from \"../../../appConstants\";\nimport { IToastItem } from \"../../../common/ui/elements/models/IToastItem\";\nimport { Guid } from \"../../../common/core/guid\";\nimport { ITrainingModeConfiguration } from \"./interfaces/ITrainingModeConfiguration\";\nimport { BridgeDiagnostic } from \"../models/bridgeDiagnostic\";\n// import { ConsumablesBasket } from \"../models/consumablesBasket\";\n\n/**\n * Business service to communicate with Adapt database, work out parts availability and safety risks for appliance\n */\n@inject(BridgeApiService, JobService, EventAggregator, PartFactory, ConfigurationService, BusinessRuleService, ConsumableService, CatalogService)\n\nexport class BridgeBusinessService implements IBridgeBusinessService {\n\n    private _bridgeApiService: IBridgeApiService;\n    private _jobService: IJobService;\n    private _eventAggregator: EventAggregator;\n    private _partFactory: IPartFactory;\n    private _configurationService: IConfigurationService;\n    private _businessRuleService: IBusinessRuleService;\n    private _consumableService: IConsumableService;\n    private _catalogService: ICatalogService;\n\n    private _monitorAdaptPartsSelectedIntervalId: number;\n    private _isPartConsumableStockReferencePrefixes: string[];\n    private _logger: Logging.Logger;\n\n    constructor(bridgeApiService: IBridgeApiService, jobService: IJobService, eventAggregator: EventAggregator, partFactory: IPartFactory,\n        configurationService: IConfigurationService, businessRuleService: IBusinessRuleService,\n        consumableService: IConsumableService, catalogService: ICatalogService) {\n        this._bridgeApiService = bridgeApiService;\n        this._eventAggregator = eventAggregator;\n        this._jobService = jobService;\n        this._partFactory = partFactory;\n        this._configurationService = configurationService;\n        this._businessRuleService = businessRuleService;\n        this._consumableService = consumableService;\n        this._catalogService = catalogService;\n        this._logger = Logging.getLogger(\"BridgeBusinessService\");\n\n        this._monitorAdaptPartsSelectedIntervalId = -1;\n    }\n\n    public initialise(): Promise<void> {\n\n        // want to generate customer qoute text file on job status change (arrived state)\n        let isTrainingMode = this._configurationService.getConfiguration<ITrainingModeConfiguration>().trainingMode;\n        if (!isTrainingMode) {\n            this._eventAggregator.subscribe(JobServiceConstants.JOB_STATE_CHANGED, () => this.handleJobStateChanged());\n        }\n\n        return this.buildBusinessRules().then(() => {\n            this.stopStartAdaptMonitoring(true);\n        }).catch((error: BaseException) => {\n            this._logger.error(error && error.toString());\n        });\n    }\n\n    public stopStartAdaptMonitoring(startMonitoring: boolean): void {\n\n        let hemaConfiguration = this._configurationService.getConfiguration<IHemaConfiguration>();\n        let isPollingSwitchedOn = hemaConfiguration && !!hemaConfiguration.adaptPollingInterval;\n\n        if (startMonitoring && isPollingSwitchedOn) {\n            this._monitorAdaptPartsSelectedIntervalId = Threading.startTimer(() => this.monitorAdaptPartsSelectedElapsed(), hemaConfiguration.adaptPollingInterval);\n        } else {\n            if (this._monitorAdaptPartsSelectedIntervalId !== -1) {\n                Threading.stopTimer(this._monitorAdaptPartsSelectedIntervalId);\n                this._monitorAdaptPartsSelectedIntervalId = -1;\n            }\n        }\n    }\n\n    public monitorAdaptPartsSelectedElapsed(): Promise<void> {\n\n        let isPartConsumable = (part: IAdaptPartSelected) => {\n            return part\n                && part.stockReferenceId\n                && this._isPartConsumableStockReferencePrefixes\n                && this._isPartConsumableStockReferencePrefixes.some(prefix => StringHelper.startsWith(part.stockReferenceId, prefix));\n        };\n\n        return Promise.all<IAdaptPartsSelectedResponse, Job | null>([\n            this._bridgeApiService.getPartsSelected(),\n            this._jobService.getActiveJobId()\n                .then(activeJobId => activeJobId ? this._jobService.getJob(activeJobId) : null)\n        ])\n            .then(([partsSelected, activeJob]) => {\n\n                this._logger.debug(\"parts located in adapt\", [JSON.stringify(partsSelected)]);\n\n                if (partsSelected && partsSelected.parts && partsSelected.parts.length) {\n                    if (activeJob && activeJob.state === JobState.arrived) {\n\n                        this._logger.debug(\"add parts basket, activeJob status\", [JSON.stringify(activeJob)]);\n\n                        return this.addToPartsBasket(partsSelected.parts, activeJob);\n                    } else {\n\n                        this._logger.debug(\"add consumable parts basket\", []);\n\n                        let consumableParts = partsSelected.parts.filter(x => isPartConsumable(x));\n                        if (consumableParts && consumableParts.length) {\n                            return this.addToConsumableBasket(consumableParts);                                \n                        }\n                    }\n                }\n\n                this._logger.debug(\"no parts found from adapt\", []);\n                return undefined;\n            })\n            .catch((error: BaseException) => {\n                this._logger.error(error && error.toString());\n                this.stopStartAdaptMonitoring(false);\n\n                this._eventAggregator.publish(AppConstants.APP_TOAST_ADDED, <IToastItem>{\n                    id: Guid.newGuid(),\n                    title: \"Adapt Connection Problem\",\n                    style: \"warning\",\n                    content: \"Could not check for parts from Adapt. Ensure adapt and the Bridge Service are running.\",\n                    dismissTime: 0\n                });\n            });\n    }\n\n    /**\n     * gets the user information specified in the adapt settings\n     * @returns {string}\n     *\n     * Note: 22/11/2017 - this method returns a set of details describing the user (name, phone, region, etc) from the ADAPT application.\n     *  These settings from ADAPT include working sector, region and patch.  EWB is also interested in these three settings.\n     *  The problem is that the values ADAPT keeps are in a different format to how EWB keeps them, hence there is no usefulness\n     *  in using this endpoint at the current time.  This may change in the future, hence this method is left in.\n     *\n     */\n    public getUserSettings(): Promise<UserSettings> {\n        return this._bridgeApiService.getUserSettings();\n    }\n\n    /**\n     * used to export customer details, generates a post JSON body with customer details for api call to bridge service\n     * @param jobId\n     * @param hasTobeActiveState - if want to manually invoke (e.g. clicking button) set to false\n     * @returns {Promise<Job>}\n     */\n    public exportCustomerDetails(jobId: string, hasTobeActiveState: boolean = true): Promise<void> {\n\n        let req = <IQuoteCustomerDetails>{};\n\n        return this._jobService.getJob(jobId).then(job => {\n\n            if (!job) {\n                return Promise.resolve();\n            }\n\n            if (hasTobeActiveState && job.state !== JobState.arrived) {\n                return Promise.resolve();\n            }\n\n            const { id, contact, customerContact, premises } = job;\n\n            if (contact) {\n                const { lastName: custName = \"\", workPhone: custWorkPhone, homePhone: custHomePhone } = contact;\n\n                req.wMISnumber = id;\n                req.workcontactnumber = custWorkPhone;\n                req.homecontactnumber = custHomePhone;\n                req.custName = custName;\n            }\n\n            if (customerContact) {\n                const { lastName: billName = \"\", address: billAddress } = customerContact;\n\n                req.billName = billName;\n\n                if (billAddress) {\n                    const {\n                        line: billLine, premisesName: billHouseName, houseNumber: billHouseNumber, town: billTown,\n                        county: billCounty, postCodeIn: billPostCodeIn, postCodeOut: billPostCodeOut\n                    } = billAddress;\n\n                    req.billhousenumber = billHouseNumber;\n                    req.billhousename = billHouseName;\n                    req.billcity = billCounty;\n                    req.billsuburb = billTown;\n                    req.billpostin = billPostCodeIn;\n                    req.billpostout = billPostCodeOut;\n\n                    if (billLine && billLine.length > 0) {\n                        if (billLine[0]) {\n                            req.billstreet1 = billLine[0];\n                        }\n                        if (billLine[1]) {\n                            req.billstreet2 = billLine[1];\n                        }\n                    }\n                }\n            }\n\n            if (premises) {\n                const { address: jobAddress } = premises;\n\n                if (jobAddress) {\n                    const {\n                        line: jobLine, premisesName: jobHouseName, houseNumber: jobHouseNumber, town: jobTown,\n                        county: jobCounty, postCodeIn: jobPostCodeIn, postCodeOut: jobPostCodeOut\n                    } = jobAddress;\n\n                    req.jobhousenumber = jobHouseNumber;\n                    req.jobhousename = jobHouseName;\n                    req.jobcity = jobCounty;\n                    req.jobsuburb = jobTown;\n                    req.jobpostin = jobPostCodeIn;\n                    req.jobpostout = jobPostCodeOut;\n\n                    if (jobLine && jobLine.length > 0) {\n                        if (jobLine[0]) {\n                            req.jobaddress1 = jobLine[0];\n                        }\n                        if (jobLine[1]) {\n                            req.jobaddress2 = jobLine[1];\n                        }\n                    }\n                }\n            }\n\n            return this._bridgeApiService.postCustomerDetails(req)\n                .catch(err => {\n\n                    const content = \"Could not export customer details. Check Bridge Service and Quote folder exists\";\n                    const title = \"Customer Export Failure\";\n\n                    this._eventAggregator.publish(AppConstants.APP_TOAST_ADDED, <IToastItem>{\n                        id: Guid.newGuid(),\n                        title,\n                        style: \"warning\",\n                        content,\n                        dismissTime: 0\n                    });\n\n                    this._logger.error(content, err);\n\n                    return Promise.resolve(null);\n                });\n        });\n    }\n\n    /**\n     * Call api to get appliance information, first get models, then use model id to get model attributes\n     * @param applianceGCCode\n     * @returns {Promise<ExternalApplianceAppModel>}\n     */\n    public getApplianceInformation(applianceGCCode: string): Promise<ExternalApplianceAppModel> {\n        let formattedGCCode = this.formatGCCode(applianceGCCode);\n\n        return this._bridgeApiService.getModels(formattedGCCode)\n            .then((response: IAdaptModelResponse) => {\n                if (response && response.models && response.models.length) {\n\n                    // there can be more than one model for the gc code\n                    let getModelCalls = response.models.map(model => this._bridgeApiService.getModelAttributes(model.imModKey));\n\n                    return Promise.all(getModelCalls).then(result => {\n\n                        let apiAttributes: IAdaptModelAttribute[] = [];\n                        result.forEach(r => apiAttributes.push(...r.attributes));\n\n                        let representativeModelForResult = this.getRepresentativeDescriptionAndManufacturer(response.models);\n                        return this.mapApiAttributesToModel(apiAttributes, representativeModelForResult);\n\n                    }).catch((error) => {\n                        throw new BusinessException(this, \"adaptBusinessService\", `could not get product with gc no ${formattedGCCode} from adapt`, [formattedGCCode], error);\n                    });\n\n                }\n                return Promise.resolve(new ExternalApplianceAppModel(false));\n            })\n            .catch(error => {\n                throw new BusinessException(this, \"adaptBusinessService.getApplianceInformation\", \"could not get product with gc no '{0}'\", [applianceGCCode], error);\n            });\n    }\n\n    /**\n     * formats the plain gcCode into the formatted one for adapt\n     * @returns {string}\n     * @param gcCode\n     */\n    public formatGCCode(gcCode: string): string {\n        if (gcCode.length === 7) {\n            return gcCode.substr(0, 2) + \"-\" + gcCode.substr(2, 3) + \"-\" + gcCode.substr(5, 2);\n        } else {\n            return gcCode;\n        }\n    }\n\n    public buildBusinessRules(): Promise<void> {\n        return this._businessRuleService.getQueryableRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(PartsBasket)))\n            .then((ruleGroup) => {\n                let consumableRules = ruleGroup.getBusinessRule<string>(\"isPartConsumableStockReferencePrefix\");\n                if (consumableRules) {\n                    this._isPartConsumableStockReferencePrefixes = consumableRules.split(\",\");\n                }\n            });\n    }\n\n    public async getDiagnostic(): Promise<BridgeDiagnostic> {\n\n        let diagnosticSummary = new BridgeDiagnostic();\n        diagnosticSummary.timestamp = new Date();\n\n        try {\n            await this._bridgeApiService.getStatusOk();\n\n            const version = await this._bridgeApiService.getVersion();\n            diagnosticSummary.statusOk = true;\n            diagnosticSummary.version = version;\n\n        } catch (ex) { }\n        return diagnosticSummary;\n    }\n\n    private handleJobStateChanged(): Promise<void> {\n        return this._jobService.getActiveJobId()\n            .then(activeJobId => activeJobId\n                ? this.exportCustomerDetails(activeJobId)\n                : Promise.resolve() // the job may have just been completed, so activeJobId is null\n            );\n    }\n\n    private getMaxDateFromTimestamps(timestamps: string[]): Date {\n        let dates = timestamps.map(timestamp => new Date(timestamp));\n        return new Date(Math.max.apply(null, dates));\n    }\n\n    private isRecentPart(partTimestamp: string, lastBasketDate: Date): boolean {\n        return !lastBasketDate || moment(partTimestamp).isAfter(lastBasketDate);\n    }\n\n    private addToConsumableBasket(validConsumablePartsSelected: IAdaptPartSelected[]): Promise<void> {\n        return this._consumableService.getConsumablesBasket()\n            .then((basket) => {\n                if (basket) {\n                    let validPartsSelected = validConsumablePartsSelected.filter(x => this.isRecentPart(x.timestamp, basket.lastPartGatheredTime));\n                    basket.lastPartGatheredTime = this.getMaxDateFromTimestamps(validConsumablePartsSelected.map(a => a.timestamp));\n\n                    if (validPartsSelected && validPartsSelected.length) {\n                        return this._consumableService.saveBasket(basket)\n                            .then(() => {\n                                let promises = validPartsSelected.map(validPart => {\n                                    let part = this._partFactory.createPartBusinessModelFromAdaptApiModel(validPart);\n                                    return this._consumableService.addConsumableToBasket(new ConsumablePart(part.stockReferenceId, part.description, part.quantity));\n                                });\n\n                                return Promise.all(promises);                                    \n                            })\n                            .then(() => {\n                                this._eventAggregator.publish(AdaptBusinessServiceConstants.ADAPT_PARTS_SELECTED, validPartsSelected.map(p => p.stockReferenceId));\n                            });                      \n                    }\n                }\n                return undefined;\n            });\n    }\n\n    private addToPartsBasket(partsSelected: IAdaptPartSelected[], job: Job): Promise<void> {\n        if (!job.partsDetail) {\n            job.partsDetail = new PartsDetail();\n        }\n\n        if (!job.partsDetail.partsBasket) {\n            job.partsDetail.partsBasket = new PartsBasketBusinessModel();\n        }\n\n        if (!job.partsDetail.partsBasket.lastPartGatheredTime) {\n            job.partsDetail.partsBasket.lastPartGatheredTime = job.onsiteTime;\n        }\n\n        let validPartsSelected = partsSelected.filter(x => this.isRecentPart(x.timestamp, job.partsDetail.partsBasket.lastPartGatheredTime));\n        job.partsDetail.partsBasket.lastPartGatheredTime = this.getMaxDateFromTimestamps(partsSelected.map(a => a.timestamp));\n\n        if (validPartsSelected && validPartsSelected.length) {\n            let partBusinessModels: PartBusinessModel[] = [];\n\n            let partBusinessModelPromises: Promise<void>[] = [];\n\n            partBusinessModelPromises = validPartsSelected.map((partSelected) => {\n                return this._catalogService.getGoodsType(partSelected.stockReferenceId)\n                    .then((catalogLookedUpPart) => {\n                        let partBusinessModel = this._partFactory.createPartBusinessModelFromAdaptApiModel(partSelected);\n\n                        if (catalogLookedUpPart) {\n                            let catalogLookedUpPartPrice = catalogLookedUpPart.charge\n                                ? new bignumber.BigNumber(catalogLookedUpPart.charge / 100)\n                                : new bignumber.BigNumber(0);\n\n                            if (catalogLookedUpPartPrice !== partBusinessModel.price) {\n                                partBusinessModel.isCatalogPriceDifferentFromAdapt = true;\n                                partBusinessModel.price = catalogLookedUpPartPrice;\n                            }\n                        }\n\n                        partBusinessModels.push(partBusinessModel);\n                    });\n            });\n\n            return Promise.all(partBusinessModelPromises)\n                .then(() => {\n                    job.partsDetail.partsBasket.partsToOrder.push(...partBusinessModels);\n                    job.partsDetail.partsBasket.dataState = DataState.notVisited;\n\n                    // todo undecided on approach, if on parts basket page should we persist to job, so that undo can work?\n                    // if on partsBasketPage then publish event otherwise setJob and publish event\n                    return this._jobService.setJob(job)\n                        .then(() => {\n                            this._eventAggregator.publish(AdaptBusinessServiceConstants.ADAPT_PARTS_SELECTED,\n                                partBusinessModels.map(part => part.id)\n                            );\n                            this._eventAggregator.publish(JobServiceConstants.JOB_DATA_STATE_CHANGED);\n                        });\n                })\n                .catch((error) => {\n                    // couldn't check the part lookup prices\n                    throw new BusinessException(this, \"adaptBusinessService.savePartsBasket\", \"couldn't check the part lookup prices for parts added via adapt\", null, error);\n                });\n        } else {\n            return undefined;\n        }\n    }\n\n    private getRepresentativeDescriptionAndManufacturer(models: IAdaptModel[]): { description: string, manufacturer: string } {\n        // todo: is there any logic that we need to apply to get the best model\n        //  e.g. if there is more than one model in the result set, should be return a comma delimited list of all (distinct) descriptions.\n        return models[0];\n    }\n\n    private mapApiAttributesToModel(apiAttributes: IAdaptModelAttribute[], descriptionAndManufacturer: { description: string, manufacturer: string }): ExternalApplianceAppModel {\n\n        let hasAttribute = (attr: IAdaptModelAttribute) => apiAttributes.some(apiAttr => apiAttr.attributeType === attr.attributeType\n            && (attr.attributeValue === undefined || (apiAttr.attributeValue === attr.attributeValue))\n        );\n\n        let result = new ExternalApplianceAppModel(true);\n\n        result.description = descriptionAndManufacturer.description;\n        result.manufacturer = descriptionAndManufacturer.manufacturer;\n\n        result.ceased = hasAttribute(AdaptAttributeConstants.CEASED_PRODUCTION);\n        result.safetyNotice = hasAttribute(AdaptAttributeConstants.SAFETY_NOTICE);\n\n        // since there can be more than one model for a gc, need to establish 'worst case' to report\n        // worts case precedence: FOLIO, WITHDRAWN, REDUCED_PARTS_LIST, SERVICE_LISTED, NA\n        if (hasAttribute(AdaptAttributeConstants.FOLIO)) {\n            result.availabilityStatus = AdaptAvailabilityAttributeType.FOLIO;\n        } else if (hasAttribute(AdaptAttributeConstants.WITHDRAWN)) {\n            result.availabilityStatus = AdaptAvailabilityAttributeType.WITHDRAWN;\n        } else if (hasAttribute(AdaptAttributeConstants.REDUCED_PARTS_LIST)) {\n            result.availabilityStatus = AdaptAvailabilityAttributeType.REDUCED_PARTS_LIST;\n        } else if (hasAttribute(AdaptAttributeConstants.SERVICE_LISTED)) {\n            result.availabilityStatus = AdaptAvailabilityAttributeType.SERVICE_LISTED;\n        } else {\n            result.availabilityStatus = AdaptAvailabilityAttributeType.NA;\n        }\n\n        return result;\n    }\n}\n"],"sourceRoot":"../../.."}