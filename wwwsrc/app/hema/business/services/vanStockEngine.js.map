{"version":3,"sources":["hema/business/services/vanStockEngine.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyCA,IAAM,mBAAmB,GAAG,IAAI,CAAC;IACjC,IAAM,aAAa,GAAG,KAAK,CAAC;IAG5B;QAsBI,wBAAY,eAAoC,EAC5C,cAA+B,EAC/B,eAAgC,EAChC,oBAA2C;YAC3C,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YACxC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;YACxC,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;YAClD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YAEnD,IAAI,CAAC,sBAAsB,GAAG;gBAC1B,OAAO,EAAE,KAAK;gBACd,mBAAmB,EAAE,KAAK;aAC7B,CAAC;QACN,CAAC;QAEY,mCAAU,GAAvB,UAAwB,UAAkB;;;;;;4BACtC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;4BAClC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAuD,CAAC;4BAClH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;4BAEtD,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,eAAe,CAAC,wBAAwB,EAAE;mCACxE,IAAI,6CAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;4BAEnD,+IAA+I;4BAC/I,iCAAiC;4BACjC,IAAI,CAAC,wBAAwB,CAAC,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,CAAC,qBAAqB;iCACpG,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,gBAAgB,KAAK,WAAW,EAAvC,CAAuC,CAAC,CAAC;4BAE/D,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,mDAAwB,CAAC,0BAA0B,EAAE,UAAO,UAAmB;;;;;iDAGvG,CAAC,UAAU,EAAX,wBAAW;;;;4CAEP,qBAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAA;;4CAAhE,SAAgE,CAAC;;;;;;;;iCAK5E,CAAC,CAAC;4BAEH,IAAI,CAAC,gBAAgB,EAAE,CAAC;4BACxB,qBAAM,IAAI,CAAC,cAAc,CAAC,UAAC,OAAO,IAAK,OAAA,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,2DAA4B,CAAC,mBAAmB,EAA0B;oCAC3I,QAAQ,EAAE,wBAAwB;oCAClC,IAAI,EAAE,OAAO;oCACb,aAAa,EAAE,CAAC,CAAC;oCACjB,WAAW,EAAE,CAAC,CAAC;iCAClB,CAAC,EALqC,CAKrC,CAAC,EAAA;;4BALH,SAKG,CAAC;;;;;SACP;QAEM,sDAA6B,GAApC;YACI,kGAAkG;YAClG,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC;QACvC,CAAC;QAEM,yCAAgB,GAAvB;YAAA,iBAqBC;YApBG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBAExB,IAAI,CAAC,eAAe,GAAG,qBAAS,CAAC,UAAU,CACvC,cAAM,OAAA,KAAI,CAAC,cAAc,EAAE,EAArB,CAAqB,EAC3B,CAAC,IAAI,CAAC,OAAO,CAAC,mCAAmC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CACtE,CAAC;YAEN,CAAC;YAED,iHAAiH;YACjH,gEAAgE;YAChE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,+DAA8B,CAAC,sBAAsB,EACnH,UAAC,kBAA2B;oBACxB,EAAE,CAAC,CAAC,kBAAkB,IAAI,CAAC,KAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC7D,KAAI,CAAC,cAAc,EAAE,CAAC;oBAC1B,CAAC;gBACL,CAAC,CACJ,CAAC;YACN,CAAC;QACL,CAAC;QAEY,6CAAoB,GAAjC;;;oBACI,sBAAO,IAAI,CAAC,yBAAyB,EAAE,CAAC,cAAc,EAAC;;;SAC1D;QAEM,yCAAgB,GAAvB;YAAA,iBA4CC;YA3CG,yHAAyH;YACzH,+FAA+F;YAC/F,IAAM,gBAAgB,GAAG,UAAiC,KAAU,EAAE,QAA8B;gBAChG,MAAM,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;qBACf,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAtB,CAAsB,CAAC;qBACtC,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI,IAAK,OAAA,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAnB,CAAmB,EAAE,CAAC,CAAC,CAAC;YACvD,CAAC,CAAC;YAEF,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;YAE1C,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,IAAI;gBACzC,IAAM,QAAQ,GAAG,IAA8B,CAAC;gBAEhD,QAAQ,CAAC,qBAAqB,GAAI,gBAAgB,CAC9C,WAAW,CAAC,WAAW,EACvB,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,KAAK,0BAA0B;uBACrC,CAAC,CAAC,MAAM,KAAK,wBAAwB;uBACrC,CAAC,CAAC,gBAAgB,KAAK,QAAQ,CAAC,gBAAgB;uBAChD,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,EAH5B,CAG4B,CACpC,CAAC;gBAEF,QAAQ,CAAC,oBAAoB,GAAG,gBAAgB,CAC5C,WAAW,CAAC,OAAO,EACnB,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,gBAAgB,KAAK,QAAQ,CAAC,gBAAgB;uBAC9C,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,EAD5B,CAC4B,CACpC,CAAC;gBAEF,QAAQ,CAAC,2BAA2B,GAAG,gBAAgB,CACnD,WAAW,CAAC,wBAAwB,EACpC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;uBAC9B,CAAC,CAAC,gBAAgB,KAAK,QAAQ,CAAC,gBAAgB;uBAChD,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,EAF5B,CAE4B,CACpC,CAAC;gBAEF,QAAQ,CAAC,0BAA0B,GAAG,gBAAgB,CAClD,WAAW,CAAC,uBAAuB,EACnC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;uBAC9B,CAAC,CAAC,gBAAgB,KAAK,QAAQ,CAAC,gBAAgB;uBAChD,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,EAF5B,CAE4B,CACpC,CAAC;gBAEF,MAAM,CAAC,QAAQ,CAAC;YACpB,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,wDAA+B,GAAtC,UAAuC,gBAAwB,EAAE,kBAA4B;YAA7F,iBAuKC;YArKG,IAAM,2BAA2B,GAAG;gBAChC,MAAM,CAAC,KAAI,CAAC,wBAAwB,CAAC,qBAAqB;qBAC7B,IAAI,CAAC,UAAA,oBAAoB,IAAI,OAAA,oBAAoB,CAAC,gBAAgB,CAAC,WAAW,EAAE,KAAK,gBAAgB,CAAC,WAAW,EAAE,EAAtF,CAAsF,CAAC,CAAC;YACtJ,CAAC,CAAC;YAEF,IAAM,uBAAuB,GAAG,UAAC,kBAA8C;gBAC3E,KAAI,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACjF,CAAC,CAAC;YAEF,IAAM,+BAA+B,GAAG,UAAC,kBAA8C;gBACnF,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBACrB,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBACD,EAAE,CAAC,CAAC,kBAAkB,CAAC,gBAAgB,KAAK,mBAAmB,CAAC,CAAC,CAAC;oBAC9D,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBACD,EAAE,CAAC,CAAC,kBAAkB;uBACf,kBAAkB,CAAC,SAAS;uBAC5B,CAAC,CAAC,KAAI,CAAC,eAAe,EAAE,GAAG,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,KAAI,CAAC,OAAO,CAAC,+BAA+B,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACjI,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC,CAAC;YAEF,IAAM,8BAA8B,GAAG;gBACnC,KAAI,CAAC,wBAAwB,CAAC,qBAAqB,GAAG,KAAI,CAAC,wBAAwB,CAAC,qBAAqB;qBACpG,MAAM,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,CAAC,gBAAgB,CAAC,WAAW,EAAE,KAAK,kBAAkB,CAAC,gBAAgB,CAAC,WAAW,EAAE,EAAjG,CAAiG,CAAC,CAAC;YACnI,CAAC,CAAC;YAEF,IAAM,2BAA2B,GAAG,UAAC,oBAA0C;gBAC3E,oBAAoB,CAAC,KAAK,CAAC,QAAQ,GAAI,KAAI,CAAC,gBAAgB,EAAE;qBACzD,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,KAAK,gBAAgB,CAAC,WAAW,EAAE;uBACjE,CAAC,IAAI,CAAC,KAAK,EADhB,CACgB,CAAC,CAAC;gBAEpC,oBAAoB,CAAC,KAAK,CAAC,gBAAgB,GAAG,oBAAoB,CAAC,KAAK,CAAC,QAAQ,IAAI,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ;oBACjF,CAAC,CAAC,OAAO;oBACT,CAAC,CAAC,WAAW,CAAC;YAClE,CAAC,CAAC;YAEF,IAAM,iCAAiC,GAAG,UAAC,oBAA0C;gBACjF,EAAE,CAAC,CAAC,oBAAoB,CAAC,KAAK,IAAI,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACpE,oBAAoB,CAAC,WAAW,GAAG,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC;gBACvF,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAC;oBACpC,IAAM,iBAAiB,GAAG,CAAC,KAAI,CAAC,yBAAyB,EAAE,CAAC,cAAc,IAAK,EAAE,CAAC;yBACjE,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,YAAY,CAAC,WAAW,EAAE,KAAK,oBAAoB,CAAC,gBAAgB,CAAC,WAAW,EAAE,EAAtF,CAAsF,CAAC,CAAC;oBACrH,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBACpB,oBAAoB,CAAC,WAAW,GAAG,iBAAiB,CAAC,WAAW,CAAC;oBACrE,CAAC;gBACL,CAAC;YACL,CAAC,CAAC;YAEF,IAAM,QAAQ,GAAG,UAAC,KAAU,IAAM,OAAA,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,EAA5C,CAA4C,CAAC;YAE/E,IAAM,WAAW,GAAG,UAAC,YAAyC;gBAC1D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC;uBAC7B,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC,IAAI,YAAY,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gBACvD,CAAC;YACL,CAAC,CAAC;YAEF,IAAM,gBAAgB,GAAG,UAAC,CAAkB,EAAE,CAAkB;gBAC5D,MAAM,CAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAE,CAAC,CAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;sBACxD,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAE,CAAC,CAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YACzE,CAAC,CAAC;YAEF,IAAM,kBAAkB,GAAG,UAAC,OAA0B;gBAClD,IAAM,cAAc,GAAG,OAAO;qBACzB,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAtB,CAAsB,CAAC;qBACrC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAQ,GAAG,CAAC,QAAQ,EAApB,CAAoB,CAAC,CAAC;gBAEtC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;oBACzB,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQ,cAAc,EAAE;gBACvC,CAAC;YACL,CAAC,CAAC;YAEF,IAAM,6BAA6B,GAAG;;;;;;;4BAET,qBAAM,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,EAAA;;4BAApF,YAAY,GAAG,SAAqE;4BAC1F,MAAM,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;4BACjD,mCAAmC;4BACnC,YAAY,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO;iCACtC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,QAAQ,KAAK,KAAI,CAAC,WAAW;mCAC/B,IAAI,CAAC,QAAQ,EADhB,CACgB,CAAC,CAAC;4BAEtC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAC,CAAC;gCACrC,MAAM,CAAC,MAAM,CAAC,gBAAgB,GAAI,mBAAmB,CAAC;4BAC1D,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gCACrC,MAAM,CAAC,MAAM,CAAC,gBAAgB,GAAG,OAAO,CAAC;gCACzC,MAAM,CAAC,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO;qCACvC,GAAG,CAAC,UAAA,YAAY,IAAI,OAAA,CAAC;oCAClB,QAAQ,EAAE,WAAW,CAAC,YAAY,CAAC;oCACnC,GAAG,EAAE,YAAY,CAAC,GAAG;oCACrB,GAAG,EAAE,YAAY,CAAC,GAAG;oCACrB,EAAE,EAAE,YAAY,CAAC,QAAQ;oCACzB,IAAI,EAAE,YAAY,CAAC,IAAI;oCACvB,KAAK,EAAE,YAAY,CAAC,SAAS;oCAC7B,aAAa,EAAa,SAAS;oCACnC,QAAQ,EAAmC;wCACvC,gBAAgB,EAAE,YAAY,CAAC,YAAY;wCAC3C,WAAW,EAAE,YAAY,CAAC,WAAW;wCACrC,QAAQ,EAAE,YAAY,CAAC,QAAQ;wCAC/B,IAAI,EAAE,YAAY,CAAC,WAAW;wCAC9B,mBAAmB,EAAE,YAAY,CAAC,gBAAgB;qCACrD;iCACJ,CAAC,EAfmB,CAenB,CAAC;qCACF,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAtB,CAAsB,CAAC,CAAC;gCAE5C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO;qCACnD,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI,IAAK,OAAA,IAAI,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,CAAC,CAAC,EAA5C,CAA4C,EAAE,CAAC,CAAC,CAAC;gCAE7E,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gCAEpE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,GAAG,kBAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gCAElF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW;oCACnB,MAAM,CAAC,MAAM;oCACb,MAAM,CAAC,MAAM,CAAC,OAAO;oCACrB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;oCACxB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oCACpC,yDAAyD;oCACzD,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC;gCACvE,CAAC;4BAEL,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,MAAM,CAAC,MAAM,CAAC,gBAAgB,GAAG,WAAW,CAAC;gCAC7C,MAAM,CAAC,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;4BAC/B,CAAC;;;;4BAGD,MAAM,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;4BACjD,MAAM,CAAC,MAAM,CAAC,gBAAgB,GAAG,mBAAmB,CAAC;;;4BAEzD,IAAI,CAAC,YAAY,EAAE,CAAC;;;;iBACvB,CAAC;YAEF,kIAAkI;YAClI,IAAM,MAAM,GAAG,IAAI,2CAAoB,EAAE,CAAC;YAC1C,MAAM,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YAE3C,2BAA2B,CAAC,MAAM,CAAC,CAAC;YACpC,iCAAiC,CAAC,MAAM,CAAC,CAAC;YAE1C,IAAI,kBAAkB,GAAG,2BAA2B,EAAE,CAAC;YACvD,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACrB,EAAE,CAAC,CAAC,+BAA+B,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;oBACtD,MAAM,CAAC,MAAM,GAAG,kBAAkB,CAAC;oBACnC,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,8BAA8B,EAAE,CAAC;gBACrC,CAAC;YACL,CAAC;YAED,MAAM,CAAC,MAAM,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,gBAAgB,GAAG,WAAW,CAAC;YAC7C,uBAAuB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEvC,qBAAqB,CAAC,6BAA6B,EAAE,CAAC;YACtD,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAEY,0CAAiB,GAA9B;;;;;oBAEU,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;oBAEpC,WAAW,GAAG,WAAW,CAAC,WAAW;yBACtC,GAAG,CAAC,UAAA,IAAI;wBACG,IAAA,wCAAgB,EAAE,kBAAK,EAAE,8BAAW,EAAE,wBAAQ,CAAS;wBAC/D,IAAM,aAAa,GAAG,KAAI,CAAC,YAAY,EAAE,CAAC,SAAS;6BAC1B,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,gBAAgB,KAAK,IAAI,CAAC,gBAAgB,EAAnD,CAAmD,CAAC,CAAC;wBAE/F,IAAM,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,IAAI;+BACvB,aAAa,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,oDAAoD;wBAEhG,MAAM,CAAC;4BACH,QAAQ,EAAqB;gCACzB,gBAAgB,kBAAA;gCAChB,KAAK,OAAA;gCACL,WAAW,aAAA;gCACX,QAAQ,UAAA;gCACR,IAAI,MAAA;gCACJ,KAAK,EAAE,IAAI,CAAC,KAAK;gCACjB,EAAE,EAAE,IAAI,CAAC,EAAE;6BACd;4BACD,MAAM,EAAE,IAAI,CAAC,MAAM;4BACnB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;yBAC5C,CAAC;oBACN,CAAC,CAAC,CAAC;oBAED,SAAS,GAAG,WAAW;yBACxB,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,0BAA0B;2BACvC,IAAI,CAAC,MAAM,KAAK,wBAAwB,EAD3C,CAC2C,CAAC;yBAC3D,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,QAAQ,EAAb,CAAa,CAAC,CAAC;oBAE1B,SAAS,GAAG,WAAW;yBACxB,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,0BAA0B;2BACvC,IAAI,CAAC,MAAM,KAAK,wBAAwB,EAD3C,CAC2C,CAAC;yBAC3D,GAAG,CAAC,UAAA,IAAI;wBACL,MAAM,CAAC,aAAwB,IAAI,CAAC,QAAQ,IAAE,gBAAgB,EAAE,CAAC,EAAE,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,GAAC,CAAC;oBAClH,CAAC,CAAC,CAAC;oBAED,eAAe,GAAG,WAAW,CAAC,iBAAiB;yBAChD,GAAG,CAAC,UAAA,gBAAgB,IAAI,OAAA,CAAU;wBAC9B,gBAAgB,EAAE,gBAAgB,CAAC,gBAAgB;wBACnD,KAAK,EAAE,gBAAgB,CAAC,KAAK;wBAC7B,WAAW,EAAE,gBAAgB,CAAC,WAAW;wBACzC,QAAQ,EAAE,gBAAgB,CAAC,QAAQ;wBACnC,KAAK,EAAE,gBAAgB,CAAC,KAAK;wBAC7B,IAAI,EAAE,gBAAgB,CAAC,IAAI;qBAC/B,CAAA,EAPwB,CAOxB,CAAC,CAAC;oBAEP,sBAAO;4BACH,SAAS,WAAA;4BACT,SAAS,WAAA;4BACT,eAAe,iBAAA;yBAClB,EAAC;;;SACL;QAEY,4CAAmB,GAAhC;;;;oBAEU,SAAS,GAAG,UAAC,MAAgC;wBAC/C,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;4BACb,KAAK,sBAAsB,CAAC;4BAC5B,KAAK,wBAAwB;gCACzB,MAAM,CAAC,WAAW,CAAC;4BACvB,KAAK,cAAc,CAAC;4BACpB,KAAK,gBAAgB;gCACjB,MAAM,CAAC,SAAS,CAAC;4BACrB,KAAK,0BAA0B,CAAC;4BAChC,KAAK,wBAAwB;gCACzB,MAAM,CAAC,UAAU,CAAC;4BACtB,KAAK,uBAAuB;gCACxB,MAAM,CAAC,UAAU,CAAC;4BACtB;gCACI,MAAM,CAAC,SAAS,CAAC;wBACzB,CAAC;oBACL,CAAC,CAAC;oBAEI,mBAAmB,GAAG,UAAC,MAAgC;wBAC7C,OAAA,MAAM,KAAK,cAAc;+BAC1B,MAAM,KAAK,sBAAsB;+BACjC,MAAM,KAAK,wBAAwB;+BACnC,MAAM,KAAK,uBAAuB;oBAHjC,CAGiC,CAAC;oBAE5C,oBAAoB,GAAG,UAAC,CAAkB,EAAE,CAAkB;wBAChE,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI;4BAChB,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI;4BACjB,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC9B,CAAC,CAAC;oBAEI,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;oBAEpC,iBAAiB,GAAG,WAAW,CAAC,wBAAwB;yBACzD,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAkB;wBAC3B,EAAE,EAAE,IAAI,CAAC,EAAE;wBACX,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;wBACvC,WAAW,EAAE,IAAI,CAAC,WAAW;wBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,UAAU,EAAE,IAAI,CAAC,UAAU;wBAC3B,YAAY,EAAE,IAAI,CAAC,YAAY;wBAC/B,aAAa,EAAE,IAAI,CAAC,aAAa;wBACjC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;wBAC9B,gBAAgB,EAAE,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC;wBAClD,KAAK,EAAE,IAAI,CAAC,KAAK;wBACjB,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;qBAC1B,CAAA,EAdY,CAcZ,CAAC;yBACD,IAAI,CAAC,oBAAoB,CAAC,CAAC;oBAE1B,gBAAgB,GAAG,WAAW,CAAC,uBAAuB;yBACvD,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAiB;wBAC1B,EAAE,EAAE,IAAI,CAAC,EAAE;wBACX,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;wBACvC,WAAW,EAAE,IAAI,CAAC,WAAW;wBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,UAAU,EAAE,IAAI,CAAC,UAAU;wBAC3B,YAAY,EAAE,IAAI,CAAC,YAAY;wBAC/B,aAAa,EAAE,IAAI,CAAC,aAAa;wBACjC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;wBAC9B,gBAAgB,EAAE,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC;wBAClD,KAAK,EAAE,IAAI,CAAC,KAAK;wBACjB,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,IAAI,EAAE,IAAI,CAAC,IAAI;qBAClB,CAAA,EAbY,CAaZ,CAAC;yBACD,IAAI,CAAC,oBAAoB,CAAC,CAAC;oBAEhC,sBAAO;4BACH,iBAAiB,mBAAA;4BACjB,gBAAgB,kBAAA;yBACnB,EAAC;;;SACL;QAEY,mCAAU,GAAvB;;;;oBACU,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;oBACtC,sBAAO,IAAI,CAAC,cAAc,EAAE,CAAC,OAAO;6BAC/B,GAAG,CAAC,UAAA,cAAc;4BAEP,IAAA,kDAAgB,EAAE,4BAAK,EAAE,wCAAW,EAAE,kCAAQ,CAAmB;4BACzE,IAAM,aAAa,GAAG,SAAS,CAAC,SAAS;iCAChB,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,gBAAgB,KAAK,cAAc,CAAC,gBAAgB,EAA7D,CAA6D,CAAC,CAAC;4BACzG,IAAM,IAAI,GAAG,aAAa,IAAI,aAAa,CAAC,IAAI,CAAC;4BAEjD,MAAM,CAAW;gCACb,gBAAgB,kBAAA;gCAChB,KAAK,OAAA;gCACL,WAAW,aAAA;gCACX,QAAQ,UAAA;gCACR,IAAI,MAAA;6BACP,CAAC;wBACN,CAAC,CAAC,EAAC;;;SACV;QAEY,qDAA4B,GAAzC,UAA0C,GAAsC;;;;;oBAC5E,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;oBAEhD,cAAc,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,wBAAwB;yBAC9D,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,QAAQ;2BACZ,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE,CAAC;6BAChB,IAAI,CAAC,UAAA,SAAS,IAAI,OAAA,OAAO,CAAC,EAAE,KAAK,SAAS,EAAxB,CAAwB,CAAC,EAFrD,CAEqD,CACvE,CAAC;oBAEN,cAAc;yBACT,OAAO,CAAC,UAAA,OAAO;wBACZ,KAAI,CAAC,gBAAgB,CAAC,0BAA0B,EAAE,OAAO,CAAC,EAAE,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;oBACtF,CAAC,CAAC,CAAC;oBAEP,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;wBACxB,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,qCAAiB,CAAC,gBAAgB,CAAC,CAAC;oBACtE,CAAC;;;;SACJ;QAEY,mDAA0B,GAAvC,UAAwC,GAA+C;;;;;;4BACnF,IAAI,CAAC,cAAc,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;4BAEjD,cAAc,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,SAAS;iCAC/C,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,gBAAgB,KAAK,GAAG,CAAC,gBAAgB,EAA9C,CAA8C,CAAC,CAAC;4BAEpE,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;gCACzB,MAAM,gBAAC;4BACX,CAAC;4BAED,GAAG,CAAC,OAAqC,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAc;gCAA9B,YAAY;gCACnB,IAAI,CAAC,cAAc,CAAC,EAAC,gBAAgB,EAAE,GAAG,CAAC,gBAAgB,EAAE,KAAK,EAAE,YAAY,CAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAC,CAAC,CAAC;6BAC9G;4BAEK,sBAAsB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;iCAE7C,CAAA,sBAAsB,CAAC,IAAI,KAAK,IAAI,IAAI,sBAAsB,CAAC,IAAI,KAAK,SAAS,CAAA,EAAjF,wBAAiF;4BACjF,oEAAoE;4BACpE,qBAAM,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAC9C,GAAG,CAAC,gBAAgB,EACpB;oCACI,YAAY,EAAE,GAAG,CAAC,gBAAgB;oCAClC,WAAW,EAAE,sBAAsB,CAAC,WAAW;oCAC/C,QAAQ,EAAE,IAAI,CAAC,WAAW;oCAC1B,WAAW,EAAE,sBAAsB,CAAC,IAAI;oCACxC,KAAK,EAAE,sBAAsB,CAAC,KAAK,IAAI,aAAa;oCACpD,QAAQ,EAAE,CAAC;iCACd,CACJ,EAAA;;4BAXD,oEAAoE;4BACpE,SAUC,CAAC;;gCAGN,qBAAM,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAC9C,GAAG,CAAC,gBAAgB,EACpB;gCACI,YAAY,EAAE,GAAG,CAAC,gBAAgB;gCAClC,WAAW,EAAE,sBAAsB,CAAC,WAAW;gCAC/C,QAAQ,EAAE,IAAI,CAAC,WAAW;gCAC1B,WAAW,EAAE,GAAG,CAAC,IAAI;gCACrB,KAAK,EAAE,sBAAsB,CAAC,KAAK,IAAI,aAAa;gCACpD,QAAQ,EAAE,mBAAmB;6BAChC,CACJ,EAAA;;4BAVD,SAUC,CAAC;;;;;SAEL;QAEY,mDAA0B,GAAvC,UAAwC,GAAqD;;;;;;4BACzF,IAAI,CAAC,cAAc,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;4BACvD,IAAI,CAAC,cAAc,CAAC,4BAA4B,CAAC,CAAC;4BAE5C,cAAc,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,WAAW;iCACnD,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,EAAE,KAAK,GAAG,CAAC,UAAU;mCAC7B,UAAU,CAAC,MAAM,KAAK,cAAc,EADvC,CACuC,CAAC,CAAC;4BAEjE,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gCAClB,MAAM,gBAAC,CAAC,0BAA0B;4BACtC,CAAC;4BAED,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,cAAc,CAAC,EAAE,EAAE,EAAC,MAAM,EAAE,0BAA0B,EAAE,iBAAiB,EAAE,GAAG,CAAC,iBAAiB,EAAE,CAAC,CAAC;4BAEnI,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,SAAS;iCAC7C,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,gBAAgB,KAAK,cAAc,CAAC,gBAAgB;mCAChE,IAAI,CAAC,KAAK,KAAK,cAAc,CAAC,KAAK,EAD5B,CAC4B,CAAC,CAAC;4BAEhD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACf,IAAI,CAAC,cAAc,CACf;oCACI,gBAAgB,EAAE,cAAc,CAAC,gBAAgB;oCACjD,KAAK,EAAE,cAAc,CAAC,KAAK;iCAC9B,EACD;oCACI,QAAQ,EAAE,CAAC,YAAY,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAiB,IAAI,CAAC,CAAC;iCACxE,CACJ,CAAC;4BACN,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,IAAI,CAAC,eAAe,CAAW;oCAC3B,gBAAgB,EAAE,cAAc,CAAC,gBAAgB;oCACjD,KAAK,EAAE,cAAc,CAAC,KAAK,IAAI,SAAS;oCACxC,WAAW,EAAE,cAAc,CAAC,WAAW;oCACvC,QAAQ,EAAE,GAAG,CAAC,iBAAiB;oCAC/B,IAAI,EAAE,SAAS;oCACf,MAAM,EAAE,SAAS;oCACjB,KAAK,EAAE,cAAc,CAAC,KAAK;iCAC9B,CAAC,CAAC;4BACP,CAAC;4BAEK,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;4BAEpD,qBAAM,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAC3C,cAAc,CAAC,gBAAgB,EAC/B;oCACI,QAAQ,EAAE;wCACN,YAAY,EAAE,cAAc,CAAC,gBAAgB;wCAC7C,WAAW,EAAE,cAAc,CAAC,WAAW;wCACvC,QAAQ,EAAE,IAAI,CAAC,WAAW;wCAC1B,QAAQ,EAAE,cAAc,CAAC,QAAQ;wCACjC,KAAK,EAAE,cAAc,CAAC,KAAK,IAAI,aAAa;qCAC/C;oCACD,KAAK,EAAE,cAAc,CAAC,KAAK,IAAI,SAAS;oCACxC,IAAI,EAAE,kBAAkB,CAAC,IAAI;oCAC7B,IAAI,EAAE,kBAAkB,CAAC,IAAI;oCAC7B,eAAe,EAAE,GAAG,CAAC,iBAAiB;oCACtC,EAAE,EAAE,GAAG,CAAC,UAAU;iCACrB,CACJ,EAAA;;4BAhBD,SAgBC,CAAC;;;;;SACL;QAEY,+CAAsB,GAAnC,UAAoC,GAA0F;;;;;;4BAC1H,IAAI,CAAC,cAAc,CAAC,wBAAwB,EAAE,GAAG,CAAC,CAAC;4BAE7C,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,SAAS;iCACzC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,gBAAgB,KAAK,GAAG,CAAC,gBAAgB;mCACrD,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,EADjB,CACiB,CAAC,CAAC;4BAEzC,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAsB;gCAClD,EAAE,EAAE,WAAI,CAAC,OAAO,EAAE;gCAClB,gBAAgB,EAAE,GAAG,CAAC,gBAAgB;gCACtC,KAAK,EAAE,GAAG,CAAC,KAAK;gCAChB,WAAW,EAAE,YAAY,IAAI,YAAY,CAAC,WAAW;gCACrD,QAAQ,EAAE,GAAG,CAAC,gBAAgB;gCAC9B,UAAU,EAAE,SAAS;gCACrB,YAAY,EAAE,SAAS;gCACvB,MAAM,EAAE,0BAA0B;gCAClC,KAAK,EAAE,YAAY,IAAI,YAAY,CAAC,KAAK;gCACzC,MAAM,EAAE,GAAG,CAAC,MAAM;gCAClB,IAAI,EAAE,SAAS;gCACf,IAAI,EAAE,SAAS;6BAClB,CAAC,CAAC;4BAEG,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;4BACnD,qBAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAC1C,GAAG,CAAC,gBAAgB,EACpB;oCACI,QAAQ,EAAE;wCACN,YAAY,EAAE,GAAG,CAAC,gBAAgB;wCAClC,WAAW,EAAE,YAAY,IAAI,YAAY,CAAC,WAAW,IAAI,SAAS;wCAClE,QAAQ,EAAE,IAAI,CAAC,WAAW;wCAC1B,QAAQ,EAAE,GAAG,CAAC,gBAAgB;wCAC9B,KAAK,EAAE,YAAY,IAAI,YAAY,CAAC,KAAK,IAAI,aAAa;qCAC7D;oCACD,IAAI,EAAE,iBAAiB,CAAC,IAAI;oCAC5B,IAAI,EAAE,iBAAiB,CAAC,IAAI;oCAC5B,MAAM,EAAE,GAAG,CAAC,MAAM;oCAClB,KAAK,EAAE,GAAG,CAAC,KAAK;iCACnB,CACJ,EAAA;;4BAfD,SAeC,CAAC;;;;;SACL;QAEY,oDAA2B,GAAxC,UAAyC,GAA0E;;;;;;4BAC/G,IAAI,CAAC,cAAc,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;4BAElD,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,SAAS;iCAC7C,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,gBAAgB,KAAK,GAAG,CAAC,gBAAgB;mCACrD,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,EADjB,CACiB,CAAC,CAAC;4BAErC,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACf,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,EAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAgB,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;4BACtG,CAAC;4BAEK,WAAW,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;4BAC7C,qBAAM,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAC/C,GAAG,CAAC,gBAAgB,EACpB;oCACI,QAAQ,EAAE;wCACN,YAAY,EAAE,GAAG,CAAC,gBAAgB;wCAClC,WAAW,EAAE,YAAY,IAAI,YAAY,CAAC,WAAW,IAAI,SAAS;wCAClE,QAAQ,EAAE,IAAI,CAAC,WAAW;wCAC1B,QAAQ,EAAE,GAAG,CAAC,gBAAgB;wCAC9B,KAAK,EAAE,YAAY,IAAI,YAAY,CAAC,KAAK,IAAI,aAAa;qCAC7D;oCAED,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,SAAS;oCAC7B,IAAI,EAAE,WAAW,CAAC,IAAI;oCACtB,IAAI,EAAE,WAAW,CAAC,IAAI;iCACzB,CACJ,EAAA;;4BAfD,SAeC,CAAC;;;;;SACL;QAEY,gDAAuB,GAApC,UAAqC,GAOlB;;;;;;4BAEf,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;4BACpD,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAAC,CAAC;4BAEzC,WAAW,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;4BACzC,EAAE,GAAI,WAAI,CAAC,OAAO,EAAE,CAAC;4BAIrB,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY;gCACtB,CAAC,CAAC,cAAc;gCAChB,CAAC,CAAC,gBAAgB,CAAC;4BAEnC,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,EAAuB;gCACnE,EAAE,IAAA;gCACF,gBAAgB,EAAE,GAAG,CAAC,gBAAgB;gCACtC,KAAK,EAAE,SAAS;gCAChB,WAAW,EAAE,GAAG,CAAC,WAAW;gCAC5B,QAAQ,EAAE,GAAG,CAAC,iBAAiB;gCAC/B,UAAU,EAAE,GAAG,CAAC,UAAU;gCAC1B,YAAY,EAAE,GAAG,CAAC,YAAY;gCAC9B,aAAa,EAAE,GAAG,CAAC,aAAa;gCAChC,MAAM,QAAA;gCACN,KAAK,EAAE,GAAG,CAAC,KAAK;gCAChB,IAAI,EAAE,WAAW,CAAC,IAAI;gCACtB,IAAI,EAAE,WAAW,CAAC,IAAI;gCACtB,IAAI,EAAE,SAAS,CAAC,0DAA0D;6BAC7E,CAAC,CAAC;4BAEH,qBAAM,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAC3C,GAAG,CAAC,gBAAgB,EACpB;oCACI,QAAQ,EAAE;wCACN,YAAY,EAAE,GAAG,CAAC,gBAAgB;wCAClC,WAAW,EAAE,GAAG,CAAC,WAAW;wCAC5B,QAAQ,EAAE,GAAG,CAAC,UAAU;wCACxB,QAAQ,EAAE,GAAG,CAAC,iBAAiB;wCAC/B,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,aAAa;qCACpC;oCACD,kBAAkB,EAAE,IAAI,CAAC,WAAW;oCACpC,IAAI,EAAE,WAAW,CAAC,IAAI;oCACtB,IAAI,EAAE,WAAW,CAAC,IAAI;iCACzB,CACJ,EAAA;;4BAdD,SAcC,CAAC;4BAEF,IAAI,CAAC,0BAA0B,EAAE,CAAC;4BAElC,sBAAO,EAAE,EAAC;;;;SACb;QAEY,yDAAgC,GAA7C,UAA+C,GAAiC;;;;;;;4BAC5E,IAAI,CAAC,cAAc,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAAC;4BAC7D,IAAI,CAAC,cAAc,CAAC,kCAAkC,CAAC,CAAC;4BAElD,eAAe,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,uBAAuB;iCAChE,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,EAAE,KAAK,GAAG,CAAC,SAAS;mCACtC,KAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,EAD5B,CAC4B,CAAC,CAAC;4BAEnD,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gCACnB,MAAM,gBAAC;4BACX,CAAC;4BAED,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,eAAe,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,wBAAwB,EAAC,CAAC,CAAC;4BAC1G,qBAAM,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CACjD,eAAe,CAAC,gBAAgB,EAChC;oCACI,QAAQ,EAAE;wCACN,YAAY,EAAE,eAAe,CAAC,gBAAgB;wCAC9C,WAAW,EAAE,eAAe,CAAC,WAAW;wCACxC,QAAQ,EAAE,eAAe,CAAC,UAAU;wCACpC,QAAQ,EAAE,CAAC;wCACX,KAAK,EAAE,eAAe,CAAC,KAAK,IAAI,aAAa;qCAChD;oCACD,kBAAkB,EAAE,IAAI,CAAC,WAAW;oCACpC,IAAI,EAAE,eAAe,CAAC,IAAI;oCAC1B,IAAI,EAAE,eAAe,CAAC,IAAI;iCAC7B,CACJ,EAAA;;4BAdD,SAcC,CAAC;4BAEF,IAAI,CAAC,0BAA0B,EAAE,CAAC;;;;;SACrC;QAEY,iDAAwB,GAArC,UAAsC,GAAiC;;;;;;;4BACnE,IAAI,CAAC,cAAc,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC;4BACrD,IAAI,CAAC,cAAc,CAAC,0BAA0B,CAAC,CAAC;4BAE1C,eAAe,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,uBAAuB;iCAChE,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,EAAE,KAAK,GAAG,CAAC,SAAS;mCACtC,KAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,EAD5B,CAC4B,CAAC,CAAC;4BAEnD,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gCACnB,MAAM,gBAAC;4BACX,CAAC;4BAEK,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;4BACrD,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,eAAe,CAAC,EAAE,EAAE;gCACjE,MAAM,EAAE,0BAA0B;gCAClC,iBAAiB,EAAE,mBAAmB,CAAC,IAAI;gCAC3C,iBAAiB,EAAE,mBAAmB,CAAC,IAAI;6BAC9C,CAAC,CAAC;4BAEH,IAAI,CAAC,iBAAiB,CAAC,0BAA0B,EAAsB;gCACnE,EAAE,EAAE,WAAI,CAAC,OAAO,EAAE;gCAClB,gBAAgB,EAAE,eAAe,CAAC,gBAAgB;gCAClD,KAAK,EAAE,SAAS;gCAChB,WAAW,EAAE,eAAe,CAAC,WAAW,IAAI,SAAS;gCACrD,QAAQ,EAAE,eAAe,CAAC,QAAQ;gCAClC,UAAU,EAAE,eAAe,CAAC,UAAU;gCACtC,MAAM,EAAE,0BAA0B;gCAClC,KAAK,EAAE,eAAe,CAAC,KAAK;gCAC5B,IAAI,EAAE,mBAAmB,CAAC,IAAI;gCAC9B,IAAI,EAAE,mBAAmB,CAAC,IAAI;6BACjC,CAAC,CAAC;4BAEG,gBAAgB,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,SAAS;iCACjD,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,gBAAgB,KAAK,eAAe,CAAC,gBAAgB;mCACjE,CAAC,IAAI,CAAC,KAAK,EADJ,CACI,CAAC,CAAC;4BAExB,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;gCACnB,IAAI,CAAC,cAAc,CACf,EAAE,gBAAgB,EAAE,eAAe,CAAC,gBAAgB,EAAE,EACtD,EAAE,QAAQ,EAAE,CAAC,gBAAgB,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,QAAQ,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;4BAC1F,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,IAAI,CAAC,eAAe,CAAW;oCAC3B,gBAAgB,EAAE,eAAe,CAAC,gBAAgB;oCAClD,KAAK,EAAE,SAAS;oCAChB,WAAW,EAAE,eAAe,CAAC,WAAW;oCACxC,QAAQ,EAAE,eAAe,CAAC,QAAQ;oCAClC,IAAI,EAAE,SAAS;oCACf,MAAM,EAAE,SAAS;oCACjB,KAAK,EAAE,eAAe,CAAC,KAAK;iCAC/B,CAAC,CAAC;4BACP,CAAC;4BAED,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;4BAEpD,qBAAM,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CACjD,eAAe,CAAC,gBAAgB,EAChC;oCACI,QAAQ,EAAE;wCACN,YAAY,EAAE,eAAe,CAAC,gBAAgB;wCAC9C,WAAW,EAAE,eAAe,CAAC,WAAW;+CACrB,gBAAgB,IAAI,gBAAgB,CAAC,WAAW;wCACnE,QAAQ,EAAE,eAAe,CAAC,UAAU;wCACpC,QAAQ,EAAE,CAAC;wCACX,KAAK,EAAE,eAAe,CAAC,KAAK,IAAI,aAAa;qCAChD;oCACD,kBAAkB,EAAE,IAAI,CAAC,WAAW;oCACpC,IAAI,EAAE,eAAe,CAAC,IAAI;oCAC1B,IAAI,EAAE,eAAe,CAAC,IAAI;iCAC7B,CACJ,EAAA;;4BAfD,SAeC,CAAC;4BAEF,qBAAM,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAC5C,eAAe,CAAC,gBAAgB,EAChC;oCACI,QAAQ,EAAE;wCACN,YAAY,EAAE,eAAe,CAAC,gBAAgB;wCAC9C,WAAW,EAAE,eAAe,CAAC,WAAW;+CACrB,gBAAgB,IAAI,gBAAgB,CAAC,WAAW;wCACnE,QAAQ,EAAE,eAAe,CAAC,UAAU;wCACpC,QAAQ,EAAE,eAAe,CAAC,QAAQ;wCAClC,KAAK,EAAE,eAAe,CAAC,KAAK,IAAI,aAAa;qCAChD;oCACD,kBAAkB,EAAE,IAAI,CAAC,WAAW;oCACpC,IAAI,EAAE,mBAAmB,CAAC,IAAI;oCAC9B,IAAI,EAAE,mBAAmB,CAAC,IAAI;iCACjC,CACJ,EAAA;;4BAfD,SAeC,CAAC;4BAEF,IAAI,CAAC,0BAA0B,EAAE,CAAC;;;;;SACrC;QAEM,mDAA0B,GAAjC;YAAA,iBAMC;YALG,0FAA0F;YAC1F,6BAAa,CAAC,aAAa,CACvB;;4BAAa,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;4BAA5B,sBAAA,CAAC,SAA2B,CAAC,CAAC,sBAAsB,EAAA;;qBAAA,EAChE,IAAI,CAAC,OAAO,CAAC,iCAAiC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACpE,CAAC;QACN,CAAC;QAEO,qCAAY,GAApB;YACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;mBAC/B,IAAI,qBAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/C,CAAC;QAEO,uCAAc,GAAtB;YACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE;mBACzC,IAAI,yCAAmB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QAC7D,CAAC;QAEO,kDAAyB,GAAjC;YACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,yBAAyB,EAAE;mBAC5C,IAAI,+CAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5D,CAAC;QAEO,uCAAc,GAAtB,UAAuB,EAA+C,EAAE,OAA0B;YAC9F,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YACtC,IAAM,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC;mBACjB,CAAC,CAAC,gBAAgB,KAAK,EAAE,CAAC,gBAAgB;mBAC1C,CAAC,CAAC,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,IAAI,SAAS,CAAC,EAFlC,CAEkC,CAAC,CAAC;YACnF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,EAAE,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;YACnF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,0BAA0B,EAAE,EAAE,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;gBACrE,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,yBAAyB,EAAE,QAAQ,CAAC,CAAC;gBAEvD,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAClC,CAAC;QACL,CAAC;QAEO,wCAAe,GAAvB;YAAA,iBAkBC;YAlBuB,qBAA0B;iBAA1B,UAA0B,EAA1B,qBAA0B,EAA1B,IAA0B;gBAA1B,gCAA0B;;YAC9C,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YAEtC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAClF,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,UAAA,UAAU;gBAClC,IAAM,qBAAqB,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,eAAe,IAAI,OAAA,eAAe;uBAClF,eAAe,CAAC,gBAAgB,KAAK,UAAU,CAAC,gBAAgB;uBAChE,CAAC,eAAe,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,IAAI,SAAS,CAAC,EAFL,CAEK,CAAC,CAAC;gBAEjF,EAAE,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;oBACxB,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAC,EAAE,EAAE,UAAU,CAAC,gBAAgB,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,EAAE,EAAE,iBAAiB,CAAC,CAAC;gBAC9H,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACzC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAEpE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC;QAEO,yCAAgB,GAAxB,UAAyB,IAAqC,EAAE,EAAiB,EAAE,OAAoC;YACnH,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;YAC1C,IAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC;mBACD,CAAC,CAAC,EAAE,KAAK,EAAE,EADX,CACW,CAAC,CAAC;YAC5D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACd,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;YAC3F,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,4BAA4B,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;gBAE3E,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;gBACnC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;oBACjB,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;gBAC5C,CAAC;gBACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,2BAA2B,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;gBAEjE,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;YAC9C,CAAC;YAED,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;QAEO,0CAAiB,GAAzB,UAA0B,IAAqC;YAA/D,iBAgBC;YAhBgE,uBAAsC;iBAAtC,UAAsC,EAAtC,qBAAsC,EAAtC,IAAsC;gBAAtC,sCAAsC;;YACnG,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;YAE1C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,uBAAuB,EAAE,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAC1F,CAAC,aAAa,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,UAAA,YAAY;gBACtC,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,kBAAkB,IAAI,OAAA,kBAAkB,CAAC,EAAE,KAAK,YAAY,CAAC,EAAE,EAAzC,CAAyC,CAAC,CAAC,CAAC,CAAC;oBAC1F,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,IAAI,EAAE,YAAY,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;gBAC1F,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,KAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;oBAC1C,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACzC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,EAAE,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;YAE1E,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;QAEO,0CAAiB,GAAzB,UAA0B,IAAqC;YAAE,aAA0B;iBAA1B,UAA0B,EAA1B,qBAA0B,EAA1B,IAA0B;gBAA1B,4BAA0B;;YACvF,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;YAE1C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,EAAE,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAC/E,WAAW,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,GAAG,CAAC,IAAI,CAAC,UAAA,EAAE,IAAI,OAAA,IAAI,CAAC,EAAE,KAAK,EAAE,EAAd,CAAc,CAAC,EAA/B,CAA+B,CAAC,CAAC;YACtF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;YAEzE,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;QAEO,+CAAsB,GAA9B,UAA+B,UAA8B;YACzD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACd,MAAM,CAAC;YACX,CAAC;YACD,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,IAAI,EAAE,CAAC;YAC9C,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC;gBACpB,MAAM,EAAE,UAAU,CAAC,MAAM;gBACzB,IAAI,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI;aACtC,CAAC,CAAC;QACP,CAAC;QAEO,mDAA0B,GAAlC,UAAmC,sBAA8C;YAC7E,sBAAsB,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YAC1D,IAAI,CAAC,eAAe,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,CAAC;QAC3E,CAAC;QAEO,sCAAa,GAArB,UAAsB,SAAoB;YACtC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YAC7C,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QACjD,CAAC;QAEO,gDAAuB,GAA/B,UAAgC,WAAgC;YAC5D,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YAC/C,IAAI,CAAC,eAAe,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;QAC7D,CAAC;QAEO,qCAAY,GAApB;YACI,IAAI,CAAC,wBAAwB,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YACjE,IAAI,CAAC,eAAe,CAAC,wBAAwB,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QACjF,CAAC;QAEO,qCAAY,GAApB,UAAqB,gBAAwB;YACzC,IAAM,cAAc,GAAG,IAAI,CAAC,wBAAwB,CAAC,qBAAqB;iBACjD,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,gBAAgB,KAAK,gBAAgB,EAA5C,CAA4C,CAAC,CAAC;YACtF,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBACjB,cAAc,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;YAClC,CAAC;QACL,CAAC;QAEO,uCAAc,GAAtB,UAAuB,QAAgB,EAAE,GAAQ;YAC7C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACP,MAAM,IAAI,qCAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,2BAA2B,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACzF,CAAC;QACL,CAAC;QAEO,uCAAc,GAAtB,UAAuB,QAAgB;YACnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC;gBACvC,MAAM,IAAI,qCAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,4EAA4E,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC1I,CAAC;QACL,CAAC;QAEa,uCAAc,GAA5B,UAA6B,gBAA4C;;;;;;;4BACrE,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gCACzB,MAAM,gBAAC;wCACH,oBAAoB,EAAE,KAAK;wCAC3B,sBAAsB,EAAE,KAAK;qCAChC,EAAC;4BACN,CAAC;4BAGK,GAAG,GAAG,UAAC,IAAsB,EAAE,OAAe;gCAAE,cAAc;qCAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;oCAAd,6BAAc;;gCAChE,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oCACX,KAAK,MAAM;wCACP,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;wCACjC,KAAK,CAAC;oCACV,KAAK,OAAO;wCACR,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;wCAClC,KAAK,CAAC;oCACV;wCACI,KAAK,CAAC;gCACd,CAAC;gCACD,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;oCACnB,gBAAgB,CAAC,OAAO,CAAC,CAAC;gCAC9B,CAAC;4BACL,CAAC,CAAC;4BAEF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;4BAC1B,kBAAkB,GAAG,KAAK,CAAC;4BAC3B,gBAAgB,GAAG,KAAK,CAAC;;;;4BAInB,4BAA4B,GAAG,UAAC,KAA+C;gCACjF,IAAM,YAAY,GAAG,KAAI,CAAC,OAAO,CAAC,iCAAiC,IAAI,OAAO,CAAC;gCAC/E,IAAM,qBAAqB,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,YAAY,GAAG,KAAK,CAAC;gCACpG,IAAM,eAAe,GAAG,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,OAAO,EAAE,CAAC;gCAElE,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,KAAK,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC;oCACvC,+DAA+D;oCAChE,MAAM,CAAC,0BAA0B,CAAC;gCACtC,CAAC;gCAED,EAAE,CAAC,CAAC,CAAC,KAAK;uCACH,CAAC,KAAK,CAAC,SAAS;uCACf,CAAC,KAAK,CAAC,SAAS,GAAG,eAAe;2CAC3B,IAAI,CAAC,GAAG,EAAE,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;oCAC3C,MAAM,CAAC,wBAAwB,CAAC;gCACpC,CAAC;gCACD,MAAM,CAAC,KAAK,CAAC;4BACjB,CAAC,CAAC;4BAEF,EAAE,CAAC,CAAC,4BAA4B,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;gCAC9D,GAAG,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;gCACjC,IAAI,CAAC,wBAAwB,GAAG,IAAI,6CAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gCAC5E,IAAI,CAAC,YAAY,EAAE,CAAC;4BACxB,CAAC;4BAEK,uBAAuB,GAAG,4BAA4B,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;4BACpF,EAAE,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;gCACpB,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;gCAC1C,GAAG,CAAC,MAAM,EAAE,qBAAqB,EAAE,uBAAuB,EAAE,WAAW,CAAC,CAAC;gCACzE,IAAI,CAAC,uBAAuB,CAAC,IAAI,yCAAmB,CAChD,IAAI,CAAC,WAAW,EAChB,uBAAuB,KAAK,0BAA0B;oCAClD,CAAC,CAAC,EAAE,CAAC,0DAA0D;oCAC/D,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,wBAAwB;iCACrD,CAAC,CAAC;4BACP,CAAC;iCAEG,4BAA4B,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC,EAA9D,wBAA8D;;;;4BAG1D,GAAG,CAAC,MAAM,EAAE,oCAAoC,CAAC,CAAC;4BAErB,qBAAM,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,EAAA;;4BAAtE,oBAAoB,GAAG,SAA+C;4BAC5E,GAAG,CAAC,MAAM,EAAE,6BAA6B,CAAC,CAAC;4BAErC,sBAAsB,GAAG,IAAI,+CAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;4BAC5E,sBAAsB,CAAC,cAAc,GAAG,oBAAoB,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC;gCACrE,YAAY,EAAE,GAAG,CAAC,YAAY;gCAC9B,WAAW,EAAE,GAAG,CAAC,mBAAmB;6BACvC,CAAC,EAHsE,CAGtE,CAAC,CAAC;4BAEJ,IAAI,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,CAAC;4BACxD,GAAG,CAAC,MAAM,EAAE,0BAA0B,CAAC,CAAC;;;;4BAGxC,GAAG,CAAC,OAAO,EAAE,mCAAmC,EAAE,OAAK,IAAI,OAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;;;4BAIrF,IAAI,CAAC,sBAAsB,CAAC,OAAO,GAAG,CAAC,4BAA4B,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;;;;iCAGjF,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAApC,wBAAoC;4BACpC,GAAG,CAAC,MAAM,EAAE,6BAA6B,CAAC,CAAC;4BACnB,qBAAM,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAA;;4BAApF,eAAe,GAAG,SAAkE;4BAC1F,4HAA4H;4BAC5H,6GAA6G;4BAE7G,GAAG,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC;4BACpC,uBAAuB;4BACvB,IAAI,CAAC,aAAa,CAAC,IAAI,qBAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;4BAEpD,IAAI,CAAC,eAAe,OAApB,IAAI,EACG,CAAC,eAAe,IAAI,EAAE,CAAC;iCACrB,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAC,CAAC,QAAQ,EAAV,CAAU,CAAC;iCAC9B,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAW;gCACxB,gBAAgB,EAAE,QAAQ,CAAC,YAAY;gCACvC,WAAW,EAAE,QAAQ,CAAC,WAAW;gCACjC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;gCAC3B,IAAI,EAAE,QAAQ,CAAC,WAAW;gCAC1B,KAAK,EAAG,QAAQ,CAAC,KAAK,IAAI,SAAS;gCACnC,KAAK,EAAE,QAAQ,CAAC,KAAK;6BACvB,CAAA,EAPe,CAOf,CAAC,EACT;4BAEF,IAAI,CAAC,sBAAsB,CAAC,OAAO,GAAG,IAAI,CAAC;4BAC3C,kBAAkB,GAAG,IAAI,CAAC;4BAC1B,GAAG,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;;;;4BAIJ,qBAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAA;;4BAAvF,oBAAoB,GAAG,SAAgE;4BAC7F,IAAI,CAAC,sBAAsB,CAAC,mBAAmB,GAAG,IAAI,CAAC;4BACjD,kBAAkB,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;4BACjD,GAAG,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;4BAChC,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;4BACzG,GAAG,CAAC,MAAM,EAAE,iBAAiB,EAAE,EAAE,gBAAgB,kBAAA,EAAE,CAAC,CAAC;;;;4BAErD,IAAI,CAAC,sBAAsB,CAAC,mBAAmB,GAAG,KAAK,CAAC;4BACxD,GAAG,CAAC,OAAO,EAAE,uBAAuB,EAAE,OAAK,IAAI,OAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;;;4BAGrE,EAAE,CAAC,CAAC,kBAAkB,IAAI,gBAAgB,CAAC,CAAC,CAAC;gCACzC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,qCAAiB,CAAC,gBAAgB,CAAC,CAAC;4BACtE,CAAC;;;;4BAGD,GAAG,CAAC,OAAO,EAAE,sBAAsB,EAAE,OAAK,IAAI,OAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;;;;;;;4BAMxE,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;4BAC/B,sBAAO;oCACH,sBAAsB,EAAE,gBAAgB;oCACxC,oBAAoB,EAAE,kBAAkB;iCAC3C,EAAC;;;;SACL;QAEO,2CAAkB,GAA1B,UAA2B,oBAA6D,EAAE,WAAgC,EAAE,iBAA0B;YAAtJ,iBAqRC;YArR0B,qCAAA,EAAA,uBAA2D,EAAE;YAEpF,IAAM,cAAc,GAAG;gBACnB,EAAE,EAAE,UAA+D,CAAI,EAAE,CAAI,IAAK,OAAA,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,EAAb,CAAa;gBAC/F,oJAAoJ;gBACpJ,iHAAiH;gBACjH,aAAa,EAAE,UAAiF,CAAI,EAAE,CAAI,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAtC,CAAsC;aACxJ,CAAC;YAEF,IAAM,OAAO,GAAG,UAAS,CAAM,EAAE,CAAM,EAAE,UAAmC;gBACxE,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;qBACP,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;qBAChB,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,IAAI,OAAO,IAAI,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,EAAlD,CAAkD,CAAC,EAD7D,CAC6D,CAAC,CAAC;YAC9F,CAAC,CAAC;YAEF,IAAM,OAAO,GAAG,UAAO,CAAM,EAAE,CAAM,EAAE,UAAmC;gBACtE,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;qBACP,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,CAAC,IAAI,EAAE,CAAC;qBACf,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,IAAI,OAAO,IAAI,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,EAAlD,CAAkD,CAAC,EAD7D,CAC6D,CAAC,CAAC;YAC9F,CAAC,CAAC;YAGE,IAAA,6CAAoC,EAApC,oCAAoC,EACpC,2CAAoC,EAApC,sCAAoC,EACpC,8CAAoC,EAApC,mCAAoC,CACf;YAEzB,IAAM,sBAAsB,GAAG,OAAO,CAClC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,0BAA0B;mBACtC,IAAI,CAAC,MAAM,KAAK,wBAAwB,EAD5C,CAC4C,CAAC,EACpF,UAAU,EACV,cAAc,CAAC,EAAE,CACpB,CAAC;YAEF,IAAM,gBAAgB,GAAG,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,WAAW,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC;YAEzF,EAAE,CAAC,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChC,4BAA4B;gBAC5B,WAAW,GAAG,IAAI,CAAC,iBAAiB,OAAtB,IAAI,GAAmB,aAAa,SAAK,sBAAsB,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,EAAE,EAAP,CAAO,CAAC,EAAC,CAAC;YACxG,CAAC;YAED,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC1B,0BAA0B;gBAC1B,WAAW,GAAG,IAAI,CAAC,iBAAiB,OAAtB,IAAI,GAAmB,aAAa,SAAK,gBAAgB,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAqB;oBACrG,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,gBAAgB,EAAE,IAAI,CAAC,YAAY;oBACnC,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,SAAS;oBAC9B,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,UAAU,EAAE,SAAS;oBACrB,MAAM,EAAE,cAAc;oBACtB,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,IAAI,EAAE,IAAI,CAAC,WAAW;iBACxB,CAAA,EAVkF,CAUlF,CAAC,EAAC,CAAC;YACT,CAAC;YAED,mCAAmC;YACnC,IAAM,6BAA6B,GAAG,OAAO,CACzC,WAAW,CAAC,wBAAwB,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,0BAA0B,EAA1C,CAA0C,CAAC,EAC/F,SAAS,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,qBAAqB,KAAK,KAAI,CAAC,WAAW,EAA/C,CAA+C,CAAC,EACzE,cAAc,CAAC,aAAa,CAC/B,CAAC;YAEF,EAAE,CAAC,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC;gBACvC,6BAA6B,CAAC,OAAO,CAAC,UAAA,IAAI;oBACtC,sBAAsB;oBACtB,WAAW,GAAG,KAAI,CAAC,gBAAgB,CAAC,0BAA0B,EAAE,IAAI,CAAC,EAAE,EAAE,EAAC,MAAM,EAAE,wBAAwB,EAAE,CAAC,CAAC;oBAE9G,IAAM,WAAW,GAAG,WAAW,CAAC,uBAAuB;yBAClD,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,MAAM,KAAK,0BAA0B,CAAC;2BAC7C,OAAO,CAAC,iBAAiB,KAAK,IAAI,CAAC,IAAI;2BACvC,OAAO,CAAC,iBAAiB,KAAK,IAAI,CAAC,IAAI,EAFzC,CAEyC,CAAC,CAAC;oBAEhE,+BAA+B;oBAC/B,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBACd,WAAW,GAAG,KAAI,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,WAAW,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,wBAAwB,EAAC,CAAE,CAAC;oBACzH,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;YAED,kCAAkC;YAClC,IAAM,4BAA4B,GAAG,OAAO,CACxC,WAAW,CAAC,uBAAuB,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,gBAAgB,EAAhC,CAAgC,CAAC,EACpF,YAAY,CAAC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,CAAC,WAAW,CAAC,QAAQ,EAArB,CAAqB,CAAC,EACzD,cAAc,CAAC,aAAa,CAC/B,CAAC;YAEF,EAAE,CAAC,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,CAAC;gBACtC,4BAA4B,CAAC,OAAO,CAAC,UAAA,IAAI;oBACrC,kCAAkC;oBAClC,WAAW,GAAG,KAAI,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,cAAc,EAAC,CAAC,CAAC;gBACvG,CAAC,CAAC,CAAC;YACP,CAAC;YAED,IAAM,oCAAoC,GAAG,OAAO,CAChD,WAAW,CAAC,uBAAuB,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,gBAAgB,EAAhC,CAAgC,CAAC,EACpF,YAAY,CAAC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,QAAQ,EAApB,CAAoB,CAAC,EACxD,cAAc,CAAC,aAAa,CAC/B,CAAC;YAEF,EAAE,CAAC,CAAC,oCAAoC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9C,+CAA+C;gBAC/C,oCAAoC,CAAC,OAAO,CAAC,UAAA,IAAI;oBAC7C,WAAW,GAAG,KAAI,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,uBAAuB,EAAC,CAAC,CAAC;gBAChH,CAAC,CAAC,CAAC;YACP,CAAC;YAED,IAAM,kCAAkC,GAAG,OAAO,CAC9C,WAAW,CAAC,uBAAuB,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,wBAAwB,EAAxC,CAAwC,CAAC,EAC5F,YAAY,EACZ,cAAc,CAAC,aAAa,CAC/B,CAAC;YAEF,EAAE,CAAC,CAAC,kCAAkC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC5C,+BAA+B;gBAC/B,kCAAkC,CAAC,OAAO,CAAC,UAAA,IAAI;oBAC3C,WAAW,GAAG,KAAI,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,sBAAsB,EAAE,CAAC,CAAC;gBAChH,CAAC,CAAC,CAAC;YACP,CAAC;YAED,iGAAiG;YACjG,+DAA+D;YAC/D,IAAM,iCAAiC,GAAG,OAAO,CAC7C,YAAY,CAAC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,CAAC,WAAW,CAAC,QAAQ;mBACjC,WAAW,CAAC,qBAAqB,KAAK,KAAI,CAAC,WAAW,EAD1C,CAC0C,CAAC,EAC9E,WAAW,CAAC,uBAAuB,EACnC,cAAc,CAAC,aAAa,CAC/B,CAAC;YAEF,EAAE,CAAC,CAAC,iCAAiC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3C,WAAW,GAAG,IAAI,CAAC,iBAAiB,OAAtB,IAAI,GAAmB,yBAAyB,SAAK,iCAAiC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAoB;oBACjI,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,gBAAgB,EAAE,IAAI,CAAC,YAAY;oBACnC,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,UAAU,EAAE,IAAI,CAAC,gBAAgB;oBACjC,YAAY,EAAE,IAAI,CAAC,kBAAkB;oBACrC,aAAa,EAAE,IAAI,CAAC,uBAAuB;oBAC3C,MAAM,EAAE,cAAc;oBACtB,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,IAAI,EAAE,IAAI,CAAC,IAAI;iBAClB,CAAA,EAZgH,CAYhH,CAAC,EAAC,CAAC;YACR,CAAC;YAED,IAAM,2BAA2B,GAAG,OAAO,CACvC,WAAW,CAAC,wBAAwB,EACpC,YAAY,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,gBAAgB,KAAK,KAAI,CAAC,WAAW,EAA1C,CAA0C,CAAC,EACvE,cAAc,CAAC,EAAE,CACpB,CAAC;YAEF,iCAAiC;YACjC,IAAM,8BAA8B,GAAG,OAAO,CAC1C,SAAS,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,gBAAgB,KAAK,KAAI,CAAC,WAAW,EAA1C,CAA0C,CAAC,EACpE,WAAW,CAAC,yBAAyB,EACrC,cAAc,CAAC,EAAE,CACpB,CAAC;YAEF,EAAE,CAAC,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxC,gCAAgC;gBAChC,WAAW,GAAG,IAAI,CAAC,iBAAiB,OAAtB,IAAI,GAAmB,2BAA2B,SAAK,8BAA8B,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAoB;oBAChI,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,gBAAgB,EAAE,IAAI,CAAC,YAAY;oBACnC,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,UAAU,EAAE,IAAI,CAAC,qBAAqB;oBACtC,MAAM,EAAE,wBAAwB;iBACnC,CAAA,EAR+G,CAQ/G,CAAC,EAAC,CAAC;gBAEJ,8BAA8B,CAAC,OAAO,CAAC,UAAA,IAAI;oBACvC,IAAM,YAAY,GAAG,KAAI,CAAC,YAAY,EAAE,CAAC,SAAS;yBAC7C,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,gBAAgB,KAAK,IAAI,CAAC,YAAY,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAlE,CAAkE,CAAC,CAAC;oBAE1F,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBACrB,+IAA+I;wBAC/I,KAAI,CAAC,cAAc,CAAC,EAAC,gBAAgB,EAAE,IAAI,CAAC,YAAY,EAAC,EAAE;4BACvD,QAAQ,EAAE,CAAC,YAAY,IAAI,YAAY,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;yBACxF,CAAC,CAAC;oBACP,CAAC;oBAED,uDAAuD;oBACvD,IAAM,WAAW,GAAG,2BAA2B;yBAC1C,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,OAAO,CAAC,MAAM,KAAK,cAAc;2BAC7B,OAAO,CAAC,MAAM,KAAK,gBAAgB,CAAC;2BACvC,OAAO,CAAC,gBAAgB,KAAK,IAAI,CAAC,YAAY;2BAC9C,OAAO,CAAC,UAAU,KAAK,IAAI,CAAC,qBAAqB;2BACjD,OAAO,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAJpC,CAIoC,CAAC,CAAC;oBAC3D,gCAAgC;oBAChC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBACd,WAAW,GAAG,KAAI,CAAC,gBAAgB,CAAC,0BAA0B,EAAE,WAAW,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,wBAAwB,EAAC,CAAE,CAAC;oBAC1H,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,iGAAiG;wBACjG,mCAAmC;wBACnC,WAAW,GAAG,KAAI,CAAC,iBAAiB,CAAC,0BAA0B,EAAsB;4BACjF,EAAE,EAAQ,CAAC,WAAI,CAAC,OAAO,EAAE,CAAC;4BAC1B,gBAAgB,EAAE,IAAI,CAAC,YAAY;4BACnC,KAAK,EAAE,SAAS;4BAChB,WAAW,EAAE,IAAI,CAAC,WAAW;4BAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;4BACvB,UAAU,EAAE,IAAI,CAAC,qBAAqB;4BACtC,YAAY,EAAE,IAAI,CAAC,uBAAuB;4BAC1C,aAAa,EAAE,IAAI,CAAC,4BAA4B;4BAChD,MAAM,EAAE,wBAAwB;4BAChC,QAAQ,EAAE,IAAI;4BACd,IAAI,EAAE,IAAI,CAAC,IAAI;4BACf,IAAI,EAAE,IAAI,CAAC,IAAI;yBAClB,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;YAED,gCAAgC;YAChC,IAAM,uBAAuB,GAAG,OAAO,CACH,WAAW,CAAC,wBAAwB,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,wBAAwB;mBACzC,IAAI,CAAC,MAAM,KAAK,sBAAsB,EADrC,CACqC,CAAC,EAC1F,YAAY,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,gBAAgB,KAAK,KAAI,CAAC,WAAW,EAA1C,CAA0C,CAAC,EACvE,cAAc,CAAC,EAAE,CACpB,CAAC;YAElC,EAAE,CAAC,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjC,iCAAiC;gBACjC,uBAAuB,CAAC,OAAO,CAAC,UAAA,IAAI;oBAChC,WAAW,GAAG,KAAI,CAAC,gBAAgB,CAAC,0BAA0B,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,sBAAsB,EAAC,CAAC,CAAC;gBAChH,CAAC,CAAC,CAAC;YACP,CAAC;YAED,IAAM,qBAAqB,GAAG,OAAO,CACjC,YAAY,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,gBAAgB,KAAK,KAAI,CAAC,WAAW,EAA1C,CAA0C,CAAC,EACvE,WAAW,CAAC,wBAAwB,EACpC,cAAc,CAAC,EAAE,CACpB,CAAC;YAEF,EAAE,CAAC,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC/B,gCAAgC;gBAChC,WAAW,GAAG,IAAI,CAAC,iBAAiB,OAAtB,IAAI,GAAmB,0BAA0B,SAAK,qBAAqB,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAoB;oBACtH,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,gBAAgB,EAAE,IAAI,CAAC,YAAY;oBACnC,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,UAAU,EAAE,IAAI,CAAC,qBAAqB;oBACtC,YAAY,EAAE,IAAI,CAAC,uBAAuB;oBAC1C,aAAa,EAAE,IAAI,CAAC,4BAA4B;oBAChD,MAAM,EAAE,IAAI,CAAC,QAAQ;wBACT,CAAC,CAAC,uBAAuB;wBACzB,CAAC,CAAC,cAAc;oBAC5B,QAAQ,EAAE,IAAI;oBACd,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,IAAI,EAAE,IAAI,CAAC,IAAI;iBAClB,CAAA,EAfqG,CAerG,CAAC,EAAC,CAAC;YACR,CAAC;YAED,IAAM,sBAAsB,GAAG,OAAO,CAClC,YAAY,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,gBAAgB,KAAK,KAAI,CAAC,WAAW,EAA1C,CAA0C,CAAC,EACvE,WAAW,CAAC,wBAAwB,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,sBAAsB,EAAtC,CAAsC,CAAC,EAC3F,cAAc,CAAC,EAAE,CACpB,CAAC;YAEF,EAAE,CAAC,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChC,6IAA6I;gBAC7I,sBAAsB,CAAC,OAAO,CAAC,UAAA,IAAI;oBAC/B,WAAW,GAAG,KAAI,CAAC,gBAAgB,CAAC,0BAA0B,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,cAAc,EAAC,CAAC,CAAC;gBACxG,CAAC,CAAC,CAAC;YACP,CAAC;YAED,MAAM,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,MAAM;mBAC5B,gBAAgB,CAAC,MAAM;mBACvB,6BAA6B,CAAC,MAAM;mBACpC,4BAA4B,CAAC,MAAM;mBACnC,oCAAoC,CAAC,MAAM;mBAC3C,kCAAkC,CAAC,MAAM;mBACzC,iCAAiC,CAAC,MAAM;mBACxC,8BAA8B,CAAC,MAAM;mBACrC,uBAAuB,CAAC,MAAM;mBAC9B,qBAAqB,CAAC,MAAM;mBAC5B,sBAAsB,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;QAEO,wCAAe,GAAvB;YACI,MAAM,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QAClC,CAAC;QAEO,0CAAiB,GAAzB;YACI,IAAM,CAAC,GAAG,MAAM,EAAE,CAAC;YACnB,MAAM,CAAC;gBACH,IAAI,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;gBAC3B,IAAI,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,kGAAkG;aACjI,CAAC;QACN,CAAC;QAEO,0CAAiB,GAAzB,UAA0B,KAAa;YACnC,sFAAsF;YACtF,oEAAoE;YACpE,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAEO,iDAAwB,GAAhC,UAAiC,UAA8C;YAC3E,MAAM,CAAC,UAAU,CAAC,MAAM,KAAK,wBAAwB;mBAC1C,UAAU,CAAC,MAAM,KAAK,sBAAsB;mBAC5C,UAAU,CAAC,MAAM,KAAK,0BAA0B;mBAChD,UAAU,CAAC,MAAM,KAAK,wBAAwB,CAAC;QAC9D,CAAC;QAr7CQ,cAAc;YAD1B,0BAAM,CAAC,iCAAkB,EAAE,+BAAc,EAAE,0CAAe,EAAE,2CAAoB,CAAC;6DAyBzD,0CAAe;WAxB3B,cAAc,CAs7C1B;QAAD,qBAAC;KAt7CD,AAs7CC,IAAA;IAt7CY,wCAAc","file":"vanStockEngine.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\nimport { inject } from \"aurelia-framework\";\nimport { VanStockService as ApiVanStockService } from \"../../api/services/vanStockService\";\nimport { IVanStockService as IApiVanStockService } from \"../../api/services/interfaces/IVanStockService\";\nimport * as Logging from \"aurelia-logging\";\nimport { StorageService } from \"./storageService\";\nimport { IStorageService } from \"./interfaces/IStorageService\";\nimport { MaterialWithQuantities } from \"../models/materialWithQuantities\";\nimport { MaterialSearchResult } from \"../models/materialSearchResult\";\nimport { IVanStockEngine } from \"./interfaces/IVanStockEngine\";\nimport { Threading } from \"../../../common/core/threading\";\nimport { Material } from \"../models/material\";\nimport { MaterialAdjustments, MaterialAdjustment, MaterialAdjustmentsArrays, MaterialAdjustmentStatus } from \"../models/materialAdjustments\";\nimport { Guid } from \"../../../common/core/guid\";\nimport { IMaterialActions } from \"../../api/models/vanStock/IMaterialActions\";\nimport { BusinessException } from \"../models/businessException\";\nimport { MaterialRequest, MaterialRequestStatus } from \"../models/materialRequest\";\nimport { Materials } from \"../models/materials\";\nimport { MaterialSearchResults } from \"../models/materialSearchResults\";\nimport { EventAggregator, Subscription } from \"aurelia-event-aggregator\";\nimport { WuaNetworkDiagnosticsConstants } from \"../../../common/core/constants/wuaNetworkDiagnosticsConstants\";\nimport { VanStockConstants } from \"./constants/vanStockConstants\";\nimport { EngineerServiceConstants } from \"./constants/engineerServiceConstants\";\n\nimport { IConfigurationService } from \"../../../common/core/services/IConfigurationService\";\nimport { IVanStockConfiguration } from \"./interfaces/IVanStockConfiguration\";\nimport { ConfigurationService } from \"../../../common/core/services/configurationService\";\nimport { MaterialCollection } from \"../models/materialCollection\";\nimport { MaterialHighValueTools } from \"../models/materialHighValueTools\";\nimport { MaterialHighValueTool } from \"../models/materialHighValueTool\";\nimport * as moment from \"moment\";\nimport { MaterialToCollect } from \"../models/materialToCollect\";\nimport { MaterialSearchResultOnline } from \"../models/materialSearchResultOnline\";\nimport {MaterialWithReservationQuantity} from \"../models/materialWithReservationQuantity\";\nimport { VanStockStatus } from \"../vanStockStatus\";\nimport { IOnlineMaterialSearchResult } from \"../../api/models/vanStock/IOnlineMaterialSearchResult\";\nimport { PollingHelper } from \"../../core/pollingHelper\";\nimport { ITrainingModeConfiguration } from \"./interfaces/ITrainingModeConfiguration\";\nimport { InitialisationCategory } from \"../models/initialisationCategory\";\nimport { InitialisationEventConstants } from \"../constants/initialisationEventConstants\";\n\nconst ZONE_DUMMY_QUANTITY = 9999;\nconst DEFAULT_OWNER = \"BGS\";\n\n@inject(ApiVanStockService, StorageService, EventAggregator, ConfigurationService)\nexport class VanStockEngine implements IVanStockEngine {\n    private _vanStockService: IApiVanStockService;\n    private _storageService: IStorageService;\n    private _eventAggregator: EventAggregator;\n    private _configurationService: IConfigurationService;\n    private _logger: Logging.Logger;\n\n    // we need to keep a cache of live search result objects so that user can reneter a screen and\n    //  e.g. still get back a live reference to a search that is in progress that will eventaully be updated\n    private _onlineSearchResultCache: MaterialSearchResults;\n\n    private _bindableReadinessFlag: {\n        isReady: boolean,\n        isActionsEndpointOk: boolean\n    };\n\n    private _engineerId: string;\n    private _pollingTimerId: number;\n    private _networkChangeSubscription: Subscription;\n    private _config: IVanStockConfiguration & ITrainingModeConfiguration;\n    private _isSyncInProgress: boolean;\n\n    constructor(vanStockService: IApiVanStockService,\n        storageService: IStorageService,\n        eventAggregator: EventAggregator,\n        configurationService: IConfigurationService) {\n        this._vanStockService = vanStockService;\n        this._storageService = storageService;\n        this._eventAggregator = eventAggregator;\n        this._configurationService = configurationService;\n        this._logger = Logging.getLogger(\"VanStockEngine\");\n\n        this._bindableReadinessFlag = {\n            isReady: false,\n            isActionsEndpointOk: false\n        };\n    }\n\n    public async initialise(engineerId: string): Promise<void> {\n        this._logger.warn(\"Initialising\");\n        this._config = this._configurationService.getConfiguration<IVanStockConfiguration & ITrainingModeConfiguration>();\n        this._engineerId = this.convertEngineerId(engineerId);\n\n        this._onlineSearchResultCache = this._storageService.getMaterialSearchResults()\n            || new MaterialSearchResults(this._engineerId);\n\n        // special case: if a search has been previously captured/serialized in SEARCHING state, it ain't ever going to complete as we are a completely\n        //  restarted instance of the app\n        this._onlineSearchResultCache.materialSearchResults = this._onlineSearchResultCache.materialSearchResults\n            .filter(result => result.completionStatus !== \"SEARCHING\");\n\n        this._eventAggregator.subscribe(EngineerServiceConstants.ENGINEER_SIGNED_ON_CHANGED, async (isSignedOn: boolean) => {\n            // if the engineer has just signed off, lets do our best to let the backend know\n            //  our http headers will let them know we are signed off\n            if (!isSignedOn) {\n                try {\n                    await this._vanStockService.getEngineerActions(this._engineerId);\n                } catch (error) {\n                    // if we get a 404/500 then don't let this blow up, if it does we get a red error because it is not handled elsewhere\n                }\n            }\n        });\n\n        this.startSyncPolling();\n        await this.syncWithServer((message) => this._eventAggregator.publish(InitialisationEventConstants.INITIALISE_CATEGORY, <InitialisationCategory>{\n            category: \"Initialising Van Stock\",\n            item: message,\n            progressValue: -1,\n            progressMax: -1\n        }));\n    }\n\n    public getBindableVanStockStatusFlag(): VanStockStatus {\n        // todo: we are exposing the boolean we use for internal purposes, what if the client mutates it!?\n        return this._bindableReadinessFlag;\n    }\n\n    public startSyncPolling(): void {\n        if (!this._pollingTimerId) {\n\n            this._pollingTimerId = Threading.startTimer(\n                () => this.syncWithServer(),\n                (this._config.assetTrackingPollingIntervalMinutes || 5) * 60 * 1000\n            );\n\n        }\n\n        // if we have not got fresh data because we did not have network connection when we initialised, let's listen for\n        //  when the network comes back and we can immediately try again\n        if (!this._networkChangeSubscription) {\n            this._networkChangeSubscription = this._eventAggregator.subscribe(WuaNetworkDiagnosticsConstants.NETWORK_STATUS_CHANGED,\n                (isNetworkConnected: boolean) => {\n                    if (isNetworkConnected && !this._bindableReadinessFlag.isReady) {\n                        this.syncWithServer();\n                    }\n                }\n            );\n        }\n    }\n\n    public async getHighValueToolList(): Promise<MaterialHighValueTool[]> {\n        return this.getMaterialHighValueTools().highValueTools;\n    }\n\n    public getLocalMaterial(): MaterialWithQuantities[] {\n        // some of the adjustments can have many entries per stockRefId (hence the filter and reduce rather than a straight find)\n        // some are one-to-ones so a find would do, but lets just send everything through the same code\n        const getTotalQuantity = <T extends { quantity: number }>(items: T[], filterFn: (item: T) => boolean) => {\n            return (items || [])\n                .filter(item => item && filterFn(item))\n                .reduce((acc, item) => acc + item.quantity, 0);\n        };\n\n        const adjustments = this.getAdjustments();\n\n        return this.getMaterials().materials.map(item => {\n            const material = item as MaterialWithQuantities;\n\n            material.quantityToBeCollected =  getTotalQuantity(\n                adjustments.collections,\n                q => q.status !== \"FULFILLED_UNACKNOWLEDGED\"\n                    && q.status !== \"FULFILLED_ACKNOWLEDGED\"\n                    && q.stockReferenceId === material.stockReferenceId\n                    && q.jobId === material.jobId\n            );\n\n            material.quantityToBeReturned = getTotalQuantity(\n                adjustments.returns,\n                q => q.stockReferenceId === material.stockReferenceId\n                    && q.jobId === material.jobId\n            );\n\n            material.quantityOutboundReservation = getTotalQuantity(\n                adjustments.outboundMaterialRequests,\n                q => this.isALiveReservationStatus(q)\n                    && q.stockReferenceId === material.stockReferenceId\n                    && q.jobId === material.jobId\n            );\n\n            material.quantityInboundReservation = getTotalQuantity(\n                adjustments.inboundMaterialRequests,\n                q => this.isALiveReservationStatus(q)\n                    && q.stockReferenceId === material.stockReferenceId\n                    && q.jobId === material.jobId\n            );\n\n            return material;\n        });\n    }\n\n    public getBindableMaterialSearchResult(stockReferenceId: string, forceOnlineRefresh?: boolean): MaterialSearchResult {\n\n        const getCachedOnlineSearchResult = () => {\n            return this._onlineSearchResultCache.materialSearchResults\n                                        .find(materialSearchResult => materialSearchResult.stockReferenceId.toUpperCase() === stockReferenceId.toUpperCase());\n        };\n\n        const cacheOnlineSearchResult = (onlineSearchResult: MaterialSearchResultOnline) => {\n            this._onlineSearchResultCache.materialSearchResults.push(onlineSearchResult);\n        };\n\n        const isValidCachedOnlineSearchResult = (onlineSearchResult: MaterialSearchResultOnline) => {\n            if (forceOnlineRefresh) {\n                return false;\n            }\n            if (onlineSearchResult.completionStatus === \"NOT_FOUND_OFFLINE\") {\n                return false;\n            }\n            if (onlineSearchResult\n                && onlineSearchResult.timestamp\n                && ((this.getNowTimeStamp() - onlineSearchResult.timestamp) > (this._config.assetTrackingSearchStaleMinutes || 5) * 60 * 1000)) {\n                return false;\n            }\n            return true;\n        };\n\n        const removeCachedOnlineSearchResult = () => {\n            this._onlineSearchResultCache.materialSearchResults = this._onlineSearchResultCache.materialSearchResults\n                .filter(searchResult => searchResult.stockReferenceId.toUpperCase() !== cachedOnlineResult.stockReferenceId.toUpperCase());\n        };\n\n        const attachLocalVanstockToResult = (materialSearchResult: MaterialSearchResult) => {\n            materialSearchResult.local.material  = this.getLocalMaterial()\n                .find(item => item.stockReferenceId.toUpperCase() === stockReferenceId.toUpperCase()\n                                && !item.jobId);\n\n            materialSearchResult.local.completionStatus = materialSearchResult.local.material && materialSearchResult.local.material.quantity\n                                                            ? \"FOUND\"\n                                                            : \"NOT_FOUND\";\n        };\n\n        const tryAttachDescriptionFromLocalInfo = (materialSearchResult: MaterialSearchResult) => {\n            if (materialSearchResult.local && materialSearchResult.local.material) {\n                materialSearchResult.description = materialSearchResult.local.material.description;\n            }\n\n            if (!materialSearchResult.description) {\n                const potentialHvtMatch = (this.getMaterialHighValueTools().highValueTools  || [])\n                                .find(hvt => hvt.materialCode.toUpperCase() === materialSearchResult.stockReferenceId.toUpperCase());\n                if (potentialHvtMatch) {\n                    materialSearchResult.description = potentialHvtMatch.description;\n                }\n            }\n        };\n\n        const isNumber = (input: any) =>  !isNaN(parseFloat(input)) && isFinite(input);\n\n        const getDistance = (onlineResult: IOnlineMaterialSearchResult): number | \"UNKNOWN\" => {\n            if (!isNumber(onlineResult.distance)\n                || (onlineResult.lat === 0 && onlineResult.lon === 0)) {\n                return \"UNKNOWN\";\n            } else {\n                return Math.round(onlineResult.distance * 10) / 10;\n            }\n        };\n\n        const compareDistances = (a: {distance: any}, b: {distance: any}) => {\n            return  (isNumber(a.distance)  ? <number>(a.distance) : 999999999)\n                    - (isNumber(b.distance)  ? <number>(b.distance) : 999999999);\n        };\n\n        const getMinimumDistance = (results: {distance: any}[]): number | \"UNKNOWN\"  => {\n            const validDistances = results\n                .filter(res => isNumber(res.distance))\n                .map(res => <number>res.distance);\n\n            if (!validDistances.length) {\n                return \"UNKNOWN\";\n            } else {\n                return Math.min(...validDistances);\n            }\n        };\n\n        const retrieveAndAttachOnlineResult = async () => {\n            try {\n                const searchResult = await this._vanStockService.getRemoteMaterialSearch(stockReferenceId);\n                result.online.timestamp = this.getNowTimeStamp();\n                // filter out my own online results\n                searchResult.results = searchResult.results\n                    .filter(item => item.engineer !== this._engineerId\n                                    && item.quantity);\n\n                if (!searchResult.isInternectConnected) {\n                    result.online.completionStatus =  \"NOT_FOUND_OFFLINE\";\n                } else if (searchResult.results.length) {\n                    result.online.completionStatus = \"FOUND\";\n                    result.online.results = searchResult.results\n                        .map(onlineResult => ({\n                            distance: getDistance(onlineResult),\n                            lon: onlineResult.lon,\n                            lat: onlineResult.lat,\n                            id: onlineResult.engineer,\n                            name: onlineResult.name,\n                            phone: onlineResult.telephone,\n                            workingStatus: <\"WORKING\">\"WORKING\",\n                            material: <MaterialWithReservationQuantity>{\n                                stockReferenceId: onlineResult.materialCode,\n                                description: onlineResult.description,\n                                quantity: onlineResult.quantity,\n                                area: onlineResult.storageZone,\n                                reservationQuantity: onlineResult.reservedQuantity\n                            }\n                        }))\n                        .sort((a, b) => compareDistances(a, b));\n\n                    result.online.summary.totalParts = result.online.results\n                        .reduce((prev, curr) => prev + (curr && curr.material.quantity || 0), 0);\n\n                    result.online.summary.totalLocations = result.online.results.length;\n\n                    result.online.summary.nearestDistance = getMinimumDistance(result.online.results);\n\n                    if (!result.description &&\n                        result.online &&\n                        result.online.results &&\n                        result.online.results[0] &&\n                        result.online.results[0].material) {\n                        // if not in local van stock then look for remote results\n                        result.description = result.online.results[0].material.description;\n                    }\n\n                } else {\n                    result.online.completionStatus = \"NOT_FOUND\";\n                    result.online.results = [];\n                }\n\n            } catch (error) {\n                result.online.timestamp = this.getNowTimeStamp();\n                result.online.completionStatus = \"NOT_FOUND_OFFLINE\";\n            }\n            this.saveSearches();\n        };\n\n        // spin up a new result object to give back, the .online component will be recycled from cache but the result object is always new\n        const result = new MaterialSearchResult();\n        result.stockReferenceId = stockReferenceId;\n\n        attachLocalVanstockToResult(result);\n        tryAttachDescriptionFromLocalInfo(result);\n\n        let cachedOnlineResult = getCachedOnlineSearchResult();\n        if (cachedOnlineResult) {\n            if (isValidCachedOnlineSearchResult(cachedOnlineResult)) {\n                result.online = cachedOnlineResult;\n                return result;\n            } else {\n                removeCachedOnlineSearchResult();\n            }\n        }\n\n        result.online.stockReferenceId = stockReferenceId;\n        result.online.completionStatus = \"SEARCHING\";\n        cacheOnlineSearchResult(result.online);\n\n        /* don't await me! */ retrieveAndAttachOnlineResult();\n        this.saveSearches();\n        return result;\n    }\n\n    public async getPartsToCollect(): Promise<{toCollect: MaterialToCollect[], collected: MaterialCollection[], expectedReturns: Material[]}> {\n        // this doesn't have to be a promise, but might be best to keep the exteral API uniformly promisey\n        const adjustments = this.getAdjustments();\n\n        const collections = adjustments.collections\n            .map(item => {\n                const { stockReferenceId, jobId, description, quantity} = item;\n                const foundMaterial = this.getMaterials().materials\n                                        .find(material => material.stockReferenceId === item.stockReferenceId);\n\n                const area = item && item.area\n                    || foundMaterial && foundMaterial.area; // todo question - will this be done for us api end?\n\n                return {\n                    material: <MaterialToCollect>{\n                        stockReferenceId,\n                        jobId,\n                        description,\n                        quantity,\n                        area,\n                        owner: item.owner,\n                        id: item.id\n                    },\n                    status: item.status,\n                    quantityCollected: item.quantityCollected\n                };\n            });\n\n        const toCollect = collections\n            .filter(item => item.status !== \"FULFILLED_UNACKNOWLEDGED\"\n                            && item.status !== \"FULFILLED_ACKNOWLEDGED\")\n            .map(item => item.material);\n\n        const collected = collections\n            .filter(item => item.status === \"FULFILLED_UNACKNOWLEDGED\"\n                            || item.status === \"FULFILLED_ACKNOWLEDGED\")\n            .map(item => {\n                return <MaterialCollection>{...item.material, quantityReturned: 0, quantityCollected: item.quantityCollected};\n            });\n\n        const expectedReturns = adjustments.yesterdaysReturns\n            .map(yesterdaysReturn => <Material>{\n                 stockReferenceId: yesterdaysReturn.stockReferenceId,\n                 jobId: yesterdaysReturn.jobId,\n                 description: yesterdaysReturn.description,\n                 quantity: yesterdaysReturn.quantity,\n                 owner: yesterdaysReturn.owner,\n                 area: yesterdaysReturn.area\n            });\n\n        return {\n            toCollect,\n            collected,\n            expectedReturns\n        };\n    }\n\n    public async getMaterialRequests(): Promise<{ inboundMaterials: MaterialRequest[], outboundMaterials: MaterialRequest[] }> {\n\n        const mapStatus = (status: MaterialAdjustmentStatus): MaterialRequestStatus => {\n            switch (status) {\n                case \"DELETED_ACKNOWLEDGED\":\n                case \"DELETED_UNACKNOWLEDGED\":\n                    return \"WITHDRAWN\";\n                case \"ACKNOWLEDGED\":\n                case \"UNACKNOWLEDGED\":\n                    return \"PENDING\";\n                case \"FULFILLED_UNACKNOWLEDGED\":\n                case \"FULFILLED_ACKNOWLEDGED\":\n                    return \"COMPLETE\";\n                case \"REJECTED_ACKNOWLEDGED\":\n                    return \"REJECTED\";\n                default:\n                    return undefined;\n            }\n        };\n\n        const mapIsSyncedToServer = (status: MaterialAdjustmentStatus) =>\n                        status === \"ACKNOWLEDGED\"\n                    || status === \"DELETED_ACKNOWLEDGED\"\n                    || status === \"FULFILLED_ACKNOWLEDGED\"\n                    || status === \"REJECTED_ACKNOWLEDGED\";\n\n        const compareByDateAndTime = (a: MaterialRequest, b: MaterialRequest) => {\n            return a.date === b.date\n                    ? a.time - b.time\n                    : a.date - b.date;\n        };\n\n        const adjustments = this.getAdjustments();\n\n        const outboundMaterials = adjustments.outboundMaterialRequests\n            .map(item => <MaterialRequest> {\n                id: item.id,\n                stockReferenceId: item.stockReferenceId,\n                description: item.description,\n                quantity: item.quantity,\n                engineerId: item.engineerId,\n                engineerName: item.engineerName,\n                engineerPhone: item.engineerPhone,\n                status: mapStatus(item.status),\n                isSyncedToServer: mapIsSyncedToServer(item.status),\n                owner: item.owner,\n                date: item.date,\n                time: item.time,\n                isUnread: item.isUnread\n            })\n            .sort(compareByDateAndTime);\n\n        const inboundMaterials = adjustments.inboundMaterialRequests\n            .map(item => <MaterialRequest>{\n                id: item.id,\n                stockReferenceId: item.stockReferenceId,\n                description: item.description,\n                quantity: item.quantity,\n                engineerId: item.engineerId,\n                engineerName: item.engineerName,\n                engineerPhone: item.engineerPhone,\n                status: mapStatus(item.status),\n                isSyncedToServer: mapIsSyncedToServer(item.status),\n                owner: item.owner,\n                date: item.date,\n                time: item.time\n            })\n            .sort(compareByDateAndTime);\n\n        return {\n            outboundMaterials,\n            inboundMaterials\n        };\n    }\n\n    public async getReturns(): Promise<Material[]> {\n        const materials = this.getMaterials();\n        return this.getAdjustments().returns\n            .map(materialReturn => {\n\n                const { stockReferenceId, jobId, description, quantity} = materialReturn;\n                const foundMaterial = materials.materials\n                                        .find(material => material.stockReferenceId === materialReturn.stockReferenceId);\n                const area = foundMaterial && foundMaterial.area;\n\n                return <Material>{\n                    stockReferenceId,\n                    jobId,\n                    description,\n                    quantity,\n                    area\n                };\n            });\n    }\n\n    public async registerMaterialRequestReads(arg: { requestIds: (number | Guid)[] }): Promise<void> {\n        this.checkArguments(\"registerAdjustmentReads\", arg);\n\n        let unreadRequests = this.getAdjustments().outboundMaterialRequests\n            .filter(request => request.isUnread\n                                && (arg.requestIds || [])\n                                        .some(requestId => request.id === requestId)\n            );\n\n        unreadRequests\n            .forEach(request => {\n                this.updateAdjustment(\"outboundMaterialRequests\", request.id, {isUnread: false });\n            });\n\n        if (unreadRequests.length) {\n            this._eventAggregator.publish(VanStockConstants.VANSTOCK_UPDATED);\n        }\n    }\n\n    public async registerMaterialZoneUpdate(arg: { stockReferenceId: string, area: string }): Promise<void> {\n        this.checkArguments(\"registerMaterialZoneUpdate\", arg);\n\n        const theseMaterials = this.getMaterials().materials\n            .filter(item => item.stockReferenceId === arg.stockReferenceId);\n\n        if (!theseMaterials.length) {\n            return;\n        }\n\n        for (const thisMaterial of theseMaterials) {\n            this.updateMaterial({stockReferenceId: arg.stockReferenceId, jobId: thisMaterial.jobId}, {area: arg.area});\n        }\n\n        const representativeMaterial = theseMaterials[0];\n\n        if (representativeMaterial.area !== null && representativeMaterial.area !== undefined) {\n            // if we already have an area, Chris says to set that quantity to 0.\n            await this._vanStockService.sendMaterialZoneUpdate(\n                arg.stockReferenceId,\n                {\n                    materialCode: arg.stockReferenceId,\n                    description: representativeMaterial.description,\n                    engineer: this._engineerId,\n                    storageZone: representativeMaterial.area,\n                    owner: representativeMaterial.owner || DEFAULT_OWNER,\n                    quantity: 0\n                }\n            );\n        }\n\n        await this._vanStockService.sendMaterialZoneUpdate(\n            arg.stockReferenceId,\n            {\n                materialCode: arg.stockReferenceId,\n                description: representativeMaterial.description,\n                engineer: this._engineerId,\n                storageZone: arg.area,\n                owner: representativeMaterial.owner || DEFAULT_OWNER,\n                quantity: ZONE_DUMMY_QUANTITY\n            }\n        );\n\n    }\n\n    public async registerMaterialCollection(arg: { dispatchId: number, quantityCollected: number}): Promise<void> {\n        this.checkArguments(\"registerMaterialCollection\", arg);\n        this.checkReadiness(\"registerMaterialCollection\");\n\n        const thisCollection = this.getAdjustments().collections\n            .find(collection => collection.id === arg.dispatchId\n                                && collection.status === \"ACKNOWLEDGED\");\n\n        if (!thisCollection) {\n            return; // what to really do here?\n        }\n\n        this.updateAdjustment(\"collections\", thisCollection.id, {status: \"FULFILLED_UNACKNOWLEDGED\", quantityCollected: arg.quantityCollected });\n\n        const thisMaterial = this.getMaterials().materials\n            .find(item => item.stockReferenceId === thisCollection.stockReferenceId\n                && item.jobId === thisCollection.jobId);\n\n        if (thisMaterial) {\n            this.updateMaterial(\n                {\n                    stockReferenceId: thisCollection.stockReferenceId,\n                    jobId: thisCollection.jobId\n                },\n                {\n                    quantity: (thisMaterial.quantity || 0) + (arg.quantityCollected || 0)\n                }\n            );\n        } else {\n            this.insertMaterials(<Material>{\n                stockReferenceId: thisCollection.stockReferenceId,\n                jobId: thisCollection.jobId || undefined,\n                description: thisCollection.description,\n                quantity: arg.quantityCollected,\n                area: undefined, // the ui makes a subsequent zone call if it wants to specify zone\n                amount: undefined,\n                owner: thisCollection.owner\n            });\n        }\n\n        const receiptDateAndTime = this.getAPIDateAndTime();\n\n        await this._vanStockService.sendMaterialReceipt(\n            thisCollection.stockReferenceId,\n            {\n                material: {\n                    materialCode: thisCollection.stockReferenceId,\n                    description: thisCollection.description,\n                    engineer: this._engineerId,\n                    quantity: thisCollection.quantity,\n                    owner: thisCollection.owner || DEFAULT_OWNER\n                },\n                jobId: thisCollection.jobId || undefined,\n                date: receiptDateAndTime.date,\n                time: receiptDateAndTime.time,\n                receiptQuantity: arg.quantityCollected,\n                id: arg.dispatchId\n            }\n        );\n    }\n\n    public async registerMaterialReturn(arg: { stockReferenceId: string, quantityReturned: number, reason: string, jobId?: string}): Promise<void> {\n        this.checkArguments(\"registerMaterialReturn\", arg);\n\n        const thisMaterial = this.getMaterials().materials\n                .find(item => item.stockReferenceId === arg.stockReferenceId\n                    && item.jobId === arg.jobId);\n\n        this.insertAdjustments(\"returns\", <MaterialAdjustment>{\n            id: Guid.newGuid(),\n            stockReferenceId: arg.stockReferenceId,\n            jobId: arg.jobId,\n            description: thisMaterial && thisMaterial.description,\n            quantity: arg.quantityReturned,\n            engineerId: undefined,\n            engineerName: undefined,\n            status: \"FULFILLED_UNACKNOWLEDGED\",\n            owner: thisMaterial && thisMaterial.owner,\n            reason: arg.reason,\n            date: undefined,\n            time: undefined\n        });\n\n        const returnDateAndTime = this.getAPIDateAndTime();\n        await this._vanStockService.sendMaterialReturn(\n            arg.stockReferenceId,\n            {\n                material: {\n                    materialCode: arg.stockReferenceId,\n                    description: thisMaterial && thisMaterial.description || \"unknown\",\n                    engineer: this._engineerId,\n                    quantity: arg.quantityReturned,\n                    owner: thisMaterial && thisMaterial.owner || DEFAULT_OWNER\n                },\n                date: returnDateAndTime.date,\n                time: returnDateAndTime.time,\n                reason: arg.reason,\n                jobId: arg.jobId\n            }\n        );\n    }\n\n    public async registerMaterialConsumption(arg: { stockReferenceId: string, quantityConsumed: number, jobId?: string}): Promise<void> {\n        this.checkArguments(\"registerMaterialConsumption\", arg);\n\n        const thisMaterial = this.getMaterials().materials\n            .find(item => item.stockReferenceId === arg.stockReferenceId\n                && item.jobId === arg.jobId);\n\n        if (thisMaterial) {\n            this.updateMaterial(arg, {quantity: (thisMaterial.quantity || 0) - (arg.quantityConsumed || 0) });\n        }\n\n        const dateAndTime = this.getAPIDateAndTime();\n        await this._vanStockService.sendMaterialConsumption(\n            arg.stockReferenceId,\n            {\n                material: {\n                    materialCode: arg.stockReferenceId,\n                    description: thisMaterial && thisMaterial.description || \"unknown\",\n                    engineer: this._engineerId,\n                    quantity: arg.quantityConsumed,\n                    owner: thisMaterial && thisMaterial.owner || DEFAULT_OWNER\n                },\n\n                jobId: arg.jobId || undefined,\n                date: dateAndTime.date,\n                time: dateAndTime.time\n            }\n        );\n    }\n\n    public async registerMaterialRequest(arg: {\n        stockReferenceId: string,\n        description: string,\n        quantityRequested: number,\n        engineerId: string,\n        engineerName: string,\n        engineerPhone: string,\n        owner: string }\n        ): Promise<number | Guid> {\n        this.checkArguments(\"registerMaterialRequest\", arg);\n        this.checkReadiness(\"registerMaterialRequest\");\n\n        const dateAndTime = this.getAPIDateAndTime();\n        let id =  Guid.newGuid();\n\n        // for training, we need to let the engineers go from reserve -> collect without waiting for the actions\n        //  to appear in the server endpoint, becuase there is no server in simulation!\n        let status = this._config.trainingMode\n                        ? \"ACKNOWLEDGED\"\n                        : \"UNACKNOWLEDGED\";\n\n        this.insertAdjustments(\"inboundMaterialRequests\", <MaterialAdjustment> {\n            id,\n            stockReferenceId: arg.stockReferenceId,\n            jobId: undefined,\n            description: arg.description, // might not know this if the part is not in my list, but that's ok\n            quantity: arg.quantityRequested,\n            engineerId: arg.engineerId,\n            engineerName: arg.engineerName,\n            engineerPhone: arg.engineerPhone,\n            status,\n            owner: arg.owner,\n            date: dateAndTime.date,\n            time: dateAndTime.time,\n            area: undefined // at the moment we do not specify a preference for a zone\n        });\n\n        await this._vanStockService.sendMaterialRequest(\n            arg.stockReferenceId,\n            {\n                material: {\n                    materialCode: arg.stockReferenceId,\n                    description: arg.description,\n                    engineer: arg.engineerId,\n                    quantity: arg.quantityRequested,\n                    owner: arg.owner || DEFAULT_OWNER\n                },\n                requestingEngineer: this._engineerId,\n                date: dateAndTime.date,\n                time: dateAndTime.time\n            }\n        );\n\n        this.triggerActionsPollingBurst();\n\n        return id;\n    }\n\n    public async registerMaterialRequestWithdrawl( arg: { requestId: number | Guid }): Promise<void> {\n        this.checkArguments(\"registerMaterialRequestWithdrawl\", arg);\n        this.checkReadiness(\"registerMaterialRequestWithdrawl\");\n\n        const existingRequest = this.getAdjustments().inboundMaterialRequests\n            .find(request => request.id === arg.requestId\n                && this.isALiveReservationStatus(request));\n\n        if (!existingRequest) {\n            return;\n        }\n\n        this.updateAdjustment(\"inboundMaterialRequests\", existingRequest.id, { status: \"DELETED_UNACKNOWLEDGED\"});\n        await this._vanStockService.sendMaterialRequestUpdate(\n            existingRequest.stockReferenceId,\n            {\n                material: {\n                    materialCode: existingRequest.stockReferenceId,\n                    description: existingRequest.description,\n                    engineer: existingRequest.engineerId,\n                    quantity: 0,\n                    owner: existingRequest.owner || DEFAULT_OWNER\n                },\n                requestingEngineer: this._engineerId,\n                date: existingRequest.date, // we tie to the original reservtion via date/time!\n                time: existingRequest.time\n            }\n        );\n\n        this.triggerActionsPollingBurst();\n    }\n\n    public async registerMaterialTransfer(arg: { requestId: number | Guid }): Promise<void> {\n        this.checkArguments(\"registerMaterialTransfer\", arg);\n        this.checkReadiness(\"registerMaterialTransfer\");\n\n        const existingRequest = this.getAdjustments().inboundMaterialRequests\n            .find(request => request.id === arg.requestId\n                && this.isALiveReservationStatus(request));\n\n        if (!existingRequest) {\n            return;\n        }\n\n        const transferDateAndTime = this.getAPIDateAndTime();\n        this.updateAdjustment(\"inboundMaterialRequests\", existingRequest.id, {\n            status: \"FULFILLED_UNACKNOWLEDGED\" ,\n            partnerRecordDate: transferDateAndTime.date,\n            partnerRecordTime: transferDateAndTime.time\n        });\n\n        this.insertAdjustments(\"inboundMaterialTransfers\", <MaterialAdjustment>{\n            id: Guid.newGuid(),\n            stockReferenceId: existingRequest.stockReferenceId,\n            jobId: undefined,\n            description: existingRequest.description || \"unknown\",\n            quantity: existingRequest.quantity,\n            engineerId: existingRequest.engineerId,\n            status: \"FULFILLED_UNACKNOWLEDGED\",\n            owner: existingRequest.owner,\n            date: transferDateAndTime.date,\n            time: transferDateAndTime.time\n        });\n\n        const existingMaterial = this.getMaterials().materials\n            .find(item => item.stockReferenceId === existingRequest.stockReferenceId\n                && !item.jobId);\n\n        if (existingMaterial) {\n            this.updateMaterial(\n                { stockReferenceId: existingRequest.stockReferenceId },\n                { quantity: (existingMaterial.quantity || 0) + (existingRequest.quantity || 0) });\n        } else {\n            this.insertMaterials(<Material>{\n                stockReferenceId: existingRequest.stockReferenceId,\n                jobId: undefined,\n                description: existingRequest.description,\n                quantity: existingRequest.quantity,\n                area: undefined,\n                amount: undefined,\n                owner: existingRequest.owner\n            });\n        }\n\n        this.expireSearch(existingRequest.stockReferenceId);\n\n        await this._vanStockService.sendMaterialRequestUpdate(\n            existingRequest.stockReferenceId,\n            {\n                material: {\n                    materialCode: existingRequest.stockReferenceId,\n                    description: existingRequest.description\n                                    || existingMaterial && existingMaterial.description,\n                    engineer: existingRequest.engineerId,\n                    quantity: 0,\n                    owner: existingRequest.owner || DEFAULT_OWNER\n                },\n                requestingEngineer: this._engineerId,\n                date: existingRequest.date,\n                time: existingRequest.time\n            }\n        );\n\n        await this._vanStockService.sendMaterialTransfer(\n            existingRequest.stockReferenceId,\n            {\n                material: {\n                    materialCode: existingRequest.stockReferenceId,\n                    description: existingRequest.description\n                                    || existingMaterial && existingMaterial.description,\n                    engineer: existingRequest.engineerId,\n                    quantity: existingRequest.quantity,\n                    owner: existingRequest.owner || DEFAULT_OWNER\n                },\n                requestingEngineer: this._engineerId,\n                date: transferDateAndTime.date,\n                time: transferDateAndTime.time\n            }\n        );\n\n        this.triggerActionsPollingBurst();\n    }\n\n    public triggerActionsPollingBurst(): void {\n        // for activities when we want to see e.g. a read response come back from actions endpoint\n        PollingHelper.pollIntervals(\n            async () => (await this.syncWithServer()).haveAdjustmentsChanged,\n            this._config.assetTrackingActivePollingPattern || [2, 2, 5, 5, 5]\n        );\n    }\n\n    private getMaterials(): Materials {\n        return this._storageService.getMaterials()\n                || new Materials(this._engineerId);\n    }\n\n    private getAdjustments() : MaterialAdjustments {\n        return this._storageService.getMaterialAdjustments()\n                || new MaterialAdjustments(this._engineerId, []);\n    }\n\n    private getMaterialHighValueTools(): MaterialHighValueTools {\n        return this._storageService.getMaterialHighValueTools()\n                || new MaterialHighValueTools(this._engineerId);\n    }\n\n    private updateMaterial(id: { stockReferenceId: string, jobId?: string}, changes: Partial<Material>): void {\n        const materials = this.getMaterials();\n        const material = materials.materials.find(m => m\n                                    && m.stockReferenceId === id.stockReferenceId\n                                    && (m.jobId || undefined) === (id.jobId || undefined));\n        if (!material) {\n            this._logger.error(\"Applying material update\", id, changes, \"DOES NOT EXIST!\");\n        } else {\n            this._logger.warn(\"Applying material update\", id, changes, material);\n            Object.assign(material, changes);\n            this._logger.warn(\"Applied material update\", material);\n\n            this.saveMaterials(materials);\n        }\n    }\n\n    private insertMaterials(...inMaterials: Material[]): void {\n        const materials = this.getMaterials();\n\n        this._logger.warn(\"Inserting materials\", materials.materials.length, inMaterials);\n        (inMaterials || []).forEach(inMaterial => {\n            const materialAlreadyExists = materials.materials.some(exitingMaterial => exitingMaterial\n                && exitingMaterial.stockReferenceId === inMaterial.stockReferenceId\n                && (exitingMaterial.jobId || undefined) === (inMaterial.jobId || undefined));\n\n            if (materialAlreadyExists) {\n                this._logger.error(\"Inserting materials\", {id: inMaterial.stockReferenceId, jobId: inMaterial.jobId }, \"ALREADY EXISTS!\");\n            } else {\n                materials.materials.push(inMaterial);\n            }\n        });\n        this._logger.warn(\"Inserted materials\", materials.materials.length);\n\n        this.saveMaterials(materials);\n    }\n\n    private updateAdjustment(type: keyof MaterialAdjustmentsArrays, id: number | Guid, changes: Partial<MaterialAdjustment>): MaterialAdjustments {\n        const adjustments = this.getAdjustments();\n        const adjustment = adjustments[type].find(a => a\n                                                    && a.id === id);\n        if (!adjustment) {\n            this._logger.error(\"Applying adjustment update\", type, id, changes, \"DOES NOT EXIST!\");\n        } else {\n            this._logger.warn(\"Applying adjustment update\", type, adjustment, changes);\n\n            Object.assign(adjustment, changes);\n            if (changes.status) {\n                this.stampAdjustmentHistory(adjustment);\n            }\n            this._logger.warn(\"Applied adjustment update\", type, adjustment);\n\n            this.saveMaterialAdjustments(adjustments);\n        }\n\n        return adjustments;\n    }\n\n    private insertAdjustments(type: keyof MaterialAdjustmentsArrays, ...inAdjustments: MaterialAdjustment[]): MaterialAdjustments {\n        const adjustments = this.getAdjustments();\n\n        this._logger.warn(\"Inserting adjustments\", type, adjustments[type].length, inAdjustments);\n        (inAdjustments || []).forEach(inAdjustment => {\n            if (adjustments[type].some(existingAdjustment => existingAdjustment.id === inAdjustment.id)) {\n                this._logger.error(\"Inserting adjustments\", type, inAdjustment.id, \"ALREADY EXISTS!\");\n            } else {\n                this.stampAdjustmentHistory(inAdjustment);\n                adjustments[type].push(inAdjustment);\n            }\n        });\n        this._logger.warn(\"Inserted adjustments\", type, adjustments[type].length);\n\n        this.saveMaterialAdjustments(adjustments);\n        return adjustments;\n    }\n\n    private deleteAdjustments(type: keyof MaterialAdjustmentsArrays, ... ids: (number | Guid)[]): MaterialAdjustments {\n        const adjustments = this.getAdjustments();\n\n        this._logger.warn(\"Deleting adjustments\", type, adjustments[type].length, ids);\n        adjustments[type] = adjustments[type].filter(item => !ids.some(id => item.id === id));\n        this._logger.warn(\"Deleted adjustments\", type, adjustments[type].length);\n\n        this.saveMaterialAdjustments(adjustments);\n        return adjustments;\n    }\n\n    private stampAdjustmentHistory(adjustment: MaterialAdjustment): void {\n        if (!adjustment) {\n            return;\n        }\n        adjustment.history = adjustment.history || [];\n        adjustment.history.push({\n            status: adjustment.status,\n            time: this.getAPIDateAndTime().time\n        });\n    }\n\n    private saveMaterialHighValueTools(materialHighValueTools: MaterialHighValueTools): void {\n        materialHighValueTools.timestamp = this.getNowTimeStamp();\n        this._storageService.setMaterialHighValueTools(materialHighValueTools);\n    }\n\n    private saveMaterials(materials: Materials): void {\n        materials.timestamp = this.getNowTimeStamp();\n        this._storageService.setMaterials(materials);\n    }\n\n    private saveMaterialAdjustments(adjustments: MaterialAdjustments): void {\n        adjustments.timestamp = this.getNowTimeStamp();\n        this._storageService.setMaterialAdjustments(adjustments);\n    }\n\n    private saveSearches(): void {\n        this._onlineSearchResultCache.timestamp = this.getNowTimeStamp();\n        this._storageService.setMaterialSearchResults(this._onlineSearchResultCache);\n    }\n\n    private expireSearch(stockReferenceId: string): void {\n        const existingSearch = this._onlineSearchResultCache.materialSearchResults\n                                .find(result => result.stockReferenceId === stockReferenceId);\n        if (existingSearch) {\n            existingSearch.timestamp = -1;\n        }\n    }\n\n    private checkArguments(callSite: string, arg: any): void {\n        if (!arg) {\n            throw new BusinessException(this, callSite, \"material argument missing\", null, null);\n        }\n    }\n\n    private checkReadiness(callSite: string): void {\n        if (!this._bindableReadinessFlag.isReady) {\n            throw new BusinessException(this, callSite, \"This action is not possible until Van Stock has refreshed from the server.\", null, null);\n        }\n    }\n\n    private async syncWithServer(feedbackDelegate?: (message: string) => void): Promise<{haveMaterialsChanged: boolean, haveAdjustmentsChanged: boolean}> {\n        if (this._isSyncInProgress) {\n            return {\n                haveMaterialsChanged: false,\n                haveAdjustmentsChanged: false\n            };\n        }\n\n        // todo: the way that logging and feeding back within this method needs to be refactored, unified a bit\n        const log = (type: \"WARN\" | \"ERROR\", message: string, ...rest: any[]) => {\n            switch (type) {\n                case \"WARN\":\n                    this._logger.warn(message, rest);\n                    break;\n                case \"ERROR\":\n                    this._logger.error(message, rest);\n                    break;\n                default:\n                    break;\n            }\n            if (feedbackDelegate) {\n                feedbackDelegate(message);\n            }\n        };\n\n        this._isSyncInProgress = true;\n        let haveWeHitMaterials = false;\n        let haveWeHitActions = false;\n\n        try {\n\n            const isTimeToClearAndRebuildCache = (cache : {timestamp: number, engineerId: string}) => {\n                const cutoffHHmmss = this._config.assetTrackingCacheRefreshTimeHHmm || \"05:00\";\n                const todayCutOffTimeString = (new Date()).toISOString().split(\"T\")[0] + \"T\" + cutoffHHmmss + \":00\";\n                const todayCutOffTime = new Date(todayCutOffTimeString).getTime();\n\n                if (cache.engineerId !== this._engineerId) {\n                     // hack for when using different engineers in dev/test/training\n                    return \"DIFFERENT_ENGINEER_LOGIN\";\n                }\n\n                if (!cache\n                    || !cache.timestamp\n                    ||  (cache.timestamp < todayCutOffTime\n                            && Date.now() > todayCutOffTime)) {\n                    return \"CACHE_EMPTY_OR_EXPIRED\";\n                }\n                return false;\n            };\n\n            if (isTimeToClearAndRebuildCache(this._onlineSearchResultCache)) {\n                log(\"WARN\", \"Clearing Searches\");\n                this._onlineSearchResultCache = new MaterialSearchResults(this._engineerId);\n                this.saveSearches();\n            }\n\n            const adjustmentRebuildReason = isTimeToClearAndRebuildCache(this.getAdjustments());\n            if (adjustmentRebuildReason) {\n                const adjustments = this.getAdjustments();\n                log(\"WARN\", \"Clearing Ajustments\", adjustmentRebuildReason, adjustments);\n                this.saveMaterialAdjustments(new MaterialAdjustments(\n                    this._engineerId,\n                    adjustmentRebuildReason === \"DIFFERENT_ENGINEER_LOGIN\"\n                        ? [] // if we are different engineer then drop yesterday's data\n                        : adjustments.returns // ... otherwise keep it\n                ));\n            }\n\n            if (isTimeToClearAndRebuildCache(this.getMaterialHighValueTools())) {\n                try {\n\n                    log(\"WARN\", \"Trying to rebuild high value tools\");\n\n                    const serverHighValueTools = await this._vanStockService.getHighValueTools();\n                    log(\"WARN\", \"Rebuilding high value tools\");\n\n                    const materialHighValueTools = new MaterialHighValueTools(this._engineerId);\n                    materialHighValueTools.highValueTools = serverHighValueTools.map(hvt => ({\n                        materialCode: hvt.materialCode,\n                        description: hvt.materialDescription\n                    }));\n\n                    this.saveMaterialHighValueTools(materialHighValueTools);\n                    log(\"WARN\", \"Rebuilt high value tools\");\n\n                } catch (error) {\n                    log(\"ERROR\", \"Error rebuilding high value tools\", error && error.toString());\n                }\n            }\n\n            this._bindableReadinessFlag.isReady = !isTimeToClearAndRebuildCache(this.getMaterials());\n            try {\n\n                if (!this._bindableReadinessFlag.isReady) {\n                    log(\"WARN\", \"Trying to rebuild materials\");\n                    const serverMaterials = await this._vanStockService.getEngineerMaterials(this._engineerId);\n                    // if getEngineerMaterials() throws an error, we still have the old data in the cache, but the isReady flag is left as false\n                    //  and no actions can be set, either through the register* methods or by hitting the actions endpoint below.\n\n                    log(\"WARN\", \"Rebuilding materials\");\n                    // clear down materials\n                    this.saveMaterials(new Materials(this._engineerId));\n\n                    this.insertMaterials(\n                        ...(serverMaterials || [])\n                            .filter(material => !!material)\n                            .map(material => (<Material>{\n                                stockReferenceId: material.materialCode,\n                                description: material.description,\n                                quantity: material.quantity,\n                                area: material.storageZone,\n                                jobId:  material.jobId || undefined,\n                                owner: material.owner\n                            }))\n                    );\n\n                    this._bindableReadinessFlag.isReady = true;\n                    haveWeHitMaterials = true;\n                    log(\"WARN\", \"Rebuilt materials\");\n                }\n\n                try {\n                    const currentServerActions = await this._vanStockService.getEngineerActions(this._engineerId);\n                    this._bindableReadinessFlag.isActionsEndpointOk = true;\n                    const currentAdjustments = this.getAdjustments();\n                    log(\"WARN\", \"Applying actions\");\n                    haveWeHitActions = this.applyRemoteActions(currentServerActions, currentAdjustments, haveWeHitMaterials);\n                    log(\"WARN\", \"Applied actions\", { haveWeHitActions });\n                } catch (error) {\n                    this._bindableReadinessFlag.isActionsEndpointOk = false;\n                    log(\"ERROR\", \"Error hitting actions\", error && error.toString());\n                }\n\n                if (haveWeHitMaterials || haveWeHitActions) {\n                    this._eventAggregator.publish(VanStockConstants.VANSTOCK_UPDATED);\n                }\n\n            } catch (error) {\n                log(\"ERROR\", \"syncWithServer error\", error && error.toString());\n            }\n\n        } catch (error) {\n\n        }\n        this._isSyncInProgress = false;\n        return {\n            haveAdjustmentsChanged: haveWeHitActions,\n            haveMaterialsChanged: haveWeHitMaterials\n        };\n    }\n\n    private applyRemoteActions(currentServerActions: IMaterialActions = <IMaterialActions>{}, adjustments: MaterialAdjustments, isInitialDataBuid: boolean): boolean {\n\n        const compareItemsBy = {\n            ID: <T extends {id: Guid | number}, U extends {id: Guid | number}>(a: T, b: U) => a.id === b.id,\n            // note: if using DATE_AND_TIME, make sure your local array is passed in as A, because it is those in A that are returned from the functions inA...*\n            //  ... and it will be the case you need your local id, not the remote one in order to do useful subsequent work.\n            DATE_AND_TIME: <T extends {date: number, time: number}, U extends {date: number, time: number}>(a: T, b: U) => a.date === b.date && a.time === b.time,\n        };\n\n        const inANotB = <T , U >(a: T[], b: U[], comparator: (a: T, b: U) => boolean) => {\n            return (a || [])\n                    .filter(itemInA => !(b || [])\n                                .some(itemInB => itemInA && itemInB && comparator(itemInA, itemInB)));\n        };\n\n        const inAAndB = <T, U>(a: T[], b: U[], comparator: (a: T, b: U) => boolean) => {\n            return (a || [])\n                    .filter(itemInA => (b || [])\n                                .some(itemInB => itemInA && itemInB && comparator(itemInA, itemInB)));\n        };\n\n        const {\n            dispatchedMaterials: dispatches = [],\n            reservedMaterials: reservations = [],\n            transferredMaterials: transfers = []\n        } = currentServerActions;\n\n        const disappearedCollections = inANotB(\n            adjustments.collections.filter(item => item.status !== \"FULFILLED_UNACKNOWLEDGED\"\n                                                    && item.status !== \"FULFILLED_ACKNOWLEDGED\"),\n            dispatches,\n            compareItemsBy.ID\n        );\n\n        const freshCollections = inANotB(dispatches, adjustments.collections, compareItemsBy.ID);\n\n        if (disappearedCollections.length) {\n            // 1) disappeared collection\n            adjustments = this.deleteAdjustments(\"collections\", ...disappearedCollections.map(item => item.id));\n        }\n\n        if (freshCollections.length) {\n            // 2) appeared collections\n            adjustments = this.insertAdjustments(\"collections\", ...freshCollections.map(item => (<MaterialAdjustment>{\n                id: item.id,\n                stockReferenceId: item.materialCode,\n                jobId: item.jobId || undefined,\n                description: item.description,\n                quantity: item.quantity,\n                engineerId: undefined,\n                status: \"ACKNOWLEDGED\",\n                owner: item.owner,\n                area: item.storageZone\n            })));\n        }\n\n        // transfers for parts coming to me\n        const freshInboundMaterialTransfers = inAAndB(\n            adjustments.inboundMaterialTransfers.filter(item => item.status === \"FULFILLED_UNACKNOWLEDGED\"),\n            transfers.filter(item => item.destinationEngineerId === this._engineerId),\n            compareItemsBy.DATE_AND_TIME\n        );\n\n        if (freshInboundMaterialTransfers.length) {\n            freshInboundMaterialTransfers.forEach(item => {\n                // 3) inbound transfer\n                adjustments = this.updateAdjustment(\"inboundMaterialTransfers\", item.id, {status: \"FULFILLED_ACKNOWLEDGED\" });\n\n                const thisRequest = adjustments.inboundMaterialRequests\n                    .find(request => (request.status === \"FULFILLED_UNACKNOWLEDGED\")\n                                    && request.partnerRecordDate === item.date\n                                    && request.partnerRecordTime === item.time);\n\n                // 4) completed inbound request\n                if (thisRequest) {\n                    adjustments = this.updateAdjustment(\"inboundMaterialRequests\", thisRequest.id, { status: \"FULFILLED_ACKNOWLEDGED\"} );\n                }\n            });\n        }\n\n        // requests for parts coming to me\n        const freshInboundMaterialRequests = inAAndB(\n            adjustments.inboundMaterialRequests.filter(item => item.status === \"UNACKNOWLEDGED\"),\n            reservations.filter(reservation => !reservation.declined),\n            compareItemsBy.DATE_AND_TIME\n        );\n\n        if (freshInboundMaterialRequests.length) {\n            freshInboundMaterialRequests.forEach(item => {\n                // 5) acknowledged inbound request\n                adjustments = this.updateAdjustment(\"inboundMaterialRequests\", item.id, { status: \"ACKNOWLEDGED\"});\n            });\n        }\n\n        const freshRejectedInboundMaterialRequests = inAAndB(\n            adjustments.inboundMaterialRequests.filter(item => item.status === \"UNACKNOWLEDGED\"),\n            reservations.filter(reservation => reservation.declined),\n            compareItemsBy.DATE_AND_TIME\n        );\n\n        if (freshRejectedInboundMaterialRequests.length) {\n            // 6) acknowledged inbound request but rejected\n            freshRejectedInboundMaterialRequests.forEach(item => {\n                adjustments = this.updateAdjustment(\"inboundMaterialRequests\", item.id, { status: \"REJECTED_ACKNOWLEDGED\"});\n            });\n        }\n\n        const disappearedInboundMaterialRequests = inANotB(\n            adjustments.inboundMaterialRequests.filter(item => item.status === \"DELETED_UNACKNOWLEDGED\"),\n            reservations,\n            compareItemsBy.DATE_AND_TIME\n        );\n\n        if (disappearedInboundMaterialRequests.length) {\n            // 7) withdrawn inbound request\n            disappearedInboundMaterialRequests.forEach(item => {\n                adjustments = this.updateAdjustment(\"inboundMaterialRequests\", item.id, { status: \"DELETED_ACKNOWLEDGED\" });\n            });\n        }\n\n        // if the user has hit e.g. Remove User Data whilst there is an open reservation, we will lose it\n        //  so look for reservations indbound to us that we do not have\n        const rebuildingInboundMaterialRequests = inANotB(\n            reservations.filter(reservation => !reservation.declined\n                                && reservation.destinationEngineerId === this._engineerId),\n            adjustments.inboundMaterialRequests,\n            compareItemsBy.DATE_AND_TIME\n        );\n\n        if (rebuildingInboundMaterialRequests.length) {\n            adjustments = this.insertAdjustments(\"inboundMaterialRequests\", ...rebuildingInboundMaterialRequests.map(item => <MaterialAdjustment>{\n                id: item.id,\n                stockReferenceId: item.materialCode,\n                jobId: undefined,\n                description: item.description,\n                quantity: item.quantity,\n                engineerId: item.sourceEngineerId,\n                engineerName: item.sourceEngineerName,\n                engineerPhone: item.sourceEngineerTelephone,\n                status: \"ACKNOWLEDGED\",\n                date: item.date,\n                time: item.time\n            }));\n        }\n\n        const disappearedOutboundRequests = inANotB(\n            adjustments.outboundMaterialRequests,\n            reservations.filter(item => item.sourceEngineerId === this._engineerId),\n            compareItemsBy.ID\n        );\n\n        // transfers for parts leaving me\n        const freshOutboundMaterialTransfers = inANotB(\n            transfers.filter(item => item.sourceEngineerId === this._engineerId),\n            adjustments.outboundMaterialTransfers,\n            compareItemsBy.ID\n        );\n\n        if (freshOutboundMaterialTransfers.length) {\n            // 8) appeared outbound transfer\n            adjustments = this.insertAdjustments(\"outboundMaterialTransfers\", ...freshOutboundMaterialTransfers.map(item => <MaterialAdjustment>{\n                id: item.id,\n                stockReferenceId: item.materialCode,\n                jobId: undefined,\n                description: item.description,\n                quantity: item.quantity,\n                engineerId: item.destinationEngineerId,\n                status: \"FULFILLED_ACKNOWLEDGED\"\n            }));\n\n            freshOutboundMaterialTransfers.forEach(item => {\n                const thisMaterial = this.getMaterials().materials\n                    .find(material => material.stockReferenceId === item.materialCode && !material.jobId);\n\n                if (!isInitialDataBuid) {\n                    // special case: if we have just hit the materials endpoint, the transferred quantities *should* already be accounted for in the materials data\n                    this.updateMaterial({stockReferenceId: item.materialCode}, {\n                        quantity: (thisMaterial && thisMaterial.quantity || 0) - (item && item.quantity || 0)\n                    });\n                }\n\n                // todo: check this logic - can we match on id instead?\n                const thisRequest = disappearedOutboundRequests\n                    .find(request => (request.status === \"ACKNOWLEDGED\"\n                                       || request.status === \"UNACKNOWLEDGED\")\n                                    && request.stockReferenceId === item.materialCode\n                                    && request.engineerId === item.destinationEngineerId\n                                    && request.quantity === item.quantity);\n                // 9) completed outbound request\n                if (thisRequest) {\n                    adjustments = this.updateAdjustment(\"outboundMaterialRequests\", thisRequest.id, { status: \"FULFILLED_ACKNOWLEDGED\"} );\n                } else {\n                    // if we never received the reservation (we were in sleep mode?) then there is nothing to update,\n                    //  so lets rebuild the reservation\n                    adjustments = this.insertAdjustments(\"outboundMaterialRequests\", <MaterialAdjustment>{\n                        id: <Guid>(Guid.newGuid()), // do not use the transfer's id in reservations, might be id clash!\n                        stockReferenceId: item.materialCode,\n                        jobId: undefined,\n                        description: item.description,\n                        quantity: item.quantity,\n                        engineerId: item.destinationEngineerId,\n                        engineerName: item.destinationEngineerName,\n                        engineerPhone: item.destinationEngineerTelephone,\n                        status: \"FULFILLED_ACKNOWLEDGED\",\n                        isUnread: true,\n                        date: item.date,\n                        time: item.time\n                    });\n                }\n            });\n        }\n\n        // requests for parts leaving me\n        const deletedOutboundRequests = inANotB(\n                                            adjustments.outboundMaterialRequests.filter(item => item.status !== \"FULFILLED_ACKNOWLEDGED\"\n                                                                                            && item.status !== \"DELETED_ACKNOWLEDGED\"),\n                                            reservations.filter(item => item.sourceEngineerId === this._engineerId),\n                                            compareItemsBy.ID\n                                        );\n\n        if (deletedOutboundRequests.length) {\n            // 10) withdrawn outbound request\n            deletedOutboundRequests.forEach(item => {\n                adjustments = this.updateAdjustment(\"outboundMaterialRequests\", item.id, { status: \"DELETED_ACKNOWLEDGED\"});\n            });\n        }\n\n        const freshOutboundRequests = inANotB(\n            reservations.filter(item => item.sourceEngineerId === this._engineerId),\n            adjustments.outboundMaterialRequests,\n            compareItemsBy.ID\n        );\n\n        if (freshOutboundRequests.length) {\n            // 11) appeared outbound request\n            adjustments = this.insertAdjustments(\"outboundMaterialRequests\", ...freshOutboundRequests.map(item => <MaterialAdjustment>{\n                id: item.id,\n                stockReferenceId: item.materialCode,\n                jobId: undefined,\n                description: item.description,\n                quantity: item.quantity,\n                engineerId: item.destinationEngineerId,\n                engineerName: item.destinationEngineerName,\n                engineerPhone: item.destinationEngineerTelephone,\n                status: item.declined\n                            ? \"REJECTED_ACKNOWLEDGED\"\n                            : \"ACKNOWLEDGED\",\n                isUnread: true,\n                date: item.date,\n                time: item.time\n            }));\n        }\n\n        const rebornOutboundRequests = inAAndB(\n            reservations.filter(item => item.sourceEngineerId === this._engineerId),\n            adjustments.outboundMaterialRequests.filter(item => item.status === \"DELETED_ACKNOWLEDGED\"),\n            compareItemsBy.ID\n        );\n\n        if (rebornOutboundRequests.length) {\n            // 12) *not sure* a reappeared outbound request (i.e. it disappeared for a bit and then came back, but out in-day refresh should tackle this)\n            rebornOutboundRequests.forEach(item => {\n                adjustments = this.updateAdjustment(\"outboundMaterialRequests\", item.id, { status: \"ACKNOWLEDGED\"});\n            });\n        }\n\n        return !!(disappearedCollections.length\n                || freshCollections.length\n                || freshInboundMaterialTransfers.length\n                || freshInboundMaterialRequests.length\n                || freshRejectedInboundMaterialRequests.length\n                || disappearedInboundMaterialRequests.length\n                || rebuildingInboundMaterialRequests.length\n                || freshOutboundMaterialTransfers.length\n                || deletedOutboundRequests.length\n                || freshOutboundRequests.length\n                || rebornOutboundRequests.length);\n    }\n\n    private getNowTimeStamp(): number {\n        return (new Date()).getTime();\n    }\n\n    private getAPIDateAndTime(): { date: number, time: number } {\n        const m = moment();\n        return {\n            date: +m.format(\"YYYYMMDD\"),\n            time: +m.format(\"HHmmssSS\") // if the time happens to start with a zero, that zero should be removed, so this logic is correct\n        };\n    }\n\n    private convertEngineerId(input: string): string {\n        // e.g. \"0000050\" needs to be \"50\" (the number with no leading zeros, but as a string)\n        // return parseInt((input || \"\").replace(/\\D/g, \"\"), 10).toString();\n        return input;\n    }\n\n    private isALiveReservationStatus(adjustment: {status: MaterialAdjustmentStatus}) : boolean {\n        return adjustment.status !== \"DELETED_UNACKNOWLEDGED\"\n                && adjustment.status !== \"DELETED_ACKNOWLEDGED\"\n                && adjustment.status !== \"FULFILLED_UNACKNOWLEDGED\"\n                && adjustment.status !== \"FULFILLED_ACKNOWLEDGED\";\n    }\n}\n"],"sourceRoot":"../../.."}