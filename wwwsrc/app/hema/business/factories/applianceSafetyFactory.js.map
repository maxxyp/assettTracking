{"version":3,"sources":["hema/business/factories/applianceSafetyFactory.ts"],"names":[],"mappings":";;;;;;;;;;;;IAkBA;QAGI,gCAAY,mBAAyC;YACjD,IAAI,CAAC,qBAAqB,GAAG,mBAAmB,CAAC;QACrD,CAAC;QAEM,8DAA6B,GAApC,UAAqC,SAAoB,EAAE,iBAA2C,EACjE,uBAA8C;YAE/E,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,2BAAY,CAAC,WAAW,CAAC,2BAAY,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC7G,IAAI,CAAC,UAAC,SAAS;gBAEZ,IAAI,6BAA6B,GAAkC,EAAE,CAAC;gBAEtE,EAAE,CAAC,CAAC,SAAS,CAAC,mBAAmB,KAAK,yCAAmB,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC5D,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,kBAAkB,CAAC;oBACjD,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,wBAAwB,CAAC;oBACvD,IAAI,0BAA0B,GAAG,SAAS,CAAC,MAAM,CAAC,0BAA0B,CAAC;oBAE7E,IAAI,gCAAgC,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,gCAAgC,CAAC,CAAC,CAAC,SAAS,CAAC;oBAE5H,wEAAwE;oBACxE,6BAA6B,CAAC,oBAAoB,GAAG,SAAS,CAAC;oBAC/D,6BAA6B,CAAC,yBAAyB,GAAG,SAAS,CAAC;oBACpE,6BAA6B,CAAC,kBAAkB,GAAG,SAAS,CAAC;oBAC7D,6BAA6B,CAAC,kBAAkB,GAAG,SAAS,CAAC;oBAC7D,6BAA6B,CAAC,kBAAkB,GAAG,SAAS,CAAC;oBAC7D,6BAA6B,CAAC,uBAAuB,GAAG,SAAS,CAAC;oBAClE,6BAA6B,CAAC,2BAA2B,GAAG,SAAS,CAAC;oBACtE,6BAA6B,CAAC,QAAQ,GAAG,SAAS,CAAC;oBACnD,6BAA6B,CAAC,WAAW,GAAG,SAAS,CAAC;oBACtD,6BAA6B,CAAC,sBAAsB,GAAG,SAAS,CAAC;oBACjE,6BAA6B,CAAC,wBAAwB,GAAG,SAAS,CAAC;oBACnE,6BAA6B,CAAC,qCAAqC,GAAG,SAAS,CAAC;oBAChF,6BAA6B,CAAC,gCAAgC,GAAG,SAAS,CAAC;oBAC3E,6BAA6B,CAAC,UAAU,GAAG,SAAS,CAAC;oBACrD,6BAA6B,CAAC,UAAU,GAAG,SAAS,CAAC;oBACrD,6BAA6B,CAAC,OAAO,GAAG,SAAS,CAAC;oBAClD,6BAA6B,CAAC,wBAAwB,GAAG,gCAAgC,CAAC;oBAE1F,yGAAyG;oBACzG,oGAAoG;oBACpG,0CAA0C;oBAC1C,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,eAAe,KAAK,IAAI,IAAI,MAAM,CAAC,eAAe,KAAK,SAAS,CAAC,CAAC,CAAC;wBACpF,6BAA6B,CAAC,aAAa,GAAG,mCAAgB,CAAC,eAAe,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;wBAClH,6BAA6B,CAAC,QAAQ,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,MAAM,CAAC,2BAA2B,EAAE,SAAS,CAAC,CAAC;wBAC1H,6BAA6B,CAAC,gBAAgB,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,MAAM,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;wBACvH,6BAA6B,CAAC,0BAA0B,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,MAAM,CAAC,6BAA6B,EAAE,SAAS,CAAC,CAAC;wBAC9I,6BAA6B,CAAC,eAAe,GAAG,mCAAgB,CAAC,eAAe,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;wBACpH,6BAA6B,CAAC,WAAW,GAAG,uBAAU,CAAC,oBAAoB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;wBACxF,6BAA6B,CAAC,6BAA6B,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;wBAChI,6BAA6B,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;wBAC3E,6BAA6B,CAAC,oBAAoB,GAAG,mCAAgB,CAAC,eAAe,CAAC,MAAM,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;wBAC9H,6BAA6B,CAAC,2BAA2B,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,MAAM,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;oBACxI,CAAC;oBAED,mEAAmE;oBACnE,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC1B,6BAA6B,CAAC,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC;wBAClE,6BAA6B,CAAC,YAAY,GAAG,MAAM,CAAC,oBAAoB,CAAC;wBACzE,6BAA6B,CAAC,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC;wBAClE,6BAA6B,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;wBAC7D,6BAA6B,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;wBAC3E,6BAA6B,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;oBACzD,CAAC;oBAED,kDAAkD;oBAClD,EAAE,CAAC,CAAC,0BAA0B,IAAI,MAAM,IAAI,MAAM,CAAC,iBAAiB,KAAK,IAAI,CAAC,CAAC,CAAC;wBAE5E,6BAA6B,CAAC,qBAAqB;4BAC/C,CAAC,CAAC,0BAA0B;mCACzB,CAAC,CAAC,0BAA0B,CAAC,mBAAmB;mCAChD,0BAA0B,CAAC,mBAAmB,CAAC,KAAK,CAAC;wBAE5D,6BAA6B,CAAC,yBAAyB;4BACnD,CAAC,CAAC,0BAA0B;mCACzB,CAAC,CAAC,0BAA0B,CAAC,qBAAqB;gCACrD,oGAAoG;mCACjG,CAAC,0BAA0B,CAAC,qBAAqB,CAAC,cAAc,KAAK,SAAS;uCAC1E,0BAA0B,CAAC,qBAAqB,CAAC,cAAc,KAAK,SAAS;uCAC7E,0BAA0B,CAAC,qBAAqB,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC;wBAEjF,6BAA6B,CAAC,+BAA+B;4BACzD,CAAC,CAAC,0BAA0B;mCACzB,CAAC,CAAC,0BAA0B,CAAC,qBAAqB;mCAClD,CAAC,CAAC,0BAA0B,CAAC,qBAAqB,CAAC,KAAK,CAAC;oBACpE,CAAC;oBAED,EAAE,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC;wBAChC,6BAA6B,CAAC,WAAW,GAAG,uBAAU,CAAC,oBAAoB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;wBAExF,6FAA6F;wBAE7F,6BAA6B,CAAC,iBAAiB,GAAG,KAAK,CAAC;wBACxD,6BAA6B,CAAC,oBAAoB,GAAG,GAAG,CAAC;wBAEzD,gHAAgH;wBAC5G,qEAAqE;wBAEzE,IAAI,0BAA0B,GAAG,CAAC,iBAAiB;4BAC/C,CAAC,iBAAiB,CAAC,gCAAgC,KAAK,GAAG,IAAI,iBAAiB,CAAC,gCAAgC,KAAK,KAAK,CAAC,CAAC,CAAC;wBAClI,IAAI,sBAAsB,GAAG,CAAC,uBAAuB,IAAI,uBAAuB,CAAC,eAAe,KAAK,IAAI,CAAC,CAAC;wBAC3G,EAAE,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC;4BAC7B,6BAA6B,CAAC,aAAa,GAAG,GAAG,CAAC;4BAClD,6BAA6B,CAAC,2BAA2B,GAAG,GAAG,CAAC;wBACpE,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;4BAChC,6BAA6B,CAAC,aAAa,GAAI,GAAG,CAAC;4BACnD,6BAA6B,CAAC,2BAA2B,GAAG,GAAG,CAAC;wBACpE,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,6BAA6B,CAAC,aAAa,GAAI,GAAG,CAAC;4BACnD,6BAA6B,CAAC,2BAA2B,GAAG,GAAG,CAAC;wBACpE,CAAC;wBAED,EAAE,CAAC,CAAC,uBAAuB,IAAI,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC;4BAC5D,6BAA6B,CAAC,UAAU,GAAG,uBAAuB,CAAC,eAAe,CAAC;4BACnF,6BAA6B,CAAC,YAAY,GAAG,uBAAuB,CAAC,oBAAoB,CAAC;4BAC1F,6BAA6B,CAAC,UAAU,GAAG,uBAAuB,CAAC,eAAe,CAAC;4BACnF,6BAA6B,CAAC,UAAU,GAAG,uBAAuB,CAAC,UAAU,CAAC;4BAC9E,6BAA6B,CAAC,iBAAiB,GAAG,uBAAuB,CAAC,iBAAiB,CAAC;4BAC5F,6BAA6B,CAAC,MAAM,GAAG,uBAAuB,CAAC,MAAM,CAAC;wBAC1E,CAAC;oBACL,CAAC;oBAED,MAAM,CAAC,6BAA6B,CAAC;gBAEzC,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,mBAAmB,KAAK,yCAAmB,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC1E,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,+BAA+B,CAAC;oBAC9D,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,+BAA+B,CAAC;oBAE9D,wEAAwE;oBACxE,6BAA6B,CAAC,QAAQ,GAAG,SAAS,CAAC;oBACnD,6BAA6B,CAAC,0BAA0B,GAAG,SAAS,CAAC;oBACrE,6BAA6B,CAAC,eAAe,GAAG,SAAS,CAAC;oBAC1D,6BAA6B,CAAC,6BAA6B,GAAG,SAAS,CAAC;oBACxE,6BAA6B,CAAC,qBAAqB,GAAG,SAAS,CAAC;oBAChE,6BAA6B,CAAC,yBAAyB,GAAG,SAAS,CAAC;oBACpE,6BAA6B,CAAC,wBAAwB,GAAG,SAAS,CAAC;oBACnE,6BAA6B,CAAC,oBAAoB,GAAG,SAAS,CAAC;oBAC/D,6BAA6B,CAAC,+BAA+B,GAAG,SAAS,CAAC;oBAC1E,6BAA6B,CAAC,2BAA2B,GAAG,SAAS,CAAC,CAAC,yFAAyF;oBAEhK,yGAAyG;oBACzG,oGAAoG;oBACpG,IAAI,iBAAiB,GAAG,MAAM;wBAC1B,CAAC,CAAC,MAAM,CAAC,iCAAiC,IAAI,IAAI,IAAI,MAAM,CAAC,iCAAiC,KAAK,SAAS,CAAC;+BACtG,CAAC,MAAM,CAAC,wBAAwB,IAAI,IAAI,IAAI,MAAM,CAAC,wBAAwB,KAAK,SAAS,CAAC,CAAC,CAAC;oBAEvG,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBACpB,6BAA6B,CAAC,aAAa,GAAG,mCAAgB,CAAC,eAAe,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;wBAEhH,8GAA8G;wBAC9G,kEAAkE;wBAClE,EAAE,CAAC,CAAC,MAAM,CAAC,iCAAiC,IAAI,IAAI,IAAI,MAAM,CAAC,iCAAiC,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC7G,6BAA6B,CAAC,gBAAgB,GAAG,mCAAgB,CAAC,eAAe,CAAC,MAAM,CAAC,iCAAiC,EAAE,SAAS,CAAC,CAAC;wBAC3I,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,6BAA6B,CAAC,gBAAgB,GAAG,mCAAgB,CAAC,eAAe,CAAC,MAAM,CAAC,wBAAwB,EAAE,SAAS,CAAC,CAAC;wBAClI,CAAC;wBAED,6BAA6B,CAAC,WAAW,GAAG,uBAAU,CAAC,oBAAoB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;wBACxF,6BAA6B,CAAC,iBAAiB,GAAG,MAAM,CAAC,uBAAuB,CAAC;wBACjF,6BAA6B,CAAC,yBAAyB,GAAG,MAAM,CAAC,yBAAyB,CAAC;wBAC3F,6BAA6B,CAAC,kBAAkB,GAAG,MAAM,CAAC,kCAAkC,CAAC;wBAC7F,6BAA6B,CAAC,kBAAkB,GAAG,MAAM,CAAC,kCAAkC,CAAC;wBAC7F,6BAA6B,CAAC,kBAAkB,GAAG,MAAM,CAAC,kCAAkC,CAAC;wBAC7F,6BAA6B,CAAC,uBAAuB,GAAG,MAAM,CAAC,uBAAuB,CAAC;wBACvF,6BAA6B,CAAC,2BAA2B,GAAG,MAAM,CAAC,yBAAyB,CAAC;wBAC7F,6BAA6B,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;wBACxD,6BAA6B,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;wBAC/D,6BAA6B,CAAC,sBAAsB,GAAG,MAAM,CAAC,sBAAsB,CAAC;wBACrF,6BAA6B,CAAC,wBAAwB,GAAG,MAAM,CAAC,+BAA+B,CAAC;wBAChG,6BAA6B,CAAC,qCAAqC,GAAG,MAAM,CAAC,mCAAmC,CAAC;wBACjH,6BAA6B,CAAC,gCAAgC,GAAG,MAAM,CAAC,0BAA0B,CAAC;wBACnG,6BAA6B,CAAC,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC;wBAC/D,6BAA6B,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;wBAE7D,4IAA4I;wBAC5I,6FAA6F;wBAC7F,6BAA6B,CAAC,OAAO,GAAG,SAAS,CAAC,eAAe,CAAS,MAAM,CAAC,uBAAuB,CAAC;+BAClG,MAAM,CAAC,uBAAuB,CAAC;oBAC1C,CAAC;oBAED,mEAAmE;oBACnE,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC1B,6BAA6B,CAAC,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC;wBAClE,6BAA6B,CAAC,YAAY,GAAG,MAAM,CAAC,oBAAoB,CAAC;wBACzE,6BAA6B,CAAC,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC;wBAClE,6BAA6B,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;wBAC7D,6BAA6B,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;wBAC3E,6BAA6B,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;wBACrD,6BAA6B,CAAC,oBAAoB,GAAG,MAAM,CAAC,qBAAqB,CAAC;oBACtF,CAAC;oBAED,MAAM,CAAC,6BAA6B,CAAC;gBAEzC,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,mBAAmB,KAAK,yCAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;oBACrE,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,oBAAoB,CAAC;oBACnD,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,0BAA0B,CAAC;oBAEzD,wEAAwE;oBACxE,6BAA6B,CAAC,QAAQ,GAAG,SAAS,CAAC;oBACnD,6BAA6B,CAAC,gBAAgB,GAAG,SAAS,CAAC;oBAC3D,6BAA6B,CAAC,0BAA0B,GAAG,SAAS,CAAC;oBACrE,6BAA6B,CAAC,eAAe,GAAG,SAAS,CAAC;oBAC1D,6BAA6B,CAAC,oBAAoB,GAAG,SAAS,CAAC;oBAC/D,6BAA6B,CAAC,6BAA6B,GAAG,SAAS,CAAC;oBACxE,6BAA6B,CAAC,qBAAqB,GAAG,SAAS,CAAC;oBAChE,6BAA6B,CAAC,yBAAyB,GAAG,SAAS,CAAC;oBACpE,6BAA6B,CAAC,wBAAwB,GAAG,SAAS,CAAC;oBACnE,6BAA6B,CAAC,+BAA+B,GAAG,SAAS,CAAC;oBAC1E,6BAA6B,CAAC,yBAAyB,GAAG,SAAS,CAAC;oBACpE,6BAA6B,CAAC,kBAAkB,GAAG,SAAS,CAAC;oBAC7D,6BAA6B,CAAC,kBAAkB,GAAG,SAAS,CAAC;oBAC7D,6BAA6B,CAAC,kBAAkB,GAAG,SAAS,CAAC;oBAC7D,6BAA6B,CAAC,uBAAuB,GAAG,SAAS,CAAC;oBAClE,6BAA6B,CAAC,2BAA2B,GAAG,SAAS,CAAC;oBACtE,6BAA6B,CAAC,QAAQ,GAAG,SAAS,CAAC;oBACnD,6BAA6B,CAAC,WAAW,GAAG,SAAS,CAAC;oBACtD,6BAA6B,CAAC,sBAAsB,GAAG,SAAS,CAAC;oBACjE,6BAA6B,CAAC,wBAAwB,GAAG,SAAS,CAAC;oBACnE,6BAA6B,CAAC,qCAAqC,GAAG,SAAS,CAAC;oBAChF,6BAA6B,CAAC,gCAAgC,GAAG,SAAS,CAAC;oBAC3E,6BAA6B,CAAC,UAAU,GAAG,SAAS,CAAC;oBACrD,6BAA6B,CAAC,UAAU,GAAG,SAAS,CAAC;oBACrD,6BAA6B,CAAC,2BAA2B,GAAG,SAAS,CAAC,CAAC,yFAAyF;oBAChK,6BAA6B,CAAC,OAAO,GAAG,SAAS,CAAC;oBAElD,yGAAyG;oBACzG,oGAAoG;oBACpG,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,eAAe,KAAK,IAAI,IAAI,MAAM,CAAC,eAAe,KAAK,SAAS,CAAC,CAAC,CAAC;wBACpF,6BAA6B,CAAC,aAAa,GAAG,mCAAgB,CAAC,eAAe,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;wBAClH,6BAA6B,CAAC,WAAW,GAAG,uBAAU,CAAC,oBAAoB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;wBACxF,6BAA6B,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;wBAC3E,6BAA6B,CAAC,oBAAoB,GAAG,mCAAgB,CAAC,eAAe,CAAC,MAAM,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;wBAE9H,EAAE,CAAC,CAAC,MAAM,CAAC,iBAAiB,KAAK,KAAK,CAAC,CAAC,CAAC;4BACrC,6BAA6B,CAAC,gBAAgB,GAAG,6BAA6B,CAAC,aAAa,CAAC;wBACjG,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,EAAE,CAAC,CAAC,MAAM,CAAC,eAAe,KAAK,IAAI,CAAC,CAAC,CAAC;gCAClC,6BAA6B,CAAC,gBAAgB,GAAG,GAAG,CAAC;4BACzD,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,6BAA6B,CAAC,gBAAgB,GAAG,GAAG,CAAC;4BACzD,CAAC;wBACL,CAAC;oBACL,CAAC;oBAED,mEAAmE;oBACnE,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC1B,6BAA6B,CAAC,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC;wBAClE,6BAA6B,CAAC,YAAY,GAAG,MAAM,CAAC,oBAAoB,CAAC;wBACzE,6BAA6B,CAAC,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC;wBAClE,6BAA6B,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;wBAC7D,6BAA6B,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;wBAC3E,6BAA6B,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;oBACzD,CAAC;oBAED,MAAM,CAAC,6BAA6B,CAAC;gBACzC,CAAC;gBACD,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC,CAAC,CAAC;QACX,CAAC;QAEM,gEAA+B,GAAtC,UAAuC,SAAkB,EAAE,eAAgC;YAEvF,IAAI,uBAAuB,GAAG,IAAI,6DAA6B,EAAE,CAAC;YAClE,uBAAuB,CAAC,aAAa,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACnG,uBAAuB,CAAC,QAAQ,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACzF,uBAAuB,CAAC,eAAe,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YACvG,uBAAuB,CAAC,gBAAgB,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YACzG,uBAAuB,CAAC,6BAA6B,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,SAAS,CAAC,6BAA6B,CAAC,CAAC;YACnI,uBAAuB,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;YAC1D,uBAAuB,CAAC,IAAI,GAAG,2BAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAC5G,uBAAuB,CAAC,YAAY,GAAG,SAAS,CAAC,YAAY,CAAC;YAC9D,uBAAuB,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;YAC1D,uBAAuB,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;YACtD,uBAAuB,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;YAElD,eAAe,CAAC,6BAA6B,GAAG,uBAAuB,CAAC;YAExE,MAAM,CAAC,eAAe,CAAC;QAC3B,CAAC;QAxRQ,sBAAsB;YADlC,qCAAM,CAAC,yCAAmB,CAAC;;WACf,sBAAsB,CAyRlC;QAAD,6BAAC;KAzRD,AAyRC,IAAA;IAzRY,wDAAsB","file":"applianceSafetyFactory.js","sourcesContent":["import { IApplianceSafetyFactory } from \"./interfaces/IApplianceSafetyFactory\";\nimport { ISafety } from \"../../api/models/fft/jobs/history/ISafety\";\nimport { IApplianceSafety as ApplianceSafetyUpdateApiModel } from \"../../api/models/fft/jobs/jobUpdate/IApplianceSafety\";\nimport { PreviousApplianceUnsafeDetail } from \"../models/previousApplianceUnsafeDetail\";\nimport { ApplianceSafety } from \"../models/applianceSafety\";\nimport { StringHelper } from \"../../../common/core/stringHelper\";\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\nimport { DateHelper } from \"../../core/dateHelper\";\nimport { PropertyGasSafetyDetail } from \"../models/propertyGasSafetyDetail\";\nimport { Appliance } from \"../models/appliance\";\nimport { IBusinessRuleService } from \"../services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../services/businessRuleService\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { MiddlewareHelper } from \"../../core/middlewareHelper\";\nimport {PropertyUnsafeDetail} from \"../models/propertyUnsafeDetail\";\nimport {ApplianceSafetyType} from \"../models/applianceSafetyType\";\n\n@inject(BusinessRuleService)\nexport class ApplianceSafetyFactory implements IApplianceSafetyFactory {\n    private _businessRulesService: IBusinessRuleService;\n\n    constructor(businessRuleService: IBusinessRuleService) {\n        this._businessRulesService = businessRuleService;\n    }\n\n    public createApplianceSafetyApiModel(appliance: Appliance, gasPropertySafety?: PropertyGasSafetyDetail,\n                                         gasPropertyUnsafeDetail?: PropertyUnsafeDetail): Promise<ApplianceSafetyUpdateApiModel> {\n\n        return this._businessRulesService.getQueryableRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this)))\n            .then((ruleGroup) => {\n\n                let applianceSafetyUpdateApiModel = <ApplianceSafetyUpdateApiModel>{};\n\n                if (appliance.applianceSafetyType === ApplianceSafetyType.gas) {\n                    let safety = appliance.safety.applianceGasSafety;\n                    let unsafe = appliance.safety.applianceGasUnsafeDetail;\n                    let applianceGasReadingsMaster = appliance.safety.applianceGasReadingsMaster;\n\n                    let gasMeterInstallationSatisfactory = !!gasPropertySafety ? gasPropertySafety.gasMeterInstallationSatisfactory : undefined;\n\n                    // set the always undefined values or non safety/unsafe dependant values\n                    applianceSafetyUpdateApiModel.ownersNameAndDetails = undefined;\n                    applianceSafetyUpdateApiModel.ringContinuityReadingDone = undefined;\n                    applianceSafetyUpdateApiModel.leirNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.neirNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.lnirNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.circuitRcdRcboProtected = undefined;\n                    applianceSafetyUpdateApiModel.mcbFuseRatingNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.partPJob = undefined;\n                    applianceSafetyUpdateApiModel.partPReason = undefined;\n                    applianceSafetyUpdateApiModel.cpcinLightingCircuitOk = undefined;\n                    applianceSafetyUpdateApiModel.fuseRatingNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.microwaveLeakageReadingNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.eliSafeAccordingToTheTableInTops = undefined;\n                    applianceSafetyUpdateApiModel.rcdPresent = undefined;\n                    applianceSafetyUpdateApiModel.systemType = undefined;\n                    applianceSafetyUpdateApiModel.jobType = undefined;\n                    applianceSafetyUpdateApiModel.gasMeterInstallationSafe = gasMeterInstallationSatisfactory;\n\n                    // fill out the appliance safety information only if there is safety and that a mandatory field is filled\n                    // cant just check for property because null/undefined  will return false and hence incorrectly pass\n                    // and only if the appliance was worked on\n                    if (safety && safety.isApplianceSafe !== null && safety.isApplianceSafe !== undefined) {\n                        applianceSafetyUpdateApiModel.applianceSafe = MiddlewareHelper.getYNForBoolean(safety.isApplianceSafe, undefined);\n                        applianceSafetyUpdateApiModel.flueSafe = MiddlewareHelper.getYNXForYesNoNa(safety.chimneyInstallationAndTests, undefined);\n                        applianceSafetyUpdateApiModel.installationSafe = MiddlewareHelper.getYNXForYesNoNa(safety.installationSafe, undefined);\n                        applianceSafetyUpdateApiModel.applianceTightnessTestSafe = MiddlewareHelper.getYNXForYesNoNa(safety.installationTightnessTestSafe, undefined);\n                        applianceSafetyUpdateApiModel.ventilationSafe = MiddlewareHelper.getYNForBoolean(safety.ventilationSafe, undefined);\n                        applianceSafetyUpdateApiModel.detailsDate = DateHelper.toJsonDateTimeString(new Date());\n                        applianceSafetyUpdateApiModel.safeDeviceandCorrectOperation = MiddlewareHelper.getYNXForYesNoNa(safety.safetyDevice, undefined);\n                        applianceSafetyUpdateApiModel.workedOnAppliance = safety.workedOnAppliance;\n                        applianceSafetyUpdateApiModel.visuallyCheckRelight = MiddlewareHelper.getYNForBoolean(safety.visuallyCheckRelight, undefined);\n                        applianceSafetyUpdateApiModel.applianceToCurrentStandards = MiddlewareHelper.getYNXForYesNoNa(safety.toCurrentStandards, undefined);\n                    }\n\n                    // check if there is an unsafe and that a mandatory field is filled\n                    if (unsafe && unsafe.report) {\n                        applianceSafetyUpdateApiModel.actionCode = unsafe.cappedTurnedOff;\n                        applianceSafetyUpdateApiModel.noticeStatus = unsafe.labelAttachedRemoved;\n                        applianceSafetyUpdateApiModel.noticeType = unsafe.conditionAsLeft;\n                        applianceSafetyUpdateApiModel.letterLeft = unsafe.letterLeft;\n                        applianceSafetyUpdateApiModel.signatureObtained = unsafe.signatureObtained;\n                        applianceSafetyUpdateApiModel.report = unsafe.report;\n                    }\n\n                    // check if there is an applianceGasReadingsMaster\n                    if (applianceGasReadingsMaster && safety && safety.workedOnAppliance === true) {\n\n                        applianceSafetyUpdateApiModel.unmeteredLPGAppliance =\n                            !!applianceGasReadingsMaster\n                            && !!applianceGasReadingsMaster.preliminaryReadings\n                            && applianceGasReadingsMaster.preliminaryReadings.isLpg;\n\n                        applianceSafetyUpdateApiModel.supplementaryBurnerFitted =\n                            !!applianceGasReadingsMaster\n                            && !!applianceGasReadingsMaster.supplementaryReadings\n                            // if the user has recorded a supplementary burner then one of these three fields will have been set\n                            && (applianceGasReadingsMaster.supplementaryReadings.burnerPressure !== undefined\n                                || applianceGasReadingsMaster.supplementaryReadings.gasRateReading !== undefined\n                                || applianceGasReadingsMaster.supplementaryReadings.isLpg !== undefined);\n\n                        applianceSafetyUpdateApiModel.suppBurnerUnmeteredLPGAppliance =\n                            !!applianceGasReadingsMaster\n                            && !!applianceGasReadingsMaster.supplementaryReadings\n                            && !!applianceGasReadingsMaster.supplementaryReadings.isLpg;\n                    }\n\n                    if (appliance.isInstPremAppliance) {\n                        applianceSafetyUpdateApiModel.detailsDate = DateHelper.toJsonDateTimeString(new Date());\n\n                        // applianceSafetyUpdateApiModel.gasMeterInstallationSafe = gasMeterInstallationSatisfactory;\n\n                        applianceSafetyUpdateApiModel.workedOnAppliance = false;\n                        applianceSafetyUpdateApiModel.visuallyCheckRelight = \"Y\";\n\n                        // applianceSafetyUpdateApiModel.applianceTightnessTestSafe = MiddlewareHelper.getYNForBoolean(gasPropertySafety\n                            // && gasPropertySafety.gasInstallationTightnessTestDone, undefined);\n\n                        let isGasMeterInstallationSafe = (gasPropertySafety &&\n                            (gasPropertySafety.gasMeterInstallationSatisfactory === \"Y\" || gasPropertySafety.gasMeterInstallationSatisfactory === \"N/A\"));\n                        let isNotToCurrentStandard = (gasPropertyUnsafeDetail && gasPropertyUnsafeDetail.conditionAsLeft === \"SS\");\n                        if (isGasMeterInstallationSafe) {\n                            applianceSafetyUpdateApiModel.applianceSafe = \"Y\";\n                            applianceSafetyUpdateApiModel.applianceToCurrentStandards = \"Y\";\n                        } else if (isNotToCurrentStandard) {\n                            applianceSafetyUpdateApiModel.applianceSafe =  \"Y\";\n                            applianceSafetyUpdateApiModel.applianceToCurrentStandards = \"N\";\n                        } else {\n                            applianceSafetyUpdateApiModel.applianceSafe =  \"N\";\n                            applianceSafetyUpdateApiModel.applianceToCurrentStandards = \"X\";\n                        }\n\n                        if (gasPropertyUnsafeDetail && gasPropertyUnsafeDetail.report) {\n                            applianceSafetyUpdateApiModel.actionCode = gasPropertyUnsafeDetail.cappedTurnedOff;\n                            applianceSafetyUpdateApiModel.noticeStatus = gasPropertyUnsafeDetail.labelAttachedRemoved;\n                            applianceSafetyUpdateApiModel.noticeType = gasPropertyUnsafeDetail.conditionAsLeft;\n                            applianceSafetyUpdateApiModel.letterLeft = gasPropertyUnsafeDetail.letterLeft;\n                            applianceSafetyUpdateApiModel.signatureObtained = gasPropertyUnsafeDetail.signatureObtained;\n                            applianceSafetyUpdateApiModel.report = gasPropertyUnsafeDetail.report;\n                        }\n                    }\n\n                    return applianceSafetyUpdateApiModel;\n\n                } else if (appliance.applianceSafetyType === ApplianceSafetyType.electrical) {\n                    let safety = appliance.safety.applianceElectricalSafetyDetail;\n                    let unsafe = appliance.safety.applianceElectricalUnsafeDetail;\n\n                    // set the always undefined values or non safety/unsafe dependant values\n                    applianceSafetyUpdateApiModel.flueSafe = undefined;\n                    applianceSafetyUpdateApiModel.applianceTightnessTestSafe = undefined;\n                    applianceSafetyUpdateApiModel.ventilationSafe = undefined;\n                    applianceSafetyUpdateApiModel.safeDeviceandCorrectOperation = undefined;\n                    applianceSafetyUpdateApiModel.unmeteredLPGAppliance = undefined;\n                    applianceSafetyUpdateApiModel.supplementaryBurnerFitted = undefined;\n                    applianceSafetyUpdateApiModel.gasMeterInstallationSafe = undefined;\n                    applianceSafetyUpdateApiModel.visuallyCheckRelight = undefined;\n                    applianceSafetyUpdateApiModel.suppBurnerUnmeteredLPGAppliance = undefined;\n                    applianceSafetyUpdateApiModel.applianceToCurrentStandards = undefined; // clarification - Mark doesn't want us to send this. The field causes a lot of confusion\n\n                    // fill out the appliance safety information only if there is safety and that a mandatory field is filled\n                    // cant just check for property because null/undefined  will return false and hence incorrectly pass\n                    let isSafetyFilledOut = safety &&\n                        ((safety.applianceInstallationSatisfactory != null && safety.applianceInstallationSatisfactory !== undefined)\n                            || (safety.installationSatisfactory != null && safety.installationSatisfactory !== undefined));\n\n                    if (isSafetyFilledOut) {\n                        applianceSafetyUpdateApiModel.applianceSafe = MiddlewareHelper.getYNForBoolean(safety.applianceSafe, undefined);\n\n                        // this is because on appliances, if its microwave or white goods then its appliance installation satisfactory\n                        // and if its electrical wiring then its installation satisfactory\n                        if (safety.applianceInstallationSatisfactory != null && safety.applianceInstallationSatisfactory !== undefined) {\n                            applianceSafetyUpdateApiModel.installationSafe = MiddlewareHelper.getYNForBoolean(safety.applianceInstallationSatisfactory, undefined);\n                        } else {\n                            applianceSafetyUpdateApiModel.installationSafe = MiddlewareHelper.getYNForBoolean(safety.installationSatisfactory, undefined);\n                        }\n\n                        applianceSafetyUpdateApiModel.detailsDate = DateHelper.toJsonDateTimeString(new Date());\n                        applianceSafetyUpdateApiModel.workedOnAppliance = safety.workedOnLightingCircuit;\n                        applianceSafetyUpdateApiModel.ringContinuityReadingDone = safety.ringContinuityReadingDone;\n                        applianceSafetyUpdateApiModel.leirNotTakenReason = safety.leInsulationResistanceReasonWhyNot;\n                        applianceSafetyUpdateApiModel.neirNotTakenReason = safety.neInsulationResistanceReasonWhyNot;\n                        applianceSafetyUpdateApiModel.lnirNotTakenReason = safety.lnInsulationResistanceReasonWhyNot;\n                        applianceSafetyUpdateApiModel.circuitRcdRcboProtected = safety.circuitRcdRcboProtected;\n                        applianceSafetyUpdateApiModel.mcbFuseRatingNotTakenReason = safety.mcbFuseRatingReasonWhyNot;\n                        applianceSafetyUpdateApiModel.partPJob = safety.isPartP;\n                        applianceSafetyUpdateApiModel.partPReason = safety.partPReason;\n                        applianceSafetyUpdateApiModel.cpcinLightingCircuitOk = safety.cpcInLightingCircuitOk;\n                        applianceSafetyUpdateApiModel.fuseRatingNotTakenReason = safety.applianceFuseRatingReasonWhyNot;\n                        applianceSafetyUpdateApiModel.microwaveLeakageReadingNotTakenReason = safety.microwaveLeakageReadingReasonWhyNot;\n                        applianceSafetyUpdateApiModel.eliSafeAccordingToTheTableInTops = safety.readingSafeAccordingToTops;\n                        applianceSafetyUpdateApiModel.rcdPresent = safety.isRcdPresent;\n                        applianceSafetyUpdateApiModel.systemType = safety.systemType;\n\n                        // in safety.electricalApplianceType we store WHITEGOODS, MICROWAVE, ELECTRICAL, but WMIS expects \"WHITE GOODS\" in the case of WHITEGOODS...\n                        //  ... so if there is a conversion businessRule use that, otherwise fallback to the original\n                        applianceSafetyUpdateApiModel.jobType = ruleGroup.getBusinessRule<string>(safety.electricalApplianceType)\n                            || safety.electricalApplianceType;\n                    }\n\n                    // check if there is an unsafe and that a mandatory field is filled\n                    if (unsafe && unsafe.report) {\n                        applianceSafetyUpdateApiModel.actionCode = unsafe.cappedTurnedOff;\n                        applianceSafetyUpdateApiModel.noticeStatus = unsafe.labelAttachedRemoved;\n                        applianceSafetyUpdateApiModel.noticeType = unsafe.conditionAsLeft;\n                        applianceSafetyUpdateApiModel.letterLeft = unsafe.letterLeft;\n                        applianceSafetyUpdateApiModel.signatureObtained = unsafe.signatureObtained;\n                        applianceSafetyUpdateApiModel.report = unsafe.report;\n                        applianceSafetyUpdateApiModel.ownersNameAndDetails = unsafe.ownerNameAddressPhone;\n                    }\n\n                    return applianceSafetyUpdateApiModel;\n\n                } else if (appliance.applianceSafetyType === ApplianceSafetyType.other) {\n                    let safety = appliance.safety.applianceOtherSafety;\n                    let unsafe = appliance.safety.applianceOtherUnsafeDetail;\n\n                    // set the always undefined values or non safety/unsafe dependant values\n                    applianceSafetyUpdateApiModel.flueSafe = undefined;\n                    applianceSafetyUpdateApiModel.installationSafe = undefined;\n                    applianceSafetyUpdateApiModel.applianceTightnessTestSafe = undefined;\n                    applianceSafetyUpdateApiModel.ventilationSafe = undefined;\n                    applianceSafetyUpdateApiModel.ownersNameAndDetails = undefined;\n                    applianceSafetyUpdateApiModel.safeDeviceandCorrectOperation = undefined;\n                    applianceSafetyUpdateApiModel.unmeteredLPGAppliance = undefined;\n                    applianceSafetyUpdateApiModel.supplementaryBurnerFitted = undefined;\n                    applianceSafetyUpdateApiModel.gasMeterInstallationSafe = undefined;\n                    applianceSafetyUpdateApiModel.suppBurnerUnmeteredLPGAppliance = undefined;\n                    applianceSafetyUpdateApiModel.ringContinuityReadingDone = undefined;\n                    applianceSafetyUpdateApiModel.leirNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.neirNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.lnirNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.circuitRcdRcboProtected = undefined;\n                    applianceSafetyUpdateApiModel.mcbFuseRatingNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.partPJob = undefined;\n                    applianceSafetyUpdateApiModel.partPReason = undefined;\n                    applianceSafetyUpdateApiModel.cpcinLightingCircuitOk = undefined;\n                    applianceSafetyUpdateApiModel.fuseRatingNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.microwaveLeakageReadingNotTakenReason = undefined;\n                    applianceSafetyUpdateApiModel.eliSafeAccordingToTheTableInTops = undefined;\n                    applianceSafetyUpdateApiModel.rcdPresent = undefined;\n                    applianceSafetyUpdateApiModel.systemType = undefined;\n                    applianceSafetyUpdateApiModel.applianceToCurrentStandards = undefined; // clarification - Mark doesn't want us to send this. The field causes a lot of confusion\n                    applianceSafetyUpdateApiModel.jobType = undefined;\n\n                    // fill out the appliance safety information only if there is safety and that a mandatory field is filled\n                    // cant just check for property because null/undefined  will return false and hence incorrectly pass\n                    if (safety && safety.isApplianceSafe !== null && safety.isApplianceSafe !== undefined) {\n                        applianceSafetyUpdateApiModel.applianceSafe = MiddlewareHelper.getYNForBoolean(safety.isApplianceSafe, undefined);\n                        applianceSafetyUpdateApiModel.detailsDate = DateHelper.toJsonDateTimeString(new Date());\n                        applianceSafetyUpdateApiModel.workedOnAppliance = safety.workedOnAppliance;\n                        applianceSafetyUpdateApiModel.visuallyCheckRelight = MiddlewareHelper.getYNForBoolean(safety.visuallyCheckRelight, undefined);\n\n                        if (safety.workedOnAppliance === false) {\n                            applianceSafetyUpdateApiModel.installationSafe = applianceSafetyUpdateApiModel.applianceSafe;\n                        } else {\n                            if (safety.isApplianceSafe === true) {\n                                applianceSafetyUpdateApiModel.installationSafe = \"X\";\n                            } else {\n                                applianceSafetyUpdateApiModel.installationSafe = \"N\";\n                            }\n                        }\n                    }\n\n                    // check if there is an unsafe and that a mandatory field is filled\n                    if (unsafe && unsafe.report) {\n                        applianceSafetyUpdateApiModel.actionCode = unsafe.cappedTurnedOff;\n                        applianceSafetyUpdateApiModel.noticeStatus = unsafe.labelAttachedRemoved;\n                        applianceSafetyUpdateApiModel.noticeType = unsafe.conditionAsLeft;\n                        applianceSafetyUpdateApiModel.letterLeft = unsafe.letterLeft;\n                        applianceSafetyUpdateApiModel.signatureObtained = unsafe.signatureObtained;\n                        applianceSafetyUpdateApiModel.report = unsafe.report;\n                    }\n\n                    return applianceSafetyUpdateApiModel;\n                }\n                return undefined;\n            });\n    }\n\n    public populatePreviousApplianceSafety(safetyApi: ISafety, applianceSafety: ApplianceSafety): ApplianceSafety {\n\n        let previousApplianceSafety = new PreviousApplianceUnsafeDetail();\n        previousApplianceSafety.applianceSafe = MiddlewareHelper.getBooleanForYNX(safetyApi.applianceSafe);\n        previousApplianceSafety.flueSafe = MiddlewareHelper.getBooleanForYNX(safetyApi.flueSafe);\n        previousApplianceSafety.ventilationSafe = MiddlewareHelper.getBooleanForYNX(safetyApi.ventilationSafe);\n        previousApplianceSafety.installationSafe = MiddlewareHelper.getBooleanForYNX(safetyApi.installationSafe);\n        previousApplianceSafety.installationTightnessTestSafe = MiddlewareHelper.getBooleanForYNX(safetyApi.installationTightnessTestSafe);\n        previousApplianceSafety.actionCode = safetyApi.actionCode;\n        previousApplianceSafety.date = StringHelper.isString(safetyApi.date) ? new Date(safetyApi.date) : undefined;\n        previousApplianceSafety.noticeStatus = safetyApi.noticeStatus;\n        previousApplianceSafety.noticeType = safetyApi.noticeType;\n        previousApplianceSafety.progress = safetyApi.progress;\n        previousApplianceSafety.report = safetyApi.report;\n\n        applianceSafety.previousApplianceUnsafeDetail = previousApplianceSafety;\n\n        return applianceSafety;\n    }\n}\n"],"sourceRoot":"../../.."}