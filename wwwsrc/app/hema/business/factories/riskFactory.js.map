{"version":3,"sources":["hema/business/factories/riskFactory.ts"],"names":[],"mappings":";;;IAYA;QAAA;QA4EA,CAAC;QA3EU,6CAAuB,GAA9B,UAA+B,YAA0B;YAErD,IAAI,iBAAiB,GAAsB,IAAI,WAAiB,EAAE,CAAC;YAEnE,iBAAiB,CAAC,EAAE,GAAG,WAAI,CAAC,OAAO,EAAE,CAAC;YACtC,iBAAiB,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;YAC/C,iBAAiB,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;YAC/C,iBAAiB,CAAC,IAAI,GAAG,uBAAU,CAAC,kBAAkB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC1E,iBAAiB,CAAC,QAAQ,GAAG,KAAK,CAAC;YAEnC,MAAM,CAAC,iBAAiB,CAAC;QAC7B,CAAC;QAEM,wCAAkB,GAAzB,UAA0B,iBAAoC;YAC1D,IAAI,YAAY,GAAuB,EAAE,CAAC;YAE1C,YAAY,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC;YAC/C,YAAY,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC;YAE/C,MAAM,CAAC,YAAY,CAAC;QACxB,CAAC;QAEM,0DAAoC,GAA3C,UAA4C,iBAAoC,EAAE,mBAA2B;YACzG,IAAI,iBAAiB,GAAG,IAAI,WAAiB,EAAE,CAAC;YAEhD,iBAAiB,CAAC,EAAE,GAAG,2BAAY,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,iBAAiB,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC,WAAI,CAAC,OAAO,EAAE,CAAC;YAC9I,iBAAiB,CAAC,MAAM,GAAG,mBAAmB,CAAC;YAC/C,iBAAiB,CAAC,MAAM,GAAG,iBAAiB,CAAC,mBAAmB,CAAC;YACjE,EAAE,CAAC,CAAC,2BAAY,CAAC,QAAQ,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBAC5D,iBAAiB,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAChF,CAAC;YACD,iBAAiB,CAAC,QAAQ,GAAG,IAAI,CAAC;YAElC,MAAM,CAAC,iBAAiB,CAAC;QAC7B,CAAC;QAEM,6CAAuB,GAA9B,UAA+B,iBAAoC,EAAE,WAAgB;YACjF,IAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YAEtD,EAAE,CAAC,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC9B,QAAQ,CAAC,EAAE,GAAG,iBAAiB,CAAC,EAAE,CAAC;gBACnC,MAAM,CAAC,QAAQ,CAAC;YACpB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;gBACrC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;gBACrD,MAAM,CAAC,QAAQ,CAAC;YACpB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,QAAQ,CAAC,EAAE,GAAG,iBAAiB,CAAC,EAAE,CAAC;gBAEnC,IAAI,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;gBACxE,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC;gBAEnE,MAAM,CAAC,QAAQ,CAAC;YACpB,CAAC;QACL,CAAC;QAEO,oCAAc,GAAtB,UAAuB,iBAAoC;YACvD,IAAI,YAAY,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YAC/F,MAAM,CAA0B;gBAC5B,YAAY,cAAA;gBACZ,aAAa,EAAE,iBAAiB,CAAC,MAAM;aACzC,CAAC;QACP,CAAC;QAEO,qCAAe,GAAvB,UAAwB,iBAAoC,EAAE,WAAgB;YAC1E,MAAM,CAAC,CAAC,iBAAiB,CAAC,SAAS;mBAC5B,WAAW;mBACX,WAAW,CAAC,KAAK;mBACjB,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,EAAE,KAAK,iBAAiB,CAAC,EAAE,EAAhC,CAAgC,CAAC,CAAC;QAC5E,CAAC;QAEO,wCAAkB,GAA1B,UAA2B,QAAiC,EAAE,iBAAoC,EAAE,YAAgC;YAChI,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,iBAAiB,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACtE,QAAQ,CAAC,mBAAmB,GAAG,iBAAiB,CAAC,MAAM,CAAC;YAC5D,CAAC;QACL,CAAC;QACL,kBAAC;IAAD,CA5EA,AA4EC,IAAA;IA5EY,kCAAW","file":"riskFactory.js","sourcesContent":["import {IRiskFactory} from \"./interfaces/IRiskFactory\";\nimport {Job} from \"../models/job\";\nimport {Risk as RiskBusinessModel} from \"../models/risk\";\nimport {IRisk as RiskApiModel} from \"../../api/models/fft/jobs/IRisk\";\nimport {Guid} from \"../../../common/core/guid\";\nimport {NumberHelper} from \"../../../common/core/numberHelper\";\nimport {IAppliance as ApplianceApiModel} from \"../../api/models/fft/jobs/history/IAppliance\";\nimport {IAppliance as ApplianceUpdateApiModel} from \"../../api/models/fft/jobs/jobupdate/IAppliance\";\nimport {IRisk as RiskUpdateApiModel} from \"../../api/models/fft/jobs/jobupdate/IRisk\";\nimport {DateHelper} from \"../../core/dateHelper\";\nimport {StringHelper} from \"../../../common/core/stringHelper\";\n\nexport class RiskFactory implements IRiskFactory {\n    public createRiskBusinessModel(riskApiModel: RiskApiModel): RiskBusinessModel {\n\n        let riskBusinessModel: RiskBusinessModel = new RiskBusinessModel();\n\n        riskBusinessModel.id = Guid.newGuid();\n        riskBusinessModel.reason = riskApiModel.reason;\n        riskBusinessModel.report = riskApiModel.report;\n        riskBusinessModel.date = DateHelper.fromJsonDateString(riskApiModel.date);\n        riskBusinessModel.isHazard = false;\n\n        return riskBusinessModel;\n    }\n\n    public createRiskApiModel(riskBusinessModel: RiskBusinessModel): RiskUpdateApiModel {\n        let riskApiModel = <RiskUpdateApiModel>{};\n\n        riskApiModel.reason = riskBusinessModel.reason;\n        riskApiModel.report = riskBusinessModel.report;\n\n        return riskApiModel;\n    }\n\n    public createRiskBusinessModelFromAppliance(applianceApiModel: ApplianceApiModel, applianceTypeHazard: string) : RiskBusinessModel {\n        let riskBusinessModel = new RiskBusinessModel();\n\n        riskBusinessModel.id = StringHelper.isString(applianceApiModel.id) && applianceApiModel.id.length > 0 ? applianceApiModel.id : Guid.newGuid();\n        riskBusinessModel.reason = applianceTypeHazard;\n        riskBusinessModel.report = applianceApiModel.locationDescription;\n        if (NumberHelper.isNumber(applianceApiModel.installationYear)) {\n            riskBusinessModel.date = new Date(applianceApiModel.installationYear, 0, 1);\n        }\n        riskBusinessModel.isHazard = true;\n\n        return riskBusinessModel;\n    }\n\n    public createApplianceApiModel(riskBusinessModel: RiskBusinessModel, originalJob: Job) : ApplianceUpdateApiModel {\n        let apiModel = this.createApiModel(riskBusinessModel);\n\n        if (riskBusinessModel.isDeleted) {\n            apiModel.id = riskBusinessModel.id;\n            return apiModel;\n        } else if (riskBusinessModel.isCreated) {\n            this.populateCoreFields(apiModel, riskBusinessModel);\n            return apiModel;\n        } else {\n            apiModel.id = riskBusinessModel.id;\n\n            let originalRisk = this.getOriginalRisk(riskBusinessModel, originalJob);\n            this.populateCoreFields(apiModel, riskBusinessModel, originalRisk);\n\n            return apiModel;\n        }\n    }\n\n    private createApiModel(riskBusinessModel: RiskBusinessModel): ApplianceUpdateApiModel {\n        let updateMarker = riskBusinessModel.isCreated ? \"C\" : riskBusinessModel.isDeleted ? \"D\" : \"A\";\n        return <ApplianceUpdateApiModel>{\n            updateMarker,\n            applianceType: riskBusinessModel.reason\n         };\n    }\n\n    private getOriginalRisk(riskBusinessModel: RiskBusinessModel, originalJob: Job): RiskBusinessModel {\n        return !riskBusinessModel.isCreated\n            && originalJob\n            && originalJob.risks\n            && originalJob.risks.find(risk => risk.id === riskBusinessModel.id);\n    }\n\n    private populateCoreFields(apiModel: ApplianceUpdateApiModel, riskBusinessModel: RiskBusinessModel, originalRisk?: RiskBusinessModel): void {\n        if (!originalRisk || (riskBusinessModel.report !== originalRisk.report)) {\n            apiModel.locationDescription = riskBusinessModel.report;\n        }\n    }\n}\n"],"sourceRoot":"../../.."}