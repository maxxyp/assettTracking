{"version":3,"sources":["hema/business/factories/jobFactory.ts"],"names":[],"mappings":"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","file":"jobFactory.js","sourcesContent":["import { CustomerFactory } from \"./customerFactory\";\nimport { IJobFactory } from \"./interfaces/IJobFactory\";\nimport { IRiskFactory } from \"./interfaces/IRiskFactory\";\nimport { RiskFactory } from \"./riskFactory\";\nimport { IContactFactory } from \"./interfaces/IContactFactory\";\nimport { ContactFactory } from \"./contactFactory\";\nimport { IPremisesFactory } from \"./interfaces/IPremisesFactory\";\nimport { PremisesFactory } from \"./premisesFactory\";\nimport { ITaskFactory } from \"./interfaces/ITaskFactory\";\nimport { TaskFactory } from \"./taskFactory\";\nimport { IVisitFactory } from \"./interfaces/IVisitFactory\";\nimport { VisitFactory } from \"./visitFactory\";\nimport { IApplianceFactory } from \"./interfaces/IApplianceFactory\";\nimport { ApplianceFactory } from \"./applianceFactory\";\nimport { IPropertySafetyFactory } from \"./interfaces/IPropertySafetyFactory\";\nimport { PropertySafetyFactory } from \"./propertySafetyFactory\";\nimport { IJob } from \"../../api/models/fft/jobs/IJob\";\nimport { Job } from \"../models/job\";\nimport { Risk } from \"../models/risk\";\nimport { History } from \"../models/history\";\nimport { Appliance } from \"../models/appliance\";\nimport { IAppliance } from \"../../api/models/fft/jobs/history/IAppliance\";\nimport { ArrayHelper } from \"../../../common/core/arrayHelper\";\nimport { IBusinessRuleService } from \"../services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../services/businessRuleService\";\nimport { IJobHistory } from \"../../api/models/fft/jobs/history/IJobHistory\";\nimport { QueryableBusinessRuleGroup } from \"../models/businessRules/queryableBusinessRuleGroup\";\nimport { StringHelper } from \"../../../common/core/stringHelper\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { IJobUpdate } from \"../../api/models/fft/jobs/jobupdate/IJobUpdate\";\nimport { IJobUpdateJob } from \"../../api/models/fft/jobs/jobupdate/IJobUpdateJob\";\nimport { ComplaintFactory } from \"./complaintFactory\";\nimport { IComplaintFactory } from \"./interfaces/IComplaintFactory\";\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\nimport { IPremises as PremisesUpdateModel } from \"../../api/models/fft/jobs/jobupdate/IPremises\";\nimport { IStatus } from \"../../api/models/fft/jobs/jobupdate/IStatus\";\nimport { DateHelper } from \"../../core/dateHelper\";\nimport { JobState } from \"../models/jobState\";\nimport { Engineer } from \"../models/engineer\";\nimport { IAppliance as ApplianceUpdateApiModel } from \"../../api/models/fft/jobs/jobupdate/IAppliance\";\nimport { PartsDetail } from \"../models/partsDetail\";\nimport { PartsToday } from \"../models/partsToday\";\nimport { IAddressFactory } from \"./interfaces/IAddressFactory\";\nimport { AddressFactory } from \"./addressFactory\";\nimport { ICustomerFactory } from \"./interfaces/ICustomerFactory\";\nimport { IChargeFactory } from \"./interfaces/IChargeFactory\";\nimport { ChargeFactory } from \"./chargeFactory\";\nimport { DataState } from \"../models/dataState\";\nimport { StorageService } from \"../services/storageService\";\nimport { IStorageService } from \"../services/interfaces/IStorageService\";\nimport { Task } from \"../models/task\";\nimport { IWorkListItem } from \"../../api/models/fft/engineers/worklist/IWorkListItem\";\nimport { DataStateManager } from \"../../common/dataStateManager\";\nimport { IDataStateManager } from \"../../common/IDataStateManager\";\nimport { PropertySafetyType } from \"../models/propertySafetyType\";\nimport { JobSanityCheckService } from \"../services/jobSanityCheckService\";\nimport { JobPartsCollection } from \"../models/jobPartsCollection\";\nimport { IPartCollectionResponse } from \"../../api/models/fft/jobs/parts/IPartCollectionResponse\";\nimport { Charge } from \"../models/charge/charge\";\nimport { PartsBasket } from \"../models/partsBasket\";\n\n@inject(RiskFactory, ContactFactory, TaskFactory, PremisesFactory, VisitFactory, ApplianceFactory,\n    PropertySafetyFactory, ComplaintFactory, BusinessRuleService,\n    AddressFactory, CustomerFactory, ChargeFactory, StorageService, DataStateManager, JobSanityCheckService)\nexport class JobFactory implements IJobFactory {\n    private _riskFactory: IRiskFactory;\n    private _contactFactory: IContactFactory;\n    private _premisesFactory: IPremisesFactory;\n    private _taskFactory: ITaskFactory;\n    private _visitFactory: IVisitFactory;\n    private _applianceFactory: IApplianceFactory;\n    private _propertySafetyFactory: IPropertySafetyFactory;\n    private _complaintFactory: IComplaintFactory;\n    private _addressFactory: IAddressFactory;\n    private _customerFactory: ICustomerFactory;\n    private _chargeFactory: IChargeFactory;\n\n    private _businessRules: QueryableBusinessRuleGroup;\n\n    private _businessRulesService: IBusinessRuleService;\n    private _storageService: IStorageService;\n    private _dataStateManager: IDataStateManager;\n    private _jobSanityCheckService: JobSanityCheckService;\n\n    constructor(riskFactory: IRiskFactory,\n        contactFactory: IContactFactory,\n        taskFactory: ITaskFactory,\n        premisesFactory: IPremisesFactory,\n        visitFactory: IVisitFactory,\n        applianceFactory: IApplianceFactory,\n        propertySafetyFactory: IPropertySafetyFactory,\n        complaintFactory: IComplaintFactory,\n        businessRuleService: IBusinessRuleService,\n        addressFactory: IAddressFactory,\n        customerFactory: ICustomerFactory,\n        chargeFactory: IChargeFactory,\n        storageService: IStorageService,\n        dataStateManager: IDataStateManager,\n        jobSanityCheckService: JobSanityCheckService) {\n        this._riskFactory = riskFactory;\n        this._contactFactory = contactFactory;\n        this._premisesFactory = premisesFactory;\n        this._taskFactory = taskFactory;\n        this._visitFactory = visitFactory;\n        this._applianceFactory = applianceFactory;\n        this._propertySafetyFactory = propertySafetyFactory;\n        this._complaintFactory = complaintFactory;\n        this._businessRulesService = businessRuleService;\n        this._addressFactory = addressFactory;\n        this._customerFactory = customerFactory;\n        this._chargeFactory = chargeFactory;\n        this._storageService = storageService;\n        this._dataStateManager = dataStateManager;\n        this._jobSanityCheckService = jobSanityCheckService;\n    }\n\n    public createJobBusinessModel(worklistItem: IWorkListItem, jobApiModel: IJob, jobHistoryApiModel: IJobHistory): Promise<Job> {\n        let job: Job = new Job();\n\n        if (worklistItem) {\n            job.id = worklistItem.id;\n            job.wmisTimestamp = worklistItem.timestamp;\n        }\n\n        job.dispatchTime = new Date();\n\n        return this.loadBusinessRules()\n            .then(() => {\n                this.createCustomerBusinessModel(jobApiModel, job);\n                this.createAddressBusinessModel(jobApiModel, job);\n                this.createPremisesBusinessModel(jobApiModel, job);\n                this.createVisitBusinessModel(jobApiModel, job);\n\n                job.partsDetail = new PartsDetail();\n                job.partsDetail.partsToday = new PartsToday();\n                job.partsDetail.partsBasket = new PartsBasket();\n            })\n            .then(() => Promise.all([\n                this.createTasksBusinessModel(jobApiModel, job),\n                this.createHistoryBusinessModel(jobHistoryApiModel, job)\n            ]))\n            .then(() => this.calculatePropertySafetyType(job))\n            .then(() => {\n                job.isLandlordJob = job.wasOriginallyLandlordJob = Job.isLandlordJob(job);\n                this.createPropertySafetyBusinessModel(jobApiModel, job);\n                this.createChargesBusinessModel(jobApiModel, job);\n                return this.createAppliancesBusinessModel(jobHistoryApiModel, job);\n            })\n            .then(() => this._dataStateManager.updateAppliancesDataState(job))\n            .then(() => this._dataStateManager.updatePropertySafetyDataState(job))\n            .then(() => {\n\n                job.isBadlyFormed = this._jobSanityCheckService.isBadlyFormed(job);\n                return job;\n            });\n    }\n\n    public createPartCollectionBusinessModel(worklistItem: IWorkListItem, partApiModel: IPartCollectionResponse): JobPartsCollection {\n\n        let jobPartsCollection: JobPartsCollection = new JobPartsCollection();\n\n        if (worklistItem) {\n            jobPartsCollection.id = worklistItem.id;\n            jobPartsCollection.wmisTimestamp = worklistItem.timestamp;\n        }\n\n        if (partApiModel && partApiModel.data && partApiModel.data.customer && partApiModel.data.list) {\n            const {data} = partApiModel;\n\n            const {customer, list} = data;\n\n            const {address = [], firstName = \"\", lastName = \"\", title = \"\", middleName = \"\"} = customer;\n\n            // if we don't filter empty string in view model could get double commas,\n            // e.g. address like \"124 something street, , ...\".\n\n            jobPartsCollection.customer = {\n                address: address.filter(a => a && !!a.trim()),\n                firstName,\n                lastName,\n                middleName,\n                title\n            };\n\n            jobPartsCollection.parts = list.map(p => {\n                const {stockReferenceId, quantity, description} = p;\n                return {\n                    stockReferenceId,\n                    quantity: parseInt(quantity, 10),\n                    description\n                };\n            });\n        }\n\n        return jobPartsCollection;\n    }\n\n    public createAddressBusinessModel(jobApiModel: IJob, job: Job): void {\n        if (jobApiModel && jobApiModel.customer && jobApiModel.customer.address) {\n            job.customerAddress = this._addressFactory.createAddressBusinessModel(jobApiModel.customer.address);\n        }\n    }\n\n    public createCustomerBusinessModel(jobApiModel: IJob, job: Job): void {\n        if (job && jobApiModel && jobApiModel.customer) {\n            job.customerId = jobApiModel.customer.id;\n            job.customerContact = this._customerFactory.createCustomerContactBusinessModel(jobApiModel.customer);\n        }\n    }\n\n    public createChargesBusinessModel(jobApiModel: IJob, job: Job): void {\n        if (job && jobApiModel && jobApiModel.tasks) {\n            job.charge = this._chargeFactory.createChargeBusinessModel(jobApiModel.tasks);\n            job.charge.dataState = Job.hasCharge(job) ? DataState.notVisited : DataState.dontCare;\n        }\n    }\n\n    public createJobApiModel(job: Job, engineer: Engineer, originalJob: Job): Promise<IJobUpdate> {\n        let jobUpdataApiModel = <IJobUpdate>{};\n\n        if (job && engineer) {\n            return this.loadBusinessRules()\n                .then(() => this.getJobStatusCode(job))\n                .then((status) => this.createJobUpdateJobApiModel(job, engineer, status, jobUpdataApiModel))\n                .then((applianceIdToSequenceMap) => this.createAppliancesApiModel(job, jobUpdataApiModel, applianceIdToSequenceMap, originalJob))\n                .then(() => {\n                    this.createComplaintApiModel(job, jobUpdataApiModel);\n                    this.createAppointmentApiModel(job, jobUpdataApiModel);\n\n                    return jobUpdataApiModel;\n                });\n\n        } else {\n            return Promise.resolve(jobUpdataApiModel);\n        }\n    }\n\n    public getJobStatusCode(job: Job): Promise<string> {\n        return this.loadBusinessRules()\n            .then(() => {\n\n                if (job.jobNotDoingReason) {\n                    if (job.tasks.some(task => task.status === this._businessRules.getBusinessRule<string>(\"NotVisitedOtherActivityStatus\"))) {\n                        return this._businessRules.getBusinessRule<string>(\"statusNoVisit\");\n                    }\n                    return this._businessRules.getBusinessRule<string>(\"statusNoAccess\");\n                }\n\n                switch (job.state) {\n                    // case JobState.idle\n                    case JobState.enRoute:\n                        return this._businessRules.getBusinessRule<string>(\"statusEnRoute\");\n                    case JobState.arrived:\n                        return this._businessRules.getBusinessRule<string>(\"statusOnSite\");\n                    case JobState.deSelect:\n                        return this._businessRules.getBusinessRule<string>(\"statusVisitDeselected\");\n                    case JobState.complete:\n                        return this._businessRules.getBusinessRule<string>(\"statusTaskCompletion\");\n                    case JobState.done:\n                        return this._businessRules.getBusinessRule<string>(\"statusTaskCompletion\");\n                }\n\n                return undefined;\n            });\n    }\n\n    private calculatePropertySafetyType(job: Job): Promise<void> {\n        return Promise.all([\n            this._businessRulesService.getQueryableRuleGroup(\"jobFactory\")\n            .then((ruleGroup) => {\n                return ruleGroup.getBusinessRule<string>(\"electricalWorkingSector\");\n            }),\n            this._storageService.getWorkingSector()\n        ]).then(([electricalWorkingSector, engineerWorkingSector]) => {\n\n            job.propertySafetyType = engineerWorkingSector === electricalWorkingSector\n                                        ? PropertySafetyType.electrical\n                                        : PropertySafetyType.gas;\n        });\n    }\n\n    private createPremisesBusinessModel(jobApiModel: IJob, job: Job): void {\n        if (jobApiModel && jobApiModel.premises) {\n            job.premises = this._premisesFactory.createPremisesBusinessModel(jobApiModel.premises);\n\n            if (jobApiModel.premises.contact) {\n                job.contact = this._contactFactory.createContactBusinessModel(jobApiModel.premises.contact);\n            }\n\n            if (jobApiModel.premises.risks) {\n                job.risks = [];\n\n                jobApiModel.premises.risks.forEach(riskApiModel => {\n                    job.risks.push(this._riskFactory.createRiskBusinessModel(riskApiModel));\n                });\n            }\n        }\n    }\n\n    private createVisitBusinessModel(jobApiModel: IJob, job: Job): void {\n        if (jobApiModel && jobApiModel.visit) {\n            job.visit = this._visitFactory.createVisitBusinessModel(jobApiModel.visit);\n        }\n    }\n\n    private createTasksBusinessModel(jobApiModel: IJob, job: Job): Promise<void> {\n        if (!jobApiModel || !jobApiModel.tasks) {\n            return Promise.resolve();\n        }\n\n        job.tasks = [];\n        job.tasksNotToday = [];\n        let order: number = 0;\n        let taskPromises = jobApiModel.tasks.map(taskApiModel => {\n            return this._taskFactory.createTaskBusinessModel(taskApiModel, job.partsDetail.partsToday, true)\n                .then(task => {\n                    if (task) {\n                        return this._businessRulesService.getQueryableRuleGroup(\"chargeService\").then(ruleGroup => {\n                            task.isCharge = Task.isChargeableTask(task.chargeType, ruleGroup.getBusinessRule<string>(\"noChargePrefix\"));\n\n                            // it looks like orderNo is used during calculations on work durations across doToday tasks, see taskItem.ts\n                            // so only give doToday tasks an orderNo so there is an unbroken sequence across live tasks i.e. do not give\n                            // !doToday tasks an orderNo\n                            if (task.isMiddlewareDoTodayTask) {\n                                order = order + 1;\n                                task.orderNo = order;\n                                job.tasks.push(task);\n                            } else {\n                                job.tasksNotToday.push(task);\n                            }\n                        });\n                    } else {\n                        return undefined;\n                    }\n                });\n        });\n\n        return Promise.all(taskPromises)\n            .then(() => ArrayHelper.sortByColumn(job.tasks, \"id\"))\n            .then(() => {\n                if (job.partsDetail.partsToday.parts.length === 0) {\n                    job.partsDetail.partsToday.dataState = DataState.dontCare;\n                }\n            });\n    }\n\n    private createHistoryBusinessModel(jobHistoryApiModel: IJobHistory, job: Job): Promise<void> {\n        if (!jobHistoryApiModel || !jobHistoryApiModel.tasks) {\n            return Promise.resolve();\n        }\n\n        job.history = new History();\n        job.history.tasks = [];\n\n        let taskPromises = jobHistoryApiModel.tasks.map(taskApiModel => {\n            return this._taskFactory.createTaskBusinessModel(taskApiModel, null, false)\n                .then(task => {\n                    if (task) {\n                        return job.history.tasks.push(task);\n                    } else {\n                        return undefined;\n                    }\n                });\n        });\n\n        return Promise.all(taskPromises)\n            .then(() => ArrayHelper.sortByColumn(job.tasks, \"id\"))\n            .then(() => {\n            });\n    }\n\n    private createPropertySafetyBusinessModel(jobApiModel: IJob, job: Job): void {\n        if (jobApiModel && jobApiModel.premises) {\n            job.propertySafety =\n                this._propertySafetyFactory.createPropertySafetyBusinessModel(job.propertySafetyType, jobApiModel.premises.safetyDetail, jobApiModel.premises.unsafeDetail);\n        }\n    }\n\n    private createAppliancesBusinessModel(jobHistoryApiModel: IJobHistory, job: Job): Promise<void> {\n        if (jobHistoryApiModel) {\n\n            // #16167 DF_984 - whenever more than one task targets the same appliance, WMIS sends duplicate appliance records,\n            //   - 3 tasks for the same appliance means that appliance comes down three times.  THere are no plans to change this behaviour in the API.\n            //   - also we access appliance via id, so we ensure that appliance records have an id before accepting them.\n            // #16698 - it is possible for there to be no appliances array in the jobHistoryApiModel.\n            let uniqueAppliances = (jobHistoryApiModel.appliances || [])\n                .reduce((visitedAppliances: IAppliance[], currentAppliance: IAppliance) => {\n                    if (currentAppliance && currentAppliance.id && !visitedAppliances.some(a => a.id === currentAppliance.id)) {\n                        visitedAppliances.push(currentAppliance);\n                    }\n                    return visitedAppliances;\n                }, []);\n\n            let applianceTypeHazard = this._businessRules.getBusinessRule<string>(\"applianceTypeHazard\");\n\n            let riskApplianceApiModels = uniqueAppliances.filter(applianceApiModel => applianceApiModel.applianceType === applianceTypeHazard);\n            riskApplianceApiModels.forEach(riskApplianceApiModel => {\n                let risk = this._riskFactory.createRiskBusinessModelFromAppliance(riskApplianceApiModel, applianceTypeHazard);\n                if (!job.risks) {\n                    job.risks = [];\n                }\n                job.risks.push(risk);\n            });\n\n            if (!job.history) {\n                job.history = new History();\n            }\n            job.history.appliances = [];\n\n            let populateAppliancePromises = uniqueAppliances\n                .filter(applianceApiModel => applianceApiModel.applianceType !== applianceTypeHazard)\n                .map((applianceApiModel) => {\n                    return this._storageService.getWorkingSector()\n                        .then((engineerWorkingSector) => this._applianceFactory\n                            .createApplianceBusinessModel(applianceApiModel, job, engineerWorkingSector))\n                        .then(appliance => {\n                            if (appliance) {\n                                job.history.appliances.push(appliance);\n                            }\n                        });\n                });\n\n            return Promise.all(populateAppliancePromises).then(() => {\n                /* make sure all the parent/child relationships have referential integrity */\n                job.history.appliances.filter(x => StringHelper.isString(x.parentId) && x.parentId.length > 0)\n                    .forEach(childAppliance => {\n                        let parentAppliance = job.history.appliances.find(a => a.id === childAppliance.parentId);\n\n                        if (parentAppliance) {\n                            /* found the parent appliance so set its child, however if the child is already set then clear\n                             out the parent link from the child as a parent can only have one child */\n                            if (parentAppliance.childId) {\n                                childAppliance.parentId = undefined;\n                            } else {\n                                /* if the parent appliance already has its own parent then dont set it again as we\n                                 can only have one level deep relationships */\n                                if (StringHelper.isString(parentAppliance.parentId) && parentAppliance.parentId.length > 0) {\n                                    childAppliance.parentId = undefined;\n                                } else {\n                                    parentAppliance.childId = childAppliance.id;\n                                }\n                            }\n                        } else {\n                            /* no parent appliance found so remove the parent id from the child */\n                            childAppliance.parentId = undefined;\n                        }\n                    });\n            });\n        } else {\n            return Promise.resolve();\n        }\n    }\n\n    private createJobUpdateJobApiModel(job: Job, engineer: Engineer, status: string, jobUpdateApiModel: IJobUpdate): Promise<{ [guid: string]: number }> {\n        if (job) {\n            jobUpdateApiModel.job = <IJobUpdateJob>{};\n\n            jobUpdateApiModel.job.status = <IStatus>{};\n            jobUpdateApiModel.job.status.code = status;\n            jobUpdateApiModel.job.status.timestamp = DateHelper.toJsonDateTimeString(new Date());\n\n            jobUpdateApiModel.job.sourceSystem = this._businessRules.getBusinessRule<string>(\"sourceSystemWMIS\");\n            if (!!engineer && !!engineer.id) {\n                jobUpdateApiModel.job.engineerId = engineer.id;\n            }\n            jobUpdateApiModel.job.dispatchTime = DateHelper.toJsonDateTimeString(job.dispatchTime);\n            jobUpdateApiModel.job.enrouteTime = DateHelper.toJsonDateTimeString(job.enrouteTime);\n            jobUpdateApiModel.job.onsiteTime = DateHelper.toJsonDateTimeString(job.onsiteTime);\n            jobUpdateApiModel.job.completionTime = DateHelper.toJsonDateTimeString(job.completionTime);\n\n            // this is required for charge disputes\n            // the understanding previously was that complaint reason code determined if there was a charge dispute\n            // however, this is wrong and actually it should be in paymentNonCollectionReasonCode\n\n            // future refactor - there maybe warrant to remove the entire complaint reason code mapping in the charge factory\n\n            if (job.charge && job.charge.chargeOption === Charge.CHARGE_NOT_OK) {\n                jobUpdateApiModel.job.paymentNonCollectionReasonCode\n                    = this._businessRules.getBusinessRule<string>(\"paymentNonCollectionReasonCodeChargeNotOkCode\");\n            } else if (job.charge && job.charge.chargeOption === Charge.CHARGE_OK) {\n                jobUpdateApiModel.job.paymentNonCollectionReasonCode\n                    = this._businessRules.getBusinessRule<string>(\"paymentNonCollectionReasonCodeChargeOkCode\");\n            } else {\n                jobUpdateApiModel.job.paymentNonCollectionReasonCode = undefined;\n            }\n\n            jobUpdateApiModel.job.visitId = job.visit && job.visit.id;\n\n            jobUpdateApiModel.job.futureVisit = this._visitFactory.createVisitApiModel(job);\n\n            jobUpdateApiModel.job.premises = this.createPremisesUpdateJobApiModel(job);\n\n            if (job.tasks) {\n\n                let applianceIdToSequenceMap = this.getNewApplianceIdToHardwareSequenceMap(job);\n\n                let taskPromises = job.tasks.map(task => {\n                    let hardwareSequenceNumber = applianceIdToSequenceMap[task.applianceId];\n                    return this._taskFactory.createTaskApiModel(task, job, hardwareSequenceNumber);\n                });\n\n                return Promise.all(taskPromises)\n                    .then(taskUpdateModels => this._chargeFactory.createChargeApiModel(job.charge.tasks, taskUpdateModels))\n                    .then(withChargesTaskUpdateModels => {\n                        jobUpdateApiModel.job.tasks = withChargesTaskUpdateModels;\n                        return applianceIdToSequenceMap;\n                    });\n\n            } else {\n                return Promise.resolve({});\n            }\n        } else {\n            return Promise.resolve({});\n        }\n    }\n\n    private createPremisesUpdateJobApiModel(job: Job): PremisesUpdateModel {\n        if (job) {\n            let premises = this._premisesFactory.createPremisesApiModel(job.premises);\n\n            if (premises) {\n                let hasRisks = false;\n\n                if (job.contact) {\n                    premises.contact = this._contactFactory.createContactApiModel(job.contact);\n                }\n\n                if (job.risks) {\n                    premises.risks = job.risks.filter(risk => !risk.isHazard).map(risk => this._riskFactory.createRiskApiModel(risk));\n                    hasRisks = premises.risks && premises.risks.length > 0;\n                }\n\n                if (!job.jobNotDoingReason) {\n                    if (job.propertySafety || hasRisks) {\n                        // isjobPartLJReportable should only be defined if a task has explicity set it to true or false, otherwise undefined\n                        let isjobPartLJReportable: boolean = undefined;\n                        if (job.tasks) {\n                            if (job.tasks.some(task => task.isPartLJReportable)) {\n                                isjobPartLJReportable = true;\n                            } else if (job.tasks.some(task => task.isPartLJReportable === false)) {\n                                isjobPartLJReportable = false;\n                            }\n                        }\n                        premises.safety = this._propertySafetyFactory.createPropertySafetyApiModel(job.propertySafetyType, job.propertySafety, hasRisks, isjobPartLJReportable);\n                    }\n\n                    if (job.propertySafety) {\n                        premises.unsafeDetail = this._propertySafetyFactory.createPropertyUnsafetyApiModel(job.propertySafetyType, job.propertySafety);\n                    }\n                }\n            }\n\n            return premises;\n        } else {\n            return undefined;\n        }\n    }\n\n    private createAppliancesApiModel(job: Job, jobUpdateApiModel: IJobUpdate, applianceIdToSequenceMap: { [guid: string]: number }, originalJob: Job): Promise<void> {\n        if (job && !job.jobNotDoingReason) {\n            let applianceApiModels: Promise<ApplianceUpdateApiModel>[] = [];\n\n            if (job.history) {\n                if (job.history.appliances) {\n                    let appliancesToReturn = job.history.appliances.filter(appliance => this.shouldApplianceBeReturnedToWmis(appliance, job));\n                    let applModels = appliancesToReturn.map(appliance => this._applianceFactory.createApplianceApiModel(job, originalJob, appliance, applianceIdToSequenceMap));\n                    applianceApiModels = applianceApiModels.concat(applModels);\n                }\n            }\n\n            if (job.risks) {\n                // #16679 has been added to refactor job.deletedRisks out, and replace with a isDeleted flag on risk models (like appliances)\n                let allRisks = job.risks.concat(job.deletedRisks || []);\n\n                let risksToReturn = allRisks.filter(risk => this.shouldRiskBeReturnedToWmis(risk));\n                let riskModels = risksToReturn.map((risk => Promise.resolve(this._riskFactory.createApplianceApiModel(risk, originalJob))));\n                applianceApiModels = applianceApiModels.concat(riskModels);\n            }\n\n            return Promise.all<ApplianceUpdateApiModel>(applianceApiModels)\n                .then((applianceUpdateApiModels) => {\n                    jobUpdateApiModel.appliances = applianceUpdateApiModels;\n                });\n        }\n        return Promise.resolve();\n    }\n\n    private shouldApplianceBeReturnedToWmis(appliance: Appliance, job: Job): boolean {\n        if ((appliance.isCreated && appliance.isDeleted) || appliance.isExcluded) {\n            return false;\n        }\n        return !!job.isLandlordJob && !!appliance.isInstPremAppliance || appliance.isCreated || appliance.isUpdated || appliance.isDeleted;\n    }\n\n    private shouldRiskBeReturnedToWmis(risk: Risk): boolean {\n        if (!risk.isHazard) {\n            return false;\n        }\n        if (risk.isCreated && risk.isDeleted) {\n            return false;\n        }\n        return risk.isCreated || risk.isUpdated || risk.isDeleted;\n    }\n\n    private createComplaintApiModel(job: Job, jobUpdateApiModel: IJobUpdate): void {\n        jobUpdateApiModel.complaintReportOrCompensationPayment = this._complaintFactory.createComplaintApiModel(job);\n    }\n\n    private createAppointmentApiModel(job: Job, jobUpdateApiModel: IJobUpdate): void {\n        if (job) {\n            jobUpdateApiModel.job.futureVisit = this._visitFactory.createVisitApiModel(job);\n        }\n    }\n\n    private loadBusinessRules(): Promise<any> {\n        if (!!this._businessRules) {\n            return Promise.resolve();\n        }\n\n        return this._businessRulesService.getQueryableRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this))).then(ruleGroup => {\n            this._businessRules = ruleGroup;\n        });\n    }\n\n    private getNewApplianceIdToHardwareSequenceMap(job: Job): { [guid: string]: number } {\n        /*\n         Jairam says (in conf call 17/02/17) that for new appliances, we should not pass back applianceId (we give new\n         appliances an arbitrary guid in HEMA).  When a new appliance is attached to a task, the task and appliance should be\n         referenced to each other via the hardwareSequenceNumber field.  We generate this mapping here and pass this to the task\n         and appliance factory methods.\n         */\n        let map: { [guid: string]: number } = {};\n\n        if (job && job.history && job.history.appliances) {\n            let newAppliances = job.history.appliances.filter(appliance => appliance.isCreated);\n\n            if (newAppliances.length) {\n                let maxExistingSequenceNumber = job.history.appliances.filter(appliance => !appliance.isCreated).length;\n                newAppliances.forEach((appliance, index) => map[appliance.id] = index + 1 + maxExistingSequenceNumber);\n            }\n        }\n        return map;\n    }\n}\n"],"sourceRoot":"../../.."}