{"version":3,"sources":["hema/business/factories/taskFactory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BA;QAMI,qBAAmB,WAAyB,EAAE,mBAAyC,EAAE,cAA+B;YACpH,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,IAAI,CAAC,qBAAqB,GAAG,mBAAmB,CAAC;YACjD,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QAC1C,CAAC;QAEM,6CAAuB,GAA9B,UAA+B,YAA0B,EAAE,UAAsB,EAAE,YAAqB;YAAxG,iBA2FC;YAzFG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;gBACf,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,2BAAY,CAAC,WAAW,CAAC,2BAAY,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3G,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,aAAa,CAAC;aAClE,CAAC,CAAC,IAAI,CAAC,UAAC,EAAyC;oBAAxC,qBAAa,EAAE,gCAAwB;gBAC7C,IAAI,iBAAiB,GAAS,SAAS,CAAC;gBACxC,IAAI,iBAAiB,GAAG,aAAa,CAAC,mBAAmB,CAAS,6BAA6B,CAAC,CAAC;gBACjG,IAAI,gBAAgB,GAAG,aAAa,CAAC,eAAe,CAAS,kBAAkB,CAAC,CAAC;gBACjF,IAAI,yBAAyB,GAAG,aAAa,CAAC,mBAAmB,CAAS,2BAA2B,CAAC,CAAC;gBACvG,IAAI,iBAAiB,GAAG,aAAa,CAAC,eAAe,CAAS,mBAAmB,CAAC,CAAC;gBAEnF,EAAE,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,gBAAgB,CAAC,CAAC,CAAC;oBAC3D,IAAI,aAAa,GAAG,yBAAyB,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;oBAChF,iBAAiB,GAAG,IAAI,WAAI,CAAC,aAAa,IAAI,YAAY,EAAE,KAAK,CAAC,CAAC;oBACnE,iBAAiB,CAAC,uBAAuB,GAAG,aAAa,CAAC;oBAC1D,iBAAiB,CAAC,EAAE,GAAG,YAAY,CAAC,EAAE,CAAC;oBACvC,iBAAiB,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC;oBACjD,iBAAiB,CAAC,aAAa,GAAG,YAAY,CAAC,aAAa,CAAC;oBAC7D,iBAAiB,CAAC,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC;oBACzD,iBAAiB,CAAC,UAAU,GAAG,YAAY,CAAC,UAAU,CAAC;oBACvD,iBAAiB,CAAC,kBAAkB,GAAG,YAAY,CAAC,kBAAkB,CAAC;oBACvE,iBAAiB,CAAC,cAAc,GAAG,YAAY,CAAC,cAAc,CAAC;oBAE/D,iBAAiB,CAAC,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC;oBACzD,iBAAiB,CAAC,aAAa,GAAG,YAAY,CAAC,aAAa,CAAC;oBAC7D,iBAAiB,CAAC,cAAc,GAAG,YAAY,CAAC,cAAc,CAAC;oBAC/D,iBAAiB,CAAC,kBAAkB,GAAG,YAAY,CAAC,kBAAkB,CAAC;oBACvE,iBAAiB,CAAC,kBAAkB,GAAG,YAAY,CAAC,kBAAkB,CAAC;oBACvE,iBAAiB,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;oBACnD,iBAAiB,CAAC,cAAc,GAAG,EAAE,CAAC;oBAEtC,iBAAiB,CAAC,yBAAyB,GAAG,YAAY,CAAC,yBAAyB,CAAC;oBACrF,iBAAiB,CAAC,YAAY,GAAG,YAAY,CAAC,YAAY,CAAC;oBAE3D,iBAAiB,CAAC,6BAA6B,GAAG,iBAAiB,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,YAAY,CAAC,OAAO,KAAK,UAAU,EAAnC,CAAmC,CAAC,CAAC;oBAC5H,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,CAAC,CAAC;wBAC7C,iBAAiB,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;oBACnD,CAAC;oBAED,iBAAiB,CAAC,UAAU,GAAG,EAAE,CAAC;oBAClC,EAAE,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;wBAE1B,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,gBAAgB;4BAE7C,IAAI,qBAAqB,GAAG,IAAI,mBAAQ,EAAE,CAAC;4BAC3C,qBAAqB,CAAC,IAAI,GAAG,uBAAU,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;4BAClF,qBAAqB,CAAC,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC;4BACvD,qBAAqB,CAAC,YAAY,GAAG,gBAAgB,CAAC,YAAY,CAAC;4BACnE,qBAAqB,CAAC,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC;4BACvD,qBAAqB,CAAC,YAAY,GAAG,gBAAgB,CAAC,YAAY,CAAC;4BACnE,qBAAqB,CAAC,cAAc,GAAG,gBAAgB,CAAC,cAAc,CAAC;4BACvE,qBAAqB,CAAC,KAAK,GAAG,EAAE,CAAC;4BAEjC,EAAE,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;gCACzB,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,YAAY;oCACxC,IAAI,iBAAiB,GAAG,IAAI,WAAI,EAAE,CAAC;oCACnC,iBAAiB,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;oCAC/C,iBAAiB,CAAC,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC;oCACzD,iBAAiB,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;oCACnD,iBAAiB,CAAC,gBAAgB,GAAG,YAAY,CAAC,gBAAgB,CAAC;oCACnE,iBAAiB,CAAC,MAAM,GAAG,iBAAiB,CAAC,EAAE,CAAC;oCAChD,iBAAiB,CAAC,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oCACnJ,iBAAiB,CAAC,UAAU,GAAG,YAAY,CAAC,UAAU,CAAC;oCACvD,iBAAiB,CAAC,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC;oCACrD,iBAAiB,CAAC,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;oCACjE,iBAAiB,CAAC,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;oCACjE,iBAAiB,CAAC,iBAAiB,GAAG,YAAY,CAAC,iBAAiB,CAAC;oCACrE,iBAAiB,CAAC,gBAAgB,GAAG,YAAY,CAAC,gBAAgB,CAAC;oCACnE,iBAAiB,CAAC,UAAU,GAAG,uBAAU,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;oCACpF,iBAAiB,CAAC,EAAE,GAAG,WAAI,CAAC,OAAO,EAAE,CAAC;oCACtC,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oCAEpD,EAAE,CAAC,CAAC,wBAAwB,IAAI,UAAU,CAAC,CAAC,CAAC;wCACzC,EAAE,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,qBAAqB,EAAE,wBAAwB,CAAC,CAAC,CAAC,CAAC;4CACzF,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;wCAC7C,CAAC;oCACL,CAAC;gCACL,CAAC,CAAC,CAAC;4BACP,CAAC;4BAED,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;wBAC7D,CAAC,CAAC,CAAC;oBACP,CAAC;oBAED,IAAM,cAAc,GAAG,KAAI,CAAC,sBAAsB,CAAC,yBAAyB,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;oBACvG,iBAAiB,CAAC,cAAc,GAAG,cAAc,CAAC;gBACtD,CAAC;gBAED,MAAM,CAAC,iBAAiB,CAAC;YAC7B,CAAC,CAAC,CAAC;QACP,CAAC;QAEY,wCAAkB,GAA/B,UAAgC,IAAU,EAAE,GAAQ,EAAE,sBAA+B;;;;;;4BAC7E,YAAY,GAAuB,EAAE,CAAC;4BAEtC,UAAU,GAAG,CAAC,GAAG,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;4BAEhE,YAAY,CAAC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;4BACtD,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;4BACxE,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;4BACrC,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;4BACpC,YAAY,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;4BAChD,YAAY,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;4BAC1C,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;4BACtC,YAAY,CAAC,WAAW,GAAG,sBAAsB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;4BACjF,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;4BAClC,YAAY,CAAC,sBAAsB,GAAG,sBAAsB,IAAI,SAAS,CAAC;4BAE1E,YAAY,CAAC,gBAAgB,GAAG,uBAAU,CAAC,8BAA8B,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC;4BACrG,YAAY,CAAC,kBAAkB,GAAG,uBAAU,CAAC,8BAA8B,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC;4BACzG,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;4BAElC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gCACb,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oCACnE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;oCAC5D,YAAY,CAAC,MAAM,CAAC;gCACxB,YAAY,CAAC,uBAAuB,GAAG,IAAI,CAAC,aAAa,CAAC;gCAC1D,YAAY,CAAC,wBAAwB,GAAG,IAAI,CAAC,UAAU,CAAC;gCACxD,YAAY,CAAC,8BAA8B,GAAG,IAAI,CAAC,aAAa,CAAC;gCACjE,YAAY,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC;gCAClD,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;gCAC1C,YAAY,CAAC,yBAAyB,GAAG,IAAI,CAAC,yBAAyB,CAAC;gCACxE,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;gCAC9C,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;gCAC9C,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC;gCAC/C,YAAY,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;4BACxD,CAAC;4BAEgB,qBAAM,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,EAAA;;4BAAtE,UAAU,GAAG,SAAyD;4BAEtE,iBAAiB,GAAG,2BAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,kBAAkB;mCAClG,UAAU;mCACV,UAAU,CAAC,oBAAoB,KAAK,GAAG;mCACvC,UAAU,CAAC;iCAEd,UAAU,EAAV,wBAAU;4BACV,6DAA6D;4BAC7D,KAAA,YAAY,CAAA;4BAAgB,qBAAM,IAAI,CAAC,YAAY,CAAC,6CAA6C,CAAC,IAAI,EAAE,GAAG,CAAC,WAAW,EAAE,iBAAiB,CAAC,EAAA;;4BAD3I,6DAA6D;4BAC7D,GAAa,YAAY,GAAG,SAA+G,CAAC;4BAE5I,KAAA,YAAY,CAAA;4BAAa,qBAAM,IAAI,CAAC,YAAY,CAAC,0CAA0C,CAAC,IAAI,EAAE,GAAG,CAAC,WAAW,EAAE,iBAAiB,CAAC,EAAA;;4BAArI,GAAa,SAAS,GAAG,SAA4G,CAAC;4BAEtI,KAAA,YAAY,CAAA;4BAAgB,qBAAM,IAAI,CAAC,YAAY,CAAC,6CAA6C,CAAC,IAAI,EAAE,GAAG,CAAC,WAAW,CAAC,EAAA;;4BAAxH,GAAa,YAAY,GAAG,SAA4F,CAAC;4BAEzH,KAAA,YAAY,CAAA;4BAA6B,qBAAM,IAAI,CAAC,YAAY,CAAC,0DAA0D,CAAC,IAAI,EAAE,GAAG,CAAC,WAAW,CAAC,EAAA;;4BAAlJ,GAAa,yBAAyB,GAAG,SAAyG,CAAC;;gCAGxI,qBAAM,IAAI,CAAC,eAAe,CAAC,iCAAiC,EAAE,EAAA;;4BAAzE,QAAQ,GAAG,SAA8D;4BACzE,UAAU,GAAG,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM,EAArC,CAAqC,CAAC,CAAC;4BAC5F,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gCACb,YAAY,CAAC,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,CAAC;4BAClE,CAAC;4BAED,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,IAAI,YAAY,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gCACjE,YAAY,CAAC,SAAS,GAAG,SAAS,CAAC;4BACvC,CAAC;4BAED,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,YAAY,IAAI,YAAY,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gCACvE,YAAY,CAAC,YAAY,GAAG,SAAS,CAAC;4BAC1C,CAAC;4BAED,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,yBAAyB,IAAI,YAAY,CAAC,yBAAyB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gCACjG,YAAY,CAAC,yBAAyB,GAAG,SAAS,CAAC;4BACvD,CAAC;4BAED,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,YAAY,IAAI,YAAY,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gCACvE,YAAY,CAAC,YAAY,GAAG,SAAS,CAAC;4BAC1C,CAAC;4BAMuB,qBAAM,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,UAAU,CAAC,EAAA;;4BAAtF,iBAAiB,GAAG,SAAkE;4BAC1F,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gCACtE,YAAY,CAAC,YAAY,GAAG,CAAC,CAAC;gCAC9B,YAAY,CAAC,cAAc,GAAG,SAAS,CAAC;gCACxC,YAAY,CAAC,kBAAkB,GAAG,SAAS,CAAC;gCAC5C,YAAY,CAAC,gBAAgB,GAAG,SAAS,CAAC;4BAC9C,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,YAAY,CAAC,YAAY,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;gCAC/D,YAAY,CAAC,cAAc,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;4BACvE,CAAC;4BAED,sBAAO,YAAY,EAAC;;;;SACvB;QAEO,mCAAa,GAArB,UAAsB,IAAU,EAAE,QAAkB,EAAE,wBAAoD;YACtG,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,wBAAwB,CAAC,eAAe,CAAS,uBAAuB,CAAC;mBAC7F,IAAI,CAAC,MAAM,KAAK,wBAAwB,CAAC,eAAe,CAAS,sBAAsB,CAAC,CAAC;QACpG,CAAC;QAEO,4CAAsB,GAA9B,UAA+B,yBAAmC,EAAE,UAAuB;YACvF,IAAM,MAAM,GAAgB,EAAE,CAAC;YAC/B,EAAE,CAAC,CAAC,UAAU,IAAI,yBAAyB,CAAC,CAAC,CAAC;gBAC1C,UAAU,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,yBAAyB,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAzD,CAAyD,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ;oBACrG,IAAI,aAAa,GAAG,IAAI,qBAAS,EAAE,CAAC;oBACpC,aAAa,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;oBACnC,aAAa,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;oBACvC,aAAa,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;oBACvC,aAAa,CAAC,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC;oBACvD,aAAa,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;oBACnD,aAAa,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;oBAEnD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC/B,CAAC,CAAC,CAAC;YACP,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAEO,mDAA6B,GAArC,UAAsC,SAAqC,EAAE,MAAc;YACvF,IAAM,KAAK,GAAG,SAAS,CAAC,mBAAmB,CAAS,yBAAyB,CAAC,CAAC;YAC/E,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,MAAM,EAAZ,CAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACzD,CAAC;QAlOQ,WAAW;YADvB,qCAAM,CAAC,yBAAW,EAAE,yCAAmB,EAAE,+BAAc,CAAC;;WAC5C,WAAW,CAmOvB;QAAD,kBAAC;KAnOD,AAmOC,IAAA;IAnOY,kCAAW","file":"taskFactory.js","sourcesContent":["import { inject } from \"aurelia-dependency-injection\";\nimport { ITaskFactory } from \"./interfaces/ITaskFactory\";\nimport { IPartFactory } from \"./interfaces/IPartFactory\";\nimport { PartFactory } from \"./partFactory\";\n\nimport { ITask as TaskApiModel } from \"../../api/models/fft/jobs/ITask\";\nimport { ITask as TaskUpdateApiModel } from \"../../api/models/fft/jobs/jobupdate/ITask\";\nimport { Task } from \"../models/task\";\nimport { Activity } from \"../models/activity\";\nimport { Part } from \"../models/part\";\nimport { Guid } from \"../../../common/core/guid\";\nimport { DateHelper } from \"../../core/dateHelper\";\nimport { Job } from \"../models/job\";\nimport { QueryableBusinessRuleGroup } from \"../models/businessRules/queryableBusinessRuleGroup\";\nimport { PartsToday } from \"../models/partsToday\";\nimport { IActivity } from \"../../api/models/fft/jobs/IActivity\";\nimport { TaskVisit } from \"../models/taskVisit\";\nimport { StringHelper } from \"../../../common/core/stringHelper\";\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\nimport { IBusinessRuleService } from \"../services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../services/businessRuleService\";\nimport { CatalogService } from \"../services/catalogService\";\nimport { ICatalogService } from \"../services/interfaces/ICatalogService\";\nimport * as bignumber from \"bignumber\";\nimport { NumberHelper } from \"../../core/numberHelper\";\n\n@inject(PartFactory, BusinessRuleService, CatalogService)\nexport class TaskFactory implements ITaskFactory {\n\n    private _partFactory: IPartFactory;\n    private _businessRulesService: IBusinessRuleService;\n    private _catalogService: ICatalogService;\n\n    public constructor(partFactory: IPartFactory, businessRuleService: IBusinessRuleService, catalogService: ICatalogService) {\n        this._partFactory = partFactory;\n        this._businessRulesService = businessRuleService;\n        this._catalogService = catalogService;\n    }\n\n    public createTaskBusinessModel(taskApiModel: TaskApiModel, partsToday: PartsToday, isCurrentJob: boolean): Promise<Task> {\n\n        return Promise.all([\n            this._businessRulesService.getQueryableRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this))),\n            this._businessRulesService.getQueryableRuleGroup(\"todaysParts\")\n        ]).then(([businessRules, todaysPartsBusinessRules]) => {\n            let taskBusinessModel: Task = undefined;\n            let partLJActionCodes = businessRules.getBusinessRuleList<string>(\"partLJReportableActionTypes\");\n            let bypassTaskStatus = businessRules.getBusinessRule<string>(\"bypassTaskStatus\");\n            let middlewareDoTodayStatuses = businessRules.getBusinessRuleList<string>(\"middlewareDoTodayStatuses\");\n            let partsCurrencyUnit = businessRules.getBusinessRule<string>(\"partsCurrencyUnit\");\n\n            if (taskApiModel && taskApiModel.status !== bypassTaskStatus) {\n                let isDoTodayTask = middlewareDoTodayStatuses.indexOf(taskApiModel.status) > -1;\n                taskBusinessModel = new Task(isDoTodayTask && isCurrentJob, false);\n                taskBusinessModel.isMiddlewareDoTodayTask = isDoTodayTask;\n                taskBusinessModel.id = taskApiModel.id;\n                taskBusinessModel.jobType = taskApiModel.jobType;\n                taskBusinessModel.applianceType = taskApiModel.applianceType;\n                taskBusinessModel.applianceId = taskApiModel.applianceId;\n                taskBusinessModel.chargeType = taskApiModel.chargeType;\n                taskBusinessModel.specialRequirement = taskApiModel.specialRequirement;\n                taskBusinessModel.supportingText = taskApiModel.supportingText;\n\n                taskBusinessModel.problemDesc = taskApiModel.problemDesc;\n                taskBusinessModel.applianceMake = taskApiModel.applianceMake;\n                taskBusinessModel.applianceModel = taskApiModel.applianceModel;\n                taskBusinessModel.applianceErrorCode = taskApiModel.applianceErrorCode;\n                taskBusinessModel.applianceErrorDesc = taskApiModel.applianceErrorDesc;\n                taskBusinessModel.sequence = taskApiModel.sequence;\n                taskBusinessModel.previousVisits = [];\n\n                taskBusinessModel.fixedPriceQuotationAmount = taskApiModel.fixedPriceQuotationAmount;\n                taskBusinessModel.discountCode = taskApiModel.discountCode;\n\n                taskBusinessModel.isPotentiallyPartLJReportable = partLJActionCodes.some(actionCode => taskApiModel.jobType === actionCode);\n                if (!taskBusinessModel.isMiddlewareDoTodayTask) {\n                    taskBusinessModel.status = taskApiModel.status;\n                }\n\n                taskBusinessModel.activities = [];\n                if (taskApiModel.activities) {\n\n                    taskApiModel.activities.forEach((activityApiModel) => {\n\n                        let activityBusinessModel = new Activity();\n                        activityBusinessModel.date = DateHelper.fromJsonDateString(activityApiModel.date);\n                        activityBusinessModel.status = activityApiModel.status;\n                        activityBusinessModel.engineerName = activityApiModel.engineerName;\n                        activityBusinessModel.report = activityApiModel.report;\n                        activityBusinessModel.workDuration = activityApiModel.workDuration;\n                        activityBusinessModel.chargeableTime = activityApiModel.chargeableTime;\n                        activityBusinessModel.parts = [];\n\n                        if (activityApiModel.parts) {\n                            activityApiModel.parts.forEach((partApiModel) => {\n                                let partBusinessModel = new Part();\n                                partBusinessModel.status = partApiModel.status;\n                                partBusinessModel.description = partApiModel.description;\n                                partBusinessModel.quantity = partApiModel.quantity;\n                                partBusinessModel.stockReferenceId = partApiModel.stockReferenceId;\n                                partBusinessModel.taskId = taskBusinessModel.id;\n                                partBusinessModel.price = partApiModel.charge ? new bignumber.BigNumber(partApiModel.charge).times(partsCurrencyUnit) : new bignumber.BigNumber(0);\n                                partBusinessModel.isMainPart = partApiModel.isMainPart;\n                                partBusinessModel.orderDate = partApiModel.orderDate;\n                                partBusinessModel.partOrderStatus = partApiModel.partOrderStatus;\n                                partBusinessModel.quantityCharged = partApiModel.quantityCharged;\n                                partBusinessModel.requisitionNumber = partApiModel.requisitionNumber;\n                                partBusinessModel.stockReferenceId = partApiModel.stockReferenceId;\n                                partBusinessModel.fittedDate = DateHelper.fromJsonDateString(activityApiModel.date);\n                                partBusinessModel.id = Guid.newGuid();\n                                activityBusinessModel.parts.push(partBusinessModel);\n\n                                if (todaysPartsBusinessRules && partsToday) {\n                                    if (this.isATodaysPart(partBusinessModel, activityBusinessModel, todaysPartsBusinessRules)) {\n                                        partsToday.parts.push(partBusinessModel);\n                                    }\n                                }\n                            });\n                        }\n\n                        taskBusinessModel.activities.push(activityBusinessModel);\n                    });\n                }\n\n                const previousVisits = this.generatePreviousVisits(middlewareDoTodayStatuses, taskApiModel.activities);\n                taskBusinessModel.previousVisits = previousVisits;\n            }\n\n            return taskBusinessModel;\n        });\n    }\n\n    public async createTaskApiModel(task: Task, job: Job, hardwareSequenceNumber?: number): Promise<TaskUpdateApiModel> {\n        let taskApiModel = <TaskUpdateApiModel>{};\n\n        let taskIsLive = !job.jobNotDoingReason && !task.isNotDoingTask;\n\n        taskApiModel.id = task.isNewRFA ? undefined : task.id;\n        taskApiModel.fieldTaskId = task.isNewRFA ? task.fieldTaskId : undefined;\n        taskApiModel.newWork = task.isNewRFA;\n        taskApiModel.jobType = task.jobType;\n        taskApiModel.applianceType = task.applianceType;\n        taskApiModel.chargeType = task.chargeType;\n        taskApiModel.sequence = task.sequence;\n        taskApiModel.applianceId = hardwareSequenceNumber ? undefined : task.applianceId;\n        taskApiModel.status = task.status;\n        taskApiModel.hardwareSequenceNumber = hardwareSequenceNumber || undefined;\n\n        taskApiModel.componentEndTime = DateHelper.timeStringToJsonDateTimeString(task.endTime) || undefined;\n        taskApiModel.componentStartTime = DateHelper.timeStringToJsonDateTimeString(task.startTime) || undefined;\n        taskApiModel.report = task.report;\n\n        if (taskIsLive) {\n            taskApiModel.report = (task.chirpCodes && task.chirpCodes.length > 0) ?\n                task.chirpCodes.join(\" \").concat(\" \", taskApiModel.report) :\n                taskApiModel.report;\n            taskApiModel.energyEfficiencyOutcome = task.adviceOutcome;\n            taskApiModel.energyAdviceCategoryCode = task.adviceCode;\n            taskApiModel.energyEfficiencyAdviceComments = task.adviceComment;\n            taskApiModel.productGroupCode = task.productGroup;\n            taskApiModel.partTypeCode = task.partType;\n            taskApiModel.fixedPriceQuotationAmount = task.fixedPriceQuotationAmount;\n            taskApiModel.workDuration = task.workDuration;\n            taskApiModel.workedOnCode = task.workedOnCode;\n            taskApiModel.visitActivityCode = task.activity;\n            taskApiModel.faultActionCode = task.faultActionCode;\n        }\n\n        let chargeType = await this._catalogService.getChargeType(task.chargeType);\n\n        let isPartsChargeable = NumberHelper.isNullOrUndefined(task.fixedPriceQuotationAmount) // 0 is valid here\n            && chargeType\n            && chargeType.chargePartsIndicator === \"Y\"\n            && taskIsLive;\n\n        if (taskIsLive) {\n            // todo move logic out to here about whether to build charges\n            taskApiModel.partsCharged = await this._partFactory.createPartsChargedApiModelsFromBusinessModels(task, job.partsDetail, isPartsChargeable);\n\n            taskApiModel.partsUsed = await this._partFactory.createPartsUsedApiModelsFromBusinessModels(task, job.partsDetail, isPartsChargeable);\n\n            taskApiModel.partsNotUsed = await this._partFactory.createPartsNotUsedApiModelsFromBusinessModels(task, job.partsDetail);\n\n            taskApiModel.partsClaimedUnderWarranty = await this._partFactory.createPartsClaimedUnderWarrantyApiModelsFromBusinessModels(task, job.partsDetail);\n        }\n\n        let statuses = await this._catalogService.getActivityComponentVisitStatuses();\n        let taskStatus = statuses && statuses.find(status => status.status === taskApiModel.status);\n        if (taskStatus) {\n            taskApiModel.jobStatusCategory = taskStatus.jobStatusCategory;\n        }\n\n        if (!taskApiModel.partsUsed || taskApiModel.partsUsed.length === 0) {\n            taskApiModel.partsUsed = undefined;\n        }\n\n        if (!taskApiModel.partsCharged || taskApiModel.partsCharged.length === 0) {\n            taskApiModel.partsCharged = undefined;\n        }\n\n        if (!taskApiModel.partsClaimedUnderWarranty || taskApiModel.partsClaimedUnderWarranty.length === 0) {\n            taskApiModel.partsClaimedUnderWarranty = undefined;\n        }\n\n        if (!taskApiModel.partsNotUsed || taskApiModel.partsNotUsed.length === 0) {\n            taskApiModel.partsNotUsed = undefined;\n        }\n\n        // we need to set workduration to 0, chargeable time for any statuses that don't send safety, parts charges etc back. \n        // the basic job report does not send any start/finish time, job duration / charegable time back\n        // @jairam: for NA,XC and XB, work duration can be 0 and WMIS doenst need start and end time\n        //          job will progress to NAW status only if work duration is greater than 0\n        let taskItemRuleGroup = await this._businessRulesService.getQueryableRuleGroup(\"taskItem\");\n        if (!this.isTaskStatusRequiresDurations(taskItemRuleGroup, task.status)) {\n            taskApiModel.workDuration = 0;\n            taskApiModel.chargeableTime = undefined;\n            taskApiModel.componentStartTime = undefined;\n            taskApiModel.componentEndTime = undefined;\n        } else {\n            taskApiModel.workDuration = taskIsLive ? task.workDuration : 0;\n            taskApiModel.chargeableTime = taskIsLive ? task.chargeableTime : 0;\n        }\n\n        return taskApiModel;\n    }\n\n    private isATodaysPart(part: Part, activity: Activity, todaysPartsBusinessRules: QueryableBusinessRuleGroup): boolean {\n        return activity.status === todaysPartsBusinessRules.getBusinessRule<string>(\"doTodayActivityStatus\")\n            && part.status === todaysPartsBusinessRules.getBusinessRule<string>(\"toBeFittedPartStatus\");\n    }\n\n    private generatePreviousVisits(middlewareDoTodayStatuses: string[], activities: IActivity[]): TaskVisit[] {\n        const visits: TaskVisit[] = [];\n        if (activities && middlewareDoTodayStatuses) {\n            activities.filter(activity => middlewareDoTodayStatuses.indexOf(activity.status) === -1).forEach(activity => {\n                let previousVisit = new TaskVisit();\n                previousVisit.date = activity.date;\n                previousVisit.report = activity.report;\n                previousVisit.status = activity.status;\n                previousVisit.chargeableTime = activity.chargeableTime;\n                previousVisit.workDuration = activity.workDuration;\n                previousVisit.engineerName = activity.engineerName;\n\n                visits.push(previousVisit);\n            });\n        }\n\n        return visits;\n    }\n\n    private isTaskStatusRequiresDurations(ruleGroup: QueryableBusinessRuleGroup, status: string): boolean {\n        const rules = ruleGroup.getBusinessRuleList<string>(\"taskNotRequriedDuration\");\n        return rules ? !rules.some(x => x === status) : true;\n    }\n}\n"],"sourceRoot":"../../.."}