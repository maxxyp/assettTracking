{"version":3,"sources":["hema/business/factories/partFactory.ts"],"names":[],"mappings":"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","file":"partFactory.js","sourcesContent":["import { IPartFactory } from \"./interfaces/IPartFactory\";\r\nimport { Part, Part as PartBusinessModel } from \"../models/part\";\r\nimport { IAdaptPartSelected as AdaptPartApiModel } from \"../../api/models/adapt/IAdaptPartSelected\";\r\nimport { Guid } from \"../../../common/core/guid\";\r\nimport { PartsDetail } from \"../models/partsDetail\";\r\nimport { IPartsCharged } from \"../../api/models/fft/jobs/jobupdate/IPartsCharged\";\r\nimport { IPartsUsed } from \"../../api/models/fft/jobs/jobupdate/IPartsUsed\";\r\nimport { IPartsNotUsed } from \"../../api/models/fft/jobs/jobupdate/IPartsNotUsed\";\r\nimport { IPartsClaimedUnderWarranty } from \"../../api/models/fft/jobs/jobupdate/IPartsClaimedUnderWarranty\";\r\nimport { Task } from \"../models/task\";\r\nimport { inject } from \"aurelia-dependency-injection\";\r\nimport { BusinessRuleService } from \"../services/businessRuleService\";\r\nimport { IBusinessRuleService } from \"../services/interfaces/IBusinessRuleService\";\r\nimport { IPartsOrderedForTask } from \"../../api/models/fft/jobs/orderparts/IPartsOrderedForTask\";\r\nimport { Job } from \"../models/job\";\r\nimport { BusinessException } from \"../models/businessException\";\r\nimport { IPartOrdered } from \"../../api/models/fft/jobs/orderparts/IPartOrdered\";\r\nimport { IPartsOrderedTasks } from \"../../api/models/fft/jobs/orderparts/IPartsOrderedTasks\";\r\nimport * as bignumber from \"bignumber\";\r\n\r\n@inject(BusinessRuleService)\r\nexport class PartFactory implements IPartFactory {\r\n    private _businessRuleService: IBusinessRuleService;\r\n\r\n    constructor(businessRuleService: IBusinessRuleService) {\r\n        this._businessRuleService = businessRuleService;\r\n    }\r\n\r\n    public createPartBusinessModelFromAdaptApiModel(adaptPartApiModel: AdaptPartApiModel): PartBusinessModel {\r\n        let businessModel: PartBusinessModel = new PartBusinessModel();\r\n        const adaptPartsCurrencyUnit = 0.01;\r\n\r\n        businessModel.id = Guid.newGuid();\r\n        // todo: businessModel.status\r\n        businessModel.description = adaptPartApiModel.description;\r\n        businessModel.quantity = 1;\r\n        businessModel.stockReferenceId = adaptPartApiModel.stockReferenceId;\r\n        businessModel.price = adaptPartApiModel.price ? new bignumber.BigNumber(adaptPartApiModel.price).times(adaptPartsCurrencyUnit) : new bignumber.BigNumber(0);\r\n\r\n        businessModel.partOrderStatus = \"O\";\r\n        return businessModel;\r\n    }\r\n\r\n    public async createPartsChargedApiModelsFromBusinessModels(task: Task, partsDetail: PartsDetail, isPartsChargeableChargeType: boolean): Promise<IPartsCharged[]> {\r\n\r\n        const canAddPart = isPartsChargeableChargeType\r\n            && partsDetail\r\n            && task\r\n            && task.isCharge\r\n            // only ever transmit partsCharged if the task is complete\r\n            && task.status === \"C\";\r\n\r\n        if (!canAddPart) {\r\n            return [];\r\n        }\r\n\r\n        try {\r\n            let partFactoryRules = await this._businessRuleService.getQueryableRuleGroup(\"partFactory\");\r\n            let brPartVanStockStatus = partFactoryRules && partFactoryRules.getBusinessRule<string>(\"partVanStockStatus\");\r\n            let brPartsDescriptionLength = partFactoryRules && partFactoryRules.getBusinessRule<number>(\"partsDescriptionLength\");\r\n\r\n            let chargeServiceRules = await this._businessRuleService.getQueryableRuleGroup(\"chargeService\");\r\n            let visitStatuses = chargeServiceRules.getBusinessRuleList<string>(\"visitStatuses\");\r\n            let excludePartStatusPrevious = chargeServiceRules.getBusinessRuleList<string>(\"excludePartStatusPrevious\");\r\n\r\n            let partsCharged: IPartsCharged[] = [];\r\n\r\n            // vanstock\r\n            if (partsDetail.partsBasket && partsDetail.partsBasket.partsToOrder) {\r\n                partsDetail.partsBasket.partsToOrder\r\n                    .filter(part => part && (part.taskId === task.id) && (part.partOrderStatus === brPartVanStockStatus))\r\n                    .forEach(chargeablePart => {\r\n                        const convertedPart = this.createPartCharge(chargeablePart, brPartsDescriptionLength);\r\n                        if (convertedPart) {\r\n                            partsCharged.push(convertedPart);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            // todays parts that have been fitted\r\n            if (partsDetail.partsToday && partsDetail.partsToday.parts) {\r\n                partsDetail.partsToday.parts\r\n                    .filter(part => part && (part.taskId === task.id))\r\n                    .forEach((todaysPart) => {\r\n                        const convertedPart = this.createPartCharge(todaysPart, brPartsDescriptionLength);\r\n                        if (convertedPart) {\r\n                            partsCharged.push(convertedPart);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            // previously fitted parts on this job\r\n            if (task.activities) {\r\n                let chargableActivities = task.activities\r\n                            .filter(activity => activity\r\n                                                && activity.parts\r\n                                                && activity.parts.length\r\n                                                && visitStatuses.some(status => status === activity.status)\r\n                                            );\r\n\r\n                chargableActivities.forEach(activity => {\r\n                    activity.parts\r\n                        .filter(part => part && !excludePartStatusPrevious.some(excludedStatus => part.status === excludedStatus))\r\n                        .forEach(previousPart => {\r\n                            const convertedPart = this.createPartCharge(previousPart, brPartsDescriptionLength);\r\n                            if (convertedPart) {\r\n                                partsCharged.push(convertedPart);\r\n                            }\r\n                        });\r\n                });\r\n\r\n            }\r\n\r\n            return partsCharged;\r\n        } catch (error) {\r\n            throw new BusinessException(this, \"createPartsChargedApiModelsFromBusinessModels\", \"Unable to create the parts charged\", null, error);\r\n        }\r\n    }\r\n\r\n    public createPartsUsedApiModelsFromBusinessModels(task: Task, partsDetail: PartsDetail, isPartsChargeableChargeType: boolean): Promise<IPartsUsed[]> {\r\n        // go through all the parts for this task and see if they were used, as in they were either vanstock and in the parts basket\r\n        // or they are todays parts and not returned not used\r\n\r\n        if (!partsDetail || !task) {\r\n            return Promise.resolve([]);\r\n        }\r\n\r\n        return Promise.all([\r\n            this._businessRuleService.getQueryableRuleGroup(\"partFactory\"),\r\n            this._businessRuleService.getQueryableRuleGroup(\"todaysParts\"),\r\n        ]).then(([partFactoryRules, todaysPartsRules]) => {\r\n            let partsUsed: IPartsUsed[] = [];\r\n            let brPartsDescriptionLength = partFactoryRules && partFactoryRules.getBusinessRule<number>(\"partsDescriptionLength\");\r\n\r\n            if (!todaysPartsRules) {\r\n                return partsUsed;\r\n            }\r\n\r\n            let brPersonalSourceCategory: string = todaysPartsRules.getBusinessRule<string>(\"personalSourceCategory\");\r\n            let brPartVanStockStatus = todaysPartsRules.getBusinessRule<string>(\"partVanStockStatus\");\r\n\r\n            if (brPersonalSourceCategory && brPartVanStockStatus && partsDetail.partsBasket && partsDetail.partsBasket.partsToOrder\r\n                && partsDetail.partsBasket.partsToOrder.length > 0) {\r\n\r\n                partsDetail.partsBasket.partsToOrder\r\n                    .filter(part => (part.taskId === task.id) && (part.partOrderStatus === brPartVanStockStatus))\r\n                    .forEach(vanStockPart => {\r\n                        const convertedPart = this.createPartUsed(vanStockPart, brPartsDescriptionLength, brPersonalSourceCategory, 100, isPartsChargeableChargeType);\r\n                        if (convertedPart) {\r\n                            partsUsed.push(convertedPart);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            return partsUsed;\r\n        });\r\n    }\r\n\r\n    public createPartsNotUsedApiModelsFromBusinessModels(task: Task, partsDetail: PartsDetail): Promise<IPartsNotUsed[]> {\r\n        // look at the todays parts and add the ones which are returned not used and return those\r\n\r\n        if (!partsDetail) {\r\n            return Promise.resolve([]);\r\n        }\r\n        let partsToReturn: IPartsNotUsed[] = [];\r\n\r\n        const partsAvailable = partsDetail.partsToday && partsDetail.partsToday.parts && partsDetail.partsToday.parts.length > 0;\r\n\r\n        if (!partsAvailable) {\r\n            return Promise.resolve(partsToReturn);\r\n        }\r\n\r\n        partsDetail.partsToday.parts\r\n            .filter(part => (part.taskId === task.id) && (part.notUsedReturn) && (part.notUsedReturn.quantityToReturn > 0))\r\n            .forEach((notUsedPart) => {\r\n\r\n                let convertedPart = <IPartsNotUsed>{\r\n                    \"fieldComponentVisitSeq\": task.sequence,\r\n                    \"locationCode\": \"\", // todo\": DataMapping - what is this?\r\n                    \"reasonCode\": notUsedPart.notUsedReturn.reasonForReturn,\r\n                    \"quantityNotUsed\": notUsedPart.notUsedReturn.quantityToReturn,\r\n                    \"requisitionNumber\": \"\", // todo\": DataMapping - what is this?\r\n                    \"stockReferenceId\": notUsedPart.stockReferenceId\r\n                };\r\n\r\n                partsToReturn.push(convertedPart);\r\n            });\r\n\r\n        return Promise.resolve(partsToReturn);\r\n\r\n    }\r\n\r\n    public createPartsClaimedUnderWarrantyApiModelsFromBusinessModels(task: Task, partsDetail: PartsDetail): Promise<IPartsClaimedUnderWarranty[]> {\r\n        let partsToReturn: IPartsClaimedUnderWarranty[] = [];\r\n\r\n        if (partsDetail && partsDetail.partsToday && partsDetail.partsToday.parts && partsDetail.partsToday.parts.length) {\r\n            partsDetail.partsToday.parts.filter(p => p.taskId === task.id && p.warrantyReturn && p.warrantyReturn.isWarrantyReturn)\r\n                .forEach(part => {\r\n                    let convertedPart = this.createPartClaimsWarranty(part);\r\n                    partsToReturn.push(convertedPart);\r\n                });\r\n        }\r\n\r\n        if (partsDetail && partsDetail.partsBasket && partsDetail.partsBasket.partsToOrder && partsDetail.partsBasket.partsToOrder.length) {\r\n            partsDetail.partsBasket.partsToOrder.filter(p => p.taskId === task.id && p.warrantyReturn && p.warrantyReturn.isWarrantyReturn)\r\n                .forEach(part => {\r\n                    let convertedPart = this.createPartClaimsWarranty(part);\r\n                    partsToReturn.push(convertedPart);\r\n                });\r\n        }\r\n\r\n        return Promise.resolve(partsToReturn);\r\n    }\r\n\r\n    public createPartsOrderedForTask(job: Job): Promise<IPartsOrderedTasks> {\r\n        let partsOrderedForTasks: IPartsOrderedTasks = <IPartsOrderedTasks>{tasks: []};\r\n        return this._businessRuleService.getQueryableRuleGroup(\"partFactory\")\r\n            .then((ruleGroup) => {\r\n                let brPartsDescriptionLength = ruleGroup && ruleGroup.getBusinessRule<number>(\"partsDescriptionLength\");\r\n                let brPartOrderStatus = ruleGroup.getBusinessRule<string>(\"partOrderStatus\");\r\n                if (brPartOrderStatus) {\r\n\r\n                    if (job && job.partsDetail && job.partsDetail.partsBasket && job.partsDetail.partsBasket.partsToOrder &&\r\n                        job.partsDetail.partsBasket.partsToOrder.filter(part => part.partOrderStatus === brPartOrderStatus).length > 0) {\r\n                        if (job.tasks && job.tasks.length > 0) {\r\n\r\n                            job.tasks.forEach(task => {\r\n                                let orderedParts: IPartOrdered[] = [];\r\n\r\n                                job.partsDetail.partsBasket.partsToOrder\r\n                                    .filter(part => (part.partOrderStatus === brPartOrderStatus) && (part.taskId === task.id))\r\n                                    .forEach(orderedPart => {\r\n                                        let convertedPart = <IPartOrdered>{\r\n                                            visitId: job.visit.id,\r\n                                            charge: new bignumber.BigNumber(orderedPart.price).times(100).toNumber(),\r\n                                            description: orderedPart.description.substring(0, brPartsDescriptionLength),\r\n                                            priority: orderedPart.isPriorityPart,\r\n                                            quantity: orderedPart.quantity,\r\n                                            quantityCharged: orderedPart.quantity,\r\n                                            stockReferenceId: orderedPart.stockReferenceId\r\n                                        };\r\n\r\n                                        orderedParts.push(convertedPart);\r\n                                    });\r\n\r\n                                if (orderedParts.length > 0) {\r\n                                    // some parts have been ordered for this task\r\n                                    let partsOrderedForTask = <IPartsOrderedForTask>{};\r\n                                    partsOrderedForTask.deliverToSite = job.partsDetail.partsBasket.deliverPartsToSite || false;\r\n                                    partsOrderedForTask.id = task.isNewRFA ? undefined : task.id;\r\n                                    partsOrderedForTask.fieldTaskId = task.isNewRFA ? task.fieldTaskId : undefined;\r\n                                    partsOrderedForTask.parts = orderedParts;\r\n\r\n                                    partsOrderedForTasks.tasks.push(partsOrderedForTask);\r\n                                }\r\n                            });\r\n\r\n                            return partsOrderedForTasks;\r\n                        } else {\r\n                            // tasks are missing\r\n                            throw new BusinessException(this, \"createPartsOrderedForTask\", \"Required task details not present\", null, null);\r\n                        }\r\n                    } else {\r\n                        return partsOrderedForTasks;\r\n                    }\r\n                } else {\r\n                    // missing required business rules\r\n                    throw new BusinessException(this, \"createPartsOrderedForTask\", \"Required business rules not present\", null, null);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                throw new BusinessException(this, \"createPartsOrderedForTask\", \"Required business rule group not present: '{0}'\", [\"partFactory\"], error);\r\n            });\r\n    }\r\n\r\n    public async getPartsConsumedOnJob(job: Job): Promise<{stockReferenceId: string, quantityConsumed: number, isVanStock: boolean}[]> {\r\n        const todaysPartsRules = await this._businessRuleService.getQueryableRuleGroup(\"todaysParts\");\r\n        const brPartVanStockStatus = todaysPartsRules.getBusinessRule<string>(\"partVanStockStatus\");\r\n\r\n        const consumedVanStockParts = (job && job.partsDetail && job.partsDetail.partsBasket && job.partsDetail.partsBasket.partsToOrder || [])\r\n            .filter(part => part && part.partOrderStatus === brPartVanStockStatus)\r\n            .map(part => ({\r\n                stockReferenceId: part.stockReferenceId,\r\n                isVanStock: true,\r\n                quantityConsumed: part.quantity || 0\r\n            }))\r\n            .filter(part => part.quantityConsumed);\r\n\r\n        const consumedJobParts = (job && job.partsDetail && job.partsDetail.partsToday && job.partsDetail.partsToday.parts || [])\r\n            .filter(part => part)\r\n            .map(part => ({\r\n                stockReferenceId: part.stockReferenceId,\r\n                isVanStock: false,\r\n                quantityConsumed: (part.quantity || 0) - (part.notUsedReturn && part.notUsedReturn.quantityToReturn || 0)\r\n            }))\r\n            .filter(part => part.quantityConsumed);\r\n\r\n        return [...consumedVanStockParts, ...consumedJobParts];\r\n    }\r\n\r\n    private createPartClaimsWarranty(part: Part): IPartsClaimedUnderWarranty {\r\n\r\n        return <IPartsClaimedUnderWarranty>{\r\n            \"claimedUnderWarrantyReasonDescription\": part.warrantyReturn.reasonForClaim,\r\n            \"partReturnedIndicator\": true, // todo: DataMapping // assumption is that this is true if there is a return\r\n            \"quantityClaimed\": part.warrantyReturn.quantityToClaimOrReturn,\r\n            \"stockReferenceId\": part.warrantyReturn.removedPartStockReferenceId\r\n        };\r\n    }\r\n\r\n    private createPartCharge(part: Part, brPartsDescriptionLength: number): IPartsCharged {\r\n        const {price = 0, quantity = 0, description = \"\", stockReferenceId = \"\"} = part;\r\n\r\n        let noChargeQty = 0;\r\n        let notUsed = 0;\r\n\r\n        if (part.notUsedReturn) {\r\n            noChargeQty = notUsed = part.notUsedReturn.quantityToReturn || 0;\r\n        }\r\n\r\n        if (part.warrantyReturn && part.warrantyReturn.isWarrantyReturn) {\r\n            noChargeQty = noChargeQty + (part.warrantyReturn.quantityToClaimOrReturn || 0);\r\n        }\r\n\r\n        let quantityUsed = quantity - notUsed;\r\n        let quantityCharged = quantity - noChargeQty;\r\n\r\n        if (quantityCharged <= 0 || quantityUsed <= 0) {\r\n            return null;\r\n        }\r\n\r\n        return <IPartsCharged>{\r\n            \"charge\": new bignumber.BigNumber(price).times(100).toNumber(),\r\n            \"quantityCharged\": quantityCharged,\r\n            \"quantityUsed\": quantityUsed,\r\n            \"description\": description.substring(0, brPartsDescriptionLength),\r\n            \"stockReferenceId\": stockReferenceId\r\n        };\r\n    }\r\n\r\n    private createPartUsed(part: Part, brPartsDescriptionLength: number, sourceCategory: string, buyingUnitPriceMultiplier: number = 1, isPartsChargeableChargeType: boolean): IPartsUsed {\r\n        const {price = 0, quantity = 0, description = \"\", stockReferenceId = \"\"} = part;\r\n\r\n        let noChargeQty = 0;\r\n        let notUsed = 0;\r\n\r\n        if (part.notUsedReturn) {\r\n            noChargeQty = notUsed = part.notUsedReturn.quantityToReturn || 0;\r\n        }\r\n\r\n        if (part.warrantyReturn && part.warrantyReturn.isWarrantyReturn) {\r\n            noChargeQty = noChargeQty + (part.warrantyReturn.quantityToClaimOrReturn || 0);\r\n        }\r\n\r\n        let quantityUsed = quantity - notUsed;\r\n        if (quantityUsed <= 0) {\r\n            return null;\r\n        }\r\n\r\n        return <IPartsUsed>{\r\n            \"quantityUsed\": quantityUsed,\r\n            \"quantityCharged\": isPartsChargeableChargeType ? quantity - noChargeQty : 0,\r\n            \"requisitionNumber\": \"\", // todo: DataMapping - what is this?\r\n            \"buyingUnitPrice\": new bignumber.BigNumber(price).times(buyingUnitPriceMultiplier).toNumber(), // todo\": DataMapping - assuming its the price\r\n            \"description\": description.substring(0, brPartsDescriptionLength),\r\n            sourceCategory,\r\n            \"charge\": new bignumber.BigNumber(part.price).times(buyingUnitPriceMultiplier).toNumber(), // todo\": DataMapping - assuming its the price\r\n            stockReferenceId\r\n        };\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../../.."}