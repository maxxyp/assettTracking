{"version":3,"sources":["hema/business/factories/visitFactory.ts"],"names":[],"mappings":"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","file":"visitFactory.js","sourcesContent":["import {IVisitFactory} from \"./interfaces/IVisitFactory\";\n\nimport {IVisit as VisitApiModel} from \"../../api/models/fft/jobs/IVisit\";\nimport {Visit as VisitBusinessModel} from \"../models/visit\";\nimport {IFutureVisit} from \"../../api/models/fft/jobs/jobupdate/IFutureVisit\";\nimport {Job as JobBusinessModel} from \"../models/job\";\nimport {DateHelper} from \"../../core/dateHelper\";\nimport { IFutureTask } from \"../../api/models/fft/jobs/jobupdate/IFutureTask\";\n\nexport class VisitFactory implements IVisitFactory {\n    public createVisitBusinessModel(visitApiModel: VisitApiModel): VisitBusinessModel {\n        let visitBusinessModel: VisitBusinessModel = new VisitBusinessModel();\n\n        if (visitApiModel) {\n            visitBusinessModel.id = visitApiModel.id;\n            visitBusinessModel.timeSlotFrom = DateHelper.fromJsonDateTimeString(visitApiModel.earliestStartTime);\n            visitBusinessModel.timeSlotTo = DateHelper.fromJsonDateTimeString(visitApiModel.latestStartTime);\n            visitBusinessModel.specialInstructions = visitApiModel.specialInstructions;\n            visitBusinessModel.engineerInstructions = visitApiModel.engineerInstructions;\n        }\n\n        return visitBusinessModel;\n    }\n\n    public createVisitApiModel(jobBusinessModel: JobBusinessModel): IFutureVisit {\n        if (jobBusinessModel && jobBusinessModel.appointment) {\n            let futureVisit = <IFutureVisit>{};\n\n            futureVisit.premiseId = undefined; // non mandatory\n            futureVisit.appointmentBandCode = jobBusinessModel.appointment.promisedTimeSlot;\n            futureVisit.date = DateHelper.toJsonDateTimeString(jobBusinessModel.appointment.promisedDate);\n            futureVisit.temporaryVisitInformation = jobBusinessModel.appointment.accessInformation;\n            futureVisit.preferredEngineer = (jobBusinessModel.appointment.preferredEngineer) ? jobBusinessModel.appointment.preferredEngineer.toString() : undefined;\n            if (jobBusinessModel.appointment.estimatedDurationOfAppointment) {\n                futureVisit.tasks = [];\n                jobBusinessModel.appointment.estimatedDurationOfAppointment.forEach((x, index) => {\n                    let task = jobBusinessModel.tasks.find(t => t.id === x.taskId);\n                    if (task) {\n                        let visitTask = <IFutureTask>{};\n                        visitTask.id = task.isNewRFA ? undefined : task.id;\n                        visitTask.fieldTaskId = task.fieldTaskId;\n                        visitTask.jobType = task.jobType;\n                        visitTask.longJobForecastTime = x.duration;\n                        visitTask.applianceType = task.applianceType;\n                        visitTask.specialRequirement = x.specialRequirement;\n                        futureVisit.tasks.push(visitTask);\n                    }\n                });\n            }\n            return futureVisit;\n        } else {\n            return undefined;\n        }\n\n    }\n}\n"],"sourceRoot":"../../.."}