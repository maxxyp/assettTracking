{"version":3,"sources":["hema/business/factories/applianceFactory.ts"],"names":[],"mappings":"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","file":"applianceFactory.js","sourcesContent":["import { ChirpCode } from \"../models/chirpCode\";\nimport { IApplianceFactory } from \"./interfaces/IApplianceFactory\";\nimport { IAppliance as ApplianceApiModel } from \"../../api/models/fft/jobs/history/IAppliance\";\nimport { IAppliance as ApplianceUpdateApiModel } from \"../../api/models/fft/jobs/jobUpdate/IAppliance\";\nimport { Appliance as ApplianceBusinessModel } from \"../../business/models/appliance\";\nimport { ApplianceSafetyFactory } from \"./applianceSafetyFactory\";\nimport { IApplianceSafetyFactory } from \"./interfaces/IApplianceSafetyFactory\";\nimport { IReading } from \"../../api/models/fft/jobs/jobUpdate/IReading\";\nimport { IApplianceSafety } from \"../../api/models/fft/jobs/jobUpdate/IApplianceSafety\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { NumberHelper } from \"../../../common/core/numberHelper\";\nimport { StringHelper } from \"../../../common/core/stringHelper\";\nimport { ObjectHelper } from \"../../../common/core/objectHelper\";\nimport { Job } from \"../models/job\";\n\nimport { IReadingFactory } from \"./interfaces/IReadingFactory\";\nimport { ReadingFactory } from \"./readingFactory\";\nimport { ILandlordFactory } from \"./interfaces/ILandlordFactory\";\nimport { LandlordFactory } from \"./landlordFactory\";\nimport { IBusinessRuleService } from \"../services/interfaces/IBusinessRuleService\";\nimport { BusinessRuleService } from \"../services/businessRuleService\";\nimport { CatalogService } from \"../services/catalogService\";\nimport { ICatalogService } from \"../services/interfaces/ICatalogService\";\nimport { QueryableBusinessRuleGroup } from \"../models/businessRules/queryableBusinessRuleGroup\";\nimport { MiddlewareHelper } from \"../../core/middlewareHelper\";\nimport { ISafetyAction } from \"../models/reference/ISafetyAction\";\nimport { BaseApplianceFactory } from \"../../common/factories/baseApplianceFactory\";\nimport { DataStateManager } from \"../../common/dataStateManager\";\nimport { IDataStateManager } from \"../../common/IDataStateManager\";\n\n@inject(ApplianceSafetyFactory, ReadingFactory, LandlordFactory, BusinessRuleService, CatalogService, DataStateManager)\nexport class ApplianceFactory extends BaseApplianceFactory implements IApplianceFactory {\n\n    private _applianceSafetyFactory: IApplianceSafetyFactory;\n    private _readingFactory: IReadingFactory;\n    private _landlordFactory: ILandlordFactory;\n    private _dataStateManager: IDataStateManager;\n\n    constructor(applianceSafetyFactory: IApplianceSafetyFactory,\n        readingFactory: IReadingFactory,\n        landlordFactory: ILandlordFactory,\n        businessRuleService: IBusinessRuleService,\n        catalogService: ICatalogService,\n        dataStateManager: IDataStateManager) {\n\n        super(businessRuleService, catalogService);\n\n        this._applianceSafetyFactory = applianceSafetyFactory;\n        this._readingFactory = readingFactory;\n        this._landlordFactory = landlordFactory;\n        this._dataStateManager = dataStateManager;\n    }\n\n    public createApplianceBusinessModel(applianceApiModel: ApplianceApiModel, job: Job, engineerWorkingSector: string): Promise<ApplianceBusinessModel> {\n        let applianceBusinessModel = new ApplianceBusinessModel();\n\n        return this._catalogService.getObjectTypes().then((applianceTypes) => {\n            if (applianceTypes.find(a => a.applianceType === applianceApiModel.applianceType)) {\n                let parseBgInstallationIndicator = (bgInstallationIndicator: string) => {\n                    return bgInstallationIndicator === \"1\" ? true : bgInstallationIndicator === \"0\" ? false : undefined;\n                };\n\n                // map the normal fields\n                applianceBusinessModel.id = applianceApiModel.id;\n                applianceBusinessModel.serialId = applianceApiModel.serialId;\n                applianceBusinessModel.gcCode = applianceApiModel.gcCode;\n                applianceBusinessModel.bgInstallationIndicator = parseBgInstallationIndicator(applianceApiModel.bgInstallationIndicator);\n                applianceBusinessModel.category = applianceApiModel.category;\n                applianceBusinessModel.contractType = applianceApiModel.contractType;\n                applianceBusinessModel.contractExpiryDate = StringHelper.isString(applianceApiModel.contractExpiryDate) ? new Date(applianceApiModel.contractExpiryDate) : undefined;\n                applianceBusinessModel.applianceType = applianceApiModel.applianceType;\n                applianceBusinessModel.description = applianceApiModel.description;\n                applianceBusinessModel.flueType = applianceApiModel.flueType;\n                applianceBusinessModel.energyControl = applianceApiModel.energyControl;\n                applianceBusinessModel.locationDescription = applianceApiModel.locationDescription;\n                applianceBusinessModel.numberOfRadiators = applianceApiModel.numberOfRadiators;\n                applianceBusinessModel.numberOfSpecialRadiators = applianceApiModel.numberOfSpecialRadiators;\n                applianceBusinessModel.installationYear = applianceApiModel.installationYear;\n                applianceBusinessModel.notes = applianceApiModel.notes;\n                applianceBusinessModel.boilerSize = applianceApiModel.boilerSize;\n\n                // this is because the catalogs are using code as a string and the value comes down as a number\n                applianceBusinessModel.cylinderType = NumberHelper.canCoerceToNumber(applianceApiModel.cylinderType) ? applianceApiModel.cylinderType.toString() : undefined;\n                applianceBusinessModel.systemDesignCondition = NumberHelper.canCoerceToNumber(applianceApiModel.systemDesignCondition)\n                    ? applianceApiModel.systemDesignCondition.toString()\n                    : undefined;\n                applianceBusinessModel.systemType = NumberHelper.canCoerceToNumber(applianceApiModel.systemType) ? applianceApiModel.systemType.toString() : undefined;\n                applianceBusinessModel.condition = NumberHelper.canCoerceToNumber(applianceApiModel.condition) ? applianceApiModel.condition.toString() : undefined;\n\n                // in a parent/child pair, linkId contains the parent's id in both records\n                applianceBusinessModel.parentId = applianceApiModel.linkId && applianceApiModel.linkId !== applianceApiModel.id ? applianceApiModel.linkId : undefined;\n\n                if (applianceApiModel.chirp) {\n                    applianceBusinessModel.preVisitChirpCode = new ChirpCode();\n                    applianceBusinessModel.preVisitChirpCode.code = applianceApiModel.chirp.iaciCode;\n                    applianceBusinessModel.preVisitChirpCode.date = applianceApiModel.chirp.iaciDate;\n                }\n\n                return this.populateBusinessModelFields(applianceBusinessModel, engineerWorkingSector)\n                    .then(() => this._dataStateManager.updateApplianceDataState(applianceBusinessModel, job))\n                    .then(() => {\n                        if (applianceApiModel.safety) {\n                            applianceBusinessModel.safety = this._applianceSafetyFactory.populatePreviousApplianceSafety(applianceApiModel.safety, applianceBusinessModel.safety);\n                        }\n\n                        return applianceBusinessModel;\n                    });\n            } else {\n                return undefined;\n            }\n\n        });\n    }\n\n    public createApplianceApiModel(job: Job, originalJob: Job,\n        applianceBusinessModel: ApplianceBusinessModel,\n        applianceIdToSequenceMap?: { [guid: string]: number }): Promise<ApplianceUpdateApiModel> {\n\n        let apiModel = this.createApiModel(applianceBusinessModel);\n\n        if (applianceBusinessModel.isDeleted) {\n            this.populateDeleteSpecificFields(apiModel, applianceBusinessModel);\n            return Promise.resolve(apiModel);\n        } else {\n            if (applianceBusinessModel.isCreated) {\n                this.populateCreateSpecificFields(apiModel, applianceBusinessModel, applianceIdToSequenceMap);\n            } else {\n                this.populateUpdateSpecificFields(apiModel, applianceBusinessModel);\n            }\n\n            let originalAppliance = this.getOriginalAppliance(applianceBusinessModel, originalJob);\n            this.populateCoreApplianceFields(apiModel, applianceBusinessModel, originalAppliance);\n\n            return this.populateCentralHeatingFields(apiModel, applianceBusinessModel, originalAppliance)\n                .then(() => this.populateLandlordFields(apiModel, applianceBusinessModel, job))\n                .then(() => this.populateSafetyFields(apiModel, applianceBusinessModel, job));\n        }\n    }\n\n    private createApiModel(applianceBusinessModel: ApplianceBusinessModel): ApplianceUpdateApiModel {\n        let updateMarker = applianceBusinessModel.isCreated ? \"C\" : applianceBusinessModel.isDeleted ? \"D\" : \"A\";\n        return <ApplianceUpdateApiModel>{\n            updateMarker,\n            applianceType: applianceBusinessModel.applianceType\n        };\n    }\n\n    private populateCreateSpecificFields(apiModel: ApplianceUpdateApiModel, applianceBusinessModel: ApplianceBusinessModel, applianceIdToSequenceMap?: { [guid: string]: number }): void {\n        apiModel.hardwareSequenceNumber = applianceIdToSequenceMap[applianceBusinessModel.id];\n        apiModel.linkId = applianceBusinessModel.parentId ? applianceIdToSequenceMap[applianceBusinessModel.parentId].toString() : undefined;\n    }\n\n    private populateUpdateSpecificFields(apiModel: ApplianceUpdateApiModel, applianceBusinessModel: ApplianceBusinessModel): void {\n        apiModel.id = applianceBusinessModel.id;\n    }\n\n    private populateDeleteSpecificFields(apiModel: ApplianceUpdateApiModel, applianceBusinessModel: ApplianceBusinessModel): void {\n        apiModel.id = applianceBusinessModel.id;\n    }\n\n    private getOriginalAppliance(applianceBusinessModel: ApplianceBusinessModel, originalJob: Job): ApplianceBusinessModel {\n        return !applianceBusinessModel.isCreated\n            && originalJob\n            && originalJob.history\n            && originalJob.history.appliances\n            && originalJob.history.appliances.find(appl => appl.id === applianceBusinessModel.id);\n    }\n\n    private populateCoreApplianceFields(apiModel: ApplianceUpdateApiModel, applianceBusinessModel: ApplianceBusinessModel, originalAppliance: ApplianceBusinessModel): void {\n\n        if (!originalAppliance || applianceBusinessModel.installationYear !== originalAppliance.installationYear) {\n            apiModel.installationYear = applianceBusinessModel.installationYear;\n        }\n        if (!originalAppliance || applianceBusinessModel.description !== originalAppliance.description) {\n            apiModel.description = applianceBusinessModel.description;\n        }\n        if (!originalAppliance || applianceBusinessModel.flueType !== originalAppliance.flueType) {\n            apiModel.flueType = applianceBusinessModel.flueType;\n        }\n        if (!originalAppliance || applianceBusinessModel.gcCode !== originalAppliance.gcCode) {\n            apiModel.gcCode = applianceBusinessModel.gcCode;\n        }\n        if (!originalAppliance || applianceBusinessModel.locationDescription !== originalAppliance.locationDescription) {\n            apiModel.locationDescription = applianceBusinessModel.locationDescription;\n        }\n        if (!originalAppliance || applianceBusinessModel.serialId !== originalAppliance.serialId) {\n            apiModel.serialId = applianceBusinessModel.serialId;\n        }\n\n        if (!originalAppliance || applianceBusinessModel.notes !== originalAppliance.notes) {\n            apiModel.scmsText = applianceBusinessModel.notes;\n        }\n\n        let santizeBgInstallationIndicator = (bgInstallationIndicator: boolean) => {\n            return bgInstallationIndicator === undefined ? undefined : (bgInstallationIndicator ? \"1\" : \"0\");\n        };\n\n        if (!originalAppliance || santizeBgInstallationIndicator(applianceBusinessModel.bgInstallationIndicator) !== santizeBgInstallationIndicator(originalAppliance.bgInstallationIndicator)) {\n            apiModel.bgInstallationIndicator = santizeBgInstallationIndicator(applianceBusinessModel.bgInstallationIndicator);\n        }\n    }\n\n    private populateCentralHeatingFields(apiModel: ApplianceUpdateApiModel, applianceBusinessModel: ApplianceBusinessModel, originalAppliance: ApplianceBusinessModel): Promise<void> {\n\n        return this._businessRuleService.getQueryableRuleGroup(\"applianceDetails\")\n            .then(ruleGroup => {\n                if (applianceBusinessModel.category && applianceBusinessModel.category === ruleGroup.getBusinessRule<string>(\"centralHeatingApplianceHardwareCategory\")) {\n\n                    if (!originalAppliance || applianceBusinessModel.condition !== originalAppliance.condition) {\n                        apiModel.condition = applianceBusinessModel.condition;\n                    }\n                    if (!originalAppliance || applianceBusinessModel.boilerSize !== originalAppliance.boilerSize) {\n                        apiModel.boilerSize = applianceBusinessModel.boilerSize;\n                    }\n                    if (!originalAppliance || applianceBusinessModel.numberOfRadiators !== originalAppliance.numberOfRadiators) {\n                        apiModel.numberOfRadiators = applianceBusinessModel.numberOfRadiators;\n                    }\n                    if (!originalAppliance || applianceBusinessModel.energyControl !== originalAppliance.energyControl) {\n                        apiModel.energyControl = applianceBusinessModel.energyControl;\n                    }\n                    if (!originalAppliance || applianceBusinessModel.systemType !== originalAppliance.systemType) {\n                        apiModel.systemType = applianceBusinessModel.systemType;\n                    }\n                    if (!originalAppliance || applianceBusinessModel.systemDesignCondition !== originalAppliance.systemDesignCondition) {\n                        apiModel.systemDesignCondition = applianceBusinessModel.systemDesignCondition;\n                    }\n                    if (!originalAppliance || applianceBusinessModel.cylinderType !== originalAppliance.cylinderType) {\n                        apiModel.cylinderType = applianceBusinessModel.cylinderType;\n                    }\n                    if (!originalAppliance || applianceBusinessModel.numberOfSpecialRadiators !== originalAppliance.numberOfSpecialRadiators) {\n                        apiModel.numberofSpecialRadiators = applianceBusinessModel.numberOfSpecialRadiators;\n                    }\n                }\n            });\n    }\n\n    private populateSafetyFields(apiModel: ApplianceUpdateApiModel, applianceBusinessModel: ApplianceBusinessModel, job: Job): Promise<ApplianceUpdateApiModel> {\n        return Promise.all<IReading[], IApplianceSafety>([\n            this._readingFactory.createReadingApiModels(applianceBusinessModel),\n            this._applianceSafetyFactory.createApplianceSafetyApiModel(applianceBusinessModel,\n                job.propertySafety && job.propertySafety.propertyGasSafetyDetail,\n                job.propertySafety && job.propertySafety.propertyUnsafeDetail)\n\n        ]).then(([readings, safety]) => {\n            apiModel.readings = readings;\n            apiModel.safety = safety;\n            return apiModel;\n        });\n    }\n\n    private populateLandlordFields(apiModel: ApplianceUpdateApiModel, applianceBusinessModel: ApplianceBusinessModel, job: Job): Promise<ApplianceUpdateApiModel> {\n\n        if (!job.isLandlordJob) {\n            return Promise.resolve(apiModel);\n        }\n\n        return Promise.all<QueryableBusinessRuleGroup, QueryableBusinessRuleGroup, ISafetyAction[]>([\n            this._businessRuleService.getQueryableRuleGroup(StringHelper.toCamelCase(ObjectHelper.getClassName(this))),\n            this._businessRuleService.getQueryableRuleGroup(\"landlordSafetyCertificate\"),\n            this._catalogService.getSafetyActions()\n        ]).then(([applianceBusinessRules, landlordBusinessRules, actions]) => {\n\n            if (applianceBusinessModel.isSafetyRequired && !applianceBusinessModel.isInstPremAppliance) {\n\n                let certificateDefect = this._landlordFactory.createLandlordSafetyCertificateDefect(applianceBusinessModel, landlordBusinessRules, actions);\n                apiModel.detailsOfAnyDefectsIdentifiedText = certificateDefect.details;\n                apiModel.remedialActionTakenText = certificateDefect.actionTakenText;\n\n                return this._landlordFactory.createLandlordSafetyCertificateAppliance(applianceBusinessModel, landlordBusinessRules)\n                    .then((certificateAppliance) => {\n                        if (certificateAppliance) {\n                            apiModel.safetyDeviceCorrectOperation = MiddlewareHelper.getYNXForYesNoNa(certificateAppliance.safetyDeviceCorrectOperation, undefined);\n                            apiModel.make = certificateAppliance.make;\n                            apiModel.model = certificateAppliance.model;\n                            apiModel.flueFlowTest = MiddlewareHelper.getPFXForYesNoNa(certificateAppliance.flueFlowTest);\n                            apiModel.spillageTest = MiddlewareHelper.getPFXForYesNoNa(certificateAppliance.spillageTest);\n                            apiModel.requestedToTest = !!certificateAppliance.requestedToTest;\n                            apiModel.unableToTest = !!certificateAppliance.unableToTest;\n\n                        }\n                        return apiModel;\n                    });\n            } else if (applianceBusinessModel.contractType === applianceBusinessRules.getBusinessRule<string>(\"instPremApplianceContractType\")) {\n\n                let certificateResult = this._landlordFactory.createLandlordSafetyCertificateResult(job.propertySafety, landlordBusinessRules, actions);\n                apiModel.gasInstallationSoundnessTest = MiddlewareHelper.getPFXForYesNoNa(certificateResult.gasInstallationTightnessTestAndVisualInspectionOfPipeworkPass);\n                apiModel.detailsOfAnyDefectsIdentifiedText = certificateResult.propertySafetyDefect.details;\n                apiModel.remedialActionTakenText = certificateResult.propertySafetyDefect.actionTakenText;\n                apiModel.requestedToTest = true;\n                apiModel.unableToTest = false;\n\n            } else if (applianceBusinessModel.isInstPremAppliance) {\n\n                apiModel.requestedToTest = true;\n\n                let certificateResult = this._landlordFactory.createLandlordSafetyCertificateResult(job.propertySafety, landlordBusinessRules, actions);\n\n                if (job.propertySafety.propertyGasSafetyDetail.gasInstallationTightnessTestDone === true) {\n                    apiModel.unableToTest = false;\n                } else {\n                    apiModel.unableToTest = true;\n                }\n\n                apiModel.gasInstallationSoundnessTest = MiddlewareHelper.getPFXForYesNoNa(certificateResult.gasInstallationTightnessTestAndVisualInspectionOfPipeworkPass);\n                apiModel.detailsOfAnyDefectsIdentifiedText = certificateResult.propertySafetyDefect.details;\n                apiModel.remedialActionTakenText = certificateResult.propertySafetyDefect.actionTakenText;\n            }\n\n            return apiModel;\n        });\n    }\n}\n"],"sourceRoot":"../../.."}