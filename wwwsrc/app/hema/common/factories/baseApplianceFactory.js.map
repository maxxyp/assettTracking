{"version":3,"sources":["hema/common/factories/baseApplianceFactory.ts"],"names":[],"mappings":"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","file":"baseApplianceFactory.js","sourcesContent":["import { IBaseApplianceFactory } from \"./interfaces/IBaseApplianceFactory\";\r\nimport { BusinessRuleService } from \"../../business/services/businessRuleService\";\r\nimport { inject } from \"aurelia-dependency-injection\";\r\nimport { CatalogService } from \"../../business/services/catalogService\";\r\nimport { IBusinessRuleService } from \"../../business/services/interfaces/IBusinessRuleService\";\r\nimport { ICatalogService } from \"../../business/services/interfaces/ICatalogService\";\r\nimport { Appliance } from \"../../business/models/appliance\";\r\nimport { BusinessException } from \"../../business/models/businessException\";\r\nimport { ApplianceSafetyType } from \"../../business/models/applianceSafetyType\";\r\n\r\n@inject(BusinessRuleService, CatalogService)\r\nexport class BaseApplianceFactory implements IBaseApplianceFactory {\r\n\r\n    protected _businessRuleService: IBusinessRuleService;\r\n    protected _catalogService: ICatalogService;\r\n\r\n    constructor(businessRuleService: IBusinessRuleService,\r\n                catalogService: ICatalogService) {\r\n\r\n        this._businessRuleService = businessRuleService;\r\n        this._catalogService = catalogService;\r\n    }\r\n\r\n    public calculateApplianceSafetyType(applianceType: string, engineerWorkingSector: string): Promise<ApplianceSafetyType> {\r\n        let electricalWorkingSector: string = undefined;\r\n        let applianceCategoryOther: string = undefined;\r\n        let applianceCategoryElectrical: string = undefined;\r\n        let applianceCategoryGas: string = undefined;\r\n        let applianceTypesToUseEngineerPatchInsteadToCalculateSafetyType: string = undefined;\r\n\r\n        return this._businessRuleService.getQueryableRuleGroup(\"applianceFactory\")\r\n            .then((businessRules) => {\r\n                applianceTypesToUseEngineerPatchInsteadToCalculateSafetyType = businessRules.getBusinessRule<string>(\"applianceTypesToUseEngineerPatchInsteadToCalculateSafetyType\");\r\n                applianceCategoryOther = businessRules.getBusinessRule<string>(\"applianceCategoryOther\");\r\n                applianceCategoryElectrical = businessRules.getBusinessRule<string>(\"applianceCategoryElectrical\");\r\n                applianceCategoryGas = businessRules.getBusinessRule<string>(\"applianceCategoryGas\");\r\n                electricalWorkingSector = businessRules.getBusinessRule<string>(\"electricalWorkingSector\");\r\n            })\r\n            .then(() => this._catalogService.getObjectType(applianceType))\r\n            .then((applianceCatalogObjectType) => {\r\n\r\n                // check all the required lookup exist\r\n                if (applianceCategoryOther && applianceCategoryElectrical && applianceCategoryGas && electricalWorkingSector) {\r\n\r\n                    if (applianceCatalogObjectType) {\r\n\r\n                        // if special appliance, use engineer\r\n                        // otherwise use appliance type\r\n\r\n                        if (applianceTypesToUseEngineerPatchInsteadToCalculateSafetyType\r\n                            && applianceTypesToUseEngineerPatchInsteadToCalculateSafetyType.split(\",\").some(x => x === applianceType)) {\r\n                            // this is a special appliance\r\n                            if (applianceCatalogObjectType.applianceCategory === applianceCategoryOther) {\r\n                                return ApplianceSafetyType.other;\r\n                            } else {\r\n                                if (electricalWorkingSector === engineerWorkingSector) {\r\n                                    return ApplianceSafetyType.electrical;\r\n                                } else {\r\n                                    return ApplianceSafetyType.gas;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            switch (applianceCatalogObjectType.applianceCategory) {\r\n                                case applianceCategoryGas:\r\n                                    return ApplianceSafetyType.gas;\r\n                                case applianceCategoryElectrical:\r\n                                    return ApplianceSafetyType.electrical;\r\n                                case applianceCategoryOther:\r\n                                    return ApplianceSafetyType.other;\r\n                                default:\r\n                                    throw new BusinessException(this, \"calculateApplianceSafetyType\", \"Unknown appliance category detected\", null, null);\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        // throw exception required lookup values not found\r\n                        throw new BusinessException(this, \"calculateApplianceSafetyType\", \"Required catalog lookup not found\", null, null);\r\n                    }\r\n                } else {\r\n                    // throw exception required lookup values not found\r\n                    throw new BusinessException(this, \"calculateApplianceSafetyType\", \"Required business rules lookup not found\", null, null);\r\n                }\r\n            });\r\n    }\r\n\r\n    public populateBusinessModelFields(appliance: Appliance, engineerWorkingSector: string): Promise<void> {\r\n        // get the business rules\r\n        let hardwareCategoryForCentralHeatingAppliance: string;\r\n        let instPremApplianceType: string;\r\n\r\n        return this.calculateApplianceSafetyType(appliance.applianceType, engineerWorkingSector)\r\n            .then((applianceSafetyType) => {\r\n                appliance.applianceSafetyType = applianceSafetyType;\r\n\r\n                return this._businessRuleService.getQueryableRuleGroup(\"applianceFactory\");\r\n            })\r\n            .then((businessRules) => {\r\n                hardwareCategoryForCentralHeatingAppliance = businessRules.getBusinessRule<string>(\"hardWareCatForCHAppliance\");\r\n                instPremApplianceType = businessRules.getBusinessRule<string>(\"instPremApplianceType\");\r\n            })\r\n            .then(() => this._catalogService.getObjectType(appliance.applianceType))\r\n            .then((applianceCatalogObjectType) => {\r\n\r\n                // check all the required lookup exist\r\n                if (hardwareCategoryForCentralHeatingAppliance && instPremApplianceType\r\n                    && applianceCatalogObjectType) {\r\n\r\n                    // central heating appliance\r\n                    appliance.isCentralHeatingAppliance = applianceCatalogObjectType.category === hardwareCategoryForCentralHeatingAppliance;\r\n\r\n                    // instPrem appliance\r\n                    appliance.isInstPremAppliance = instPremApplianceType === appliance.applianceType;\r\n                } else {\r\n                    // throw exception required lookup values not found\r\n                    throw new BusinessException(this, \"populateBusinessModelFields\", \"Required business rules/catalog lookup not found\", null, null);\r\n                }\r\n            });\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../../.."}