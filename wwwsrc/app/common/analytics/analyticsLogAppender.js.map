{"version":3,"sources":["common/analytics/analyticsLogAppender.ts"],"names":[],"mappings":";;;;;;;;;;;;IAOA;QAII,8BAAY,SAA4B;YACpC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAChC,CAAC;QAEM,oCAAK,GAAZ,UAAa,MAAc;YAAE,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,6BAAc;;QAC3C,CAAC;QAEM,mCAAI,GAAX,UAAY,MAAc;YAAE,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,6BAAc;;QAC1C,CAAC;QAEM,mCAAI,GAAX,UAAY,MAAc;YAAE,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,6BAAc;;QAC1C,CAAC;QAED,2DAA2D;QAC3D,kEAAkE;QAClE,mBAAmB;QACZ,oCAAK,GAAZ,UAAa,MAAc;YAAE,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,6BAAc;;YACvC,IAAI,CAAC;gBACD,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;oBACjB,IAAI,SAAS,GAA4B,IAAI,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,YAAY,iDAAuB,EAA7D,CAA6D,CAAC,CAAC;oBACvH,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACZ,SAAS,CAAC,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC;wBAC/B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;wBACxE,MAAM,CAAC;oBACX,CAAC;gBACL,CAAC;gBACD,MAAM,CAAC;YACX,CAAC;YAAC,KAAK,CAAC,CAAC,IAAD,CAAC;gBACL,aAAa;YACjB,CAAC;QACL,CAAC;QAlCQ,oBAAoB;YADhC,qCAAM,CAAC,qBAAS,CAAC;;WACL,oBAAoB,CAoChC;QAAD,2BAAC;KApCD,AAoCC,IAAA;IApCY,oDAAoB","file":"analyticsLogAppender.js","sourcesContent":["import { inject } from \"aurelia-dependency-injection\";\nimport { Analytics } from \"./analytics\";\nimport { IAnalyticsService } from \"./IAnalyticsService\";\nimport { Logger, Appender } from \"aurelia-logging\";\nimport { AnalyticsExceptionModel } from \"./analyticsExceptionModel\";\n\n@inject(Analytics)\nexport class AnalyticsLogAppender implements Appender {\n\n    private _analytics: IAnalyticsService;\n\n    constructor(analytics: IAnalyticsService) {\n        this._analytics = analytics;\n    }\n\n    public debug(logger: Logger, ...rest: any[]): void {\n    }\n\n    public info(logger: Logger, ...rest: any[]): void {\n    }\n\n    public warn(logger: Logger, ...rest: any[]): void {\n    }\n\n    // find the object which is of type AnalyticsExceptionModel\n    // if any exception happens during the execution of the following,\n    // just swallow it.\n    public error(logger: Logger, ...rest: any[]): void {\n        try {\n            if (logger && rest) {\n                let exception: AnalyticsExceptionModel = rest.find(x => typeof x === \"object\" && x instanceof AnalyticsExceptionModel);\n                if (exception) {\n                    exception.loggerId = logger.id;\n                    this._analytics.exception(JSON.stringify(exception), exception.isFatal);\n                    return;\n                }\n            }\n            return;\n        } catch {\n            // do nothing\n        }\n    }\n\n}\n"],"sourceRoot":"../.."}