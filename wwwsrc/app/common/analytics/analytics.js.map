{"version":3,"sources":["common/analytics/analytics.ts"],"names":[],"mappings":"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","file":"analytics.js","sourcesContent":["import * as ga from \"universal-ga\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { IConfigurationService } from \"../core/services/IConfigurationService\";\nimport { IAppMetaDataService } from \"../core/services/IAppMetaDataService\";\nimport { IAnalyticsConfiguration } from \"./IAnalyticsConfiguration\";\nimport { inject } from \"aurelia-framework\";\nimport { ConfigurationService } from \"../core/services/configurationService\";\nimport { AppMetaDataService } from \"../core/services/appMetaDataService\";\nimport { NavigationInstruction } from \"aurelia-router\";\nimport { IAppMetaData } from \"../core/services/IAppMetaData\";\nimport { IAnalyticsService } from \"./IAnalyticsService\";\nimport * as Logging from \"aurelia-logging\";\nimport { IAnalyticsEvent } from \"./IAnalyticsEvent\";\nimport { AnalyticsConstants } from \"./analyticsConstants\";\nimport { ENGINEER_ID_DIEMENTION4, ENGINEER_GEO_POSITION_DIEMENTION5, UNIQUE_ID_DIEMENTION7 } from \"./analyticsCustomDimentions\";\nimport { GpsService } from \"../geo/gpsService\";\nimport { IGpsService } from \"../geo/IGpsService\";\n\n@inject(EventAggregator, ConfigurationService, AppMetaDataService, GpsService)\nexport class Analytics implements IAnalyticsService {\n\n    private _eventAggregator: EventAggregator;\n    private _configurationService: IConfigurationService;\n    private _appMetaDataService: IAppMetaDataService;\n    private _gpsService: IGpsService;\n\n    private _bootstrapped: boolean;\n    private _logger: Logging.Logger;\n    private _config: IAnalyticsConfiguration;\n\n    private _lastCustomData: string;\n\n    constructor(eventAggregator: EventAggregator,\n        configurationService: IConfigurationService,\n        appMetaDataService: IAppMetaDataService,\n        gpsService: IGpsService) {\n        this._eventAggregator = eventAggregator;\n        this._configurationService = configurationService;\n        this._appMetaDataService = appMetaDataService;\n        this._gpsService = gpsService;\n\n        this._bootstrapped = false;\n        this._logger = Logging.getLogger(\"Analytics\");\n    }\n\n    public initialize(userId?: string, opts?: { trackNavigation?: boolean }): Promise<void> {\n        this._config = this._configurationService.getConfiguration<IAnalyticsConfiguration>();\n        if (this._config && this._config.analyticsEnabled) {\n            return this._appMetaDataService.get()\n                .then(metaData => {\n                    ga.initialize(this._config.analyticsTrackingId, { debug: true });\n                    // hack - fix issue when running as WUA app.\n                    (<any>window).ga(\"set\", \"checkProtocolTask\", () => { });\n                    ga.set(\"appName\", metaData.appName);\n                    ga.set(\"appId\", metaData.appId);\n                    ga.set(\"appVersion\", metaData.appVersion);\n                    ga.set(\"appInstallerId\", metaData.appInstallerId);\n\n                    if (!!userId) {\n                        ga.set(ENGINEER_ID_DIEMENTION4, userId);\n                        this.logGeoPosition();\n                    }\n\n                    this._logger.debug(\"initalised.\");\n\n                    if (opts && !!opts.trackNavigation) {\n                        this.trackRouterNavigation(metaData);\n                        this._logger.debug(\"tracking router navigation.\");\n                    }\n                    this._eventAggregator.subscribe(AnalyticsConstants.ANALYTICS_EVENT, (event: IAnalyticsEvent) => {\n                        try {\n                            if (event) {\n                                ga.set(UNIQUE_ID_DIEMENTION7, Date.now() + \"\");\n                                (<any>ga).event(event.category, event.action, {\n                                    \"eventLabel\": event.label,\n                                    \"eventValue\": event.metric\n                                });\n                            }\n                        } catch {\n                            // do nothing\n                        }\n                    });\n                    this._bootstrapped = true;\n                    this._logger.info(\"bootstrapped.\");\n                })\n                .catch(err => {\n                    this._logger.debug(err);\n                });\n        }\n\n        this._logger.info(\"No analytics configuration defined.\");\n        return Promise.resolve();\n    }\n    public setUserId(userId: string): void {\n        if (userId) {\n            ga.set(ENGINEER_ID_DIEMENTION4, userId);\n        }\n    }\n\n    public setCustomMetaData(data: { [index: string]: string }, customDimensionMap: { [index: string]: keyof ga.IFieldObjectDimension }): void {\n        let hash = JSON.stringify(data);\n\n        if (this._bootstrapped && hash !== this._lastCustomData) {\n            this._lastCustomData = hash;\n\n            Object.keys(customDimensionMap).map(mapKey => {\n                let mapKeyValue = customDimensionMap[mapKey];\n                let attribute = data && data[mapKey];\n                if (attribute) {\n                    ga.set(mapKeyValue, attribute);\n                }\n            });\n        }\n    }\n\n    public exception(errorMessage: string, isFatal: boolean): void {\n        if (this._bootstrapped) {\n            try {\n                ga.exception(errorMessage, isFatal);\n            } catch {\n                // do nothing\n            }\n        }\n    }\n\n    public logGeoPosition(): void {\n        try {\n            if (this._config && this._config.analyticsEnabled && this._config.logGeoLocation) {\n                this._gpsService.getLocation().then((location) => {\n                    if (location && location.latitude && location.longitude) {\n                        ga.set(ENGINEER_GEO_POSITION_DIEMENTION5, location.latitude + \",\" + location.longitude);\n                    }\n                }).catch(() => { /* do nothing */ });\n            }\n        } catch {\n            // do nothing\n        }\n    }\n\n    private trackRouterNavigation(metaData: IAppMetaData): void {\n        this._eventAggregator.subscribe(\"router:navigation:complete\", (params: {\n            instruction: NavigationInstruction,\n            result: { completed: boolean }\n        }) => {\n            let targetInstruction = (params.instruction.getAllInstructions() || []).splice(-1)[0];\n            if (params && params.result && params.result && targetInstruction && targetInstruction.config && targetInstruction.config.name) {\n                ga.screenview(targetInstruction.config.name);\n            }\n        });\n    }\n}\n"],"sourceRoot":"../.."}