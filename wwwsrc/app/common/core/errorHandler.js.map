{"version":3,"sources":["common/core/errorHandler.ts"],"names":[],"mappings":"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","file":"errorHandler.js","sourcesContent":["import {Aurelia} from \"aurelia-framework\";\nimport {BaseException} from \"./models/baseException\";\nimport * as Logging from \"aurelia-logging\";\n\nexport class ErrorHandler {\n    public static customErrorHandler: (error: BaseException) => void;\n\n    public static init(aurelia: Aurelia): Promise<Aurelia> {\n        let appLogger = Logging.getLogger(\"appLogger\");\n        window.onerror = (msg: string, url: string, line: number, col: number, error: Error) => {\n            try {\n                let message: string = \"DEVELOPMENT ERROR: \" + msg + \"\\nurl: \" + url + \"\\nline: \" + line;\n\n                if (col) {\n                    message += \"\\ncolumn: \" + col;\n                }\n                if (error) {\n                    message += \"\\nerror: \" + error;\n                }\n\n                if (ErrorHandler.customErrorHandler) {\n                    ErrorHandler.customErrorHandler(new BaseException(undefined, undefined, message, undefined, error));\n                } else {\n                    \n                    appLogger.error(message);\n\n                    /* tslint:disable:no-console ban-functions */\n                    console.error(message);\n\n                    alert(message);\n                }\n                /* tslint:enable:no-console ban-functions */\n            } catch (e) {\n                /* Dont want to cause another exception we will get stuck in an infinite loop */\n            }\n\n            /* Return true to suppress default error alert */\n            return true;\n        };\n\n        Promise.onPossiblyUnhandledRejection((reason) => {\n            try {\n                let message: any;\n\n                if (reason instanceof BaseException) {\n                    message = reason;\n                } else {\n                    let cache: any[] = [];\n                    /* avoid circular objects */\n                    let objectJson: string = \"\";\n\n                    if (reason.message && reason.stack) {\n                        objectJson += reason.message + \"\\r\\n\" + reason.stack;\n                    } else {\n                        objectJson = JSON.stringify(reason, (key, value) => {\n                            if (typeof value === \"object\" && value !== null) {\n                                if (cache.indexOf(value) !== -1) {\n                                    /* circular reference found, discard key */\n                                    return;\n                                }\n                                /* circular reference found, discard key */\n                                cache.push(value);\n                            }\n                            return value;\n                        });\n                    }\n\n                    message = \"UNHANDLED EXCEPTION ERROR:\\r\\n\" + objectJson;\n                }\n\n                if (ErrorHandler.customErrorHandler) {\n                    ErrorHandler.customErrorHandler(new BaseException(undefined, undefined, message, undefined, undefined));\n                } else {\n                    appLogger.error(message);\n\n                    /* tslint:disable:no-console ban-functions */\n                    console.error(message);\n\n                    alert(message);\n                    /* tslint:enable:no-console ban-functions */\n                }\n            } catch (e) {\n                /* Dont want to cause another exception we will get stuck in an infinite loop */\n            }\n        });\n\n        return Promise.resolve(aurelia);\n    }\n}\n"],"sourceRoot":"../.."}