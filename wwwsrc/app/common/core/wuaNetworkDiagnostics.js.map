{"version":3,"sources":["common/core/wuaNetworkDiagnostics.ts"],"names":[],"mappings":"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","file":"wuaNetworkDiagnostics.js","sourcesContent":["import { EventAggregator } from \"aurelia-event-aggregator\";\r\nimport { PlatformHelper } from \"./platformHelper\";\r\nimport { inject } from \"aurelia-framework\";\r\nimport { WuaNetworkDiagnosticsResult } from \"./wuaNetworkDiagnosticsResult\";\r\nimport { WuaNetworkDiagnosticsConstants } from \"./constants/wuaNetworkDiagnosticsConstants\";\r\n\r\nconst PRIVATE_NETWORK_STATUS_CHANGED = \"networkstatuschanged\";\r\n@inject(EventAggregator)\r\nexport class WuaNetworkDiagnostics {\r\n\r\n    private _eventAggregator: EventAggregator;\r\n    private _isInternetConnected: boolean;\r\n\r\n    constructor(eventAggregator: EventAggregator) {\r\n        if (!PlatformHelper.isWua()) {\r\n            this._isInternetConnected = true;\r\n            return;\r\n        }\r\n\r\n        this._eventAggregator = eventAggregator;\r\n\r\n        const setIsInternetConnected = () => {\r\n            const connectionProfile = Windows.Networking.Connectivity.NetworkInformation.getInternetConnectionProfile();\r\n            this._isInternetConnected = !!(connectionProfile && (connectionProfile.isWlanConnectionProfile || connectionProfile.isWwanConnectionProfile));\r\n        };\r\n\r\n        Windows.Networking.Connectivity.NetworkInformation.addEventListener(\r\n            PRIVATE_NETWORK_STATUS_CHANGED,\r\n            () => {\r\n                setIsInternetConnected();\r\n                this._eventAggregator.publish(WuaNetworkDiagnosticsConstants.NETWORK_STATUS_CHANGED, this._isInternetConnected);\r\n            }\r\n        );\r\n        setIsInternetConnected();\r\n    }\r\n\r\n    public isInternetConnected(): boolean {\r\n        return !!this._isInternetConnected;\r\n    }\r\n\r\n    public getDiagnostics() : WuaNetworkDiagnosticsResult {\r\n        if (!PlatformHelper.isWua()) {\r\n            return {\r\n                connection: \"not-uwp-platform\"\r\n            };\r\n        }\r\n\r\n        try {\r\n            const connectionProfile = Windows.Networking.Connectivity.NetworkInformation.getInternetConnectionProfile();\r\n            if (!connectionProfile) {\r\n                return {\r\n                    connection: \"no-connection-found\"\r\n                };\r\n            }\r\n\r\n            const {internetAccess, localAccess, constrainedInternetAccess} = Windows.Networking.Connectivity.NetworkConnectivityLevel;\r\n            const connectivityLevelId = connectionProfile.getNetworkConnectivityLevel();\r\n\r\n            let connectivityLevel;\r\n            switch (connectivityLevelId) {\r\n                case localAccess:\r\n                    connectivityLevel = \"Local Access\";\r\n                    break;\r\n                case constrainedInternetAccess:\r\n                    connectivityLevel = \"Constrained Internet Access\";\r\n                    break;\r\n                case internetAccess:\r\n                    connectivityLevel = \"Internet Access\";\r\n                    break;\r\n                default:\r\n                    connectivityLevel = \"Don't Know: \" + connectivityLevelId;\r\n                    break;\r\n            }\r\n\r\n            const {authenticated, unauthenticated} = Windows.Networking.Connectivity.DomainConnectivityLevel;\r\n            const domainConnectivityLevelValue = connectionProfile.getDomainConnectivityLevel();\r\n\r\n            let domainConnectivityLevel;\r\n            switch (domainConnectivityLevelValue) {\r\n                case authenticated:\r\n                    domainConnectivityLevel = \"authenticated\";\r\n                    break;\r\n                case unauthenticated:\r\n                    domainConnectivityLevel = \"unauthenticated\";\r\n                    break;\r\n                default:\r\n                    domainConnectivityLevel = \"Don't Know: \" + domainConnectivityLevelValue;\r\n                    break;\r\n            }\r\n\r\n            let result = <any>{\r\n                connectivityLevel,\r\n                domainConnectivityLevel,\r\n                connection: \"none\"\r\n            };\r\n\r\n            if (connectionProfile.isWlanConnectionProfile) {\r\n                const details = connectionProfile.wlanConnectionProfileDetails;\r\n                result = { ...result,\r\n                            connection: \"wlan\",\r\n                            ssid: details && details.getConnectedSsid()\r\n                };\r\n\r\n            } else if (connectionProfile.isWwanConnectionProfile) {\r\n                let details = connectionProfile.wwanConnectionProfileDetails;\r\n                const {none, deregistered, searching, home, roaming, partner, denied} = Windows.Networking.Connectivity.WwanNetworkRegistrationState;\r\n\r\n                let networkRegistrationStateId = details && details.getNetworkRegistrationState();\r\n                let networkRegistrationState;\r\n                switch (networkRegistrationStateId) {\r\n                    case none:\r\n                        networkRegistrationState = \"None\";\r\n                        break;\r\n                    case deregistered:\r\n                        networkRegistrationState = \"Deregeistered\";\r\n                        break;\r\n                    case searching:\r\n                        networkRegistrationState = \"Searching\";\r\n                        break;\r\n                    case home:\r\n                        networkRegistrationState = \"Home\";\r\n                        break;\r\n                    case roaming:\r\n                        networkRegistrationState = \"Roaming\";\r\n                        break;\r\n                    case partner:\r\n                        networkRegistrationState = \"Partner\";\r\n                        break;\r\n                    case denied:\r\n                        networkRegistrationState = \"Denied\";\r\n                        break;\r\n                    default:\r\n                        networkRegistrationState = \"Don't Know\";\r\n                }\r\n\r\n                result = {... result,\r\n                            connection: \"wwan\",\r\n                            signalBarsOf5: connectionProfile.getSignalBars(),\r\n                            accessPointName: details && details.accessPointName,\r\n                            homeProviderId: details && details.homeProviderId,\r\n                            networkRegistrationState\r\n                };\r\n            }\r\n\r\n            return result;\r\n\r\n        } catch (error) {\r\n            return {\r\n                connection: \"diagnostic-error\",\r\n                error: error && error.toString()\r\n            };\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}