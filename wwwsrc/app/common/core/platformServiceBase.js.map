{"version":3,"sources":["common/core/platformServiceBase.ts"],"names":[],"mappings":"AAAA,kDAAkD;;;;IAKlD;QAKI,6BAAY,aAAqB,EAAE,WAAmB;YAClD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;YACpC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACzB,CAAC;QAEM,wCAAU,GAAjB,UAAkB,OAAU;YACxB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAC5B,CAAC;QAEM,wCAAU,GAAjB;YAAA,iBAeC;YAdG,MAAM,CAAC,IAAI,OAAO,CAAI,UAAC,OAAO,EAAE,MAAM;gBAClC,EAAE,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAChB,OAAO,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;gBAC3B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,+BAAc,CAAC,UAAU,CAAC,KAAI,CAAC,cAAc,EAAE,KAAI,CAAC,WAAW,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;yBAChF,IAAI,CAAC,UAAC,MAAW;wBACZ,KAAI,CAAC,QAAQ,GAAG,wCAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC;wBACrE,OAAO,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;oBAC3B,CAAC,CAAC;yBACD,KAAK,CAAC;wBACH,MAAM,CAAC,IAAI,CAAC,CAAC;oBACjB,CAAC,CAAC,CAAC;gBACX,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,yCAAW,GAAnB,UAAoB,IAAY;YAC5B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5D,CAAC;QACL,0BAAC;IAAD,CAnCA,AAmCC,IAAA;IAnCY,kDAAmB","file":"platformServiceBase.js","sourcesContent":["/// <reference path=\"../../../typings/app.d.ts\" />\n\nimport {PlatformHelper} from \"../../common/core/platformHelper\";\nimport {Container} from \"aurelia-dependency-injection\";\n\nexport class PlatformServiceBase<T> {\n    protected _service: T;\n    private _serviceFolder: string;\n    private _serviceName: string;\n\n    constructor(serviceFolder: string, serviceName: string) {\n        this._serviceFolder = serviceFolder;\n        this._serviceName = serviceName;\n        this._service = null;\n    }\n\n    public setService(service: T) : void {\n        this._service = service;\n    }\n\n    public loadModule(): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            if (this._service) {\n                resolve(this._service);\n            } else {\n                PlatformHelper.loadModule(this._serviceFolder, this.toCamelCase(this._serviceName))\n                  .then((module: any) => {\n                        this._service = Container.instance.invoke(module[this._serviceName]);\n                        resolve(this._service);\n                    })\n                    .catch(() => {\n                        reject(null);\n                    });\n            }\n        });\n    }\n\n    private toCamelCase(name: string): string {\n        return name.substr(0, 1).toLowerCase() + name.substr(1);\n    }\n}\n"],"sourceRoot":"../.."}