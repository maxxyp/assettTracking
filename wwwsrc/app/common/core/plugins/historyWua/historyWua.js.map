{"version":3,"sources":["common/core/plugins/historyWua/historyWua.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;IASA;QAAgC,8BAAO;QAKnC,oBAAY,WAAyB;YAArC,YACI,iBAAO,SAGV;YADG,KAAI,CAAC,YAAY,GAAG,WAAW,CAAC;;QACpC,CAAC;QAEM,6BAAQ,GAAf,UAAgB,OAAmE;YAC/E,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YAEjB,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,GAAG,CAAC;YAEnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC;YAE1C,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEjC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC;QAEM,+BAAU,GAAjB;YACI,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;QACnC,CAAC;QAEM,6BAAQ,GAAf,UAAgB,QAAgB,EAAE,OAA2B;YACzD,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC7C,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClC,CAAC;YAED,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YAE/C,IAAI,OAAO,GAAG,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;YAEzC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC;gBAC9D,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;gBACnD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC/B,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC;gBACzC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACxC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;QACL,CAAC;QAEM,iCAAY,GAAnB;YAAA,iBAKC;YAJG,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAClB,qBAAS,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAhC,CAAgC,CAAC,CAAC;YAChE,CAAC;QACL,CAAC;QAEM,6BAAQ,GAAf,UAAgB,KAAa;QAC7B,CAAC;QAEM,6BAAQ,GAAf,UAAgB,GAAW,EAAE,KAAU;QACvC,CAAC;QAEM,6BAAQ,GAAf,UAAgB,GAAW;QAE3B,CAAC;QAnEQ,UAAU;YADtB,qCAAM,CAAC,uCAAkB,CAAC;;WACd,UAAU,CAoEtB;QAAD,iBAAC;KApED,AAoEC,CApE+B,yBAAO,GAoEtC;IApEY,gCAAU","file":"historyWua.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\nimport { History } from \"aurelia-history\";\nimport { NavigationOptions } from \"aurelia-history\";\nimport { ILinkHandler } from \"./ILinkHandler\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { Threading } from \"../../threading\";\nimport { DefaultLinkHandler } from \"./defaultLinkHandler\";\n\n@inject(DefaultLinkHandler)\nexport class HistoryWua extends History {\n    private _stack: string[];\n    private _routeHandler: (route: string) => boolean;\n    private _linkHandler: ILinkHandler;\n\n    constructor(linkHandler: ILinkHandler) {\n        super();\n\n        this._linkHandler = linkHandler;\n    }\n\n    public activate(options: { root: string; routeHandler: (route: string) => boolean }): boolean {\n        this._stack = [];\n\n        options.root = options.root || \"/\";\n\n        this._stack.push(options.root);\n        this._routeHandler = options.routeHandler;\n\n        this._linkHandler.activate(this);\n\n        return this._routeHandler(options.root);\n    }\n\n    public deactivate(): void {\n        this._linkHandler.deactivate();\n    }\n\n    public navigate(fragment: string, options?: NavigationOptions): boolean {\n        if (fragment.length > 0 && fragment[0] === \"#\") {\n            fragment = fragment.substr(1);\n        }\n\n        fragment = fragment.replace(/^\\/+|\\/+$/g, \"/\");\n\n        let replace = options && options.replace;\n\n        if (this._stack[this._stack.length - 1] !== fragment || replace) {\n            if (replace) {\n                this._stack[this._stack.length - 1] = fragment;\n            } else {\n                this._stack.push(fragment);\n            }\n        }\n\n        if (!options || options.trigger || replace) {\n            return this._routeHandler(fragment);\n        } else {\n            return false;\n        }\n    }\n\n    public navigateBack(): void {\n        if (this._stack.length > 1) {\n            this._stack.pop();\n            Threading.nextCycle(() => this.navigate(this._stack.pop()));\n        }\n    }\n\n    public setTitle(title: string): void {\n    }\n\n    public setState(key: string, value: any): void {\n    }\n\n    public getState(key: string): any {\n        \n    }\n}\n"],"sourceRoot":"../../../.."}