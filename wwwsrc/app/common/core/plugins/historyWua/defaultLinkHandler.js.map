{"version":3,"sources":["common/core/plugins/historyWua/defaultLinkHandler.ts"],"names":[],"mappings":"AAAA,wDAAwD;;;;IAOxD;QAII;YAAA,iBAUC;YATG,IAAI,CAAC,QAAQ,GAAG,UAAC,CAAC;gBACd,IAAI,SAAS,GACP,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAE3B,EAAE,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBAC9B,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBAC3C,CAAC;YACL,CAAC,CAAC;QACN,CAAC;QAEM,qCAAQ,GAAf,UAAgB,OAAgB;YAC5B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,iBAAG,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACvD,CAAC;QAEM,uCAAU,GAAjB;YACI,iBAAG,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC1D,CAAC;QAEO,yCAAY,GAApB,UAAqB,KAAiB;YAClC,IAAI,IAAI,GAAgE;gBACpE,iBAAiB,EAAE,KAAK;gBACxB,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE,IAAI;aACf,CAAC;YAEF,IAAI,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAU,KAAK,CAAC,MAAM,CAAC,CAAC;YAC3D,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC5C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACvE,IAAI,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;oBACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBAEjB,IAAI,iBAAiB,GAAG,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC;oBAC1C,IAAI,UAAU,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;oBAEhD,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,UAAU,CAAC;gBAC7D,CAAC;YACL,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAEO,8CAAiB,GAAzB,UAA0B,EAAW;YACjC,OAAO,EAAE,EAAE,CAAC;gBACR,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC;oBACrB,KAAK,CAAC;gBACV,CAAC;gBAED,EAAE,GAAY,EAAE,CAAC,UAAU,CAAC;YAChC,CAAC;YAED,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QAEO,+CAAkB,GAA1B,UAA2B,MAAe;YACtC,IAAI,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACjD,IAAI,GAAG,GAAmB,sBAAQ,CAAC,MAAM,CAAC;YAE1C,MAAM,CAAC,CAAC,YAAY;gBAChB,YAAY,KAAK,GAAG,CAAC,IAAI;gBACzB,YAAY,KAAK,OAAO;gBACxB,CAAC,YAAY,KAAK,KAAK,IAAI,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;QACpD,CAAC;QACL,yBAAC;IAAD,CArEA,AAqEC,IAAA;IArEY,gDAAkB","file":"defaultLinkHandler.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\n\nimport {History} from \"aurelia-history\";\nimport {DOM} from \"aurelia-pal\";\nimport {PLATFORM} from \"aurelia-pal\";\nimport {ILinkHandler} from \"./ILinkHandler\";\n\nexport class DefaultLinkHandler implements ILinkHandler {\n    private _history: History;\n    private _handler: (event: MouseEvent) => void;\n\n    constructor() {\n        this._handler = (e) => {\n            let eventInfo: {shouldHandleEvent: boolean, href: string, anchor: Element}\n                = this.getEventInfo(e);\n\n            if (eventInfo.shouldHandleEvent) {\n                e.preventDefault();\n                this._history.navigate(eventInfo.href);\n            }\n        };\n    }\n\n    public activate(history: History): void {\n        this._history = history;\n        DOM.addEventListener(\"click\", this._handler, true);\n    }\n\n    public deactivate(): void {\n        DOM.removeEventListener(\"click\", this._handler, true);\n    }\n\n    private getEventInfo(event: MouseEvent): {shouldHandleEvent: boolean, href: string, anchor: Element} {\n        let info: {shouldHandleEvent: boolean, href: string, anchor: Element} = {\n            shouldHandleEvent: false,\n            href: null,\n            anchor: null\n        };\n\n        let target = this.findClosestAnchor(<Element>event.target);\n        if (target && this.targetIsThisWindow(target)) {\n            if (!event.altKey && !event.ctrlKey && !event.metaKey && !event.shiftKey) {\n                let href = target.getAttribute(\"href\");\n                info.anchor = target;\n                info.href = href;\n\n                let leftButtonClicked = event.which === 1;\n                let isRelative = href && href.charAt(0) === \"#\";\n\n                info.shouldHandleEvent = leftButtonClicked && isRelative;\n            }\n        }\n        return info;\n    }\n\n    private findClosestAnchor(el: Element): Element {\n        while (el) {\n            if (el.tagName === \"A\") {\n                break;\n            }\n\n            el = <Element>el.parentNode;\n        }\n\n        return el;\n    }\n\n    private targetIsThisWindow(target: Element): boolean {\n        let targetWindow = target.getAttribute(\"target\");\n        let win: Window = <Window>PLATFORM.global;\n\n        return !targetWindow ||\n            targetWindow === win.name ||\n            targetWindow === \"_self\" ||\n            (targetWindow === \"top\" && win === win.top);\n    }\n}\n"],"sourceRoot":"../../../.."}