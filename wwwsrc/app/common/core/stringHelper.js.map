{"version":3,"sources":["common/core/stringHelper.ts"],"names":[],"mappings":"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","file":"stringHelper.js","sourcesContent":["export class StringHelper {\n    public static toCamelCase(val: string): string {\n        return val && val.length > 0 ? val.substr(0, 1).toLowerCase() + val.substr(1) : val;\n    }\n\n    public static toSnakeCase(val: string): string {\n        return val && val.length > 0 ? StringHelper.toCamelCase(val).replace(/([A-Z])/g, (p1: string) => {\n            return \"-\" + p1;\n        }).toLowerCase() : val;\n    }\n\n    public static isString(value: any): boolean {\n        return value === null || value === undefined ? false : Object.prototype.toString.call(value) === \"[object String]\";\n    }\n\n    public static startsWith(value: string, test: string): boolean {\n        if (StringHelper.isString(value) &&\n            StringHelper.isString(test) &&\n            test.length > 0 &&\n            value.length >= test.length) {\n            return value.substr(0, test.length) === test;\n        } else {\n            return false;\n        }\n    }\n\n    public static endsWith(value: string, test: string): boolean {\n        if (StringHelper.isString(value) &&\n            StringHelper.isString(test) &&\n            test.length > 0 &&\n            value.length >= test.length) {\n            return value.substr(value.length - test.length) === test;\n        } else {\n            return false;\n        }\n    }\n\n    public static padLeft(value: string, pad: string, padLength: number): string {\n        if (StringHelper.isString(value) && StringHelper.isString(pad) && pad.length > 0 && padLength > value.length) {\n            let extra = \"\";\n\n            while ((extra.length + value.length) < padLength) {\n                extra += pad;\n            }\n\n            value = extra.substr(0, padLength - value.length) + value;\n        }\n\n        return value;\n    }\n\n    public static padRight(value: string, pad: string, padLength: number): string {\n        if (StringHelper.isString(value) && StringHelper.isString(pad) && pad.length > 0 && padLength > value.length) {\n            let extra = \"\";\n\n            while ((extra.length + value.length) < padLength) {\n                extra += pad;\n            }\n\n            value = value + extra.substr(0, padLength - value.length);\n        }\n\n        return value;\n    }\n\n    /*\n    * \n    * The splice() method changes the content of a string by removing a range of\n    * for e.g. StringHelper.splice(\"foo baz\", 4, 0, \"bar\") returns \"foo bar baz\"\n    * characters and/or adding new characters.\n    * start: start Index at which to start changing the String\n    * delCount: number of old chars to remove.\n    * subStr: the string that is spliced in.\n    * return : new string value;\n    */\n    public static splice(str: string, start: number, delCount: number, subStr: string): string {\n        return str.slice(0, start) + subStr + str.slice(start + Math.abs(delCount));\n    }\n\n    public static sanitizeSpecialCharacters(value: string): string {\n        if (!value) {\n            return \"\";\n        }\n        return value = value\n            .replace(/</gi, \"\")\n            .replace(/>/gi, \"\");\n    }\n\n    public static pluralise(val: number, singularStr: string): string {\n\n        if (val === undefined) {\n            return singularStr;\n        }\n\n        let returnStr = `${val} ${singularStr}`;\n\n        if (val > 1 || val === 0) {\n            return `${returnStr}s`;\n        }\n\n        return returnStr;\n    }\n\n    public static isEmptyOrUndefinedOrNull(value: string): boolean {\n        return value === undefined || value === null || value.trim().length === 0;\n    }\n}\n"],"sourceRoot":"../.."}