{"version":3,"sources":["common/core/numberHelper.ts"],"names":[],"mappings":";;;IAAA;QAAA;QA0CA,CAAC;QAzCiB,qBAAQ,GAAtB,UAAuB,KAAU;YAC7B,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;YACzE,CAAC;QACL,CAAC;QAEa,2BAAc,GAA5B,UAA6B,KAAU;YACnC,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;gBACnC,MAAM,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;YAC/E,CAAC;QACL,CAAC;QAEa,8BAAiB,GAA/B,UAAgC,KAAU;YACtC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;gBACnC,MAAM,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC;YACtD,CAAC;QACL,CAAC;QAEa,8BAAiB,GAA/B,UAAgC,KAAU;YACtC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;YAC5C,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;YAChD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;gBACnC,IAAI,OAAO,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC;gBACzD,MAAM,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;YACzE,CAAC;QACL,CAAC;QACL,mBAAC;IAAD,CA1CA,AA0CC,IAAA;IA1CY,oCAAY","file":"numberHelper.js","sourcesContent":["export class NumberHelper {\n    public static isNumber(value: any): boolean {\n        if (value === null || value === undefined) {\n            return false;\n        } else {\n            return typeof value === \"number\" && !isNaN(value) && isFinite(value);\n        }\n    }\n\n    public static coerceToNumber(value: any): number {\n        if (value === undefined) {\n            return undefined;\n        } else if (value === null) {\n            return null;\n        } else {\n            let floatValue = parseFloat(value);\n            return !isNaN(floatValue) && isFinite(floatValue) ? floatValue : undefined;\n        }\n    }\n\n    public static canCoerceToNumber(value: any): boolean {\n        if (value === null || value === undefined) {\n            return false;\n        } else if (isNaN(value)) {\n            return false;\n        } else {\n            let floatValue = parseFloat(value);\n            return !isNaN(floatValue) && isFinite(floatValue);\n        }\n    }\n\n    public static tryCoerceToNumber(value: any): { isValid: boolean; value: number } {\n        if (value === null || value === undefined) {\n            return { isValid: false, value: value };\n        } else if (isNaN(value)) {\n            return { isValid: false, value: undefined };\n        } else {\n            let floatValue = parseFloat(value);\n            let isValid = !isNaN(floatValue) && isFinite(floatValue);\n            return { isValid: isValid, value: isValid ? floatValue : undefined };\n        }\n    }\n}\n"],"sourceRoot":"../.."}