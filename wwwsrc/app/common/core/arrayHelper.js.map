{"version":3,"sources":["common/core/arrayHelper.ts"],"names":[],"mappings":";;;IAAA;QAAA;QAmDA,CAAC;QAjDiB,mBAAO,GAArB,UAAsB,GAAQ;YAC1B,MAAM,CAAC,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,KAAK,CAAC;QAC5E,CAAC;QAEa,wBAAY,GAA1B,UAA8B,GAAQ,EAAE,UAAkB;YACtD,EAAE,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,gBAAgB,GAAG,UAAC,CAAM,EAAE,CAAM;oBAClC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;wBAChC,MAAM,CAAC,CAAC,CAAC;oBACb,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;wBAChC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACd,CAAC;oBACD,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC,CAAC;gBACF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACtC,CAAC;QACL,CAAC;QAEa,kCAAsB,GAApC,UAAwC,GAAQ,EAAE,UAAkB;YAChE,EAAE,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,gBAAgB,GAAG,UAAC,CAAM,EAAE,CAAM;oBAClC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;wBAChC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACd,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;wBAChC,MAAM,CAAC,CAAC,CAAC;oBACb,CAAC;oBACD,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC,CAAC;gBACF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACtC,CAAC;QACL,CAAC;QAEa,yBAAa,GAA3B,UAA+B,GAAQ,EAAE,SAA8B;YACnE,MAAM,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC;iBACb,MAAM,CAAC,UAAC,KAAK,EAAE,IAAO;gBACnB,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;gBAC9B,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,EAAqB,EAAE,CAAC,CAAC;QAClC,CAAC;QACL,kBAAC;IAAD,CAnDA,AAmDC,IAAA;IAnDY,kCAAW","file":"arrayHelper.js","sourcesContent":["export class ArrayHelper {\n\n    public static isArray(arr: any): boolean {\n        return arr === undefined || arr === null ? false : arr instanceof Array;\n    }\n\n    public static sortByColumn<T>(arr: T[], columnName: string): T[] {\n        if (arr === undefined) {\n            return undefined;\n        } else if (arr === null) {\n            return null;\n        } else {\n            let sortByColumnName = (a: any, b: any): number => {\n                if (a[columnName] > b[columnName]) {\n                    return 1;\n                }\n                if (a[columnName] < b[columnName]) {\n                    return -1;\n                }\n                return 0;\n            };\n            return arr.sort(sortByColumnName);\n        }\n    }\n\n    public static sortByColumnDescending<T>(arr: T[], columnName: string): T[] {\n        if (arr === undefined) {\n            return undefined;\n        } else if (arr === null) {\n            return null;\n        } else {\n            let sortByColumnName = (a: any, b: any): number => {\n                if (a[columnName] > b[columnName]) {\n                    return -1;\n                }\n                if (a[columnName] < b[columnName]) {\n                    return 1;\n                }\n                return 0;\n            };\n            return arr.sort(sortByColumnName);\n        }\n    }\n\n    public static toKeyedObject<T>(arr: T[], keyFinder: (item: T) => string): {[id: string]: T} {\n        return (arr || [])\n            .reduce((accum, curr: T) => {\n                accum[keyFinder(curr)] = curr;\n                return accum;\n            }, <{[id: string]: T}>{});\n    }\n}\n"],"sourceRoot":"../.."}