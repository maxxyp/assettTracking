{"version":3,"sources":["common/core/services/web/configurationService.ts"],"names":[],"mappings":"AAAA,wDAAwD;;;;;;;;;;;;;IAUxD;QAMI,8BAAY,UAAuB;YAC/B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YAElD,IAAI,CAAC,WAAW,GAAG,+BAAc,CAAC,YAAY,GAAG,iBAAiB,CAAC;QACvE,CAAC;QAEM,+CAAgB,GAAvB,UAA2B,SAAkB;YACzC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;QAC5E,CAAC;QAEM,mCAAI,GAAX;YAAA,iBAgBC;YAfG,MAAM,CAAC,IAAI,OAAO,CAAI,UAAC,OAAO;gBAC1B,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC;oBACvB,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC;yBACnC,IAAI,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;yBAC7C,IAAI,CAAC,UAAC,IAAO;wBACV,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;wBAC3B,OAAO,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;oBACjC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAG;wBACR,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;wBACvD,OAAO,CAAC,IAAI,CAAC,CAAC;oBAClB,CAAC,CAAC,CAAC;gBACX,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,OAAO,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;gBACjC,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,+CAAgB,GAAvB,UAAwB,QAA8B;YAClD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QACjD,CAAC;QAtCQ,oBAAoB;YADhC,0BAAM,CAAC,uBAAU,CAAC;;WACN,oBAAoB,CAuChC;QAAD,2BAAC;KAvCD,AAuCC,IAAA;IAvCY,oDAAoB","file":"configurationService.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\n\nimport * as Logging from \"aurelia-logging\";\nimport {inject} from \"aurelia-framework\";\nimport {IConfigurationService} from \"../IConfigurationService\";\nimport {PlatformHelper} from \"../../platformHelper\";\nimport {HttpClient} from \"../../httpClient\";\nimport {IHttpClient} from \"../../IHttpClient\";\n\n@inject(HttpClient)\nexport class ConfigurationService implements IConfigurationService {\n    private _configuration: any;\n    private _httpClient: IHttpClient;\n    private _configFile: string;\n    private _logger: Logging.Logger;\n\n    constructor(httpClient: IHttpClient) {\n        this._configuration = null;\n        this._httpClient = httpClient;\n        this._logger = Logging.getLogger(\"Configuration\");\n\n        this._configFile = PlatformHelper.loaderPrefix + \"app.config.json\";\n    }\n\n    public getConfiguration<T>(childName?: string): T {\n        return childName ? this._configuration[childName] : this._configuration;\n    }\n\n    public load<T>(): Promise<T> {\n        return new Promise<T>((resolve) => {\n            if (!this._configuration) {\n                this._httpClient.fetch(this._configFile)\n                    .then((response: Response) => response.json())\n                    .then((json: T) => {\n                        this._configuration = json;\n                        resolve(this._configuration);\n                    }).catch((err) => {\n                         this._logger.error(\"Cannot parse configuration\", err);\n                        resolve(null);\n                    });\n            } else {\n                resolve(this._configuration);\n            }\n        });\n    }\n\n    public overrideSettings(settings: {[key: string]: any}): void {\n        Object.assign(this._configuration, settings);\n    }\n}\n"],"sourceRoot":"../../../.."}