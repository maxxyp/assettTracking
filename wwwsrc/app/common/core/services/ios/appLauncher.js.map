{"version":3,"sources":["common/core/services/ios/appLauncher.ts"],"names":[],"mappings":";;;IAEA;QAII;YACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAC3B,CAAC;QAED,0DAA0D;QACnD,kCAAY,GAAnB;YAAA,iBAcC;YAbG,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC;YAED,IAAI,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;YACvC,MAAM,CAAC,IAAI,OAAO,CAAS,UAAA,OAAO;gBAC9B,YAAY,CAAC,YAAY,CAAC,UAAC,GAAW;oBAClC,KAAI,CAAC,UAAU,GAAG,GAAG,GAAG,KAAK,CAAC;oBAC9B,OAAO,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;gBAC7B,CAAC,EAAE;oBACC,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;QAED,0DAA0D;QAC1D,4CAA4C;QACrC,+CAAyB,GAAhC,UAAiC,GAAW;YACxC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;YAED,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC/B,MAAM,CAAC,IAAI,OAAO,CAAU,UAAA,OAAO;gBAC/B,IAAI,OAAO,GAAW,GAAG,CAAC;gBAC1B,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1B,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;gBAC1C,CAAC;gBAED,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;oBACxB,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,EAAE;oBACC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACnB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,uCAAiB,GAAxB,UAAyB,GAAW;YAChC,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC/B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC;YACX,CAAC;YACD,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QAC9B,CAAC;QACL,kBAAC;IAAD,CAtDA,AAsDC,IAAA;IAtDY,kCAAW","file":"appLauncher.js","sourcesContent":["import { IPlatformAppLauncher } from \"../IPlatformAppLauncher\";\n\nexport class AppLauncher implements IPlatformAppLauncher {\n\n    private _uriScheme: string;\n\n    constructor() {\n        this._uriScheme = null;\n    }\n\n    // dependency ./plugins-custom/cordova-plugin-getcustomuri\n    public getUriScheme(): Promise<string> {\n        if (!window.GetCustomUri) {\n            return Promise.resolve(null);\n        }\n\n        let getCustomUri = window.GetCustomUri;\n        return new Promise<string>(resolve => {\n            getCustomUri.getUriScheme((res: string) => {\n                this._uriScheme = res + \"://\";\n                resolve(this._uriScheme);\n            }, () => {\n                resolve();\n            });\n        });\n    }\n    \n    // dependency https://github.com/lampaa/com.lampa.startapp\n    // dependency cordova-plugin-queries-schemes\n    public checkApplicationInstalled(uri: string): Promise<boolean> {\n        if (!window.startApp) {\n            return Promise.resolve(false);\n        }\n\n        let startApp = window.startApp;\n        return new Promise<boolean>(resolve => {\n            let baseUri: string = uri;\n            if (uri.indexOf(\"://\") > -1) {\n                baseUri = uri.split(\"://\")[0] + \"://\";\n            }\n\n            startApp.set(baseUri).check(() => { \n                resolve(true);\n            }, () => {\n                resolve(false);\n            });\n        });\n    }\n\n    public launchApplication(uri: string): void {\n        let startApp = window.startApp;\n        if (!startApp) {\n            return;\n        }\n        startApp.set(uri).start();\n    }\n}\n"],"sourceRoot":"../../../.."}