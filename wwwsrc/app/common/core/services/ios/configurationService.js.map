{"version":3,"sources":["common/core/services/ios/configurationService.ts"],"names":[],"mappings":"AAAA,wDAAwD;;;;IAKxD;QAKI;YACI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,oBAAoB,GAAG,qBAAqB,CAAC;YAC7E,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QACtD,CAAC;QAEM,+CAAgB,GAAvB,UAA2B,SAAkB;YACzC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;QAC5E,CAAC;QAEM,mCAAI,GAAX;YACI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAChD,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,eAAe,EAAK,CAAC;QACrC,CAAC;QAEM,+CAAgB,GAAvB,UAA2B,QAAW;YAClC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QACjD,CAAC;QAEO,8CAAe,GAAvB;YAAA,iBAyBC;YAxBI,MAAM,CAAC,IAAI,OAAO,CAAI,UAAC,OAAO;gBAC3B,MAAM,CAAC,yBAAyB,CAAC,KAAI,CAAC,WAAW,EAAE,UAAC,SAAoB;oBACpE,SAAS,CAAC,IAAI,CAAC,UAAC,IAAU;wBACtB,IAAI,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;wBAC9B,MAAM,CAAC,SAAS,GAAG;4BACf,IAAI,CAAC;gCACD,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;4BACpD,CAAC;4BAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACX,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;gCACtD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;4BACzB,CAAC;4BACD,OAAO,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;wBACjC,CAAC,CAAC;wBACF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAE5B,CAAC,EAAE,UAAC,GAAc;wBACd,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,iCAAiC,GAAG,KAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;wBAC9E,OAAO,CAAC,IAAI,CAAC,CAAC;oBAClB,CAAC,CAAC,CAAC;gBACP,CAAC,EAAE,UAAC,GAAG;oBACH,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,iCAAiC,GAAG,KAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;oBAC9E,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;QACL,2BAAC;IAAD,CArDA,AAqDC,IAAA;IArDY,oDAAoB","file":"configurationService.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\n\nimport * as Logging from \"aurelia-logging\";\nimport {IConfigurationService} from \"../IConfigurationService\";\n\nexport class ConfigurationService implements IConfigurationService {\n    private _configuration: any;\n    private _configFile: string;\n    private _logger: Logging.Logger;\n\n    constructor() {\n        this._configuration = null;\n        this._configFile = cordova.file.applicationDirectory + \"www/app.config.json\";\n        this._logger = Logging.getLogger(\"Configuration\");\n    }\n\n    public getConfiguration<T>(childName?: string): T {\n        return childName ? this._configuration[childName] : this._configuration;\n    }\n\n    public load<T>(): Promise<T> {\n        if (!!this._configuration) {\n            return Promise.resolve(this._configuration);\n        }\n\n        return this.fetchConfigFile<T>();\n    }\n\n    public overrideSettings<T>(settings: T): void {\n        Object.assign(this._configuration, settings);\n    }\n\n    private fetchConfigFile<T>(): Promise<T> {\n         return new Promise<T>((resolve) => {\n            window.resolveLocalFileSystemURL(this._configFile, (fileEntry: FileEntry) => {\n                fileEntry.file((file: File) => {\n                    let reader = new FileReader();\n                    reader.onloadend = () => {\n                        try {\n                            this._configuration = JSON.parse(reader.result);\n                        } catch (err) {\n                            this._logger.error(\"Cannot parse configuration\", err);\n                            return resolve(null);\n                        }\n                        resolve(this._configuration);\n                    };\n                    reader.readAsText(file);\n\n                }, (err: FileError) => {\n                    this._logger.error(\"Cannot read configuration file \" + this._configFile, err);\n                    resolve(null);\n                });\n            }, (err) => {\n                this._logger.error(\"Cannot load configuration file \" + this._configFile, err);\n                resolve(null);\n            });\n        });\n    }\n}\n"],"sourceRoot":"../../../.."}