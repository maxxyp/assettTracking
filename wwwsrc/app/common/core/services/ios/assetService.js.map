{"version":3,"sources":["common/core/services/ios/assetService.ts"],"names":[],"mappings":"AAAA,wDAAwD;;;;IAIxD;QAAA;QAkEA,CAAC;QAjEU,+BAAQ,GAAf,UAAgB,SAAiB;YAC7B,MAAM,CAAC,IAAI,OAAO,CAAS,UAAC,OAAO;gBAC/B,MAAM,CAAC,yBAAyB,CAC5B,OAAO,CAAC,IAAI,CAAC,oBAAoB,GAAG,aAAa,GAAG,SAAS,EAC7D,UAAC,SAAoB;oBACjB,SAAS,CAAC,IAAI,CAAC,UAAC,IAAU;wBACtB,IAAI,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;wBAC9B,MAAM,CAAC,SAAS,GAAG;4BACf,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;wBAC3B,CAAC,CAAC;wBACF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAC5B,CAAC,EAAE,UAAC,KAAgB;wBAChB,OAAO,CAAC,IAAI,CAAC,CAAC;oBAClB,CAAC,CAAC,CAAC;gBACP,CAAC,EAAE,UAAC,GAAG;oBACH,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,sCAAe,GAAtB,UAAuB,SAAiB;YACpC,MAAM,CAAC,IAAI,OAAO,CAAc,UAAC,OAAO;gBACpC,MAAM,CAAC,yBAAyB,CAC5B,OAAO,CAAC,IAAI,CAAC,oBAAoB,GAAG,aAAa,GAAG,SAAS,EAC7D,UAAC,SAAoB;oBACjB,SAAS,CAAC,IAAI,CAAC,UAAC,IAAU;wBACtB,IAAI,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;wBAC9B,MAAM,CAAC,SAAS,GAAG;4BACf,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;wBAC3B,CAAC,CAAC;wBACF,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBACnC,CAAC,EAAE,UAAC,KAAgB;wBAChB,OAAO,CAAC,IAAI,CAAC,CAAC;oBAClB,CAAC,CAAC,CAAC;gBACP,CAAC,EAAE,UAAC,GAAG;oBACH,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,+BAAQ,GAAf,UAAmB,SAAiB;YAChC,MAAM,CAAC,IAAI,OAAO,CAAI,UAAC,OAAO;gBAC1B,MAAM,CAAC,yBAAyB,CAC5B,OAAO,CAAC,IAAI,CAAC,oBAAoB,GAAG,aAAa,GAAG,SAAS,EAC7D,UAAC,SAAoB;oBACjB,SAAS,CAAC,IAAI,CAAC,UAAC,IAAU;wBACtB,IAAI,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;wBAC9B,MAAM,CAAC,SAAS,GAAG;4BACf,IAAI,YAAY,GAAQ,IAAI,CAAC;4BAC7B,IAAI,CAAC;gCACD,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;4BAC7C,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACb,wBAAwB;4BAC5B,CAAC;4BACD,OAAO,CAAC,YAAY,CAAC,CAAC;wBAC1B,CAAC,CAAC;wBACF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAC5B,CAAC,EAAE,UAAC,KAAgB;wBAChB,OAAO,CAAC,IAAI,CAAC,CAAC;oBAClB,CAAC,CAAC,CAAC;gBACP,CAAC,EAAE,UAAC,GAAG;oBACH,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACP,CAAC;QACL,mBAAC;IAAD,CAlEA,AAkEC,IAAA;IAlEY,oCAAY","file":"assetService.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\n\nimport {IAssetService} from \"../IAssetService\";\n\nexport class AssetService implements IAssetService {\n    public loadText(assetName: string): Promise<string> {\n        return new Promise<string>((resolve) => {\n            window.resolveLocalFileSystemURL(\n                cordova.file.applicationDirectory + \"www/assets/\" + assetName,\n                (fileEntry: FileEntry) => {\n                    fileEntry.file((file: File) => {\n                        let reader = new FileReader();\n                        reader.onloadend = () => {\n                            resolve(reader.result);\n                        };\n                        reader.readAsText(file);\n                    }, (error: FileError) => {\n                        resolve(null);\n                    });\n                }, (err) => {\n                    resolve(null);\n                });\n        });\n    }\n\n    public loadArrayBuffer(assetName: string): Promise<ArrayBuffer> {\n        return new Promise<ArrayBuffer>((resolve) => {\n            window.resolveLocalFileSystemURL(\n                cordova.file.applicationDirectory + \"www/assets/\" + assetName,\n                (fileEntry: FileEntry) => {\n                    fileEntry.file((file: File) => {\n                        let reader = new FileReader();\n                        reader.onloadend = () => {\n                            resolve(reader.result);\n                        };\n                        reader.readAsArrayBuffer(file);\n                    }, (error: FileError) => {\n                        resolve(null);\n                    });\n                }, (err) => {\n                    resolve(null);\n                });\n        });\n    }\n\n    public loadJson<T>(assetName: string): Promise<T> {\n        return new Promise<T>((resolve) => {\n            window.resolveLocalFileSystemURL(\n                cordova.file.applicationDirectory + \"www/assets/\" + assetName,\n                (fileEntry: FileEntry) => {\n                    fileEntry.file((file: File) => {\n                        let reader = new FileReader();\n                        reader.onloadend = () => {\n                            let jsonResponse: any = null;\n                            try {\n                                jsonResponse = JSON.parse(reader.result);\n                            } catch (error) {\n                                // handle this/log this?\n                            }\n                            resolve(jsonResponse);\n                        };\n                        reader.readAsText(file);\n                    }, (error: FileError) => {\n                        resolve(null);\n                    });\n                }, (err) => {\n                    resolve(null);\n                });\n        });\n    }\n}\n"],"sourceRoot":"../../../.."}