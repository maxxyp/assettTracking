{"version":3,"sources":["common/core/services/appLauncher.ts"],"names":[],"mappings":";;;;;;;;;;;;;IAKA;QAAiC,+BAAyC;QAEtE;mBACI,kBAAM,sBAAsB,EAAE,aAAa,CAAC;QAChD,CAAC;QAEM,oCAAc,GAArB,UAAsB,GAAW;YAC7B,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAC,MAAM;gBACjC,MAAM,CAAC,MAAM,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,uCAAiB,GAAxB,UAAyB,GAAW;YAChC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAA7B,CAA6B,CAAC,CAAC;QACtE,CAAC;QAEM,4BAAM,GAAb,UAAc,aAAqB,EAAE,MAAmC,EAAE,OAA+E;YAAzJ,iBASC;YARG,IAAI,GAAG,GAAG,aAAa,CAAC;YACxB,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5B,GAAG,IAAI,KAAK,CAAC;YACjB,CAAC;YAED,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC;iBACjC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAApC,CAAoC,CAAC,EAAxE,CAAwE,CAAC;iBAC5F,KAAK,EAAE,CAAC;QACjB,CAAC;QAEO,iCAAW,GAAnB,UAAoB,OAAe,EAAE,MAAkC,EAAE,OAA+E;YAAxJ,iBAiBC;YAhBG,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE;iBACnB,IAAI,CAAC;gBACF,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;oBACnC,MAAM,CAAC,KAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,EAAE,EAArB,CAAqB,CAAC,CAAC;gBACnE,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC,CAAC;iBACD,IAAI,CAAC,UAAC,SAAS;gBACZ,IAAI,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;oBACpC,eAAe,EAAE,SAAS;oBAC1B,gBAAgB,EAAE,OAAO,IAAI,OAAO,CAAC,aAAa;oBAClD,aAAa,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU;iBAC/C,CAAC,CAAC;gBAEH,MAAM,CAAC,iCAAe,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YACjH,CAAC,CAAC,CAAC;QACX,CAAC;QAEO,uCAAiB,GAAzB,UAA0B,MAAiC;YACvD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAC,SAAc,EAAE,GAAQ;gBACvD,IAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;gBACtB,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACzB,CAAC;gBACD,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC,EAAE,EAAE,CAAC,CAAC;QACX,CAAC;QACL,kBAAC;IAAD,CAvDA,AAuDC,CAvDgC,yCAAmB,GAuDnD;IAvDY,kCAAW","file":"appLauncher.js","sourcesContent":["import { IPlatformAppLauncher } from \"./IPlatformAppLauncher\";\nimport { IAppLauncher } from \"./IAppLauncher\";\nimport { PlatformServiceBase } from \"../platformServiceBase\";\nimport { UrlParamService } from \"../urlParamService\";\n\nexport class AppLauncher extends PlatformServiceBase<IPlatformAppLauncher> implements IAppLauncher {\n\n    constructor() {\n        super(\"common/core/services\", \"AppLauncher\");\n    }\n\n    public checkInstalled(uri: string): Promise<boolean> {\n        return this.loadModule().then((module) => {\n            return module.checkApplicationInstalled(uri);\n        });\n    }\n\n    public launchApplication(uri: string): void {\n        this.loadModule().then((module) => module.launchApplication(uri));\n    }\n\n    public launch(uriOrProtocol: string, params: { [index: string]: string }, options?: { returnUri?: boolean, returnUriText?: string, fullScreen?: boolean }): void {\n        let uri = uriOrProtocol;\n        if (uri.indexOf(\"://\") === -1) {\n            uri += \"://\";\n        }\n\n        this.generateUri(uri, params, options)\n            .then(encodedUri => this.loadModule().then((module) => module.launchApplication(encodedUri)))\n            .catch();\n    }\n\n    private generateUri(baseUri: string, params: { [index: string]: string}, options?: { returnUri?: boolean, returnUriText?: string, fullScreen?: boolean }): Promise<string> {\n        return Promise.resolve()\n            .then(() => {\n                if (!!options && !!options.returnUri) {\n                    return this.loadModule().then(module => module.getUriScheme());\n                }\n                return null;\n            })\n            .then((appScheme) => {\n                let paramsAndQs = Object.assign(params, {\n                    \"?returnappuri\": appScheme, \n                    \"?returnapptext\": options && options.returnUriText,\n                    \"?fullscreen\": options && options.fullScreen\n                });\n\n                return UrlParamService.getParamEndpoint(baseUri, this.filterFalsyParams(paramsAndQs)).replace(/{(.*)}/g, \"\");\n            });\n    }\n\n    private filterFalsyParams(params: {[index: string]: string}): {[index: string]: string} {\n        return Object.keys(params).reduce((newObject: any, key: any) => {\n            let val = params[key];\n            if (!!val) {\n                newObject[key] = val;\n            }\n            return newObject;\n        }, {});\n    }\n}\n"],"sourceRoot":"../../.."}