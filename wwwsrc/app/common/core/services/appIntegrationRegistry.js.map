{"version":3,"sources":["common/core/services/appIntegrationRegistry.ts"],"names":[],"mappings":";;;;;;;;;;;;IASA,IAAM,sBAAsB,GAAW,sBAAsB,CAAC;IAC9D,IAAM,kCAAkC,GAAW,sCAAsC,CAAC;IAC1F,IAAM,wCAAwC,GAAW,kCAAkC,CAAC;IAC5F,IAAM,oCAAoC,GAAW,oBAAkB,sBAAwB,CAAC;IAyChG;QA4CI,gCAAY,gBAAwC,EAAG,WAAyB;YAAhF,iBASC;YAnDM,0BAAqB,GAAyC;gBACjE,UAAU,EAAE;oBACR,MAAM,EAAE,UAAC,MAAc,EAAE,OAA2B;wBAChD,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,wCAAwC,EAAE;4BAC/D,MAAM,QAAA;yBACT,EAAE,OAAO,CAAC,CAAC;oBAChB,CAAC;iBACJ;aACJ,CAAC;YAEK,iBAAY,GAAgC;gBAC/C,UAAU,EAAE;oBACR,QAAQ,EAAE,UAAC,UAAkB,EAAE,OAA2B;wBACtD,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,kCAAkC,EAAE;4BACzD,UAAU,YAAA;yBACb,CAAC,CAAC;oBACP,CAAC;iBACJ;gBACD,SAAS,EAAE;oBACP,oBAAoB,EAAE,UAAC,QAAsC;wBACzD,OAAA,KAAI,CAAC,yBAAyB,CAAC,sBAAsB,EAAE,UAAC,IAAS,IAAK,OAAA,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAzB,CAAyB,CAAC;oBAAhG,CAAgG;iBACvG;aACJ,CAAC;YAEK,sBAAiB,GAAqC;gBACzD,MAAM,EAAE;oBACJ,oBAAoB,EAAE,UAAC,UAAkB;wBACrC,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,oCAAoC,EAAE;4BAC3D,aAAa,EAAE,UAAU;yBAC5B,CAAC,CAAC;oBACP,CAAC;iBACJ;aACJ,CAAC;YAWE,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;YAC1C,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YAEpB,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,UAAC,OAAO;gBACrC,IAAI,QAAQ,GAAG,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,UAAU,EAAhC,CAAgC,CAAC,CAAC;gBAC5E,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAA7B,CAA6B,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,0DAAyB,GAAjC,UAAkC,OAAe,EAAE,QAAa;YAAhE,iBAWC;YAVG,IAAI,KAAK,GAAG,WAAI,CAAC,OAAO,EAAE,CAAC;YAC3B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAChB,KAAK,EAAE,KAAK;gBACZ,OAAO,SAAA;gBACP,OAAO,EAAE,QAAQ;aACpB,CAAC,CAAC;YAEH,MAAM,CAAC;gBACH,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAvB,CAAuB;aACzC,CAAC;QACN,CAAC;QAEO,4CAAW,GAAnB,UAAoB,KAAa;YAC7B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,KAAK,KAAK,EAAjB,CAAiB,CAAC,CAAC;QACnE,CAAC;QAtEQ,sBAAsB;YADlC,qCAAM,CAAC,mCAAgB,EAAE,yBAAW,CAAC;;WACzB,sBAAsB,CAuElC;QAAD,6BAAC;KAvED,AAuEC,IAAA;IAvEY,wDAAsB","file":"appIntegrationRegistry.js","sourcesContent":["import { IObserver } from \"./IObserver\";\nimport { IAppCommand } from \"./IAppCommand\";\nimport { IAppLauncher } from \"./IAppLauncher\";\nimport { Guid } from \"../guid\";\nimport { IAppIntegrationRegistry } from \"./IAppIntegrationRegistry\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { UriSchemeService } from \"./uriSchemeService\";\nimport { AppLauncher } from \"./appLauncher\";\n\nconst CUSTOMER_TIPS_COMPLETE: string = \"customerTipsComplete\";\nconst CUSTOMER_INFO_NAVIGATE_PREMISES_ID: string = \"customerinfo://premises/{premisesId}\";\nconst BOILER_EFFICIENCY_GUIDE_NAVIGATE_GC_CODE: string = \"boilerefficiencyguide://{gcCode}\";\nconst EWB_COMMAND_NOTIFY_CUSTOMER_TIPS_URI: string = `hema://command/${CUSTOMER_TIPS_COMPLETE}`;\n\n// encapsulated the interfaces here for now. \n// seems verbose I'm describing the interfaces and the individual \n// app objects below. But this is what the tslining rules want\ninterface IDisposable {\n    dispose: () => void;\n}\n\ninterface IAppLaunchOptions {\n    returnUri?: boolean;\n    returnUriText?: string;\n    fullScreen?: boolean;\n}\n\ninterface IBoilerEfficiencyGuideLaunchCommands {\n    navigateTo: {\n        gcCode: (gcCode: string, options? : {\n            returnUri? : boolean,\n            returnUriText?: string,\n            fullScreen?: boolean\n        }) => void\n    };\n}\n\ninterface ICustomerInfoLaunchCommands {\n    navigateTo: {\n        premises: (premisesId: string, options?: IAppLaunchOptions) => void,\n    };\n    subscribe: {\n        customerTipsComplete: (callback: (premisesId: string) => void) => IDisposable;\n    };\n}\n\ninterface IEngineerWorkBenchLaunchCommands {\n    notify: {\n        customerTipsComplete: (premisesId: string) => void;\n    };\n}\n\n@inject(UriSchemeService, AppLauncher)\nexport class AppIntegrationRegistry implements IAppIntegrationRegistry {\n\n    public boilerEfficiencyGuide: IBoilerEfficiencyGuideLaunchCommands = {\n        navigateTo: {\n            gcCode: (gcCode: string, options?: IAppLaunchOptions) => {\n                this._appLauncher.launch(BOILER_EFFICIENCY_GUIDE_NAVIGATE_GC_CODE, {\n                    gcCode\n                }, options);\n            }\n        }\n    };\n\n    public customerInfo: ICustomerInfoLaunchCommands = {\n        navigateTo: {\n            premises: (premisesId: string, options?: IAppLaunchOptions) => {\n                this._appLauncher.launch(CUSTOMER_INFO_NAVIGATE_PREMISES_ID, {\n                    premisesId\n                });\n            }\n        },\n        subscribe: {\n            customerTipsComplete: (callback: (premisesId: string) => void) =>\n                this.createCommandSubscription(CUSTOMER_TIPS_COMPLETE, (args: any) => callback(args.premisesId))\n        }\n    };\n\n    public engineerWorkBench: IEngineerWorkBenchLaunchCommands = {\n        notify: {\n            customerTipsComplete: (premisesId: string) => {\n                this._appLauncher.launch(EWB_COMMAND_NOTIFY_CUSTOMER_TIPS_URI, {\n                    \"?premisesId\": premisesId\n                });\n            }\n        }\n    };\n\n    private _uriSchemeService: IObserver<IAppCommand> ;\n    private _appLauncher: IAppLauncher;\n    private _handlers: {\n        token: string,\n        command: string,\n        handler: any\n    }[];\n\n    constructor(uriSchemeService: IObserver<IAppCommand> , appLauncher: IAppLauncher) {\n        this._uriSchemeService = uriSchemeService;\n        this._appLauncher = appLauncher;\n        this._handlers = [];\n\n        this._uriSchemeService.subscribe((command) => {\n            let handlers = this._handlers.filter(x => x.command === command.methodName);\n            handlers.forEach(handler => handler.handler(command.args));\n        });\n    }\n\n    private createCommandSubscription(command: string, callback: any): IDisposable {\n        let token = Guid.newGuid();\n        this._handlers.push({\n            token: token,\n            command,\n            handler: callback\n        });\n\n        return {\n            dispose: () => this.unSubscribe(token)\n        };\n    }\n\n    private unSubscribe(token: string): void {\n        this._handlers = this._handlers.filter(x => x.token !== token);\n    }\n}\n"],"sourceRoot":"../../.."}