{"version":3,"sources":["common/core/services/loggerService.ts"],"names":[],"mappings":";;;;;;;;;;;;;IAOA,kCAAkC;IAClC,kFAAkF;IAClF;QAAmC,iCAAmC;QAElE;mBACI,kBAAM,sBAAsB,EAAE,eAAe,CAAC;QAClD,CAAC;QAEM,kCAAU,GAAjB,UAAkB,OAAgB,EAAE,MAAyB;YACzD,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE;iBACnB,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,EAAlC,CAAkC,CAAC,CAAC;QAC9D,CAAC;QAEM,+BAAO,GAAd;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAC,MAAM;gBACjC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YAC5B,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,mCAAW,GAAnB,UAAoB,QAAgB;YAChC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACf,KAAK,mBAAQ,CAAC,KAAK;wBACf,8BAAU,CAAC,QAAQ,CAAC,8BAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBAC/C,KAAK,CAAC;oBACV,KAAK,mBAAQ,CAAC,IAAI;wBACd,8BAAU,CAAC,QAAQ,CAAC,8BAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBAC9C,KAAK,CAAC;oBACV,KAAK,mBAAQ,CAAC,IAAI;wBACd,8BAAU,CAAC,QAAQ,CAAC,8BAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBAC9C,KAAK,CAAC;oBACV,KAAK,mBAAQ,CAAC,KAAK;wBACf,8BAAU,CAAC,QAAQ,CAAC,8BAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBAC/C,KAAK,CAAC;oBACV;wBACI,8BAAU,CAAC,QAAQ,CAAC,8BAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBAC9C,KAAK,CAAC;gBACd,CAAC;YACL,CAAC;QACL,CAAC;QACL,oBAAC;IAAD,CAvCA,AAuCC,CAvCkC,yCAAmB,GAuCrD;IAvCY,sCAAa","file":"loggerService.js","sourcesContent":["import { PlatformServiceBase } from \"../platformServiceBase\";\nimport { ILoggerService } from \"./ILoggerService\";\nimport { Aurelia, LogManager } from \"aurelia-framework\";\nimport { ILogConfiguration } from \"./ILogConfiguration\";\nimport { LogLevel } from \"./constants/logLevel\";\nimport { Log } from \"./models/log\";\n\n// interface for managing logging.\n// responisble to loading platform specific log appenders to be found in /wua /ios\nexport class LoggerService extends PlatformServiceBase<ILoggerService> implements ILoggerService {\n\n    constructor() {\n        super(\"common/core/services\", \"LoggerService\");\n    }\n\n    public initialize(aurelia: Aurelia, config: ILogConfiguration): Promise<void> {\n        this.setLogLevel(config.logLevel);\n        return this.loadModule()\n            .then((module) => module.initialize(aurelia, config));\n    }\n\n    public getLogs(): Promise<Log[]> {\n        return this.loadModule().then((module) => {\n            return module.getLogs();\n        });\n    }\n\n    private setLogLevel(logLevel: string): void {\n        if (logLevel) {\n            switch (logLevel) {\n                case LogLevel.DEBUG:\n                    LogManager.setLevel(LogManager.logLevel.debug);\n                    break;\n                case LogLevel.INFO:\n                    LogManager.setLevel(LogManager.logLevel.info);\n                    break;\n                case LogLevel.WARN:\n                    LogManager.setLevel(LogManager.logLevel.warn);\n                    break;\n                case LogLevel.ERROR:\n                    LogManager.setLevel(LogManager.logLevel.error);\n                    break;\n                default:\n                    LogManager.setLevel(LogManager.logLevel.info);\n                    break;\n            }\n        }\n    }\n}\n"],"sourceRoot":"../../.."}