{"version":3,"sources":["common/core/services/uriSchemeService.ts"],"names":[],"mappings":"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","file":"uriSchemeService.js","sourcesContent":["import {Aurelia, inject} from \"aurelia-framework\";\r\nimport {Router} from \"aurelia-router\";\r\nimport {IUriSchemeService} from \"./IUriSchemeService\";\r\nimport {PlatformServiceBase} from \"../platformServiceBase\";\r\nimport { ObjectHelper } from \"../objectHelper\";\r\nimport { IAppCommand } from \"./IAppCommand\";\r\nimport { IObserver } from \"./IObserver\";\r\n\r\n@inject(Aurelia)\r\nexport class UriSchemeService extends PlatformServiceBase<IUriSchemeService> implements IUriSchemeService, IObserver<IAppCommand> {\r\n\r\n    private _aurelia: Aurelia;\r\n    private _handlers: ((command: IAppCommand) => void)[];\r\n\r\n    constructor(aurelia: Aurelia) {\r\n        super(\"common/core/services\", \"UriSchemeService\");\r\n        this._aurelia = aurelia;\r\n        this._handlers = [];\r\n    }\r\n\r\n    public registerPlatform(): void {\r\n        this.loadModule().then((module) => {\r\n             module.registerPlatform(this.handleCustomURI.bind(this));\r\n        });\r\n    }\r\n\r\n    public navigateToInitialRoute(): void {\r\n        if (window.initialRoute) {\r\n            this.handleCustomURI(window.initialRoute);\r\n        }\r\n    }\r\n\r\n    public subscribe(callback: (command: IAppCommand) => void): void {\r\n        this._handlers.push(callback);\r\n    }\r\n\r\n    public unsubscribe(callback: (command: IAppCommand) => void): void {\r\n        this._handlers = this._handlers.filter((item) => item !== callback);\r\n    }\r\n\r\n    private publish(command: IAppCommand): void {\r\n        this._handlers.forEach((item) => item.call(item, command));\r\n    }\r\n\r\n    private handleCustomURI(path: string): void {\r\n        let command = this.parseCommand(path);\r\n        if (command) {\r\n            this.publish(command);\r\n            return;\r\n        }\r\n\r\n        // if the uri is not in the format /command/something\r\n        // presume the uri is a route\r\n\r\n        let router: Router = this._aurelia.container.get(Router);\r\n        router.navigate(path, { replace: true });\r\n    }\r\n\r\n    private parseCommand(path: string): IAppCommand {\r\n        let pathParts = path.split(\"?\");\r\n        let qs: string = null;\r\n        if (pathParts.length > 1) {\r\n            qs = pathParts[1];\r\n        }\r\n        let matches = path.match(new RegExp(\"^(command)\\/([A-z]+)\", \"i\"));\r\n        if (!!matches && matches.length > 0 && matches[1] === \"command\") {\r\n            return {\r\n                methodName: matches[2],\r\n                args: qs ? ObjectHelper.parseQueryString(qs) : null\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"],"sourceRoot":"../../.."}