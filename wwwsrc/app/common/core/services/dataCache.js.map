{"version":3,"sources":["common/core/services/dataCache.ts"],"names":[],"mappings":";;;IAEA;QAGI;YACI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACrB,CAAC;QAEM,uBAAG,GAAV,UAAc,SAAiB,EAAE,GAAY;YAA7C,iBAWC;YAVG,MAAM,CAAC,IAAI,OAAO,CAAI,UAAC,OAAO;gBAC1B,IAAI,GAAG,GAAM,IAAI,CAAC;gBAClB,IAAI,MAAM,GAAW,KAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;gBAEjD,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACtB,GAAG,GAAM,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC7C,CAAC;gBAED,OAAO,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,uBAAG,GAAV,UAAc,SAAiB,EAAE,GAAY,EAAE,IAAQ;YAAvD,iBAMC;YALG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO;gBAC7B,IAAI,MAAM,GAAW,KAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;gBACjD,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBAC3C,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,0BAAM,GAAb,UAAc,SAAiB,EAAE,GAAY;YAA7C,iBASC;YARG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO;gBAC7B,IAAI,MAAM,GAAW,KAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;gBAEjD,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACtB,OAAO,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC/B,CAAC;gBACD,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,yBAAK,GAAZ;YAAA,iBAKC;YAJG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO;gBAC7B,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;gBACjB,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,0BAAM,GAAd,UAAe,SAAiB,EAAE,GAAY;YAC1C,MAAM,CAAC,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;QACjC,CAAC;QACL,gBAAC;IAAD,CAjDA,AAiDC,IAAA;IAjDY,8BAAS","file":"dataCache.js","sourcesContent":["import {IStorage} from \"./IStorage\";\n\nexport class DataCache implements IStorage {\n    private _cache: { [id: string] : any };\n\n    constructor() {\n        this._cache = {};\n    }\n\n    public get<T>(container: string, key : string) : Promise<T> {\n        return new Promise<T>((resolve) => {\n            let ret: T = null;\n            let itemId: string = this.calcId(container, key);\n\n            if (this._cache[itemId]) {\n                ret = <T>JSON.parse(this._cache[itemId]);\n            }\n\n            resolve(ret);\n        });\n    }\n\n    public set<T>(container: string, key : string, data : T) : Promise<void> {\n        return new Promise<void>((resolve) => {\n            let itemId: string = this.calcId(container, key);\n            this._cache[itemId] = JSON.stringify(data);\n            resolve();\n        });\n    }\n\n    public remove(container: string, key : string) : Promise<void> {\n        return new Promise<void>((resolve) => {\n            let itemId: string = this.calcId(container, key);\n\n            if (this._cache[itemId]) {\n                delete this._cache[itemId];\n            }\n            resolve();\n        });\n    }\n\n    public clear() : Promise<void> {\n        return new Promise<void>((resolve) => {\n            this._cache = {};\n            resolve();\n        });\n    }\n\n    private calcId(container: string, key : string) : string {\n        return container + \".\" + key;\n    }\n}\n"],"sourceRoot":"../../.."}