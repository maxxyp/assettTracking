{"version":3,"sources":["common/core/services/wua/configurationService.ts"],"names":[],"mappings":"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","file":"configurationService.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\n\nimport * as Logging from \"aurelia-logging\";\nimport {IConfigurationService} from \"../IConfigurationService\";\nimport {PlatformHelper} from \"../../platformHelper\";\n\nexport class ConfigurationService implements IConfigurationService {\n    private _configuration: any;\n    private _configFile: string;\n    private _logger: Logging.Logger;\n\n    constructor() {\n        this._configuration = null;\n        this._configFile = \"app.config.json\";\n        this._logger = Logging.getLogger(\"Configuration\");\n    }\n\n    public getConfiguration<T>(childName?: string): T {\n        return childName ? this._configuration[childName] : this._configuration;\n    }\n\n    public load<T>(): Promise<T> {\n        return new Promise<T>((resolve) => {\n            if (!this._configuration) {\n                /* first try and load an override config from the local state folder */\n\n                Windows.Storage.ApplicationData.current.localFolder.getFileAsync(this._configFile).then(\n                    (fileInFolder: Windows.Storage.StorageFile) => {\n                        this.loadFromFile(fileInFolder)\n                            .then((config) => resolve(config));\n                    },\n                    (err: any) => {\n                        let packagedConfigFile = PlatformHelper.wwwRoot() + \"\\\\\" + this._configFile;\n\n                        /* no local config read the one from the package */\n                        Windows.ApplicationModel.Package.current.installedLocation.getFileAsync(packagedConfigFile).then(\n                            (fileInFolder) => {\n                                this.loadFromFile(fileInFolder)\n                                    .then((config) => resolve(config));\n                            },\n                            (err2) => {\n                                this._logger.error(\"Cannot load configuration file \" + packagedConfigFile, err2);\n                                resolve(null);\n                            }\n                        );\n                    }\n                );\n            } else {\n                resolve(this._configuration);\n            }\n        });\n    }\n\n    public overrideSettings(settings: {[key: string]: any}): void {\n        Object.assign(this._configuration, settings);\n    }\n\n    private loadFromFile(fileInFolder: Windows.Storage.StorageFile) : Promise<any> {\n        return new Promise<void>((resolve, reject) => {\n            Windows.Storage.FileIO.readBufferAsync(fileInFolder).then(\n                (buffer) => {\n                    let dataReader = Windows.Storage.Streams.DataReader.fromBuffer(buffer);\n                    try {\n                        this._configuration = JSON.parse(dataReader.readString(buffer.length));\n                    } catch (err) {\n                        this._logger.error(\"Cannot parse configuration\", err);\n                        return resolve(null);\n                    }\n                    resolve(this._configuration);\n                },\n                (err) => {\n                    this._logger.error(\"Cannot read configuration file \" + this._configFile, err);\n                    resolve(null);\n                }\n            );\n        });\n    }\n}\n"],"sourceRoot":"../../../.."}