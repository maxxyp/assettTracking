{"version":3,"sources":["common/core/services/wua/appLauncher.ts"],"names":[],"mappings":";;;IAEA;QAII;YACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAC3B,CAAC;QAEM,kCAAY,GAAnB;YAAA,iBAmBC;YAlBG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5C,CAAC;YAED,IAAI,iBAAiB,GAAG,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC;YACnF,MAAM,CAAC,IAAI,OAAO,CAAS,CAAC,UAAA,OAAO;gBAC/B,iBAAiB,CAAC,YAAY,CAAC,kBAAkB,CAAC;qBACjD,IAAI,CAAC,UAAA,IAAI;oBACN,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;wBAChD,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;wBACtE,OAAO,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;oBAC7B,CAAC,EAAE,UAAC,GAAG;wBACJ,OAAO,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;oBAC5B,CAAC,CAAC,CAAC;gBACP,CAAC,EAAE,UAAC,GAAG;oBACH,OAAO,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC,CAAC;QACR,CAAC;QAEM,+CAAyB,GAAhC,UAAiC,GAAW;YACxC,MAAM,CAAC,IAAI,OAAO,CAAU,UAAA,OAAO;gBAC/B,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,sBAAsB,CAAC,GAAG,CAAC;qBACvH,IAAI,CAAC,UAAC,SAAkD;oBACrD,MAAM,CAAC,OAAO,CAAC,SAAS,KAAK,OAAO,CAAC,MAAM,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;gBACpF,CAAC,EAAE,cAAM,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,uCAAiB,GAAxB,UAAyB,GAAW;YAChC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5E,CAAC;QACL,kBAAC;IAAD,CAzCA,AAyCC,IAAA;IAzCY,kCAAW","file":"appLauncher.js","sourcesContent":["import { IPlatformAppLauncher } from \"../IPlatformAppLauncher\";\n\nexport class AppLauncher implements IPlatformAppLauncher {\n\n    private _uriScheme: string;\n\n    constructor() {\n        this._uriScheme = null;\n    }\n\n    public getUriScheme(): Promise<string> {\n        if (!!this._uriScheme) {\n            return Promise.resolve(this._uriScheme);\n        }\n\n        let installedLocation = Windows.ApplicationModel.Package.current.installedLocation;\n        return new Promise<string>((resolve => {\n            installedLocation.getFileAsync(\"AppxManifest.xml\")\n            .then(file => {\n                Windows.Storage.FileIO.readTextAsync(file).then(text => {\n                    this._uriScheme = text.match(/<uap:Protocol Name=\"(.*)\">/)[1] + \"://\";\n                    resolve(this._uriScheme);\n                }, (err) => {\n                   resolve(this._uriScheme);\n                });\n            }, (err) => {\n                resolve(this._uriScheme);\n            });\n        }));\n    }\n\n    public checkApplicationInstalled(uri: string): Promise<boolean> {\n        return new Promise<boolean>(resolve => {\n            Windows.System.Launcher.queryUriSupportAsync(new Windows.Foundation.Uri(uri), Windows.System.LaunchQuerySupportType.uri)\n            .done((supported: Windows.System.LaunchQuerySupportStatus) => {\n                return resolve(supported === Windows.System.LaunchQuerySupportStatus.available);\n            }, () => resolve(false));\n        });\n    }\n\n    public launchApplication(uri: string): void {\n        Windows.System.Launcher.launchUriAsync(new Windows.Foundation.Uri(uri));\n    }\n}\n"],"sourceRoot":"../../../.."}