{"version":3,"sources":["common/core/services/wua/loggerService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IASA;QAAA;QAsBA,CAAC;QApBgB,kCAAU,GAAvB,UAAwB,OAAgB,EAAE,MAAyB;;;oBAC/D,8BAAU,CAAC,WAAW,CAAC,IAAI,iCAAe,EAAE,CAAC,CAAC;oBAC9C,8BAAU,CAAC,WAAW,CAAC,wCAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,2CAAoB,CAAC,CAAC,CAAC;;;;SACxE;QAEM,+BAAO,GAAd;YACI,MAAM,CAAC,IAAI,OAAO,CAAQ,UAAC,OAAO;gBAC9B,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,qBAAS,CAAC,cAAc,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,CAAC;qBAC1J,IAAI,CAAC,UAAC,IAAI,IAAK,OAAA,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAA3C,CAA2C,CAAC;qBAC3D,IAAI,CAAC,UAAC,KAAK;oBACR,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI;wBAClB,IAAI,GAAG,GAAG,IAAI,SAAG,EAAE,CAAC;wBACpB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBAC5B,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACxB,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;wBACnB,MAAM,CAAC,GAAG,CAAC;oBACf,CAAC,CAAC,CAAC,CAAC;gBACR,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACP,CAAC;QACL,oBAAC;IAAD,CAtBA,AAsBC,IAAA;IAtBY,sCAAa","file":"loggerService.js","sourcesContent":["import { LogManager, Aurelia } from \"aurelia-framework\";\nimport { ILoggerService } from \"../ILoggerService\";\nimport { Log } from \"../models/log\";\nimport { LogHelper } from \"../../logHelper\";\nimport { ILogConfiguration } from \"../ILogConfiguration\";\nimport { AnalyticsLogAppender } from \"../../../analytics/AnalyticsLogAppender\";\nimport { Container } from \"aurelia-dependency-injection\";\nimport { FileLogAppender } from \"./fileLogAppender\";\n\nexport class LoggerService implements ILoggerService {\n\n    public async initialize(aurelia: Aurelia, config: ILogConfiguration): Promise<void> {\n        LogManager.addAppender(new FileLogAppender());\n        LogManager.addAppender(Container.instance.get(AnalyticsLogAppender));\n    }\n\n    public getLogs(): Promise<Log[]> {\n        return new Promise<Log[]>((resolve) => {\n            Windows.Storage.ApplicationData.current.localFolder.createFileAsync(LogHelper.getLogFileName(new Date()), Windows.Storage.CreationCollisionOption.openIfExists)\n                .then((file) => Windows.Storage.FileIO.readLinesAsync(file))\n                .then((lines) => {\n                    resolve(lines.map(line => {\n                        let log = new Log();\n                        let parts = line.split(\" \");\n                        log.logLevel = parts[1];\n                        log.logText = line;\n                        return log;\n                    }));\n                });\n        });\n    }\n}\n"],"sourceRoot":"../../../.."}