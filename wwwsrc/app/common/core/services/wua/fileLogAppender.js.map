{"version":3,"sources":["common/core/services/wua/fileLogAppender.ts"],"names":[],"mappings":"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","file":"fileLogAppender.js","sourcesContent":["import { Appender } from \"aurelia-logging\";\nimport { Log } from \"../models/log\";\nimport { LogLevel } from \"../constants/logLevel\";\nimport { DateHelper } from \"../../dateHelper\";\n\nexport class FileLogAppender implements Appender {\n\n    private _logBuffer: Log[];\n    private _isWriting: boolean;\n\n    constructor() {\n        this._logBuffer = [];\n    }\n\n    public debug(meta: { id: string }, ...rest: any[]): Log {\n        return this.log(LogLevel.DEBUG, meta, rest);\n    }\n\n    public info(meta: { id: string }, ...rest: any[]): Log {\n        return this.log(LogLevel.INFO, meta, rest);\n    }\n\n    public warn(meta: { id: string }, ...rest: any[]): Log {\n        return this.log(LogLevel.WARN, meta, rest);\n    }\n\n    public error(meta: { id: string }, ...rest: any[]): Log {\n        return this.log(LogLevel.ERROR, meta, rest);\n    }\n\n    private getLogFileName(date: Date): string {\n        return \"log-\" + DateHelper.toJsonDateString(date) + \".txt\";\n    }\n\n    private log(logLevel: LogLevel, meta: { id: string }, rest: any[]): Log {\n        let time = DateHelper.toJsonDateTimeString(new Date());\n        let log = new Log();\n        log.logLevel = logLevel || LogLevel.NONE;\n        log.logText = time + \"\\t\" + log.logLevel + \"\\t[\" + meta.id + \"]\\t\" + (rest || []).reduce((prev, curr) => prev + \" \" + JSON.stringify(curr || \"\"), \"\");\n\n        this.logToFile(log);\n        return log;\n    }\n\n    private logToFile(log: Log): void {\n        try {\n            this._logBuffer.push(log);\n            if (!this._isWriting) {\n                this._isWriting = true;\n\n                let logFragment = this._logBuffer.reduce((prev, curr) => prev + \" \" + curr.logText + \"\\r\\n\", \"\");\n                this._logBuffer = [];\n\n                Windows.Storage.ApplicationData.current.localFolder.createFileAsync(this.getLogFileName(new Date()), Windows.Storage.CreationCollisionOption.openIfExists)\n                    .then((file) => Windows.Storage.FileIO.appendTextAsync(file, logFragment))\n                    .then(\n                        (success) => {\n                            this._isWriting = false;\n                        },\n                        (error) => {\n                            // from development, it *looks* like the logs have still been written to file even if an error is thrown\n                            this._isWriting = false;\n                        }\n                    );\n            }\n        } catch (err) {\n            this._logBuffer = [];\n        }\n    }\n}\n"],"sourceRoot":"../../../.."}