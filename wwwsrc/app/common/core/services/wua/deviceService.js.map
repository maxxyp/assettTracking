{"version":3,"sources":["common/core/services/wua/deviceService.ts"],"names":[],"mappings":"AAAA,wDAAwD;;;;IAIxD;QAGI;QACA,CAAC;QAEM,mCAAW,GAAlB;YACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBACZ,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,+CAA+C,CAAC,CAAC,CAAC,CAAC;oBAC5G,IAAI,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;oBACxF,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;wBACpB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;wBAC5F,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC9C,CAAC;gBACL,CAAC;YACL,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrC,CAAC;QAEM,qCAAa,GAApB;YACI,IAAI,UAAU,GAAW,EAAE,CAAC;YAE5B,IAAI,uBAAuB,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,8BAA8B,CAAC,0BAA0B,EAAE,CAAC;YAE/G,EAAE,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBAC1B,UAAU,GAAG,uBAAuB,CAAC,iBAAiB,CAAC;YAC3D,CAAC;YAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACvC,CAAC;QAEO,uCAAe,GAAvB,UAAwB,GAAW;YAC/B,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC3E,CAAC;QACL,oBAAC;IAAD,CAlCA,AAkCC,IAAA;IAlCY,sCAAa","file":"deviceService.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\n\nimport {IDeviceService} from \"../IDeviceService\";\n\nexport class DeviceService implements IDeviceService {\n    private _id: string;\n\n    constructor() {\n    }\n\n    public getDeviceId(): Promise<string> {\n        if (!this._id) {\n            if (Windows.Foundation.Metadata.ApiInformation.isTypePresent(\"Windows.System.Profile.HardwareIdentification\")) {\n                let token = Windows.System.Profile.HardwareIdentification.getPackageSpecificToken(null);\n                if (token && token.id) {\n                    this._id = Windows.Security.Cryptography.CryptographicBuffer.encodeToBase64String(token.id);\n                    this._id = this.base64EncodeUrl(this._id);\n                }\n            }\n        }\n        return Promise.resolve(this._id);\n    }\n\n    public getDeviceType(): Promise<string> {\n        let deviceType: string = \"\";\n\n        let clientDeviceInformation = new Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation();\n\n        if (clientDeviceInformation) {\n            deviceType = clientDeviceInformation.systemProductName;\n        }\n\n        return Promise.resolve(deviceType);\n    }\n\n    private base64EncodeUrl(str: string): string {\n        return str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=+$/, \"\");\n    }\n}\n"],"sourceRoot":"../../../.."}