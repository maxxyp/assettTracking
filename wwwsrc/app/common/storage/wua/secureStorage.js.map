{"version":3,"sources":["common/storage/wua/secureStorage.ts"],"names":[],"mappings":"AAAA,qDAAqD;;;;IAIrD;QAEI;QACA,CAAC;QAEM,2BAAG,GAAV,UAAc,SAAiB,EAAE,GAAW;YAA5C,iBA8BC;YA7BG,MAAM,CAAC,IAAI,OAAO,CAAI,UAAC,OAAO,EAAE,MAAM;gBAElC,IAAI,aAAa,GACb,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,CAAC;gBAC1D,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBACzC,IAAI,kBAAkB,GAAW,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;oBAE1F,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBAErB,IAAI,IAAI,GAAoC,OAAO,CAAC,QAAQ,CAAC,YAAY;4BACrE,mBAAmB,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;wBAEnE,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC;6BACjB,IAAI,CAAC,UAAC,MAAM;4BACT,MAAM,CAAI,MAAM,CAAC;wBACrB,CAAC,CAAC;6BACD,IAAI,CAAC,UAAC,SAAS;4BACZ,OAAO,CAAC,SAAS,CAAC,CAAC;wBACvB,CAAC,CAAC;6BACD,KAAK,CAAC,UAAC,KAAK;4BACT,MAAM,CAAC,IAAI,CAAC,CAAC;wBACjB,CAAC,CAAC,CAAC;oBACX,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,OAAO,CAAC,IAAI,CAAC,CAAC;oBAClB,CAAC;gBACL,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,2BAAG,GAAV,UAAc,SAAiB,EAAE,GAAW,EAAE,IAAO;YAArD,iBAuBC;YAtBG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBAErC,IAAI,gBAAwB,CAAC;gBAC7B,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;oBAChB,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;wBAE/B,gBAAgB,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY;4BAC5C,mBAAmB,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;wBACrD,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BACxE,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM;gCACxD,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC;wBAC9D,CAAC;oBACL,CAAC,CAAC;yBACG,IAAI,CAAC;wBACF,OAAO,EAAE,CAAC;oBACd,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAU;wBAChB,MAAM,CAAC,KAAK,CAAC,CAAC;oBAClB,CAAC,CAAC,CAAC;gBACX,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,cAAc,CAAC,CAAC;gBAC3B,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,8BAAM,GAAb,UAAc,SAAiB,EAAE,GAAW;YAA5C,iBAKC;YAJG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;gBACjG,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,6BAAK,GAAZ;YACI,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;gBACrE,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,8BAAM,GAAd,UAAe,SAAiB,EAAE,GAAW;YACzC,MAAM,CAAC,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;QACjC,CAAC;QAEO,mCAAW,GAAnB,UAAuB,IAAO;YAC1B,MAAM,CAAC,IAAI,OAAO,CAAkC,UAAC,OAAO,EAAE,MAAM;gBAChE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACP,IAAI,MAAM,GAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAC1C,IAAI,aAAa,GAAW,YAAY,CAAC;oBAEzC,IAAI,QAAQ,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,cAAc,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;oBAEtG,IAAI,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,MAAM,EACxF,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;oBAE7D,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;wBACvC,OAAO,CAAC,MAAM,CAAC,CAAC;oBACpB,CAAC,EAAE,UAAC,GAAG;wBACH,MAAM,CAAC,GAAG,CAAC,CAAC;oBAChB,CAAC,CAAC,CAAC;gBACP,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,EAAE,CAAC;gBACb,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,mCAAW,GAAnB,UAAuB,IAAqC;YACxD,MAAM,CAAC,IAAI,OAAO,CAAI,UAAC,OAAO,EAAE,MAAM;gBAElC,IAAI,QAAQ,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,cAAc,CAAC,sBAAsB,EAAE,CAAC;gBACzF,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACP,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;wBACtC,IAAI,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,mBAAmB,CAAC,qBAAqB,CACtF,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;wBAErE,IAAI,kBAAkB,GAAM,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;wBAErD,OAAO,CAAC,kBAAkB,CAAC,CAAC;oBAChC,CAAC,EAAE,UAAC,GAAG;wBACH,MAAM,CAAC,GAAG,CAAC,CAAC;oBAChB,CAAC,CAAC,CAAC;gBACP,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,EAAE,CAAC;gBACb,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QACL,oBAAC;IAAD,CA1HA,AA0HC,IAAA;IA1HY,sCAAa","file":"secureStorage.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport {IStorage} from \"../../core/services/IStorage\";\n\nexport class SecureStorage implements IStorage {\n\n    constructor() {\n    }\n\n    public get<T>(container: string, key: string): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n\n            let localSettings: Windows.Storage.ApplicationDataContainer =\n                Windows.Storage.ApplicationData.current.localSettings;\n            if (this.calcId(container, key).length > 0) {\n                let localSettingsValue: string = localSettings.values.lookup(this.calcId(container, key));\n\n                if (localSettingsValue) {\n\n                    let data: Windows.Storage.Streams.IBuffer = Windows.Security.Cryptography.\n                        CryptographicBuffer.decodeFromBase64String(localSettingsValue);\n\n                    this.decryptData(data)\n                        .then((result) => {\n                            return <T>result;\n                        })\n                        .then((getResult) => {\n                            resolve(getResult);\n                        })\n                        .catch((error) => {\n                            reject(null);\n                        });\n                } else {\n                    resolve(null);\n                }\n            } else {\n                resolve(null);\n            }\n        });\n    }\n\n    public set<T>(container: string, key: string, data: T): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n\n            let getEncryptedData: string;\n            if (data !== null) {\n                this.encryptData(data).then((result) => {\n\n                    getEncryptedData = Windows.Security.Cryptography.\n                        CryptographicBuffer.encodeToBase64String(result);\n                    if (this.calcId(container, key).length > 0 && getEncryptedData.length > 0) {\n                        Windows.Storage.ApplicationData.current.localSettings.values.\n                            insert(this.calcId(container, key), getEncryptedData);\n                    }\n                })\n                    .then(() => {\n                        resolve();\n                    }).catch((error: any) => {\n                        reject(error);\n                    });\n            } else {\n                reject(\"data is null\");\n            }\n        });\n    }\n\n    public remove(container: string, key: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            Windows.Storage.ApplicationData.current.localSettings.values.remove(this.calcId(container, key));\n            resolve();\n        });\n    }\n\n    public clear(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            Windows.Storage.ApplicationData.current.localSettings.values.clear();\n            resolve();\n        });\n    }\n\n    private calcId(container: string, key: string): string {\n        return container + \"_\" + key;\n    }\n\n    private encryptData<T>(data: T): Promise<Windows.Storage.Streams.IBuffer> {\n        return new Promise<Windows.Storage.Streams.IBuffer>((resolve, reject) => {\n            if (data) {\n                let strMsg: string = JSON.stringify(data);\n                let strDescriptor: string = \"LOCAL=user\";\n\n                let provider = new Windows.Security.Cryptography.DataProtection.DataProtectionProvider(strDescriptor);\n\n                let buffMsg = Windows.Security.Cryptography.CryptographicBuffer.convertStringToBinary(strMsg,\n                    Windows.Security.Cryptography.BinaryStringEncoding.utf8);\n\n                provider.protectAsync(buffMsg).done((result) => {\n                    resolve(result);\n                }, (err) => {\n                    reject(err);\n                });\n            } else {\n                reject();\n            }\n        });\n    }\n\n    private decryptData<T>(data: Windows.Storage.Streams.IBuffer): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n\n            let provider = new Windows.Security.Cryptography.DataProtection.DataProtectionProvider();\n            if (data) {\n                provider.unprotectAsync(data).done((result) => {\n                    let resultString = Windows.Security.Cryptography.CryptographicBuffer.convertBinaryToString(\n                        Windows.Security.Cryptography.BinaryStringEncoding.utf8, result);\n\n                    let binaryToStringData = <T>JSON.parse(resultString);\n\n                    resolve(binaryToStringData);\n                }, (err) => {\n                    reject(err);\n                });\n            } else {\n                reject();\n            }\n        });\n    }\n}\n"],"sourceRoot":"../../.."}