{"version":3,"sources":["common/storage/wua/localStorageService.ts"],"names":[],"mappings":"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","file":"localStorageService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nexport class LocalStorageService {\n    private _rootStorageFolder: Windows.Storage.StorageFolder;\n    private _rootFolder: string;\n\n    constructor(rootStorageFolder: Windows.Storage.StorageFolder) {\n        this._rootStorageFolder = rootStorageFolder;\n    }\n\n    public checkInitised(storageName: string): Promise<void> {\n        return Promise.resolve();\n    }    \n\n    public initialise(storageName: string, removeExisting: boolean): Promise<void> {\n        this._rootFolder = storageName;\n\n        return new Promise<void>((resolve) => {\n            if (removeExisting) {\n                this._rootStorageFolder.getFolderAsync(this._rootFolder).then(\n                    (folder) => {\n                        folder.deleteAsync().then(\n                            () => {\n                                resolve();\n                            },\n                            () => {\n                                resolve();\n                            }\n                        );\n                    },\n                    (err) => {\n                        resolve(err);\n                    }\n                );\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    public closedown(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            resolve();\n        });\n    }\n\n    public write<T>(path: string, file: string, blob: T): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            path = this.sanitisePath(path);\n\n            this._rootStorageFolder.createFolderAsync(path, Windows.Storage.CreationCollisionOption.openIfExists).then(\n                (folder) => {\n                    folder.createFileAsync(file, Windows.Storage.CreationCollisionOption.replaceExisting).then(\n                        (fileInFolder) => {\n                            let memoryStream = new Windows.Storage.Streams.InMemoryRandomAccessStream();\n                            let dataWriter = new Windows.Storage.Streams.DataWriter(memoryStream);\n                            dataWriter.writeString(JSON.stringify(blob));\n                            let buffer = dataWriter.detachBuffer();\n                            dataWriter.close();\n\n                            Windows.Storage.FileIO.writeBufferAsync(fileInFolder, buffer).then(\n                                () => {\n                                    resolve();\n                                },\n                                (error) => {\n                                    reject(error);\n                                }\n                            );\n                        },\n                        (error) => {\n                            reject(error);\n                        }\n                    );\n                },\n                (error) => {\n                    reject(error);\n                }\n            );\n        });\n    }\n\n    public read<T>(path: string, file: string): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            path = this.sanitisePath(path);\n\n            this._rootStorageFolder.getFileAsync(path + file).then(\n                (fileInFolder) => {\n                    Windows.Storage.FileIO.readBufferAsync(fileInFolder).then(\n                        (buffer) => {\n                            let dataReader = Windows.Storage.Streams.DataReader.fromBuffer(buffer);\n                            resolve(JSON.parse(dataReader.readString(buffer.length)));\n                        },\n                        (error) => {\n                            reject(error);\n                        }\n                    );\n                },\n                (error) => {\n                    reject(error);\n                }\n            );\n        });\n    }\n\n    public exists(path: string, file: string): Promise<boolean> {\n        return new Promise<boolean>((resolve) => {\n            path = this.sanitisePath(path);\n\n            this._rootStorageFolder.getFileAsync(path + file).then(\n                () => {\n                    resolve(true);\n                },\n                () => {\n                    resolve(false);\n                }\n            );\n        });\n    }\n\n    public size(path: string, file: string): Promise<number> {\n        return new Promise<number>((resolve) => {\n            path = this.sanitisePath(path);\n\n            this._rootStorageFolder.getFileAsync(path + file).then(\n                (storageFile) => {\n                    storageFile.getBasicPropertiesAsync().then(\n                        (props) => {\n                            resolve(props.size);\n                        },\n                        () => {\n                            resolve(-1);\n                        }\n                    );\n                },\n                () => {\n                    resolve(-1);\n                }\n            );\n        });\n    }\n\n    public remove(path: string, file: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            path = this.sanitisePath(path);\n\n            this._rootStorageFolder.getFileAsync(file).then(\n                (fileInFolder) => {\n                    fileInFolder.deleteAsync().then(\n                        () => {\n                            resolve();\n                        },\n                        (error) => {\n                            reject(error);\n                        }\n                    );\n                },\n                (error) => {\n                    reject(error);\n                }\n            );\n        });\n    }\n\n    public list(path: string): Promise<string[]> {\n        return new Promise<string[]>((resolve, reject) => {\n            path = this.sanitisePath(path);\n\n            this._rootStorageFolder.getFolderAsync(path).then(\n                (folder) => {\n                    folder.getFilesAsync().then(\n                        (filesInFolder) => {\n                            let files: string[] = [];\n                            filesInFolder.forEach((file) => {\n                                files.push(file.name);\n                            });\n                            resolve(files);\n                        },\n                        (error) => {\n                            reject(error);\n                        }\n                    );\n                },\n                (error) => {\n                    reject(error);\n                }\n            );\n        });\n    }\n\n    private sanitisePath(path: string): string {\n        if (path) {\n            path = path.replace(/\\//g, \"\\\\\");\n            if (path[0] === \"\\\\\") {\n                path = path.substr(1);\n            }\n            if (path[path.length - 1] !== \"\\\\\") {\n                path = path + \"\\\\\";\n            }\n        }\n\n        return this._rootFolder + \"\\\\\" + path;\n    }\n}\n"],"sourceRoot":"../../.."}