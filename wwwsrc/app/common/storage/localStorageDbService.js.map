{"version":3,"sources":["common/storage/localStorageDbService.ts"],"names":[],"mappings":"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","file":"localStorageDbService.js","sourcesContent":["import { IDatabaseService } from \"./IDatabaseService\";\r\nimport { DatabaseSchema } from \"./models/databaseSchema\";\r\nimport { DatabaseSchemaStore } from \"./models/databaseSchemaStore\";\r\n\r\ntype Storage = {\r\n    def: {pk: string, autoIncrement: boolean, lastAutoIncrementValue?: number},\r\n    data: any[]\r\n};\r\n\r\nexport class LocalStorageDbService implements IDatabaseService {\r\n\r\n    public async create(schema: DatabaseSchema): Promise<void> {\r\n        for (let storeSchema of schema.storeSchemas || []) {\r\n            await this.storeCreate(schema.name, storeSchema);\r\n        }\r\n    }\r\n\r\n    public async open(databaseName: string): Promise<void> {\r\n        // noop\r\n    }\r\n\r\n    public async close(databaseName: string): Promise<void> {\r\n        // noop\r\n    }\r\n\r\n    public async destroy(databaseName: string): Promise<void> {\r\n        let storeNames = this.getDbStoreNames(databaseName);\r\n        storeNames.forEach(storeName => this.storeRemove(databaseName, storeName));\r\n    }\r\n\r\n    public async exists(databaseName: string, storeName: string): Promise<boolean> {\r\n        return !!this.getDbStoreNames(databaseName).length;\r\n    }\r\n\r\n    public async storeExists(databaseName: string, storeName: string): Promise<boolean> {\r\n        let key = this.getKeyFromNames(databaseName, storeName);\r\n        return !!localStorage[key];\r\n    }\r\n\r\n    public async storeCreate(databaseName: string, storeSchema: DatabaseSchemaStore): Promise<void> {\r\n        let key = this.getKeyFromNames(databaseName, storeSchema.name);\r\n        if (!localStorage[key]) {\r\n\r\n            let freshStorage =  <Storage> {\r\n                                    def: {\r\n                                        pk: storeSchema.keyPath,\r\n                                        autoIncrement: storeSchema.autoIncrement,\r\n                                        lastAutoIncrementValue: storeSchema.autoIncrement ? -1 : undefined\r\n                                    },\r\n                                    data: []\r\n                                };\r\n\r\n            this.setStore(key, freshStorage);\r\n        }\r\n    }\r\n    public async storeRemove(databaseName: string, storeName: string): Promise<void> {\r\n        let key = this.getKeyFromNames(databaseName, storeName);\r\n        localStorage.removeItem(key);\r\n    }\r\n\r\n    public async set<T>(databaseName: string, storeName: string, data: T): Promise<void> {\r\n        await this.setAll<T>(databaseName, storeName, [data]);\r\n    }\r\n\r\n    public async get<T>(databaseName: string, storeName: string, indexName: string, indexValue: any): Promise<T> {\r\n        return (await this.getAll<T>(databaseName, storeName, indexName, indexValue))[0];\r\n    }\r\n\r\n    public getIndexes(databaseName: string, storeName: string): DOMStringList {\r\n        let key = this.getKeyFromNames(databaseName, storeName);\r\n        let store = this.getStore(key);\r\n        const { pk } = store.def;\r\n\r\n        // in reality because we're nor really an indexedDb implementation,\r\n        //   any field can be queried without being an index, so not sure about this...\r\n        // maybe we store the indexes passed in during storeCreate in def and be strict about only\r\n        //  allowing querying on these predefined indexes..\r\n        let result = <DOMStringList>{\r\n            length: 1,\r\n            contains: (name: string) => name === pk,\r\n            item: (index: number) => index === 0 ? pk : null,\r\n        };\r\n        result[0] = pk;\r\n\r\n        return result;\r\n    }\r\n\r\n    public async getAll<T>(databaseName: string, storeName: string, indexName?: string, indexValue?: any): Promise<T[]> {\r\n        let storeKey = this.getKeyFromNames(databaseName, storeName);\r\n        let data = this.getStore(storeKey).data;\r\n\r\n        return indexName\r\n            ? data.filter(item => item[indexName] === indexValue)\r\n            : data;\r\n    }\r\n\r\n    public async setAll<T>(databaseName: string, storeName: string, data: T[]): Promise<void> {\r\n        // this applies the incoming data to the store, it does not replace the store with this set\r\n        let key = this.getKeyFromNames(databaseName, storeName);\r\n        let store = this.getStore(key);\r\n        const { autoIncrement, pk, lastAutoIncrementValue } = store.def;\r\n\r\n        let workingAutoIncrementValue = lastAutoIncrementValue;\r\n        data.forEach((item: any) => {\r\n            let exitingIndex = store.data.findIndex(storeItem => storeItem[pk] === item[pk]);\r\n            if (exitingIndex === -1) {\r\n                if (autoIncrement) {\r\n                    item[pk] = ++workingAutoIncrementValue;\r\n                } else if (item[pk] === null || item[pk] === undefined) {\r\n                    throw new Error(\"PK must be supplied for a non-autoincrement store\");\r\n                }\r\n                store.data.push(item);\r\n            } else {\r\n                store.data[exitingIndex] = item;\r\n            }\r\n        });\r\n        store.def.lastAutoIncrementValue = workingAutoIncrementValue;\r\n\r\n        this.setStore(key, store);\r\n    }\r\n\r\n    public async remove(databaseName: string, storeName: string, key: any): Promise<void> {\r\n        let storeKey = this.getKeyFromNames(databaseName, storeName);\r\n        let store = this.getStore(storeKey);\r\n        store.data = store.data.filter(item => item[store.def.pk] !== key);\r\n        this.setStore(storeKey, store);\r\n    }\r\n\r\n    public async removeAll(databaseName: string, storeName: string): Promise<void> {\r\n        let storeKey = this.getKeyFromNames(databaseName, storeName);\r\n        let store = this.getStore(storeKey);\r\n        store.data = [];\r\n        this.setStore(storeKey, store);\r\n    }\r\n\r\n    private getKeyFromNames(dbName: string, storeName: string): string {\r\n        return `db:${dbName}:${storeName}`;\r\n    }\r\n\r\n    private getDbStoreNames(dbName: string): string[] {\r\n        let myStoreKeys: string[] = [];\r\n\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n            if (localStorage.key(i).indexOf(`db:${dbName}`) === 0) {\r\n                myStoreKeys.push(localStorage.key(i).replace(`db:${dbName}:`, \"\"));\r\n            }\r\n        }\r\n        return myStoreKeys;\r\n    }\r\n\r\n    private getStore(key: string): Storage {\r\n        let storedString = localStorage[key];\r\n        return storedString && JSON.parse(storedString);\r\n    }\r\n\r\n    private setStore(key: string, value: Storage): void {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}