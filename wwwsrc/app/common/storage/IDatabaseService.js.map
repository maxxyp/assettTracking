{"version":3,"sources":["common/storage/IDatabaseService.ts"],"names":[],"mappings":"AAAA,kDAAkD","file":"IDatabaseService.js","sourcesContent":["/// <reference path=\"../../../typings/app.d.ts\" />\n\nimport { DatabaseSchema } from \"./models/databaseSchema\";\nimport { DatabaseSchemaStore } from \"./models/databaseSchemaStore\";\n\nexport interface IDatabaseService {\n    create(schema: DatabaseSchema): Promise<void>;\n    open(databaseName: string): Promise<void>;\n    close(databaseName: string): Promise<void>;\n    destroy(databaseName: string): Promise<void>;\n    exists(databaseName: string, storeName: string): Promise<boolean>;\n\n    storeExists(databaseName: string, storeName: string): Promise<boolean>;\n    storeCreate(databaseName: string, storeSchema: DatabaseSchemaStore): Promise<void>;\n    storeRemove(databaseName: string, storeName: string): Promise<void>;\n\n    set<T>(databaseName: string, storeName: string, data: T): Promise<void>;\n    get<T>(databaseName: string, storeName: string, indexName: string, indexValue: any): Promise<T>;\n    getIndexes(databaseName: string, storeName: string): DOMStringList;\n\n    getAll<T>(databaseName: string, storeName: string, indexName?: string, indexValue?: any): Promise<T[]>;\n    setAll<T>(databaseName: string, storeName: string, data: T[]): Promise<void>;\n\n    remove(databaseName: string, storeName: string, key: any): Promise<void>;\n    removeAll(databaseName: string, storeName: string): Promise<void>;\n}\n"],"sourceRoot":"../.."}