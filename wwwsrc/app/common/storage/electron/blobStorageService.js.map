{"version":3,"sources":["common/storage/electron/blobStorageService.ts"],"names":[],"mappings":"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","file":"blobStorageService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport { IBlobStorageService } from \"../IBlobStorageService\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { IndexedDatabaseService } from \"../indexedDatabaseService\";\nimport { IDatabaseService } from \"../IDatabaseService\";\nimport { DatabaseSchema } from \"../models/databaseSchema\";\nimport { DatabaseSchemaStore } from \"../models/databaseSchemaStore\";\nimport { DatabaseSchemaStoreIndex } from \"../models/databaseSchemaStoreIndex\";\nimport { DatabaseFileBlob } from \"./models/databaseFileBlob\";\n\n@inject(IndexedDatabaseService)\nexport class BlobStorageService implements IBlobStorageService {\n    private static _STORE_NAME: string = \"files\";\n\n    private _databaseService: IDatabaseService;\n    private _isIntialised: boolean;\n    private _storageName: string;\n\n    constructor(databaseService: IDatabaseService) {\n        this._databaseService = databaseService;\n        this._isIntialised = false;\n    }\n\n    private static sanitisePath(path: string): string {\n        if (path) {\n            path = path.replace(/\\\\/g, \"/\");\n            if (path[0] !== \"/\") {\n                path = \"/\" + path;\n            }\n            if (path[path.length - 1] !== \"/\") {\n                path += \"/\";\n            }\n        }\n\n        return path;\n    }\n\n    public checkInitised(storageName: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            this._databaseService.exists(BlobStorageService._STORE_NAME, storageName)\n                .then((exists: boolean) => {\n                    if (exists) {\n                        this._isIntialised = true;\n                        resolve();\n                    } else {\n                        this._isIntialised = false;\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    public initialise(storageName: string, removeExisting: boolean): Promise<void> {\n        this._storageName = storageName;\n        return new Promise<void>((resolve, reject) => {\n            if (this._isIntialised) {\n                resolve();\n            } else {\n                let open = () => {\n                    let schema: DatabaseSchema = new DatabaseSchema(this._storageName, 1, [\n                        new DatabaseSchemaStore(BlobStorageService._STORE_NAME, \"fullPath\", false, [\n                            new DatabaseSchemaStoreIndex(\"path\", \"path\", false)\n                        ])\n                    ]);\n\n                    this._databaseService.exists(BlobStorageService._STORE_NAME, BlobStorageService._STORE_NAME).then((exists) => {\n                        if (exists) {\n                            this._databaseService.open(BlobStorageService._STORE_NAME)\n                                .then(() => {\n                                    this._isIntialised = true;\n                                    resolve();\n                                })\n                                .catch(() => {\n                                    reject(\"Unable to initialise blob storage\");\n                                });\n                        } else {\n                            this._databaseService.create(schema)\n                                .then(() => {\n                                    this._isIntialised = true;\n                                    resolve();\n                                })\n                                .catch(() => {\n                                    reject(\"Unable to initialise blob storage\");\n                                });\n                        }\n                    });\n\n                };\n\n                if (removeExisting) {\n                    this._databaseService.destroy(this._storageName).then(() => {\n                        return open();\n                    }).catch((err) => {\n                        resolve(err);\n                    });\n                } else {\n                    return open();\n                }\n            }\n        });\n    }\n\n    public closedown(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this._isIntialised) {\n                resolve();\n            } else {\n                this._databaseService.close(BlobStorageService._STORE_NAME)\n                    .then(() => {\n                        this._isIntialised = false;\n                        resolve();\n                    })\n                    .catch(() => {\n                        reject(\"Unable to closedown blob storage\");\n                    });\n            }\n        });\n    }\n\n    public write<T>(path: string, file: string, blob: T): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this._isIntialised) {\n                reject(\"The blob storage is not initialised\");\n            } else {\n                path = BlobStorageService.sanitisePath(path);\n\n                let databaseFileBlob = new DatabaseFileBlob();\n                databaseFileBlob.fullPath = path + file;\n                databaseFileBlob.path = path;\n                databaseFileBlob.file = file;\n                databaseFileBlob.blob = blob;\n                databaseFileBlob.size = JSON.stringify(blob).length;\n\n                this._databaseService.set(BlobStorageService._STORE_NAME, BlobStorageService._STORE_NAME, databaseFileBlob)\n                    .then(() => {\n                        resolve();\n                    })\n                    .catch(() => {\n                        reject(\"Unable to write file to blob storage\");\n                    });\n            }\n        });\n    }\n\n    public read<T>(path: string, file: string): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            if (!this._isIntialised) {\n                reject(\"The blob storage is not initialised\");\n            } else {\n                path = BlobStorageService.sanitisePath(path);\n\n                this._databaseService.get<DatabaseFileBlob>(BlobStorageService._STORE_NAME, BlobStorageService._STORE_NAME, \"path\", path + file)\n                    .then((item) => {\n                        resolve(item.blob);\n                    })\n                    .catch(() => {\n                        reject(\"Unable to read file from blob storage\");\n                    });\n            }\n        });\n    }\n\n    public exists(path: string, file: string): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            if (!this._isIntialised) {\n                reject(\"The blob storage is not initialised\");\n            } else {\n                path = BlobStorageService.sanitisePath(path);\n\n                this._databaseService.get<DatabaseFileBlob>(BlobStorageService._STORE_NAME, BlobStorageService._STORE_NAME, \"path\", path + file)\n                    .then(() => {\n                        resolve(true);\n                    })\n                    .catch(() => {\n                        resolve(false);\n                    });\n            }\n        });\n    }\n\n    public size(path: string, file: string): Promise<number> {\n        return new Promise<number>((resolve, reject) => {\n            if (!this._isIntialised) {\n                reject(\"The blob storage is not initialised\");\n            } else {\n                path = BlobStorageService.sanitisePath(path);\n\n                this._databaseService.get<DatabaseFileBlob>(BlobStorageService._STORE_NAME, BlobStorageService._STORE_NAME, \"path\", path + file)\n                    .then((data) => {\n                        resolve(data.size);\n                    })\n                    .catch(() => {\n                        resolve(-1);\n                    });\n            }\n        });\n    }\n\n    public remove(path: string, file: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this._isIntialised) {\n                reject(\"The blob storage is not initialised\");\n            } else {\n                path = BlobStorageService.sanitisePath(path);\n\n                this._databaseService.remove(BlobStorageService._STORE_NAME, BlobStorageService._STORE_NAME, path + file)\n                    .then(() => {\n                        resolve();\n                    })\n                    .catch(() => {\n                        reject(\"Unable to delete file from blob storage\");\n                    });\n            }\n        });\n    }\n\n    public list(path: string): Promise<string[]> {\n        return new Promise<string[]>((resolve, reject) => {\n            if (!this._isIntialised) {\n                reject(\"The blob storage is not initialised\");\n            } else {\n                path = BlobStorageService.sanitisePath(path);\n\n                this._databaseService.getAll<DatabaseFileBlob>(BlobStorageService._STORE_NAME, \"path\", path)\n                    .then((blobs) => {\n                        let files: string[] = [];\n                        if (blobs) {\n                            for (let i = 0; i < blobs.length; i++) {\n                                files.push(blobs[i].file);\n                            }\n                        }\n                        resolve(files);\n                    })\n                    .catch(() => {\n                        reject(\"Unable to list files from blob storage\");\n                    });\n            }\n        });\n    }\n}\n"],"sourceRoot":"../../.."}