{"version":3,"sources":["common/storage/blobStorageService.ts"],"names":[],"mappings":"AAAA,kDAAkD;;;;;;;;;;;;;;IAKlD;QAAwC,sCAAwC;QAC5E;mBACI,kBAAM,gBAAgB,EAAE,oBAAoB,CAAC;QACjD,CAAC;QAEM,0CAAa,GAApB,UAAqB,WAAmB;YACpC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;gBAChC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,uCAAU,GAAjB,UAAkB,WAAmB,EAAE,cAAuB;YAC1D,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;gBAChC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,sCAAS,GAAhB;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;gBAChC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;YAC9B,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,kCAAK,GAAZ,UAAgB,IAAY,EAAE,IAAY,EAAE,IAAO;YAC/C,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;gBAChC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAI,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,iCAAI,GAAX,UAAe,IAAY,EAAE,IAAY;YACrC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;gBAChC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAI,IAAI,EAAE,IAAI,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,mCAAM,GAAb,UAAc,IAAY,EAAE,IAAY;YACpC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;gBAChC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,iCAAI,GAAX,UAAY,IAAY,EAAE,IAAY;YAClC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;gBAChC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,mCAAM,GAAb,UAAc,IAAY,EAAE,IAAY;YACpC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;gBAChC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,iCAAI,GAAX,UAAY,IAAY;YACpB,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;gBAChC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACP,CAAC;QACL,yBAAC;IAAD,CA1DA,AA0DC,CA1DuC,yCAAmB,GA0D1D;IA1DY,gDAAkB","file":"blobStorageService.js","sourcesContent":["/// <reference path=\"../../../typings/app.d.ts\" />\n\nimport {IBlobStorageService} from \"./IBlobStorageService\";\nimport {PlatformServiceBase} from \"../core/platformServiceBase\";\n\nexport class BlobStorageService extends PlatformServiceBase<IBlobStorageService> implements IBlobStorageService {\n    constructor() {\n        super(\"common/storage\", \"BlobStorageService\");\n    }\n\n    public checkInitised(storageName: string): Promise<void> {\n        return this.loadModule().then(module => {\n            return module.checkInitised(storageName);\n        });\n    }\n\n    public initialise(storageName: string, removeExisting: boolean) : Promise<void> {\n        return this.loadModule().then(module => {\n            return module.initialise(storageName, removeExisting);\n        });\n    }\n\n    public closedown() : Promise<void> {\n        return this.loadModule().then(module => {\n            return module.closedown();\n        });\n    }\n\n    public write<T>(path: string, file: string, blob: T) : Promise<void> {\n        return this.loadModule().then(module => {\n            return module.write<T>(path, file, blob);\n        });\n    }\n\n    public read<T>(path: string, file: string) : Promise<T> {\n        return this.loadModule().then(module => {\n            return module.read<T>(path, file);\n        });\n    }\n\n    public exists(path: string, file: string) : Promise<boolean>  {\n        return this.loadModule().then(module => {\n            return module.exists(path, file);\n        });\n    }\n\n    public size(path: string, file: string) : Promise<number>  {\n        return this.loadModule().then(module => {\n            return module.size(path, file);\n        });\n    }\n\n    public remove(path: string, file: string) : Promise<void>  {\n        return this.loadModule().then(module => {\n            return module.remove(path, file);\n        });\n    }\n\n    public list(path: string) : Promise<string[]>  {\n        return this.loadModule().then(module => {\n            return module.list(path);\n        });\n    }\n}\n"],"sourceRoot":"../.."}