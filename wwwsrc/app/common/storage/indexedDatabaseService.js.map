{"version":3,"sources":["common/storage/indexedDatabaseService.ts"],"names":[],"mappings":"AAAA,kDAAkD;;;;IAOlD;QAII;YACI,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;YACd,kFAAkF;YAClF,qFAAqF;YACrF,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC,CAAC,kDAAkD;QACzF,CAAC;QAEM,uCAAM,GAAb,UAAc,MAAsB;YAApC,iBA2CC;YA1CG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;gBACjE,OAAO,CAAC,eAAe,GAAG;oBACtB,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;oBAEvC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;wBACtB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BAClD,EAAE,CAAC,CAAC,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gCAC/E,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BACzE,CAAC;4BAED,IAAI,KAAK,GAAG,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;gCAC7E,OAAO,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO;gCACvC,aAAa,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,aAAa;6BACtD,CAAC,CAAC;4BAEH,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gCACjC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oCAC7D,IAAI,UAAU,GAAG,yBAAW,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;oCAEhF,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,IAAI,KAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;wCAC3D,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EACpD,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EACzC,EAAE,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CACvD,CAAC;oCACN,CAAC;gCACL,CAAC;4BACL,CAAC;wBACL,CAAC;oBACL,CAAC;gBACL,CAAC,CAAC;gBAEF,OAAO,CAAC,SAAS,GAAG;oBAChB,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;oBACvC,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,UAAC,EAAc;oBAC7B,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;gBACvB,CAAC,CAAC;YAEN,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,qCAAI,GAAX,UAAY,YAAoB;YAAhC,iBAWC;YAVG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAClD,OAAO,CAAC,SAAS,GAAG;oBAChB,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;oBACxC,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC;gBACF,OAAO,CAAC,OAAO,GAAG,UAAC,EAAc;oBAC7B,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;gBACvB,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,sCAAK,GAAZ,UAAa,YAAoB;YAAjC,iBAUC;YATG,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC9C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;YAC/D,CAAC;YAED,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,KAAK,EAAE,CAAC;gBAC/B,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;gBAC9B,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,wCAAO,GAAd,UAAe,YAAoB;YAC/B,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;gBAC5D,OAAO,CAAC,SAAS,GAAG;oBAChB,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC;gBACF,OAAO,CAAC,OAAO,GAAG,UAAC,EAAc;oBAC7B,MAAM,CAAC,WAAW,GAAG,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;gBAC3D,CAAC,CAAC;gBACF,OAAO,CAAC,SAAS,GAAG;oBAChB,MAAM,CAAC,WAAW,GAAG,YAAY,GAAG,IAAI,GAAG,yFAAyF,CAAC,CAAC;gBAC1I,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,uCAAM,GAAb,UAAc,YAAoB,EAAE,SAAiB;YAArD,iBAoBC;YAnBG,MAAM,CAAC,IAAI,OAAO,CAAU,UAAC,OAAO,EAAE,MAAM;gBACxC,IAAI,QAAQ,GAAY,IAAI,CAAC;gBAC7B,IAAI,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAE/C,OAAO,CAAC,eAAe,GAAG,UAAC,CAAM;oBAC7B,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;oBAC7B,QAAQ,GAAG,KAAK,CAAC;oBACjB,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACtB,CAAC,CAAC;gBAEF,OAAO,CAAC,SAAS,GAAG;oBAChB,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;oBACxC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACtB,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,UAAC,EAAc;oBAC7B,MAAM,CAAC,QAAQ,GAAG,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;gBACrD,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,4CAAW,GAAlB,UAAmB,YAAoB,EAAE,SAAiB;YACtD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;QACxF,CAAC;QAEM,4CAAW,GAAlB,UAAmB,YAAoB,EAAE,mBAAwC;YAAjF,iBAmDC;YAlDG,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBACvD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,yCAAyC,GAAG,mBAAmB,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;YACtG,CAAC;YAED,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,OAAO,GAAW,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC;gBACrD,IAAI,IAAI,GAAG,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;gBAEvC,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,KAAK,EAAE,CAAC;gBAC/B,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;gBAE9B,OAAO,EAAE,CAAC;gBAEV,IAAI,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAEnD,OAAO,CAAC,eAAe,GAAG;oBACtB,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;oBAExC,EAAE,CAAC,CAAC,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC7E,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;oBACvE,CAAC;oBAED,IAAI,KAAK,GAAG,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,EAAE;wBAC3E,OAAO,EAAE,mBAAmB,CAAC,OAAO;wBACpC,aAAa,EAAE,mBAAmB,CAAC,aAAa;qBACnD,CAAC,CAAC;oBAEH,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BAC1D,IAAI,UAAU,GAAG,yBAAW,CAAC,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;4BAE7E,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,IAAI,KAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;gCAC3D,KAAK,CAAC,WAAW,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EACjD,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EACtC,EAAE,MAAM,EAAE,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CACpD,CAAC;4BACN,CAAC;wBACL,CAAC;oBACL,CAAC;gBACL,CAAC,CAAC;gBAEF,OAAO,CAAC,SAAS,GAAG;oBAChB,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;oBACxC,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,UAAC,EAAc;oBAC7B,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;gBACvB,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,4CAAW,GAAlB,UAAmB,YAAoB,EAAE,SAAiB;YAA1D,iBAiCC;YAhCG,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBACvD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,2CAA2C,GAAG,SAAS,GAAG,GAAG,CAAC,CAAC;YACzF,CAAC;YAED,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,OAAO,GAAW,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC;gBACrD,IAAI,IAAI,GAAG,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;gBAEvC,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,KAAK,EAAE,CAAC;gBAC/B,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;gBAE9B,OAAO,EAAE,CAAC;gBAEV,IAAI,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAEnD,OAAO,CAAC,eAAe,GAAG;oBACtB,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;oBAExC,EAAE,CAAC,CAAC,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBAC9D,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;oBACxD,CAAC;gBACL,CAAC,CAAC;gBAEF,OAAO,CAAC,SAAS,GAAG;oBAChB,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;oBACxC,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,UAAC,EAAc;oBAC7B,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;gBACvB,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,oCAAG,GAAV,UAAc,YAAoB,EAAE,SAAiB,EAAE,IAAO;YAA9D,iBAcC;YAbG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,KAAK,GAAmB,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;gBACvF,IAAI,KAAK,GAAmB,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAEzD,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC9B,OAAO,CAAC,SAAS,GAAG;oBAChB,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,UAAC,EAAc;oBAC7B,MAAM,CAAC,QAAQ,GAAG,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;gBACrD,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,oCAAG,GAAV,UAAc,YAAoB,EAAE,SAAiB,EAAE,SAAiB,EAAE,WAAkB;YACxF,MAAM,CAAC,IAAI,CAAC,MAAM,CAAI,YAAY,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,CAAC;iBACjE,IAAI,CAAC,UAAC,MAAM;gBACT,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAC/D,CAAC,CAAC,CAAC;QACX,CAAC;QAEM,2CAAU,GAAjB,UAAkB,YAAoB,EAAE,SAAiB;YAErD,IAAI,KAAK,GAAmB,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;YACtF,IAAI,KAAK,GAAmB,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAEzD,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC;QAC5B,CAAC;QAEM,uCAAM,GAAb,UAAiB,YAAoB,EAAE,SAAiB,EAAE,SAAkB,EAAE,UAAgB;YAA9F,iBAuEC;YAtEG,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;gBACpC,IAAI,KAAK,GAAmB,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBACtF,IAAI,KAAK,GAAmB,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAEzD,IAAI,OAAmB,CAAC;gBACxB,IAAI,eAAe,GAAG,SAAS,IAAI,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACxD,IAAI,cAAc,GAAG,KAAK,CAAC;gBAE3B,0DAA0D;gBAC1D,EAAE,CAAC,CAAC,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,KAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;oBAC9E;6FACyE;oBAEzE,IAAI,KAAK,GAAa,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;oBACtD,IAAI,SAAS,GAAgB,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7D,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;oBACtC,cAAc,GAAG,IAAI,CAAC;gBAC1B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBAEJ,IAAI,SAAS,SAAa,CAAC;oBAC3B,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBACb,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAC7C,CAAC;oBAED,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACZ,IAAI,KAAK,GAAa,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;wBAC7C,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACZ,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;wBAC1C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,OAAO,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;wBACjC,CAAC;oBACL,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACZ,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;wBAC1C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,OAAO,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;wBACjC,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,IAAI,KAAK,GAAQ,EAAE,CAAC;gBAEpB,OAAO,CAAC,SAAS,GAAG;oBAChB,IAAI,MAAM,GAAuB,OAAO,CAAC,MAAM,CAAC;oBAChD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACT,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;4BACjB,IAAI,OAAO,GAAG,IAAI,CAAC;4BACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,IAAI,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;gCACpD,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oCACrD,OAAO,GAAG,KAAK,CAAC;gCACpB,CAAC;4BACL,CAAC;4BACD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gCACV,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;4BAC7B,CAAC;wBACL,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC7B,CAAC;wBACD,MAAM,CAAC,QAAQ,EAAE,CAAC;oBACtB,CAAC;gBACL,CAAC,CAAC;gBAEF,KAAK,CAAC,UAAU,GAAG;oBACf,OAAO,CAAC,KAAK,CAAC,CAAC;gBACnB,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,UAAC,EAAc;oBAC7B,MAAM,CAAC,QAAQ,GAAG,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;gBACrD,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,uCAAM,GAAb,UAAiB,YAAoB,EAAE,SAAiB,EAAE,IAAS;YAAnE,iBA0BC;YAzBG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,KAAK,GAAmB,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;gBACvF,IAAI,KAAK,GAAmB,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAEzD,IAAI,GAAG,GAAG,CAAC,CAAC;gBACZ,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBAE1B,IAAI,SAAO,GAAG;wBACV,EAAE,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;4BACpB,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;4BACnC,OAAO,CAAC,SAAS,GAAG,SAAO,CAAC;4BAC5B,OAAO,CAAC,OAAO,GAAG,UAAC,EAAc;gCAC7B,MAAM,CAAC,QAAQ,GAAG,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;4BACrD,CAAC,CAAC;4BACF,GAAG,EAAE,CAAC;wBACV,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,OAAO,EAAE,CAAC;wBACd,CAAC;oBACL,CAAC,CAAC;oBAEF,SAAO,EAAE,CAAC;gBACd,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,OAAO,EAAE,CAAC;gBACd,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,uCAAM,GAAb,UAAc,YAAoB,EAAE,SAAiB,EAAE,GAAQ;YAA/D,iBAcC;YAbG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,KAAK,GAAmB,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;gBACvF,IAAI,KAAK,GAAmB,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAEzD,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChC,OAAO,CAAC,SAAS,GAAG;oBAChB,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,UAAC,EAAc;oBAC7B,MAAM,CAAC,QAAQ,GAAG,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;gBACrD,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,0CAAS,GAAhB,UAAiB,YAAoB,EAAE,SAAiB;YAAxD,iBAcC;YAbG,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,KAAK,GAAmB,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;gBACvF,IAAI,KAAK,GAAmB,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAEzD,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;gBAC5B,OAAO,CAAC,SAAS,GAAG;oBAChB,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC;gBAEF,OAAO,CAAC,OAAO,GAAG,UAAC,EAAc;oBAC7B,MAAM,CAAC,QAAQ,GAAG,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;gBACrD,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACP,CAAC;QAEL,6BAAC;IAAD,CAtXA,AAsXC,IAAA;IAtXY,wDAAsB","file":"indexedDatabaseService.js","sourcesContent":["/// <reference path=\"../../../typings/app.d.ts\" />\n\nimport { IDatabaseService } from \"./IDatabaseService\";\nimport { DatabaseSchema } from \"./models/databaseSchema\";\nimport { DatabaseSchemaStore } from \"./models/databaseSchemaStore\";\nimport { ArrayHelper } from \"../core/arrayHelper\";\n\nexport class IndexedDatabaseService implements IDatabaseService {\n    private _db: { [key: string]: IDBDatabase };\n    private _isCompoundAvailable: boolean;\n\n    constructor() {\n        this._db = {};\n        // 20413 - window.navigator.userAgent.indexOf(\"Edge\") is unreliable in production,\n        //  leading to an Edge-based instance attempting to use compound indexes => goes bang\n        this._isCompoundAvailable = false; // window.navigator.userAgent.indexOf(\"Edge\") < 0;\n    }\n\n    public create(schema: DatabaseSchema): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            let request = window.indexedDB.open(schema.name, schema.version);\n            request.onupgradeneeded = () => {\n                this._db[schema.name] = request.result;\n\n                if (schema.storeSchemas) {\n                    for (let i = 0; i < schema.storeSchemas.length; i++) {\n                        if (this._db[schema.name].objectStoreNames.contains(schema.storeSchemas[i].name)) {\n                            this._db[schema.name].deleteObjectStore(schema.storeSchemas[i].name);\n                        }\n\n                        let store = this._db[schema.name].createObjectStore(schema.storeSchemas[i].name, {\n                            keyPath: schema.storeSchemas[i].keyPath,\n                            autoIncrement: schema.storeSchemas[i].autoIncrement\n                        });\n\n                        if (schema.storeSchemas[i].indexes) {\n                            for (let j = 0; j < schema.storeSchemas[i].indexes.length; j++) {\n                                let isCompound = ArrayHelper.isArray(schema.storeSchemas[i].indexes[j].keyPath);\n\n                                if (!isCompound || (isCompound && this._isCompoundAvailable)) {\n                                    store.createIndex(schema.storeSchemas[i].indexes[j].name,\n                                        schema.storeSchemas[i].indexes[j].keyPath,\n                                        { unique: schema.storeSchemas[i].indexes[j].unique }\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n\n            request.onsuccess = () => {\n                this._db[schema.name] = request.result;\n                resolve();\n            };\n\n            request.onerror = (ev: ErrorEvent) => {\n                reject(ev.message);\n            };\n\n        });\n    }\n\n    public open(databaseName: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            let request = window.indexedDB.open(databaseName);\n            request.onsuccess = () => {\n                this._db[databaseName] = request.result;\n                resolve();\n            };\n            request.onerror = (ev: ErrorEvent) => {\n                reject(ev.message);\n            };\n        });\n    }\n\n    public close(databaseName: string): Promise<void> {\n        if (this._db === null && this._db[databaseName]) {\n            return Promise.reject(\"Database must be open to close it\");\n        }\n\n        return new Promise<void>((resolve, reject) => {\n            this._db[databaseName].close();\n            this._db[databaseName] = null;\n            resolve();\n        });\n    }\n\n    public destroy(databaseName: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            let request = window.indexedDB.deleteDatabase(databaseName);\n            request.onsuccess = () => {\n                resolve();\n            };\n            request.onerror = (ev: ErrorEvent) => {\n                reject(\"Database:\" + databaseName + \"\\n\" + ev.message);\n            };\n            request.onblocked = () => {\n                reject(\"Database:\" + databaseName + \"\\n\" + \"The database operation is blocked, probably because it is locked by another browser tab\");\n            };\n        });\n    }\n\n    public exists(databaseName: string, storeName: string): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            let dbExists: boolean = true;\n            let request = window.indexedDB.open(storeName);\n\n            request.onupgradeneeded = (e: any) => {\n                e.target.transaction.abort();\n                dbExists = false;\n                resolve(dbExists);\n            };\n\n            request.onsuccess = () => {\n                this._db[databaseName] = request.result;\n                resolve(dbExists);\n            };\n\n            request.onerror = (ev: ErrorEvent) => {\n                reject(\"Store:\" + storeName + \"\\n\" + ev.message);\n            };\n        });\n    }\n\n    public storeExists(databaseName: string, storeName: string): Promise<boolean> {\n        return Promise.resolve(this._db[databaseName].objectStoreNames.contains(storeName));\n    }\n\n    public storeCreate(databaseName: string, databaseSchemaStore: DatabaseSchemaStore): Promise<void> {\n        if (this._db === null && this._db[databaseName] === null) {\n            return Promise.reject(\"Database must be open to create store '\" + databaseSchemaStore.name + \"'\");\n        }\n\n        return new Promise<void>((resolve, reject) => {\n            let version: number = this._db[databaseName].version;\n            let name = this._db[databaseName].name;\n\n            this._db[databaseName].close();\n            this._db[databaseName] = null;\n\n            version++;\n\n            let request = window.indexedDB.open(name, version);\n\n            request.onupgradeneeded = () => {\n                this._db[databaseName] = request.result;\n\n                if (this._db[databaseName].objectStoreNames.contains(databaseSchemaStore.name)) {\n                    this._db[databaseName].deleteObjectStore(databaseSchemaStore.name);\n                }\n\n                let store = this._db[databaseName].createObjectStore(databaseSchemaStore.name, {\n                    keyPath: databaseSchemaStore.keyPath,\n                    autoIncrement: databaseSchemaStore.autoIncrement\n                });\n\n                if (databaseSchemaStore.indexes) {\n                    for (let j = 0; j < databaseSchemaStore.indexes.length; j++) {\n                        let isCompound = ArrayHelper.isArray(databaseSchemaStore.indexes[j].keyPath);\n\n                        if (!isCompound || (isCompound && this._isCompoundAvailable)) {\n                            store.createIndex(databaseSchemaStore.indexes[j].name,\n                                databaseSchemaStore.indexes[j].keyPath,\n                                { unique: databaseSchemaStore.indexes[j].unique }\n                            );\n                        }\n                    }\n                }\n            };\n\n            request.onsuccess = () => {\n                this._db[databaseName] = request.result;\n                resolve();\n            };\n\n            request.onerror = (ev: ErrorEvent) => {\n                reject(ev.message);\n            };\n        });\n    }\n\n    public storeRemove(databaseName: string, storeName: string): Promise<void> {\n        if (this._db === null && this._db[databaseName] === null) {\n            return Promise.reject(\"Database must be open to remove a store '\" + storeName + \"'\");\n        }\n\n        return new Promise<void>((resolve, reject) => {\n            let version: number = this._db[databaseName].version;\n            let name = this._db[databaseName].name;\n\n            this._db[databaseName].close();\n            this._db[databaseName] = null;\n\n            version++;\n\n            let request = window.indexedDB.open(name, version);\n\n            request.onupgradeneeded = () => {\n                this._db[databaseName] = request.result;\n\n                if (this._db[databaseName].objectStoreNames.contains(storeName)) {\n                    this._db[databaseName].deleteObjectStore(storeName);\n                }\n            };\n\n            request.onsuccess = () => {\n                this._db[databaseName] = request.result;\n                resolve();\n            };\n\n            request.onerror = (ev: ErrorEvent) => {\n                reject(ev.message);\n            };\n        });\n    }\n\n    public set<T>(databaseName: string, storeName: string, data: T): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            let trans: IDBTransaction = this._db[databaseName].transaction(storeName, \"readwrite\");\n            let store: IDBObjectStore = trans.objectStore(storeName);\n\n            let request = store.put(data);\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = (ev: ErrorEvent) => {\n                reject(\"Store:\" + storeName + \"\\n\" + ev.message);\n            };\n        });\n    }\n\n    public get<T>(databaseName: string, storeName: string, indexName: string, indexValues: any[]): Promise<T> {\n        return this.getAll<T>(databaseName, storeName, indexName, indexValues)\n            .then((values) => {\n                return values && values.length > 0 ? values[0] : undefined;\n            });\n    }\n\n    public getIndexes(databaseName: string, storeName: string): DOMStringList {\n\n        let trans: IDBTransaction = this._db[databaseName].transaction(storeName, \"readonly\");\n        let store: IDBObjectStore = trans.objectStore(storeName);\n\n        return store.indexNames;\n    }\n\n    public getAll<T>(databaseName: string, storeName: string, indexName?: string, indexValue?: any): Promise<T[]> {\n        return new Promise<T[]>((resolve, reject) => {\n            let trans: IDBTransaction = this._db[databaseName].transaction(storeName, \"readonly\");\n            let store: IDBObjectStore = trans.objectStore(storeName);\n\n            let request: IDBRequest;\n            let compoundIndexes = indexName && indexName.split(\"_\");\n            let compoundLookup = false;\n\n            /* is this a compound index that we cant use directly ? */\n            if (compoundIndexes && compoundIndexes.length > 1 && !this._isCompoundAvailable) {\n                /* this is a compound index so indexValue must be an array so use\n                this first entry for lookup and then filter on the rest in the results */\n\n                let index: IDBIndex = store.index(compoundIndexes[0]);\n                let rangeTest: IDBKeyRange = IDBKeyRange.only(indexValue[0]);\n                request = index.openCursor(rangeTest);\n                compoundLookup = true;\n            } else {\n\n                let rangeTest: IDBKeyRange;\n                if (indexValue) {\n                    rangeTest = IDBKeyRange.only(indexValue);\n                }\n\n                if (indexName) {\n                    let index: IDBIndex = store.index(indexName);\n                    if (rangeTest) {\n                        request = index.openCursor(rangeTest);\n                    } else {\n                        request = index.openCursor();\n                    }\n                } else {\n                    if (rangeTest) {\n                        request = store.openCursor(rangeTest);\n                    } else {\n                        request = store.openCursor();\n                    }\n                }\n            }\n\n            let items: T[] = [];\n\n            request.onsuccess = () => {\n                let cursor: IDBCursorWithValue = request.result;\n                if (cursor) {\n                    if (compoundLookup) {\n                        let matches = true;\n                        for (let i = 1; i < indexValue.length && matches; i++) {\n                            if (cursor.value[compoundIndexes[i]] !== indexValue[i]) {\n                                matches = false;\n                            }\n                        }\n                        if (matches) {\n                            items.push(cursor.value);\n                        }\n                    } else {\n                        items.push(cursor.value);\n                    }\n                    cursor.continue();\n                }\n            };\n\n            trans.oncomplete = () => {\n                resolve(items);\n            };\n\n            request.onerror = (ev: ErrorEvent) => {\n                reject(\"Store:\" + storeName + \"\\n\" + ev.message);\n            };\n        });\n    }\n\n    public setAll<T>(databaseName: string, storeName: string, data: T[]): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            let trans: IDBTransaction = this._db[databaseName].transaction(storeName, \"readwrite\");\n            let store: IDBObjectStore = trans.objectStore(storeName);\n\n            let idx = 0;\n            if (data && data.length > 0) {\n\n                let putNext = () => {\n                    if (idx < data.length) {\n                        let request = store.put(data[idx]);\n                        request.onsuccess = putNext;\n                        request.onerror = (ev: ErrorEvent) => {\n                            reject(\"Store:\" + storeName + \"\\n\" + ev.message);\n                        };\n                        idx++;\n                    } else {\n                        resolve();\n                    }\n                };\n\n                putNext();\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    public remove(databaseName: string, storeName: string, key: any): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            let trans: IDBTransaction = this._db[databaseName].transaction(storeName, \"readwrite\");\n            let store: IDBObjectStore = trans.objectStore(storeName);\n\n            let request = store.delete(key);\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = (ev: ErrorEvent) => {\n                reject(\"Store:\" + storeName + \"\\n\" + ev.message);\n            };\n        });\n    }\n\n    public removeAll(databaseName: string, storeName: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            let trans: IDBTransaction = this._db[databaseName].transaction(storeName, \"readwrite\");\n            let store: IDBObjectStore = trans.objectStore(storeName);\n\n            let request = store.clear();\n            request.onsuccess = () => {\n                resolve();\n            };\n\n            request.onerror = (ev: ErrorEvent) => {\n                reject(\"Store:\" + storeName + \"\\n\" + ev.message);\n            };\n        });\n    }\n\n}\n"],"sourceRoot":"../.."}