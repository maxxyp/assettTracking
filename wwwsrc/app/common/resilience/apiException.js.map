{"version":3,"sources":["common/resilience/apiException.ts"],"names":[],"mappings":";;;;;;;;;;;;;IAEA;QAAkC,gCAAa;QAE3C,sBAAY,OAAY,EAAE,SAAiB,EAAE,OAAe,EAAE,UAAiB,EAAE,IAAS,EAAE,cAAgC;YAA5H,YACI,kBAAM,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,SAKvD;YAJG,gEAAgE;YAChE,KAAI,CAAC,cAAc,GAAG,cAAc,KAAK,SAAS,IAAI,cAAc,KAAK,IAAI;gBACrD,CAAC,CAAC,cAAc,GAAG,EAAE;gBACrB,CAAC,CAAC,SAAS,CAAC;;QACxC,CAAC;QACL,mBAAC;IAAD,CATA,AASC,CATiC,6BAAa,GAS9C;IATY,oCAAY","file":"apiException.js","sourcesContent":["import {BaseException} from \"../core/models/baseException\";\n\nexport class ApiException extends BaseException {\n    public readonly httpStatusCode: string;\n    constructor(context: any, reference: string, message: string, parameters: any[], data: any, httpStatusCode?: string | number) {\n        super(context, reference, message, parameters, data);\n        // if we have been given an httpStatusCode, force it to a string\n        this.httpStatusCode = httpStatusCode !== undefined && httpStatusCode !== null\n                                ? httpStatusCode + \"\"\n                                : undefined;\n    }\n}\n"],"sourceRoot":"../.."}