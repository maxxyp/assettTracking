{"version":3,"sources":["common/simulation/web/scenarioStore.ts"],"names":[],"mappings":"AAAA,qDAAqD;;;;;;;;;;;;;IASrD;QAKI,uBAAY,YAA2B;YACnC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QACtC,CAAC;QAEM,kCAAU,GAAjB,UAAkB,OAAe;YAC7B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAEM,qCAAa,GAApB;YACI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAW,IAAI,CAAC,QAAQ,GAAI,oBAAoB,CAAC,CAAC;QACxF,CAAC;QAEM,oCAAY,GAAnB,UAA0B,KAAa;YACnC,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,KAAK,GAAG,gBAAgB,CAAC;YACzD,GAAG,GAAG,GAAG,GAAG,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAiB,GAAG,CAAC,CAAC;QAC5D,CAAC;QAtBQ,aAAa;YADzB,qCAAM,CAAC,2BAAY,CAAC;;WACR,aAAa,CAuBzB;QAAD,oBAAC;KAvBD,AAuBC,IAAA;IAvBY,sCAAa","file":"scenarioStore.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport {IScenarioStore} from \"../IScenarioStore\";\nimport {inject} from \"aurelia-dependency-injection\";\nimport {Scenario} from \"../models/scenario\";\nimport {AssetService} from \"../../core/services/assetService\";\nimport {IAssetService} from \"../../core/services/IAssetService\";\n\n@inject(AssetService)\nexport class ScenarioStore implements IScenarioStore {\n    private _assetService: IAssetService;\n\n    private _baseDir: string;\n\n    constructor(assetService: IAssetService) {\n        this._assetService = assetService;\n    }\n\n    public initialise(baseDir: string): Promise<void> {\n        this._baseDir = baseDir;\n        return Promise.resolve();\n    }\n\n    public loadScenarios() : Promise<string[]> {\n        return this._assetService.loadJson<string[]>(this._baseDir  + \"/scenarioList.json\");\n    }\n\n    public loadScenario<T, V>(route: string): Promise<Scenario<T, V>> {\n        let url = this._baseDir + \"/\" + route + \"/scenario.json\";\n        url = url + \"?_t=\" + new Date().getTime();\n        return this._assetService.loadJson<Scenario<T, V>>(url);\n    }\n}\n"],"sourceRoot":"../../.."}