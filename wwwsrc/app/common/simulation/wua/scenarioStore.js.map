{"version":3,"sources":["common/simulation/wua/scenarioStore.ts"],"names":[],"mappings":"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","file":"scenarioStore.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport {IScenarioStore} from \"../IScenarioStore\";\nimport {Scenario} from \"../models/scenario\";\nimport {LocalStorageService} from \"../../storage/wua/localStorageService\";\nimport {PlatformHelper} from \"../../core/platformHelper\";\nimport {AssetService} from \"../../core/services/assetService\";\nimport {IAssetService} from \"../../core/services/IAssetService\";\nimport {inject} from \"aurelia-dependency-injection\";\n\n@inject(AssetService)\nexport class ScenarioStore implements IScenarioStore {\n    private _assetService: IAssetService;\n    private _localStorageService: LocalStorageService;\n    private _fallback: boolean;\n    private _baseDir: string;\n\n    constructor(assetService: IAssetService) {\n        this._assetService = assetService;\n        this._fallback = false;\n    }\n\n    public initialise(baseDir: string): Promise<void> {\n        this._baseDir = baseDir;\n\n        return new Promise<void>((resolve, reject) => {\n            if (PlatformHelper.isMobile()) {\n                Windows.Storage.KnownFolders.removableDevices.getFoldersAsync()\n                    .then((folders) => {\n                        if (!this._localStorageService && folders && folders.length > 0) {\n                            this._localStorageService = new LocalStorageService(folders[0]);\n                            this._localStorageService.initialise(\"Documents\\\\\" +\n                                Windows.ApplicationModel.Package.current.displayName + \"\\\\\" + this._baseDir, false)\n                                .then(() => {\n                                    this.tryLoadScenarios().then(() => {\n                                        resolve();\n                                    });\n                                });\n                        } else {\n                            this._fallback = true;\n                            resolve();\n                        }\n                    }, (error) => {\n                        this._fallback = true;\n                        resolve();\n                    });\n            } else {\n                this._localStorageService =\n                    new LocalStorageService(Windows.Storage.ApplicationData.current.localFolder);\n\n                this._localStorageService.initialise(this._baseDir, false).then(() => {\n                    this.tryLoadScenarios().then(() => {\n                        resolve();\n                    });\n                })\n                    .catch(() => {\n                        this._fallback = true;\n                        resolve();\n                    });\n            }\n        });\n    }\n\n    public loadScenarios() : Promise<string[]> {\n        return this._fallback ?\n            this._assetService.loadJson<string[]>(this._baseDir + \"/scenarioList.json\") :\n            this._localStorageService.read<string[]>(\"\", \"scenarioList.json\");\n    }\n\n    public loadScenario<T, V>(route: string): Promise<Scenario<T, V>> {\n        route = decodeURI(route);\n        return  this._fallback ?\n            this._assetService.loadJson<Scenario<T, V>>(this._baseDir + \"/\" + route + \"/scenario.json\") :\n            this._localStorageService.read<Scenario<T, V>>(route, \"scenario.json\");\n    }\n\n    private tryLoadScenarios() : Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try {\n                this.loadScenarios()\n                    .then((scenarios) => {\n                        if (scenarios && scenarios.length > 0) {\n                            resolve();\n                        } else {\n                            this._fallback = true;\n                            resolve();\n                        }\n                    }).catch(() => {\n                    this._fallback = true;\n                    resolve();\n                });\n            } catch (e) {\n                this._fallback = true;\n                resolve();\n            }\n        });\n    }\n}\n"],"sourceRoot":"../../.."}