{"version":3,"sources":["common/simulation/scenarioLoader.ts"],"names":[],"mappings":"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","file":"scenarioLoader.js","sourcesContent":["import {inject} from \"aurelia-framework\";\nimport {IScenarioLoader} from \"./IScenarioLoader\";\nimport {Scenario} from \"./models/scenario\";\nimport {Mutation} from \"./models/mutation\";\nimport * as tv4 from \"tv4\";\nimport * as moment from \"moment\";\nimport {ISchemaLoader} from \"./ISchemaLoader\";\nimport {SchemaLoader} from \"./schemaLoader\";\nimport {ScenarioStore} from \"./scenarioStore\";\nimport {IScenarioStore} from \"./IScenarioStore\";\nimport {Threading} from \"../core/threading\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { SimulationConstants } from \"./constants/simulationConstants\";\nimport { BrowserLocalStorage } from \"../core/services/browserLocalStorage\";\nimport { IStorage } from \"../core/services/IStorage\";\n\nconst { SIMULATION_OVERRIDE_EVENT, SIMULATION_OVERRIDE_STORAGE_KEY } = SimulationConstants;\n\n@inject(SchemaLoader, ScenarioStore, EventAggregator, BrowserLocalStorage)\nexport class ScenarioLoader implements IScenarioLoader {\n    private _scenarioStore: IScenarioStore;\n    private _schemaLoader: ISchemaLoader;\n    private _eventAggregator: EventAggregator;\n    private _storage: IStorage;\n\n    private _scenarioNames: string[];\n    private _scenarios: { [key: string]: Scenario<any, any> };\n    private _overides: { [key: string]: any };\n\n    private _httpErrorLookup: { [key: number]: string[] };\n    private _baseDir: string;\n\n    constructor(schemaLoader: ISchemaLoader, scenarioStore: IScenarioStore, eventAggregator: EventAggregator, storage: IStorage) {\n        this._scenarioStore = scenarioStore;\n        this._schemaLoader = schemaLoader;\n        this._eventAggregator = eventAggregator;\n        this._storage = storage;\n        this._scenarioNames = null;\n\n        this._scenarios = {};\n        this._overides = {};\n\n        this._httpErrorLookup = {\n            400: [\"400 Bad Request\"],\n            404: [\"404 Not found\"],\n            408: [\"408 Request Timeout\"],\n            500: [\"500 Server Error\"]\n        };\n    }\n\n    public initialise(baseDir?: string): Promise<void> {\n        this._baseDir = baseDir || \"scenarios\";\n\n        return this._storage.get(\"SIM\", SIMULATION_OVERRIDE_STORAGE_KEY)\n            .then((data: {[index: string]: string}) => {\n                this._overides = data || {};\n            })\n            .then(() => {\n                this._eventAggregator.subscribe(SIMULATION_OVERRIDE_EVENT, (overide: any) => {\n                    this._overides = {};\n                    this._overides[overide.route] = overide.data;\n                    this._storage.set(\"SIM\", SIMULATION_OVERRIDE_STORAGE_KEY, this._overides);\n                });\n            })\n            .then(() => this._scenarioStore.initialise(this._baseDir));\n    }\n\n    public listScenarios(): Promise<string[]> {\n        if (this._scenarioNames) {\n            return Promise.resolve(this._scenarioNames);\n        }\n\n        return this._scenarioStore.loadScenarios()\n            .then((scenarioNames) => {\n                if (!scenarioNames) {\n                    scenarioNames = [];\n                }\n                this._scenarioNames = scenarioNames;\n                return this._scenarioNames;\n            })\n            .catch(() => {\n                return this._scenarioNames;\n            });\n    }\n\n    public loadScenario<T, V>(route: string): Promise<Scenario<T, V>> {\n        return this.fetchScenario<T, V>(route)\n            .then((scenario) => {\n                if (!scenario) {\n                    scenario = new Scenario<T, V>();\n                    scenario.status = 404;\n                    scenario.statusText = [\"Failed to load scenario \" + route];\n                }\n                return scenario;\n            });\n    }\n\n    public get<T>(route: string): Promise<T> {\n        let delay: number = 0.5;\n        let status: number = 400;\n        let statusText: string[] = this._httpErrorLookup[400];\n\n        return new Promise<T>((resolve, reject) => {\n            this.fetchScenario<T, void>(route)\n                .then((scenario) => {\n                    let doResolve = false;\n                    let response: T = undefined;\n                    if (!!scenario) {\n                        delay = scenario.delay || delay;\n                        status = scenario.status || status;\n                        statusText = scenario.statusText || statusText;\n\n                        let retry = this.processRetry(scenario);\n                        if (retry) {\n                            statusText = this._httpErrorLookup[408];\n                        } else if (status === 200) {\n                            response = scenario.data;\n\n                            /* If there are mutations then return the most recent one */\n                            if (scenario.mutations && scenario.mutations.length > 0) {\n                                let mutation = scenario.mutations[scenario.mutations.length - 1];\n                                if (mutation && mutation.payload) {\n                                    response = mutation.payload;\n                                }\n                            }\n                            // clone the object so the original is not modified by other code\n                            if (response) {\n                                response = JSON.parse(JSON.stringify(response));\n                            }\n\n                            doResolve = true;\n                        } else {\n                            statusText = this._httpErrorLookup[status];\n                            if (!statusText) {\n                                statusText = this._httpErrorLookup[400];\n                            }\n                        }\n                    } else {\n                        statusText = [\"Failed to load scenario \" + route];\n                    }\n\n                    Threading.delay(() => {\n                        if (doResolve) {\n                            resolve(response);\n                        } else {\n                            reject({status, statusText});\n                        }\n                    }, delay * 1000);\n                });\n        });\n    }\n\n    public put<T, V>(route: string, data: T): Promise<V> {\n        let delay: number = 0.5;\n        let status: number = 400;\n        let statusText: string[] = this._httpErrorLookup[status];\n\n        return new Promise<V>((resolve, reject) => {\n            this.fetchScenario<T, V>(route)\n                .then((scenario) => {\n                    let doResolve = false;\n                    let response: V = undefined;\n                    if (!!scenario) {\n                        delay = scenario.delay || delay;\n                        status = scenario.status || status;\n                        statusText = scenario.statusText || statusText;\n\n                        let retry = this.processRetry(scenario);\n                        if (retry) {\n                            statusText = this._httpErrorLookup[408];\n                        } else if (status === 200 && !!data) {\n                            scenario.mutations = scenario.mutations || [];\n                            let mutation = new Mutation<T>();\n                            mutation.timestamp = new Date();\n                            mutation.payload = data;\n\n                            scenario.mutations.push(mutation);\n\n                            // clone the object so the original is not modified by other code\n                            response = scenario.response;\n                            if (response) {\n                                response = JSON.parse(JSON.stringify(scenario.response));\n                            }\n\n                            doResolve = true;\n                        } else {\n                            statusText = this._httpErrorLookup[status];\n                            if (!statusText) {\n                                statusText = this._httpErrorLookup[400];\n                            }\n                        }\n                    } else {\n                        statusText = [\"Failed to load scenario \" + route];\n                    }\n\n                    Threading.delay(() => {\n                        if (doResolve) {\n                            resolve(response);\n                        } else {\n                            reject({status, statusText});\n                        }\n                    }, delay * 1000);\n                });\n        });\n    }\n\n    public post<T, V>(route: string, data: T): Promise<V> {\n        let delay: number = 0.5;\n        let status: number = 404;\n        let statusText: string[] = this._httpErrorLookup[status];\n\n        return new Promise<V>((resolve, reject) => {\n            this.fetchScenario<T, V>(route)\n                .then((scenario) => {\n                    let doResolve = false;\n                    let response: V = undefined;\n                    if (!scenario) {\n                        scenario = new Scenario<T, V>();\n                        scenario.status = 200;\n                        scenario.mutations = [];\n                        this._scenarios[route] = scenario;\n                    }\n\n                    delay = scenario.delay || delay;\n                    status = scenario.status || (!data ? 400 : status);\n                    statusText = scenario.statusText || this._httpErrorLookup[status];\n\n                    let retry = this.processRetry(scenario);\n                    if (retry) {\n                        statusText = this._httpErrorLookup[408];\n                    } else if (status === 200) {\n                        scenario.mutations = scenario.mutations || [];\n\n                        let mutation = new Mutation<T>();\n                        if (!!data) {\n                            mutation.timestamp = new Date();\n                            mutation.payload = data;\n                            scenario.mutations.push(mutation);\n                        }\n\n                        // clone the object so the original is not modified by other code\n                        response = scenario.response;\n                        if (response) {\n                            response = JSON.parse(JSON.stringify(scenario.response));\n                        }\n\n                        doResolve = true;\n                    } else {\n                        statusText = this._httpErrorLookup[status];\n                        if (!statusText) {\n                            statusText = this._httpErrorLookup[400];\n                        }\n                    }\n\n                    Threading.delay(() => {\n                        if (doResolve) {\n                            resolve(response);\n                        } else {\n                            reject({status, statusText});\n                        }\n                    }, delay * 1000);\n                });\n        });\n    }\n\n    private fetchScenario<T, V>(route: string): Promise<Scenario<T, V>> {\n        return Promise.resolve()\n            .then(() => {\n                if (this._scenarios[route] && this._scenarios[route].disableCache !== true) {\n                    return Promise.resolve(this._scenarios[route]);\n                } else {\n                    return this._scenarioStore.loadScenario<T, V>(route)\n                        .then((scenario) => {\n                            return this.processScenario(route, scenario);\n                        })\n                        .catch((err) => {\n                            return null;\n                        });\n                }\n            })\n            .then((scenario) => {\n                if (!!scenario) {\n                    let routeOveride = this._overides[route];\n                    if (!!routeOveride) {\n                        scenario.data = Object.assign(scenario.data, routeOveride);\n                    }\n                }\n                return scenario;\n            });\n\n        // if (this._scenarios[route]) {\n        //     return Promise.resolve(this._scenarios[route]);\n        // }\n\n        // return this._scenarioStore.loadScenario<T, V>(route)\n        //            .then((scenario) => {\n        //                return this.processScenario(route, scenario);\n        //            })\n        //            .catch((err) => {\n        //                return null;\n        //            });\n\n    }\n\n    private processScenario<T, V>(route: string, scenario: Scenario<T, V>): Promise<Scenario<T, V>> {\n        this._scenarios[route] = scenario;\n        this.processMacros(scenario);\n\n        if (scenario && scenario.status === 200 && scenario.dataSchemaName) {\n            return this._schemaLoader.getSchema(scenario.dataSchemaName)\n                       .then((schema) => {\n                           if (!!scenario.data && schema) {\n                               scenario.dataSchema = <any>tv4.validateResult(scenario.data, schema, true, true);\n                           }\n                           return scenario;\n                       })\n                       .catch(() => {\n                           return scenario;\n                       });\n        } else {\n            return Promise.resolve(scenario);\n        }\n    }\n\n    private processRetry<T, V>(scenario: Scenario<T, V>): boolean {\n        let doRetry = false;\n        if (scenario.retryCount) {\n            if (!scenario.retryCurrent) {\n                scenario.retryCurrent = scenario.retryCount;\n            } else {\n                scenario.retryCurrent--;\n            }\n            doRetry = scenario.retryCurrent > 0;\n            if (scenario.retryCurrent === 0) {\n                scenario.retryCurrent = scenario.retryCount;\n            }\n        }\n        return doRetry;\n    }\n\n    private processMacros<T, V>(scenario: Scenario<T, V>): Scenario<T, V> {\n        if (scenario && scenario.data) {\n            let json = JSON.stringify(scenario.data);\n            json = json.replace(/@@.*?@@/gi, (match) => {\n                let replacement = match.replace(/@@/gi, \"\");\n\n                let parts = replacement.split(\":\");\n                if (parts && parts.length > 0) {\n                    let macroType = parts.shift();\n                    switch (macroType) {\n                        case \"DATE\":\n                            replacement = this.processDate(replacement, parts);\n                            break;\n                        case \"RANDOM\":\n                            replacement = this.randomInclude(replacement, parts);\n                            break;\n                    }\n                }\n                return replacement;\n            });\n            scenario.data = JSON.parse(json);\n        }\n        return scenario;\n    }\n\n    private processDate(replacement: string, parts: string[]): string {\n        let dt: moment.Moment = moment();\n        let format = \"YYYY-MM-DD\";\n\n        if (parts.length > 0 && parts[0].length > 0) {\n            format = parts[0];\n        }\n        if (parts.length > 1 && parts[1].length > 2) {\n            let addSubstract: string = parts[1][0];\n            let unitOfTime: string = parts[1][1];\n            let days: number = parseInt(parts[1].substr(2), 10);\n            if (!isNaN(days)) {\n                if (addSubstract === \"+\") {\n                    dt = dt.add(days, unitOfTime);\n                } else {\n                    dt = dt.subtract(days, unitOfTime);\n                }\n\n            }\n        }\n        return dt.format(format);\n    }\n\n    private randomInclude(replacement: string, parts: string[]): string {\n        let text: string = \"\";\n        let chances: number = 0.5; // chance string will be included, 0 to 1\n\n        if (parts.length > 1 && parts[1].length > 0) {\n            chances = parseFloat(parts[1]);\n        }\n        if (parts.length > 0 && parts[0].length > 0) {\n            if (Math.random() < chances) {\n                text = parts[0].toString();\n            }\n        }\n        return text;\n    }\n}\n"],"sourceRoot":"../.."}