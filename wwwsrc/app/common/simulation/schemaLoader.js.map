{"version":3,"sources":["common/simulation/schemaLoader.ts"],"names":[],"mappings":";;;;;;;;;;;;IAOA;QAKI,sBAAY,YAA2B;YACnC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QACtC,CAAC;QAEM,gCAAS,GAAhB,UAAiB,IAAY;YACzB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACf,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAChD,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC;gBAC9B,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,qCAAc,GAAtB;YAAA,iBAgBC;YAfG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAW,yBAAyB,CAAC;iBAClE,IAAI,CAAC,UAAC,OAAO;gBACV,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,UAAU;oBACtC,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAM,UAAU,GAAG,UAAU,CAAC,CAAC;gBACrE,CAAC,CAAC,CAAC,CAAC;YACR,CAAC,CAAC;iBACD,IAAI,CAAC,UAAA,OAAO;gBACT,OAAO,CAAC,OAAO,CAAC,UAAC,MAAW;oBACxB,wFAAwF;oBACxF,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACT,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBAC1B,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACxB,CAAC,CAAC,CAAC;QACX,CAAC;QAnCQ,YAAY;YADxB,0BAAM,CAAC,2BAAY,CAAC;;WACR,YAAY,CAoCxB;QAAD,mBAAC;KApCD,AAoCC,IAAA;IApCY,oCAAY","file":"schemaLoader.js","sourcesContent":["import {inject} from \"aurelia-framework\";\nimport {ISchemaLoader} from \"./ISchemaLoader\";\nimport * as tv4 from \"tv4\";\nimport {AssetService} from \"../core/services/assetService\";\nimport {IAssetService} from \"../core/services/IAssetService\";\n\n@inject(AssetService)\nexport class SchemaLoader implements ISchemaLoader {\n\n    private _loaded: boolean;\n    private _assetService: IAssetService;\n\n    constructor(assetService: IAssetService) {\n        this._loaded = false;\n        this._assetService = assetService;\n    }\n\n    public getSchema(name: string): Promise<tv4.JsonSchema> {\n        if (this._loaded) {\n            return Promise.resolve(tv4.getSchema(name));\n        }\n        return this.loadAllSchemas().then(() => {\n            return tv4.getSchema(name);\n        });\n    }\n\n    private loadAllSchemas(): Promise<void> {\n        return this._assetService.loadJson<string[]>(\"schemas/schemaList.json\")\n            .then((preload) => {\n                return Promise.all(preload.map((schemaName) => {\n                    return this._assetService.loadJson<any>(\"schemas/\" + schemaName);\n                }));\n            })\n            .then(schemas => {\n                schemas.forEach((schema: any) => {\n                    /* if a schema was invalid json the loadJson will return null, so don't add it to tv4 */\n                    if (schema) {\n                        tv4.addSchema(schema);\n                    }\n                });\n                this._loaded = true;\n            });\n    }\n}\n"],"sourceRoot":"../.."}