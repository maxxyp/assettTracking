{"version":3,"sources":["common/geo/google/wua/googleMapsService.ts"],"names":[],"mappings":"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","file":"googleMapsService.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\n\nimport {inject} from \"aurelia-dependency-injection\";\nimport {HttpClient} from \"aurelia-http-client\";\nimport {IGoogleMapsServiceConfiguration} from \"../IGoogleMapsServiceConfiguration\";\nimport {GoogleMapsServiceConstants} from \"./constants/googleMapsServiceConstants\";\nimport {IGoogleMapsService} from \"../IGoogleMapsService\";\nimport {ConfigurationService} from \"../../../core/services/configurationService\";\nimport {IConfigurationService} from \"../../../core/services/IConfigurationService\";\nimport {GeoPosition} from \"../../../geo/models/geoPosition\";\nimport {UrlParamService} from \"../../../core/urlParamService\";\nimport {DistanceTime} from \"../../models/distanceTime\";\nimport {DistanceMatrix} from \"./models/distanceMatrix\";\nimport {BaseException} from \"../../../core/models/baseException\";\n\nconst GOOGLE_MAPS_URI = \"https://maps.googleapis.com/\";\nconst KEY_QS = \"&key=\";\n\n@inject(ConfigurationService, HttpClient)\nexport class GoogleMapsService implements IGoogleMapsService {\n    private _configuration: IGoogleMapsServiceConfiguration;\n    private _httpClient: HttpClient;\n\n    constructor(configurationService: IConfigurationService, httpClient: HttpClient) {\n        this._configuration = configurationService.getConfiguration<IGoogleMapsServiceConfiguration>();\n        this._httpClient = httpClient;\n    }\n\n    public getDistanceTime(origin: string | GeoPosition, destination: string | GeoPosition): Promise<DistanceTime> {\n        if (origin && destination) {\n            let finalOrigin: string;\n            let finalDestination: string;\n\n            if (origin instanceof GeoPosition) {\n                let originGeo: GeoPosition = <GeoPosition>origin;\n                finalOrigin = originGeo.latitude + \",\" + originGeo.longitude;\n            } else {\n                finalOrigin = origin;\n            }\n\n            if (destination instanceof GeoPosition) {\n                let desinationGeo: GeoPosition = <GeoPosition>destination;\n                finalDestination = desinationGeo.latitude + \",\" + desinationGeo.longitude;\n            } else {\n                finalDestination = destination;\n            }\n\n            let endPointWithVariables = UrlParamService.getParamEndpoint(GoogleMapsServiceConstants.DISTANCE_MATRIX, {\n                \"origins\": finalOrigin,\n                \"destinations\": finalDestination\n            });\n\n            endPointWithVariables += KEY_QS + this._configuration.googleClientKey;\n            endPointWithVariables = GOOGLE_MAPS_URI + endPointWithVariables;\n\n            return this._httpClient.get(endPointWithVariables)\n                .then((res) => {\n                    let response: DistanceMatrix = JSON.parse(res.response);\n                    let dt = new DistanceTime();\n\n                    if (response && response.rows && response.rows.length > 0) {\n                        if (response.rows[0].elements && response.rows[0].elements.length > 0) {\n                            if (response.rows[0].elements[0].distance) {\n                                dt.distanceInMetres = response.rows[0].elements[0].distance.value;\n                            }\n                            if (response.rows[0].elements[0].duration) {\n                                dt.timeInSeconds = response.rows[0].elements[0].duration.value;\n                            }\n                        }\n                    }\n                    return dt;\n                })\n                .catch((err) => {\n                    throw new BaseException(this, \"getDistanceTime\", \"Unable to call distancematrix API\", undefined, err);\n                });\n        } else {\n            return Promise.resolve(null);\n        }\n    }\n\n    public launchMap(location: string | GeoPosition): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            reject(\"Not supported\");\n        });\n    }\n\n    public launchDirections(origin: string | GeoPosition, destination: string | GeoPosition): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            reject(\"Not supported\");\n        });\n    }\n\n    public async getGeoPosition(address: string): Promise<GeoPosition> {\n        if (address) {\n            let endPointWithVariables = UrlParamService.getParamEndpoint(GoogleMapsServiceConstants.GEOCODING, {\n                \"address\": address,\n            });\n\n            endPointWithVariables += KEY_QS + this._configuration.googleClientKey;\n            endPointWithVariables = GOOGLE_MAPS_URI + endPointWithVariables;\n\n            return this._httpClient.get(endPointWithVariables)\n                .then((res) => {\n                    let response = JSON.parse(res.response);\n                    let geoPosition = new GeoPosition(0, 0);\n                    \n                    if (response && response.results && response.results.length > 0 \n                            && response.results[0] && response.results[0].geometry && response.results[0].geometry.location) {\n                        geoPosition.latitude = response.results[0].geometry.location.lat || 0;\n                        geoPosition.longitude = response.results[0].geometry.location.lng || 0;\n                    }\n                    return geoPosition;\n                })\n                .catch((err) => {\n                    throw new BaseException(this, \"getGeoPosition\", \"Unable to call geocoding API\", undefined, err);\n                });\n        } else {\n            return Promise.resolve(null);\n        }\n    }\n}\n"],"sourceRoot":"../../../.."}