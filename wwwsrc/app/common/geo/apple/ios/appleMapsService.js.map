{"version":3,"sources":["common/geo/apple/ios/appleMapsService.ts"],"names":[],"mappings":"AAAA,wDAAwD;;;;IAKxD;QAAA;QA2CA,CAAC;QA1CU,oCAAS,GAAhB,UAAiB,QAA8B;YAC3C,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,GAAG,GAAW,QAAQ,CAAC;gBAE3B,EAAE,CAAC,CAAC,QAAQ,YAAY,yBAAW,CAAC,CAAC,CAAC;oBAClC,IAAI,SAAS,GAA6B,QAAQ,CAAC;oBACnD,GAAG,IAAI,KAAK,GAAG,SAAS,CAAC,QAAQ,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC;gBAClE,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,GAAG,IAAI,UAAU,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;gBACrD,CAAC;gBAED,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;gBAC1C,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,2CAAgB,GAAvB,UAAwB,MAA4B,EAAE,WAAiC;YACnF,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,GAAG,GAAW,QAAQ,CAAC;gBAE3B,EAAE,CAAC,CAAC,MAAM,YAAY,yBAAW,CAAC,CAAC,CAAC;oBAChC,IAAI,SAAS,GAA6B,MAAM,CAAC;oBACjD,GAAG,IAAI,QAAQ,GAAG,SAAS,CAAC,QAAQ,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC;gBACrE,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,GAAG,IAAI,QAAQ,GAAG,kBAAkB,CAAC,MAAM,IAAI,kBAAkB,CAAC,CAAC;gBACvE,CAAC;gBAED,GAAG,IAAI,GAAG,CAAC;gBAEX,EAAE,CAAC,CAAC,WAAW,YAAY,yBAAW,CAAC,CAAC,CAAC;oBACrC,IAAI,aAAa,GAA6B,WAAW,CAAC;oBAC1D,GAAG,IAAI,QAAQ,GAAG,aAAa,CAAC,QAAQ,GAAG,GAAG,GAAG,aAAa,CAAC,SAAS,CAAC;gBAC7E,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,GAAG,IAAI,QAAQ,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;gBACtD,CAAC;gBAED,GAAG,IAAI,WAAW,CAAC;gBAEnB,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;gBAC1C,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC;QACL,uBAAC;IAAD,CA3CA,AA2CC,IAAA;IA3CY,4CAAgB","file":"appleMapsService.js","sourcesContent":["/// <reference path=\"../../../../../typings/app.d.ts\" />\n\nimport {GeoPosition} from \"../../../geo/models/geoPosition\";\nimport {IAppleMapsService} from \"../IAppleMapsService\";\n\nexport class AppleMapsService implements IAppleMapsService {\n    public launchMap(location: string | GeoPosition): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            let uri: string = \"maps:?\";\n\n            if (location instanceof GeoPosition) {\n                let originGeo: GeoPosition = <GeoPosition>location;\n                uri += \"ll=\" + originGeo.latitude + \",\" + originGeo.longitude;\n            } else {\n                uri += \"address=\" + encodeURIComponent(location);\n            }\n\n            cordova.InAppBrowser.open(uri, \"_system\");\n            resolve();\n        });\n    }\n\n    public launchDirections(origin: string | GeoPosition, destination: string | GeoPosition): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            let uri: string = \"maps:?\";\n\n            if (origin instanceof GeoPosition) {\n                let originGeo: GeoPosition = <GeoPosition>origin;\n                uri += \"saddr=\" + originGeo.latitude + \",\" + originGeo.longitude;\n            } else {\n                uri += \"saddr=\" + encodeURIComponent(origin || \"Current Location\");\n            }\n\n            uri += \"&\";\n\n            if (destination instanceof GeoPosition) {\n                let desinationGeo: GeoPosition = <GeoPosition>destination;\n                uri += \"daddr=\" + desinationGeo.latitude + \",\" + desinationGeo.longitude;\n            } else {\n                uri += \"daddr=\" + encodeURIComponent(destination);\n            }\n\n            uri += \"&dirflg=d\";\n\n            cordova.InAppBrowser.open(uri, \"_system\");\n            resolve();\n        });\n    }\n}\n"],"sourceRoot":"../../../.."}