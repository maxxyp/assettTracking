{"version":3,"sources":["common/geo/proximityService.ts"],"names":[],"mappings":";;;;;;;;;;;;IAUA;QAMI,0BAAY,UAAuB;YAC/B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAC1B,CAAC;QAEM,kDAAuB,GAA9B,UAA+B,WAAwB,EAAE,KAAa;YAAtE,iBAWC;YAVG,IAAI,CAAC,QAAQ,GAAG,qBAAS,CAAC,UAAU,CAAC;gBACjC,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE;qBACzB,IAAI,CAAC,UAAC,OAAoB;oBACvB,KAAI,CAAC,SAAS,GAAG,qBAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,EACzD,OAAO,CAAC,SAAS,EACjB,WAAW,CAAC,QAAQ,EACpB,WAAW,CAAC,SAAS,CAAC,CAAC;gBAC/B,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAG;gBACb,CAAC,CAAC,CAAC;YACX,CAAC,EAAE,KAAK,CAAC,CAAC;QACd,CAAC;QAEM,sCAAW,GAAlB;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;QAEM,iDAAsB,GAA7B;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,qBAAS,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACnC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;YAC9B,CAAC;QACL,CAAC;QAlCQ,gBAAgB;YAD5B,qCAAM,CAAC,uBAAU,CAAC;;WACN,gBAAgB,CAmC5B;QAAD,uBAAC;KAnCD,AAmCC,IAAA;IAnCY,4CAAgB","file":"proximityService.js","sourcesContent":["\nimport {inject} from \"aurelia-dependency-injection\";\nimport {IProximityService} from  \"./IProximityService\";\nimport {GeoPosition} from \"./models/geoPosition\";\nimport {Threading} from \"../core/threading\";\nimport {IGpsService} from \"./IGpsService\";\nimport {GpsService} from \"./gpsService\";\nimport {GeoHelper} from \"./geoHelper\";\n\n@inject(GpsService)\nexport class ProximityService implements IProximityService {\n\n    private _gpsService: IGpsService;\n    private _distance: number;\n    private _timerId: number;\n\n    constructor(gpsService: IGpsService) {\n        this._gpsService = gpsService;\n        this._distance = null;\n    }\n\n    public startMonitoringDistance(destination: GeoPosition, delay: number): void {\n        this._timerId = Threading.startTimer(() => {\n            this._gpsService.getLocation()\n                .then((postion: GeoPosition) => {\n                    this._distance = GeoHelper.calculateDistance(postion.latitude,\n                        postion.longitude,\n                        destination.latitude,\n                        destination.longitude);\n                }).catch((err) => {\n                });\n        }, delay);\n    }\n\n    public getDistance(): number {\n        return this._distance;\n    }\n\n    public stopMonitoringDistance(): void {\n        if (this._timerId) {\n            Threading.stopTimer(this._timerId);\n            this._distance = null;\n            this._timerId = undefined;\n        }\n    }\n}\n"],"sourceRoot":"../.."}