{"version":3,"sources":["common/geo/geoHelper.ts"],"names":[],"mappings":"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","file":"geoHelper.js","sourcesContent":["import { PlatformHelper } from \"../core/platformHelper\";\n\nexport class GeoHelper {\n    public static isPostCodeValid(postCode: string): boolean {\n        let patternCheck: RegExp = new RegExp(\"^(?:(?:[A-PR-UWYZ][0-9]{1,2}|[A-PR-UWYZ][A-HK-Y][0-9]{1,2}|[A-PR-UWYZ]\" +\n            \"[0-9][A-HJKSTUW]|[A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRV-Y]) [0-9][ABD-HJLNP-UW-Z]{2}|GIR 0AA)$\", \"gi\");\n        if (patternCheck.test(postCode)) {\n            return true;\n        }\n        return false;\n    }\n\n    public static formatPostCode(postCode: string): string {\n        let formattedPostCode: string = null;\n        let pc: string = postCode.toUpperCase().replace(/\\s/g, \"\");\n\n        if (pc.length >= 5 && pc.length <= 7) {\n            let pattern: string = \"\";\n            let patterns: string[] = [];\n            patterns.push(\"A9 9AA\");\n            patterns.push(\"A9A 9AA\");\n            patterns.push(\"A99 9AA\");\n            patterns.push(\"AA9 9AA\");\n            patterns.push(\"AA9A 9AA\");\n            patterns.push(\"AA99 9AA\");\n\n            for (let i = 0; i < pc.length; i++) {\n                if (/[A-Z]/.test(pc[i])) {\n                    pattern += \"A\";\n                } else if (/[0-9]/.test(pc[i])) {\n                    pattern += \"9\";\n                }\n            }\n\n            let idx: number = -1;\n            for (let k: number = 0; k < patterns.length && idx === -1; k++) {\n                if (patterns[k].replace(/\\s/, \"\") === pattern) {\n                    idx = k;\n                }\n            }\n\n            if (idx >= 0) {\n                let matchedPattern: string = patterns[idx];\n                let pcIdx: number = 0;\n                formattedPostCode = \"\";\n\n                for (let j = 0; j < matchedPattern.length; j++) {\n                    if (matchedPattern[j] === \"A\" || matchedPattern[j] === \"9\") {\n                        formattedPostCode += pc[pcIdx++];\n                    } else {\n                        formattedPostCode += \" \";\n                    }\n                }\n            }\n        }\n\n        return formattedPostCode;\n    }\n\n    public static calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n        let R: number = 6371; // km\n        let dLat: number = GeoHelper.deg2Rad(lat2 - lat1);\n        let dLon: number = GeoHelper.deg2Rad(lon2 - lon1);\n        lat1 = this.deg2Rad(lat1);\n        lat2 = this.deg2Rad(lat2);\n\n        let a: number = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n\n        let c: number = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n        return R * c;\n    }\n\n    public static async isLocationEnabled(): Promise<boolean> {\n        if (PlatformHelper.getPlatform() !== \"wua\") {\n            return true;\n        }\n\n        const accessStatus = await Windows.Devices.Geolocation.Geolocator.requestAccessAsync();\n        const accessStatuses = Windows.Devices.Geolocation.GeolocationAccessStatus;\n        switch (accessStatus) {\n            case accessStatuses.allowed:\n                return true;\n            case accessStatuses.denied:\n                return false;\n            case accessStatuses.unspecified:\n                return false;\n            default:\n                return false;\n        }\n    }\n\n    private static deg2Rad(degrees: number): number {\n        return degrees * Math.PI / 180;\n    }\n}\n"],"sourceRoot":"../.."}