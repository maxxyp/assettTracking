{"version":3,"sources":["common/geo/gpsService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGA;QAMI;YACI,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAC5B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,yBAAyB,GAAG,CAAC,CAAC;YACnC,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;YAC5B,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC/B,CAAC;QAEM,iCAAY,GAAnB,UAAoB,SAAoB;YACpC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAChC,CAAC;QAEY,gCAAW,GAAxB;;;oBACI,sBAAO,IAAI,CAAC,aAAa,EAAC;;;SAC7B;QAEM,+BAAU,GAAjB,UAAkB,QAAyC;YACvD,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACjC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,yBAAyB,CAAC,GAAG,QAAQ,CAAC;YAElE,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAE7B,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC;QAC1C,CAAC;QAEM,8BAAS,GAAhB,UAAiB,OAAe;YAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAClC,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;QACL,CAAC;QAEO,wCAAmB,GAA3B;YAAA,iBAoBC;YAnBG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,CAAC,mDAAmD;YAC/D,CAAC;YAED,IAAM,SAAS,GAAG,UAAC,QAAkB;gBACjC,KAAI,CAAC,aAAa,GAAG,IAAI,yBAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC1F,GAAG,CAAC,CAAC,IAAI,OAAO,IAAI,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBACzC,KAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC;gBACxD,CAAC;YACL,CAAC,CAAC;YAEF,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,aAAa,CACrC,SAAS,EACT,cAAO,CAAC,EAAE,2BAA2B;YACpB;gBACb,kBAAkB,EAAE,IAAI;gBACxB,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,KAAK;aACpB,CAAC,CAAC;QACX,CAAC;QACL,iBAAC;IAAD,CA1DA,AA0DC,IAAA;IA1DY,gCAAU","file":"gpsService.js","sourcesContent":["import {IGpsService} from \"./IGpsService\";\nimport {GeoPosition} from \"./models/geoPosition\";\n\nexport class GpsService implements IGpsService {\n    private _navigator: Navigator;\n    private _lastPosition: GeoPosition;\n    private _externalWatcherIdCounter: number;\n    private _externalWatchers: { [id: number] : (position: GeoPosition) => void};\n\n    constructor() {\n        this._navigator = navigator;\n        this._lastPosition = null;\n        this._externalWatcherIdCounter = 0;\n        this._externalWatchers = {};\n        this.createInternalWatch();\n    }\n\n    public setNavigator(navigator: Navigator): void {\n        this._navigator = navigator;\n    }\n\n    public async getLocation(): Promise<GeoPosition> {\n        return this._lastPosition;\n    }\n\n    public startWatch(callback: (position: GeoPosition) => void): number {\n        this._externalWatcherIdCounter++;\n        this._externalWatchers[this._externalWatcherIdCounter] = callback;\n\n        callback(this._lastPosition);\n\n        return this._externalWatcherIdCounter;\n    }\n\n    public stopWatch(watchId: number): void {\n        if (this._externalWatchers[watchId]) {\n            delete this._externalWatchers[watchId];\n        }\n    }\n\n    private createInternalWatch(): void {\n        if (!this._navigator.geolocation) {\n            return; // getLocation() will always return null to callers\n        }\n\n        const onSuccess = (position: Position) => {\n            this._lastPosition = new GeoPosition(position.coords.longitude, position.coords.latitude);\n            for (let watchId in this._externalWatchers) {\n                this._externalWatchers[watchId](this._lastPosition);\n            }\n        };\n\n        this._navigator.geolocation.watchPosition(\n            onSuccess,\n            () => {}, // don't worry about errors\n            <PositionOptions>{\n                enableHighAccuracy: true,\n                timeout: 5000,\n                maximumAge: 15000\n            });\n    }\n}\n"],"sourceRoot":"../.."}