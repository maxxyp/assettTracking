{"version":3,"sources":["common/ui/observers/pathObserver.ts"],"names":[],"mappings":"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","file":"pathObserver.js","sourcesContent":["import {BindingEngine, Disposable} from \"aurelia-binding\";\nimport {ObjectHelper} from \"../../core/objectHelper\";\n\nexport class PathObserver implements Disposable {\n    private _bindingEngine: BindingEngine;\n    private _subject: any;\n    private _path: string;\n    private _pathSplit: string[];\n    private _subscriptions: Disposable[];\n    private _valueChanged: (oldValue: any, newValue: any) => void;\n    private _value: any;\n\n    constructor(bindingEngine: BindingEngine, subject: any, path: string) {\n        this._bindingEngine = bindingEngine;\n        this._subject = subject;\n        this._path = path;\n        let initialPathSplit = path ? path.split(\".\") : [];\n        this._pathSplit = [];\n\n        for (let i = 0; i < initialPathSplit.length; i++) {\n            let arrayIdx = initialPathSplit[i].indexOf(\"[\");\n            if (arrayIdx > 0) {\n                // if the path element is an array index then make sure\n                // we monitor the array changing as well as the indexed item\n                this._pathSplit.push(initialPathSplit[i].substr(0, arrayIdx));\n                this._pathSplit.push(initialPathSplit[i].substr(arrayIdx + 1, initialPathSplit[i].length - arrayIdx - 2));\n            } else {\n                this._pathSplit.push(initialPathSplit[i]);\n            }\n        }\n\n        this._subscriptions = [];\n\n        this.createSubscription(this._subject, 0);\n        this.updateValue();\n    }\n\n    public subscribe(valueChanged: (newValue: any, oldValue: any) => void): Disposable {\n        this._valueChanged = valueChanged;\n        return this;\n    }\n\n    public dispose(): void {\n        for (let i = 0; i < this._subscriptions.length; i++) {\n            this._subscriptions[i].dispose();\n        }\n\n        this._subscriptions = [];\n        this._valueChanged = null;\n    }\n\n    private createSubscription(subject: any, propertyIndex: number): void {\n        /* only create a subscription if the object exists */\n        if (subject !== null && subject !== undefined && propertyIndex < this._pathSplit.length) {\n            /* subscribe to the property on the object */\n            let subscription = this._bindingEngine.propertyObserver(subject, this._pathSplit[propertyIndex])\n                .subscribe((newValue, oldValue) => {\n                    /* if this is the subscription for the end of the path then hand on the value to the subscriber */\n                    if (propertyIndex === this._pathSplit.length) {\n                        this.triggerValueChanged();\n                    } else {\n                        /* if the object has changed and now has no value destroy any subscriptions further down the path */\n                        if (newValue === null || newValue === undefined) {\n                            this.destroySubscriptions(propertyIndex);\n\n                            /* this was a mid path change to no object so the end path is now undefined */\n                            this.triggerValueChanged();\n                        } else {\n                            /* subscription has a value so try and create and subsequent subscriptions in the path */\n                            let thisSubject: any = subject[this._pathSplit[propertyIndex - 1]];\n                            this.createSubscription(thisSubject, propertyIndex);\n\n                            /* this was a mid path change to no object so the end path is now undefined */\n                            this.triggerValueChanged();\n                        }\n                    }\n                });\n\n            this._subscriptions.push(subscription);\n\n            this.createSubscription(subject[this._pathSplit[propertyIndex]], ++propertyIndex);\n        }\n    }\n\n    private destroySubscriptions(propertyIndex: number): void {\n        for (let i = propertyIndex; i < this._subscriptions.length; i++) {\n            this._subscriptions[i].dispose();\n        }\n\n        this._subscriptions.splice(propertyIndex, this._subscriptions.length - propertyIndex);\n    }\n\n    private updateValue() : void {\n        this._value = ObjectHelper.getPathValue(this._subject, this._path);\n    }\n\n    private triggerValueChanged() : void {\n        let oldValue: any = this._value;\n        this.updateValue();\n\n        if (this._valueChanged) {\n            this._valueChanged(this._value, oldValue);\n        }\n    }\n}\n"],"sourceRoot":"../../.."}