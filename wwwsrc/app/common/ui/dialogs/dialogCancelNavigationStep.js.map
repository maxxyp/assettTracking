{"version":3,"sources":["common/ui/dialogs/dialogCancelNavigationStep.ts"],"names":[],"mappings":";;;;;;;;;;;;IAKA;;;;;;;;;;;;OAYG;IAEH;QAKI;;;WAGG;QACH,oCAAY,aAA4B,EAAE,MAAc;YACpD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;YACpC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAC1B,CAAC;QAED;;;;;WAKG;QACI,wCAAG,GAAV,UAAW,qBAA4C,EAAE,IAAU;YAC/D,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;YAC3F,EAAE,CAAC,CAAC,CAAC,CAAC,aAAa,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC9C,IAAI,kBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,yBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,QAAQ,EAAE;oBACtF,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,KAAK;iBACjB,CAAC,CAAC,CAAC;gBAEJ,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAjB,CAAiB,CAAC,CAAC;qBAC3D,OAAO,CAAC,cAAM,OAAA,kBAAgB,EAAhB,CAAgB,CAAC,CAAC;YACzC,CAAC;YACD,MAAM,CAAC,IAAI,EAAE,CAAC;YAEd,yGAAyG;YACzG,mCAAmC;YACnC,6EAA6E;YAE7E,2BAA2B;YAC3B,wBAAwB;YACxB,0FAA0F;YAC1F,8BAA8B;YAC9B,6BAA6B;YAC7B,eAAe;YAEf,sDAAsD;YAEtD,8BAA8B;YAC9B,uDAAuD;YACvD,gGAAgG;YAChG,iEAAiE;YACjE,mBAAmB;YACnB,2BAA2B;YAC3B,YAAY;YACZ,QAAQ;YACR,IAAI;YAEJ,iBAAiB;QACrB,CAAC;QAzDQ,0BAA0B;YADtC,0BAAM,CAAC,8BAAa,EAAE,0BAAS,CAAC;6CAUF,8BAAa,EAAU,uBAAM;WAT/C,0BAA0B,CA0DtC;QAAD,iCAAC;KA1DD,AA0DC,IAAA;IA1DY,gEAA0B","file":"dialogCancelNavigationStep.js","sourcesContent":["import {Redirect, NavigationInstruction, AppRouter, Router} from \"aurelia-router\";\nimport {DialogService} from \"aurelia-dialog\";\nimport {Next} from \"aurelia-router\";\nimport {inject} from \"aurelia-framework\";\n\n/**\n * This solution is based on https://github.com/aurelia/dialog/issues/96\n *\n * Use this to cancel the navigation and close the dialog box, for e.g. when the user presses back whilst a modal is\n * open\n *\n * Note: for now this has to be used in the authorize step for the pipeline at some point hoping we can use\n * another more meaningful step. See https://github.com/aurelia/router/issues/26 for more details re. authorize step\n *\n * this following needs to go in your router configuration for now\n *\n * routerConfiguration.addPipelineStep(\"authorize\", DialogCloseStep);\n */\n@inject(DialogService, AppRouter)\nexport class DialogCancelNavigationStep {\n\n    private _dialogService: DialogService;\n    private _router: Router;\n\n    /**\n     *\n     * @param dialogService\n     */\n    constructor(dialogService: DialogService, router: Router) {\n        this._dialogService = dialogService;\n        this._router = router;\n    }\n\n    /**\n     *\n     * @param navigationInstruction\n     * @param next\n     * @returns {any}\n     */\n    public run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n        let activeDialogs = this._dialogService.hasActiveDialog && this._dialogService.controllers;\n        if (!!activeDialogs && activeDialogs.length > 0) {\n            let cancelNavigation = next.cancel(new Redirect(this._router.currentInstruction.fragment, {\n                trigger: false,\n                replace: false\n            }));\n\n            return Promise.all(activeDialogs.map(ctrl => ctrl.cancel(true)))\n                .finally(() => cancelNavigation);\n        }\n        return next();\n\n        // if (this._dialogService.controllers && this._dialogService.controllers.length > 0) { // dialog is open\n        //     // get the active controller\n        //     let controller: DialogController = this._dialogService.controllers[0];\n\n        //     // cancel the dialog\n        //     if (controller) {\n        //         let prom = next.cancel(new Redirect(this._router.currentInstruction.fragment, {\n        //             trigger: false,\n        //             replace: false\n        //         }));\n\n        //         let closePromise = controller.cancel(true);\n\n        //         if (closePromise) {\n        //             return closePromise.finally(() => prom);\n        //             /* Try catch this in case the dialog has already been closed, calling close twice\n        //                     triggers an exception in Aurelia dialog */\n        //         } else {\n        //             return prom;\n        //         }\n        //     }\n        // }\n\n        // return next();\n    }\n}\n"],"sourceRoot":"../../.."}