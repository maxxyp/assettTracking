{"version":3,"sources":["common/ui/domHelper.ts"],"names":[],"mappings":"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","file":"domHelper.js","sourcesContent":["import {Threading} from \"../core/threading\";\nexport class DomHelper {\n    private static _scrollInterval: number = -1;\n    private static _scrollPos: number;\n    private static _win: Window;\n\n    public static setWindowTarget(win: Window): void {\n        DomHelper._win = win;\n    }\n\n    public static scrollToTop(): void {\n        DomHelper.scrollToElement(document.getElementsByTagName(\"body\")[0], 10);\n    }\n\n    public static jumpToTop(): void {\n        DomHelper.scrollToElement(document.getElementsByTagName(\"body\")[0], -1);\n    }\n\n    public static scrollToElement(scrollTarget: HTMLElement, stepRate?: number, adjustment?: number): void {\n        /* When a menu entry is navigated make sure the page is reset to be at the top */\n        if (!DomHelper._win) {\n            DomHelper._win = window;\n        }\n        if (stepRate === -1) {\n            Threading.nextCycle(() => {\n                if (!adjustment) {\n                    adjustment = 0;\n                }\n                DomHelper._win.scrollTo(0, scrollTarget.offsetTop + adjustment);\n            });\n        } else {\n            if (DomHelper._scrollInterval === -1) {\n                DomHelper._scrollPos = DomHelper._win.scrollY;\n\n                if (DomHelper._scrollPos > scrollTarget.offsetTop) {\n                    DomHelper._scrollInterval = Threading.startTimer(() => {\n                        if (DomHelper._scrollPos > scrollTarget.offsetTop) {\n                            DomHelper._scrollPos -= stepRate;\n                            DomHelper._win.scrollTo(0, DomHelper._scrollPos);\n                        } else {\n                            Threading.stopTimer(DomHelper._scrollInterval);\n                            DomHelper._scrollInterval = -1;\n                        }\n                    }, 1);\n                } else {\n                    DomHelper._scrollInterval = Threading.startTimer(() => {\n                        if (DomHelper._scrollPos < scrollTarget.offsetTop) {\n                            DomHelper._scrollPos += stepRate;\n                            DomHelper._win.scrollTo(0, DomHelper._scrollPos);\n                        } else {\n                            Threading.stopTimer(DomHelper._scrollInterval);\n                            DomHelper._scrollInterval = -1;\n                        }\n                    }, 1);\n                }\n            }\n        }\n    }\n\n    public static closest(element: Element, selector: string): Element {\n        while (element && element.nodeType === 1) {\n            if (element.matches(selector)) {\n                return element;\n            }\n\n            element = <Element>(element.parentNode);\n        }\n\n        return null;\n    }\n\n    public static closestTag(element: Element, tagName: string): Element {\n        while (element && element.nodeType === 1) {\n            if (element.parentNode) {\n                for (let i = 0; i < element.parentNode.childNodes.length; i++) {\n                    let elem = <Element>element.parentNode.childNodes[i];\n                    if (elem.nodeType === 1 && elem.tagName.toLowerCase() === tagName) {\n                        return elem;\n                    }\n                }\n            }\n\n            element = <Element>(element.parentNode);\n        }\n\n        return null;\n    }\n\n    public static getAureliaComponentFromElement<T>(element: any, componentName: string): T {\n        if (element && element.au && element.au[componentName]) {\n            return <T>element.au[componentName].viewModel;\n        } else {\n            return undefined;\n        }\n    }\n\n    // aurelia converters mean that | and & may be present in the binding expression, the property name is always the first segment though\n    public static getModelPropertyNameFromBindingPath(path: string): string {\n          return path && path.split(/\\||\\&/)[0].trim();\n    }\n}\n"],"sourceRoot":"../.."}