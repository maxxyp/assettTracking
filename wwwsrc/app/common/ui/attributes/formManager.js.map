{"version":3,"sources":["common/ui/attributes/formManager.ts"],"names":[],"mappings":"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","file":"formManager.js","sourcesContent":["import * as Logging from \"aurelia-logging\";\nimport {customAttribute} from \"aurelia-templating\";\nimport {inject} from \"aurelia-dependency-injection\";\nimport {IFormController} from \"./IFormController\";\nimport {FormControllerElement} from \"./formControllerElement\";\nimport {BindingEngine} from \"aurelia-binding\";\nimport {PathObserver} from \"../observers/pathObserver\";\nimport {MutationObserverProvider} from \"../services/mutationObserverProvider\";\nimport {IMutationObserverProvider} from \"../services/IMutationObserverProvider\";\nimport { DomHelper } from \"../domHelper\";\nimport {FormManagerArrayMap} from \"../elements/formManagerArrayMap\";\n\n@customAttribute(\"form-manager\")\n@inject(Element, BindingEngine, MutationObserverProvider)\nexport class FormManager {\n    private _formController: IFormController;\n    private _element: HTMLElement;\n    private _formElements: FormControllerElement[];\n\n    private _mutationObserverProvider: IMutationObserverProvider;\n    private _bindingEngine: BindingEngine;\n    private _mutationObserver: MutationObserver;\n    private _logger: Logging.Logger;\n\n    constructor(element: HTMLElement, bindingEngine: BindingEngine, mutationObserverProvider: IMutationObserverProvider) {\n        this._element = element;\n        this._bindingEngine = bindingEngine;\n        this._mutationObserverProvider = mutationObserverProvider;\n\n        this._logger = Logging.getLogger(\"FormManager\");\n    }\n\n    public bind(bindingContext: any): any {\n        this._formController = bindingContext;\n    }\n\n    public attached(): void {\n        this.disconnectFormElements();\n        if (this._formController) {\n            this._formController.elementsLoaded(this._formElements);\n        }\n        this.connectDomNode(this._element);\n        if (this._formController) {\n            this._formController.elementsLoaded(this._formElements);\n        }\n        /* Setup the mutation observer on the dom to make sure we notice any dynamically added/removed\n        form fields, such as if.binds or interated arrays\n         */\n        this._mutationObserver = this._mutationObserverProvider.create((mutations) => this.updateMutations(mutations));\n        this._mutationObserver.observe(this._element, {childList: true, subtree: true});\n    }\n\n    public detached(): void {\n        if (this._mutationObserver) {\n            this._mutationObserver.disconnect();\n            this._mutationObserver = null;\n        }\n        this.disconnectFormElements();\n        if (this._formController) {\n            this._formController.elementsLoaded(this._formElements);\n        }\n    }\n\n    private connectDomNode(rootElement: HTMLElement): boolean {\n        let hasChanged: boolean = false;\n\n        if (this._formController) {\n            if (this.addFormElement(rootElement)) {\n                hasChanged = true;\n            }\n            let elements: HTMLCollection = rootElement.children;\n\n            if (elements) {\n                for (let i = 0; i < elements.length; i++) {\n                    let domElement = <HTMLElement>elements[i];\n\n                    // we have nested editableViewModels, we do not want the formManager of the parent to recurse into and register\n                    //  the children of router-views.  If we don't do this then bad things happen, like a validationClear() being called on\n                    //  the parent clearing validation messages on the child\n                    if (domElement.localName !== \"router-view\" && this.connectDomNode(domElement)) {\n                            hasChanged = true;\n                    }\n                }\n            }\n        }\n\n        return hasChanged;\n    }\n\n    private disconnectDomNode(rootElement: HTMLElement) : boolean {\n        let hasChanged: boolean = false;\n\n        if (rootElement) {\n            if (this.removeFormElement(rootElement)) {\n                hasChanged = true;\n            }\n            let elements: HTMLCollection = rootElement.children;\n\n            if (elements) {\n                for (let i = 0; i < elements.length; i++) {\n                    let domElement = <HTMLElement>elements[i];\n\n                    if (this.disconnectDomNode(domElement)) {\n                        hasChanged = true;\n                    }\n                }\n            }\n        }\n\n        return hasChanged;\n    }\n\n    private getBindingPathFromElement(element: HTMLElement): string {\n        let bindingPath: string = null;\n\n        if (element && element.attributes) {\n            let atts: string[] = [\"value.bind\", \"value.two-way\" , \"value.one-way\"];\n\n            atts.forEach((att) => {\n                let attr: Attr = element.attributes.getNamedItem(att);\n                if (attr) {\n                    let disableFormManager = element.attributes.getNamedItem(\"disable-form-manager\");\n\n                    if (disableFormManager === null) {\n                        bindingPath = DomHelper.getModelPropertyNameFromBindingPath(attr.value);\n\n                        let validateIndexAttribute = element.attributes.getNamedItem(\"validate-index\");\n\n                        if (validateIndexAttribute) {\n                            let formManagerArrayMapElement = DomHelper.closestTag(element, \"form-manager-array-map\");\n                            if (formManagerArrayMapElement) {\n                                let formManagerArrayMap = DomHelper.getAureliaComponentFromElement<FormManagerArrayMap>(formManagerArrayMapElement, \"form-manager-array-map\");\n                                if (formManagerArrayMap && bindingPath) {\n                                    bindingPath = bindingPath.replace(formManagerArrayMap.itemName, formManagerArrayMap.arrayName + \"[\" + formManagerArrayMap.index + \"]\");\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        return bindingPath;\n    }\n\n    private updateMutations(mutations: MutationRecord[]): void {\n        let hasChanged: boolean = false;\n\n        if (mutations) {\n            mutations.forEach(mut => {\n\n                if (mut.removedNodes) {\n                    for (let i = 0; i < mut.removedNodes.length; i++) {\n                        let removeElement = <HTMLElement>mut.removedNodes.item(i);\n\n                        if (this.disconnectDomNode(removeElement)) {\n                            hasChanged = true;\n                        }\n                    }\n                }\n\n                if (mut.addedNodes) {\n                    for (let i = 0; i < mut.addedNodes.length; i++) {\n                        let addElement = <HTMLElement>mut.addedNodes.item(i);\n\n                        if (this.connectDomNode(addElement)) {\n                            hasChanged = true;\n                        }\n                    }\n                }\n            });\n        }\n\n        /* Now make sure all the element have the correct path bindings */\n        if (this._formElements) {\n            this._formElements.forEach(elem => {\n                let oldProp = elem.valueBindingPropertyName;\n\n                elem.valueBindingPropertyName = this.getBindingPathFromElement(elem.element);\n\n                if (elem.valueBindingPropertyName !== oldProp) {\n                    hasChanged = true;\n                }\n            });\n        }\n\n        if (hasChanged) {\n            this._formController.elementsLoaded(this._formElements);\n        }\n    }\n\n    private addFormElement(htmlElement: HTMLElement): boolean {\n        let hasChanged: boolean = false;\n\n        let bindingPath = this.getBindingPathFromElement(htmlElement);\n\n        if (bindingPath) {\n            this._logger.debug(\"Adding Form Element: \" + bindingPath);\n\n            let formElement: FormControllerElement;\n            this._formElements = this._formElements || [];\n\n            formElement = new FormControllerElement();\n            formElement.element = htmlElement;\n            formElement.valueBindingPropertyName = bindingPath;\n            formElement.pathObserver = new PathObserver(this._bindingEngine, this._formController, formElement.valueBindingPropertyName);\n\n            formElement.pathObserver.subscribe(() => {\n                this.elementUpdate(formElement, \"valueChanged\");\n            });\n\n            let blurListener: (event: FocusEvent) => any = () => this.elementUpdate(formElement, \"lostFocus\");\n            htmlElement.addEventListener(\"blur\", blurListener);\n\n            formElement.elementListener = blurListener;\n\n            this._formElements.push(formElement);\n\n            hasChanged = true;\n        }\n\n        return hasChanged;\n    }\n\n    private removeFormElement(htmlElement: HTMLElement): boolean {\n        let hasChanged: boolean = false;\n\n        let bindingPath = this.getBindingPathFromElement(htmlElement);\n\n        if (bindingPath) {\n            this._logger.debug(\"Removing Form Element: \" + bindingPath);\n\n            let formControllerElement = this._formElements.find(elem => elem.element === htmlElement);\n\n            if (formControllerElement) {\n                this.removeFormControllerElement(formControllerElement);\n\n                hasChanged = true;\n            }\n        }\n\n        return hasChanged;\n    }\n\n    private removeFormControllerElement(formControllerElement: FormControllerElement) : void {\n        formControllerElement.element.removeEventListener(\"blur\", formControllerElement.elementListener);\n\n        formControllerElement.pathObserver.dispose();\n\n        let foundIndex = this._formElements.indexOf(formControllerElement);\n\n        if (foundIndex >= 0) {\n            this._formElements.splice(foundIndex, 1);\n        }\n    }\n\n    private elementUpdate(formElement: FormControllerElement, method: string): void {\n        this._formController.elementUpdate(formElement, method);\n    }\n\n    private disconnectFormElements(): void {\n        for (let formElement in this._formElements) {\n            this.removeFormControllerElement(this._formElements[formElement]);\n        }\n        this._formElements = undefined;\n    }\n}\n"],"sourceRoot":"../../.."}