{"version":3,"sources":["common/ui/validators/isPhone.ts"],"names":[],"mappings":"AAAA,qDAAqD;;;;;;;;;;;;;;IAIrD;QAA6B,2BAAc;QACvC;mBACI,kBACI,IAAI,EACJ,UAAC,QAAgB;gBACb,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;gBACjD,IAAI,iBAAiB,GAAW,sDAAsD,CAAC;gBACvF,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5C,CAAC,EACD,oCAAoC,EACpC,uBAAuB,CAC1B;QACL,CAAC;QACL,cAAC;IAAD,CAbA,AAaC,CAb4B,mCAAc,GAa1C;IAbY,0BAAO","file":"isPhone.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport {ValidationRule} from \"aurelia-validation\";\n\nexport class IsPhone extends ValidationRule {\n    constructor() {\n        super(\n            null,\n            (newValue: string) => {\n                newValue = newValue.replace(/\\(|\\)|\\s+|-/gi, \"\");\n                let regularExpression: RegExp = /^0(?:1\\d{8,9}|[23]\\d{9}|7(?:[45789]\\d{8}|624\\d{6}))$/;\n                return regularExpression.test(newValue);\n            },\n            \"The phone is not in a valid format\",\n            \"IsPhoneValidationRule\"\n        );\n    }\n}\n"],"sourceRoot":"../../.."}