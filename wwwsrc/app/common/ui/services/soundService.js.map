{"version":3,"sources":["common/ui/services/soundService.ts"],"names":[],"mappings":"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","file":"soundService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport {inject} from \"aurelia-dependency-injection\";\nimport {ISoundService} from \"./ISoundService\";\nimport {IAssetService} from \"../../core/services/IAssetService\";\nimport {AssetService} from \"../../core/services/assetService\";\n\nconst SOUND_BELL_1X: string = \"bell.mp3\";\nconst SOUND_BELL_2X: string = \"bell_2x.mp3\";\n\n@inject(AssetService)\nexport class SoundService implements ISoundService {\n\n    private _assetService: IAssetService;\n    private _context: AudioContext;\n    private _source: AudioBufferSourceNode;\n\n    constructor(assetService: IAssetService) {\n        this._assetService = assetService;\n        if (window.AudioContext) {\n            this._context = new AudioContext();\n        }\n    }\n\n    public async playBell(numberOfRings: number = 1): Promise<void> {\n\n        switch (numberOfRings) {\n            case 1:\n                await this.play(SOUND_BELL_1X);\n                break;\n            case 2:\n                await this.play(SOUND_BELL_2X);\n                break;\n            default:\n                await this.play(SOUND_BELL_1X);\n        }\n    }\n\n    public play(assetName: string): Promise<AudioBufferSourceNode> {\n        return new Promise<AudioBufferSourceNode>((resolve, reject) => {\n            this._assetService.loadArrayBuffer(\"sounds/\" + assetName)\n                .then((soundBuffer: ArrayBuffer) => {\n                    this.processBuffer(soundBuffer).then((source) => {\n                        source.start(0);\n                        resolve(source);\n                    }).catch((err) => {\n                        reject(err);\n                    });\n                }).catch((err) => {\n                    reject(err);\n                });\n        });\n    }\n\n    public playBuffer(buffer: ArrayBuffer): Promise<AudioBufferSourceNode> {\n        return new Promise<AudioBufferSourceNode>((resolve, reject) => {\n            this.processBuffer(buffer).then((source) => {\n                source.start(0);\n                resolve(source);\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    public stop(source: AudioBufferSourceNode): void {\n        if (source) {\n            source.stop(0);\n        }\n    }\n\n    private processBuffer(soundBuffer: ArrayBuffer): Promise<AudioBufferSourceNode> {\n        return new Promise<AudioBufferSourceNode>((resolve, reject) => {\n            this._source = this._context.createBufferSource();\n            this._context.decodeAudioData(soundBuffer, (buffer) => {\n                this._source.buffer = buffer;\n                this._source.connect(this._context.destination);\n                resolve(this._source);\n            }, () => {\n                reject();\n            });\n        });\n    }\n}\n"],"sourceRoot":"../../.."}