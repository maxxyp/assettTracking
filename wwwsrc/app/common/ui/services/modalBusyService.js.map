{"version":3,"sources":["common/ui/services/modalBusyService.ts"],"names":[],"mappings":"AAAA,qDAAqD;;;;;;;;;;;;;IAUrD;QAOI,0BAAY,aAA4B;YACpC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;YACpC,IAAI,CAAC,MAAM,GAAG,IAAI,iCAAe,EAAE,CAAC;YACpC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC;QAClC,CAAC;QAEM,mCAAQ,GAAf,UAAgB,OAAe,EAAE,OAAe,EAAE,WAAoB,EAAE,YAAyB;YAAjG,iBAmBC;YAlBG,IAAI,KAAK,GAAY,KAAK,CAAC;YAC3B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAClC,KAAK,GAAG,IAAI,CAAC;YACjB,CAAC;YACD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;YACzC,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,WAAW,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;YAExC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;gBACvC,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC;gBAE/B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,EAAC,SAAS,EAAE,uBAAU,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAC,CAAC;qBACzF,IAAI,CAAC,UAAC,UAAU;oBACb,KAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;gBACxC,CAAC,CAAC,CAAC;YACX,CAAC;YAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAEM,mCAAQ,GAAf,UAAgB,OAAe;YAA/B,iBAaC;YAZG,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACjC,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAC1C,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC/F,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;qBAC1C,IAAI,CAAC;oBACF,KAAI,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC;gBAClC,CAAC,CAAC,CAAC;YACX,CAAC;YAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAEO,yCAAc,GAAtB;YACI,IAAI,QAAQ,GAAa,EAAE,CAAC;YAE5B,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC3C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;YACrD,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC3B,CAAC;QA3DQ,gBAAgB;YAF5B,0BAAM,CAAC,8BAAa,CAAC;YACrB,6BAAS,EAAE;6CAQmB,8BAAa;WAP/B,gBAAgB,CA4D5B;QAAD,uBAAC;KA5DD,AA4DC,IAAA;IA5DY,4CAAgB","file":"modalBusyService.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\r\n\r\nimport {inject, singleton} from \"aurelia-framework\";\r\nimport {DialogService, DialogController} from \"aurelia-dialog\";\r\nimport {IModalBusyService} from \"./IModalBusyService\";\r\nimport {BusyDialog} from \"../dialogs/busyDialog\";\r\nimport {BusyDialogModel} from \"../dialogs/models/busyDialogModel\";\r\n\r\n@inject(DialogService)\r\n@singleton()\r\nexport class ModalBusyService implements IModalBusyService {\r\n    private _dialogService: DialogService;\r\n    private _dialogController: DialogController;\r\n\r\n    private _model: BusyDialogModel;\r\n    private _contextMessages: { [id: string]: string};\r\n\r\n    constructor(dialogService: DialogService) {\r\n        this._dialogService = dialogService;\r\n        this._model = new BusyDialogModel();\r\n        this._contextMessages = {};\r\n        this._model.isComplete = true;\r\n    }\r\n\r\n    public showBusy(context: string, message: string, linkMessage?: string, linkCallback?: () => void): Promise<void> {\r\n        let isNew: boolean = false;\r\n        if (!this._contextMessages[context]) {\r\n            isNew = true;\r\n        }\r\n        this._contextMessages[context] = message;\r\n        this._model.linkMessage = linkMessage;\r\n        this._model.linkCallback = linkCallback;\r\n\r\n        if (this.updateMessages() === 1 && isNew) {\r\n            this._model.isComplete = false;\r\n\r\n            return this._dialogService.openAndYieldController({viewModel: BusyDialog, model: this._model})\r\n                .then((controller) => {\r\n                    this._dialogController = controller;\r\n                });\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public hideBusy(context: string): Promise<void> {\r\n        if (this._contextMessages[context]) {\r\n            delete this._contextMessages[context];\r\n        }\r\n\r\n        if (this.updateMessages() === 0 && this._dialogController && this._dialogService.hasActiveDialog) {\r\n            return this._dialogController.close(true, null)\r\n                .then(() => {\r\n                    this._model.isComplete = true;\r\n                });\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private updateMessages(): number {\r\n        let messages: string[] = [];\r\n\r\n        for (let contextKey in this._contextMessages) {\r\n            messages.push(this._contextMessages[contextKey]);\r\n        }\r\n\r\n        this._model.message = messages.join(\"<br/>\");\r\n        return messages.length;\r\n    }\r\n}\r\n"],"sourceRoot":"../../.."}