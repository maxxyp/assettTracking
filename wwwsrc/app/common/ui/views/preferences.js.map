{"version":3,"sources":["common/ui/views/preferences.ts"],"names":[],"mappings":"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","file":"preferences.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport {IStorage} from \"../../core/services/IStorage\";\nimport {singleton} from \"aurelia-dependency-injection\";\nimport {IPreferencesView} from \"./IPreferencesView\";\nimport {BrowserLocalStorage} from \"../../core/services/browserLocalStorage\";\nimport {inject} from \"aurelia-dependency-injection\";\nimport {IPreferencesConsumer} from \"./IPreferencesConsumer\";\n\n@singleton()\n@inject(BrowserLocalStorage)\nexport class Preferences {\n    public errorMessage: string;\n    public successMessage: string;\n\n    public preferences: { view: string, viewModel: IPreferencesView, consumer: IPreferencesConsumer}[];\n\n    private _storageService: IStorage;\n\n    constructor(storageService: IStorage) {\n        this.preferences = [];\n\n        this._storageService = storageService;\n    }\n\n    public add(view: string, viewModel: IPreferencesView, consumer: IPreferencesConsumer): void {\n        this.preferences.push({view: view, viewModel: viewModel, consumer: consumer});\n\n    }\n\n    public attached() : Promise<void> {\n        this.errorMessage = \"\";\n        this.successMessage = \"\";\n        return this.loadPreferences().then(() => {\n            for (let i = 0; i < this.preferences.length; i++) {\n                this.preferences[i].viewModel.consumerToView(this.preferences[i].consumer);\n            }\n        });\n    }\n\n    public loadPreferences() : Promise<any> {\n        let loadPromises: Promise<any>[] = [];\n\n        for (let i = 0; i < this.preferences.length; i++) {\n            loadPromises.push(this.preferences[i].consumer.load(this._storageService));\n        }\n\n        return Promise.all(loadPromises);\n    }\n\n    public savePreferences(): Promise<any> {\n        let savePromises: Promise<any>[] = [];\n\n        for (let i = 0; i < this.preferences.length; i++) {\n            savePromises.push(this.preferences[i].consumer.save(this._storageService));\n        }\n\n        return Promise.all(savePromises);\n    }\n\n    public validateAndSavePreferences(): Promise<void> {\n        this.errorMessage = \"\";\n        this.successMessage = \"\";\n        return new Promise<void>((resolve, reject) => {\n            let validatePromises: Promise<boolean>[] = [];\n\n            for (let i = 0; i < this.preferences.length; i++) {\n                validatePromises.push(this.preferences[i].viewModel.validate());\n            }\n\n            Promise.all(validatePromises).then((results) => {\n                for (let i = 0; i < results.length; i++) {\n                    if (!results[i]) {\n                        this.errorMessage = \"Preferences not saved, please check your input and try again.\";\n                        resolve();\n                        break;\n                    }\n                }\n\n                if (!this.errorMessage) {\n                    for (let i = 0; i < this.preferences.length; i++) {\n                        this.preferences[i].viewModel.viewToConsumer(this.preferences[i].consumer);\n                    }\n\n                    this.savePreferences().then(() => {\n                        this.successMessage = \"Preferences successfully saved.\";\n                        resolve();\n                    });\n                }\n            });\n        });\n    }\n\n    public reset(): void {\n        this.errorMessage = \"\";\n        this.successMessage = \"\";\n\n        for (let i = 0; i < this.preferences.length; i++) {\n            this.preferences[i].viewModel.reset();\n        }\n    }\n}\n"],"sourceRoot":"../../.."}