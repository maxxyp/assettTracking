{"version":3,"sources":["common/ui/elements/progressBar.ts"],"names":[],"mappings":"AAAA,qDAAqD;;;;;;;;;;;;;IAMrD;QAUI;YACI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;YAClB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QACtB,CAAC;QAEM,8BAAQ,GAAf;YACI,IAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC;QAEM,kCAAY,GAAnB,UAAoB,MAAc,EAAE,MAAc;YAC9C,EAAE,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,aAAa,EAAE,CAAC;YACzB,CAAC;QACL,CAAC;QAEM,qCAAe,GAAtB,UAAuB,MAAc,EAAE,MAAc;YACjD,EAAE,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,aAAa,EAAE,CAAC;YACzB,CAAC;QACL,CAAC;QAEM,qCAAe,GAAtB,UAAuB,MAAc,EAAE,MAAc;YACjD,EAAE,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,aAAa,EAAE,CAAC;YACzB,CAAC;QACL,CAAC;QAEO,mCAAa,GAArB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC/B,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC/B,CAAC;YAED,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;YAEhD,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;YAC5E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACxB,CAAC;QACL,CAAC;QAnDD;YADC,4BAAQ,CAAC,EAAC,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAC,CAAC;;qDAC3B;QAExB;YADC,4BAAQ,CAAC,EAAC,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAC,CAAC;;qDAC3B;QAExB;YADC,4BAAQ,CAAC,EAAC,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAC,CAAC;;kDAC9B;QANZ,WAAW;YADvB,iCAAa,CAAC,cAAc,CAAC;;WACjB,WAAW,CAsDvB;QAAD,kBAAC;KAtDD,AAsDC,IAAA;IAtDY,kCAAW","file":"progressBar.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\r\n\r\nimport {customElement, bindable} from \"aurelia-framework\";\r\nimport {bindingMode} from \"aurelia-framework\";\r\n\r\n@customElement(\"progress-bar\")\r\nexport class ProgressBar {\r\n    @bindable({defaultBindingMode: bindingMode.oneWay})\r\n    public maxValue: number;\r\n    @bindable({defaultBindingMode: bindingMode.oneWay})\r\n    public minValue: number;\r\n    @bindable({defaultBindingMode: bindingMode.oneWay})\r\n    public value: number;\r\n\r\n    public percent: string;\r\n\r\n    constructor() {\r\n        this.value = 0;\r\n        this.minValue = 0;\r\n        this.maxValue = 0;\r\n    }\r\n\r\n    public attached() : void {\r\n        this.updateDisplay();\r\n    }\r\n\r\n    public valueChanged(newVal: number, oldVal: number) : void {\r\n        if (newVal !== oldVal) {\r\n            this.updateDisplay();\r\n        }\r\n    }\r\n\r\n    public maxValueChanged(newVal: number, oldVal: number) : void {\r\n        if (newVal !== oldVal) {\r\n            this.updateDisplay();\r\n        }\r\n    }\r\n\r\n    public minValueChanged(newVal: number, oldVal: number) : void {\r\n        if (newVal !== oldVal) {\r\n            this.updateDisplay();\r\n        }\r\n    }\r\n\r\n    private updateDisplay() : void {\r\n        if (this.value < this.minValue) {\r\n            this.value = this.minValue;\r\n        }\r\n        if (this.value > this.maxValue) {\r\n            this.value = this.maxValue;\r\n        }\r\n\r\n        let range = (this.maxValue + 1) - this.minValue;\r\n\r\n        if (range > 0) {\r\n            this.percent = (((this.value - this.minValue + 1) / range) * 100) + \"%\";\r\n        } else {\r\n            this.percent = \"0%\";\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../../.."}