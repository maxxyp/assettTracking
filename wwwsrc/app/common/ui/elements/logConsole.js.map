{"version":3,"sources":["common/ui/elements/logConsole.ts"],"names":[],"mappings":"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","file":"logConsole.js","sourcesContent":["import {inject, customElement} from \"aurelia-framework\";\nimport {EventAggregator} from \"aurelia-event-aggregator\";\nimport {UiConstants} from \"./constants/uiConstants\";\nimport {Log} from \"../../core/services/models/log\";\n\n@inject(EventAggregator)\n@customElement(\"log-console\")\nexport class LogConsole {\n\n    public logs: Log[];\n    public hiddenText: HTMLTextAreaElement;\n    public hiddenLog: string;\n    private _ea: EventAggregator;\n\n    constructor(ea: EventAggregator) {\n        this._ea = ea;\n        this.logs = [];\n        this.hiddenLog = \"\";\n        this._ea.subscribe(UiConstants.LOG_PUBLISHED, (logs: Log[]) => this.updateLog(logs));\n    }\n\n    public attached(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            this.clearHiddenText();\n            resolve();\n        });\n    }\n\n    public copy(): Promise<void> {\n        return new Promise<void>((resolve, rejcet) => {\n            if (this.populateHiddenText(this.logs)) {\n                this.hiddenText.select();\n                try {\n                    let supported: boolean = document.queryCommandSupported(\"copy\");\n                    if (supported) {\n                        document.execCommand(\"copy\");\n                    }\n                    this.clearHiddenText();\n                    resolve();\n                } catch (err) {\n                    this.clearHiddenText();\n                    resolve();\n                }\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    public clear(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            this.logs = [];\n            let log: Log = new Log();\n            this.logs.push(log);\n            resolve();\n        });\n    }\n\n    private updateLog(logs: Log[]): void {\n        for (let i: number = 0; i < logs.length; i++) {\n            this.logs.push(logs[i]);\n        }\n    }\n\n    private clearHiddenText(): void {\n        if (this.hiddenText) {\n            this.hiddenText.innerText = \" \";\n        }\n    }\n\n    private populateHiddenText(logs: Log[]): boolean {\n        let flag: boolean = false;\n        if (this.hiddenText) {\n            let log: string = \"\";\n            for (let i: number = 0; i < logs.length; i++) {\n                if (logs[i]) {\n                    log = log.concat(\" \" + logs[i].logText);\n                }\n            }\n            this.hiddenText.innerText = log;\n            flag = true;\n        }\n        return flag;\n    }\n}\n"],"sourceRoot":"../../.."}