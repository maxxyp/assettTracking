{"version":3,"sources":["common/ui/elements/slider.ts"],"names":[],"mappings":"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","file":"slider.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\nimport {customElement, bindable, bindingMode} from \"aurelia-framework\";\nimport {Threading} from \"../../core/threading\";\nimport {inject} from \"aurelia-dependency-injection\";\n@customElement(\"slider\")\n@inject(Element)\nexport class Slider {\n    @bindable({ defaultBindingMode: bindingMode.twoWay })\n    public value: number;\n    @bindable({ defaultBindingMode: bindingMode.twoWay })\n    public setSlider: number;\n    private _timerId: number;\n    private _element: HTMLElement;\n    private _sliderWidth: number;\n    private _previousScrollPosition: number; \n    private _scrollPosition: number;\n    private _lastChangedTime: number; \n    constructor(element: HTMLElement) {\n        this._element = element;\n    }\n\n    public attached(): void {\n        this._lastChangedTime = new Date().getTime();\n        let swipeItems = this._element.getElementsByClassName(\"slider-item\");\n        this._sliderWidth = this._element.getBoundingClientRect().width;\n\n        let swipeContent = <HTMLElement>this._element.getElementsByClassName(\"swipe-content\")[0];\n        swipeContent.style.width = (this._sliderWidth * swipeItems.length).toString() + \"px\";\n\n        for (let intcount = 0; intcount < swipeItems.length; intcount++) {\n            let swipeItem = <HTMLElement>swipeItems[intcount];\n            swipeItem.style.width = this._sliderWidth.toString() + \"px\";\n        }\n\n        this._timerId = Threading.startTimer(() => {\n            this.getCurrentSlider();\n        }, 500);\n    }\n    public valueChanged(newValue: number, oldValue: number): void {\n        // only fire if the scroller is not in movement\n        if (new Date().getTime() - this._lastChangedTime > 300) {\n            this._element.getElementsByClassName(\"swipe-container\")[0].scrollLeft = this._sliderWidth * newValue;\n        }\n    }\n    public detached(): void {\n        Threading.stopTimer(this._timerId);\n    }\n    private getCurrentSlider(): void {\n        let containerLeftPosition: number;\n        let containerRightPosition: number;\n        this._scrollPosition = this._element.getElementsByClassName(\"swipe-container\")[0].scrollLeft;\n        let intcount: number;\n        containerLeftPosition = this._element.getElementsByClassName(\"swipe-container\")[0].getBoundingClientRect().left;\n        containerRightPosition = this._element.getElementsByClassName(\"swipe-container\")[0].getBoundingClientRect().right;\n        let swipeItems = this._element.getElementsByClassName(\"slider-item\");\n        if (this._scrollPosition > this._previousScrollPosition) {\n            for (intcount = 0; intcount < swipeItems.length; intcount++) {\n                if (Math.floor(swipeItems[intcount].getBoundingClientRect().left - containerLeftPosition) <= 0) {\n                    this.value = intcount;\n                    this._lastChangedTime = new Date().getTime();\n                }\n            }\n        } else if (this._scrollPosition < this._previousScrollPosition) {\n            for (intcount = swipeItems.length; intcount--; ) {\n                if (Math.floor(swipeItems[intcount].getBoundingClientRect().right - containerRightPosition) >= 0) {\n                    this.value = intcount;\n                    this._lastChangedTime = new Date().getTime();\n                }\n            }\n        }\n        if (this._previousScrollPosition !== this._scrollPosition) {\n            this._previousScrollPosition = this._scrollPosition;\n        }\n    }\n}\n"],"sourceRoot":"../../.."}