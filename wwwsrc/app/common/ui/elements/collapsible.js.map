{"version":3,"sources":["common/ui/elements/collapsible.ts"],"names":[],"mappings":"AAAA,qDAAqD;;;;;;;;;;;;;IAMrD;QAkBI;YACI,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACpB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;YAC5B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YACvB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACzB,CAAC;QAEM,8BAAQ,GAAf;YACI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YAE9C,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;YAC9C,CAAC;QACL,CAAC;QAEM,0BAAI,GAAX;YACI,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC;QACjD,CAAC;QAEM,0BAAI,GAAX;YACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QAC/C,CAAC;QAEM,wCAAkB,GAAzB,UAA0B,QAAiB;YACvC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACtB,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACzC,CAAC;QACL,CAAC;QAEM,4BAAM,GAAb;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC9B,CAAC;YACD,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACjD,CAAC;QAEM,sCAAgB,GAAvB,UAAwB,QAA4C;YAChE,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;QACnC,CAAC;QAEM,oCAAc,GAArB;YACI,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QAC3D,CAAC;QA/DD;YADC,4BAAQ,CAAC,EAAC,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAC,CAAC;;sDACzB;QAE1B;YADC,4BAAQ,CAAC,EAAC,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAC,CAAC;;8DACjB;QAElC;YADC,4BAAQ,CAAC,EAAC,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAC,CAAC;;oDAC1B;QAEzB;YADC,4BAAQ,CAAC,EAAC,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAC,CAAC;;wDACvB;QAE5B;YADC,4BAAQ,CAAC,EAAC,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAC,CAAC;;wDACd;QAErC;YADC,4BAAQ,CAAC,EAAC,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAC,CAAC;;yDACtB;QAE7B;YADC,4BAAQ,CAAC,EAAC,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAC,CAAC;;uDACxB;QAdlB,WAAW;YADvB,iCAAa,CAAC,aAAa,CAAC;;WAChB,WAAW,CAkEvB;QAAD,kBAAC;KAlED,AAkEC,IAAA;IAlEY,kCAAW","file":"collapsible.js","sourcesContent":["/// <reference path=\"../../../../typings/app.d.ts\" />\n\nimport {customElement, bindable, bindingMode} from \"aurelia-framework\";\nimport {IconDetailItem} from \"./models/iconDetailItem\";\n\n@customElement(\"collapsible\")\nexport class Collapsible {\n    @bindable({defaultBindingMode: bindingMode.oneWay})\n    public titleText : string;\n    @bindable({defaultBindingMode: bindingMode.oneWay})\n    public titleTextExpanded : string;\n    @bindable({defaultBindingMode: bindingMode.oneWay})\n    public animate : boolean;\n    @bindable({defaultBindingMode: bindingMode.oneWay})\n    public isCollapsed: boolean;\n    @bindable({defaultBindingMode: bindingMode.oneWay})\n    public headerIcons: IconDetailItem[];\n    @bindable({defaultBindingMode: bindingMode.oneWay})\n    public collapseIcon : string;\n    @bindable({defaultBindingMode: bindingMode.oneWay})\n    public expandIcon : string;\n    public contentElement: any;\n    private _clickCallback: (collapsible: Collapsible) => void;\n\n    constructor() {\n        this.titleText = \"\";\n        this.titleTextExpanded = \"\";\n        this.animate = false;\n        this.isCollapsed = true;\n        this.headerIcons = [];\n        this.collapseIcon = \"\";\n        this.expandIcon = \"\";\n    }\n\n    public attached() : void {\n        !this.isCollapsed ? this.show() : this.hide();\n\n        if (this.contentElement) {\n            this.contentElement.style.height = \"auto\";\n        }\n    }\n\n    public show(): void {\n        this.isCollapsed = false;\n        this.contentElement.style.display = \"inline\";\n    }\n\n    public hide(): void {\n        this.isCollapsed = true;\n        this.contentElement.style.display = \"none\";\n    }\n\n    public isCollapsedChanged(newValue: boolean): void {\n        if (this.contentElement) {\n            newValue ? this.hide() : this.show();\n        }\n    }\n\n    public toggle(): void {\n        if (this._clickCallback) {\n            this._clickCallback(this);\n        }\n        this.isCollapsed ? this.show() : this.hide();\n    }\n\n    public setClickCallback(callback: (collapsible: Collapsible) => void): void {\n        this._clickCallback = callback;\n    }\n\n    public hasHeaderIcons() : boolean {\n        return this.headerIcons && this.headerIcons.length > 0;\n    }\n}\n"],"sourceRoot":"../../.."}