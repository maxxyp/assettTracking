{"version":3,"sources":["common/ui/elements/checkbox.ts"],"names":[],"mappings":";;;;;;;;;;;;IAQA;QAWI,kBAAY,OAAyB;YACjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAC5B,CAAC;QACM,2BAAQ,GAAf;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YAC1B,CAAC;QACL,CAAC;QACM,wBAAK,GAAZ;YAAA,iBAWC;YAVG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;YACvD,qBAAS,CAAC,SAAS,CAAC;gBACrB,KAAI,CAAC,QAAQ,CAAE,aAAa,CAAC,iBAAG,CAAC,iBAAiB,CAAC,QAAQ,EAAE;oBACzD,MAAM,EAAE;wBACJ,KAAK,EAAE,KAAI,CAAC,KAAK;wBACjB,OAAO,EAAE,KAAI,CAAC,SAAS;qBAC1B;oBACD,OAAO,EAAE,IAAI;iBAChB,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,CAAC;QACR,CAAC;QAEM,uBAAI,GAAX;YACI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,iBAAG,CAAC,iBAAiB,CAAC,MAAM,EAAE;gBACtD,MAAM,EAAE;oBACJ,KAAK,EAAE,IAAI,CAAC,QAAQ;iBACvB;gBACD,OAAO,EAAE,IAAI;aAChB,CAAC,CAAC,CAAC;QACR,CAAC;QArCD;YADC,6BAAQ,CAAC,EAAE,kBAAkB,EAAE,6BAAW,CAAC,MAAM,EAAE,CAAC;;+CACnC;QAElB;YADC,6BAAQ,CAAC,EAAE,kBAAkB,EAAE,6BAAW,CAAC,MAAM,EAAE,CAAC;;iDAC9B;QAEvB;YADC,6BAAQ,CAAC,EAAE,kBAAkB,EAAE,6BAAW,CAAC,MAAM,EAAE,CAAC;;kDAC5B;QAEzB;YADC,6BAAQ,CAAC,EAAE,kBAAkB,EAAE,6BAAW,CAAC,MAAM,EAAE,CAAC;;mDAC3B;QARjB,QAAQ;YAFpB,kCAAa,CAAC,UAAU,CAAC;YACzB,qCAAM,CAAC,OAAO,CAAC;6CAYS,gBAAgB;WAX5B,QAAQ,CAwCpB;QAAD,eAAC;KAxCD,AAwCC,IAAA;IAxCY,4BAAQ","file":"checkbox.js","sourcesContent":["import { bindable, customElement } from \"aurelia-templating\";\nimport { bindingMode } from \"aurelia-binding\";\nimport { inject } from \"aurelia-dependency-injection\";\nimport { DOM } from \"aurelia-pal\";\nimport { Threading } from \"../../../common/core/threading\";\n\n@customElement(\"checkbox\")\n@inject(Element)\nexport class Checkbox {\n    @bindable({ defaultBindingMode: bindingMode.twoWay })\n    public value: any;\n    @bindable({ defaultBindingMode: bindingMode.oneWay })\n    public classes: string;\n    @bindable({ defaultBindingMode: bindingMode.oneWay })\n    public disabled: boolean;\n    @bindable({ defaultBindingMode: bindingMode.twoWay })\n    public isChecked: boolean;\n    private _element: HTMLInputElement;\n\n    constructor(element: HTMLInputElement) {\n        this._element = element;\n    }\n    public attached(): void {\n        if (this.value === true) {\n            this.isChecked = true;\n        }\n    }\n    public click(): void {\n        this.isChecked = this.isChecked === true ? false : true;\n         Threading.nextCycle(() => {\n        this._element. dispatchEvent(DOM.createCustomEvent(\"change\", {\n            detail: {\n                value: this.value,\n                checked: this.isChecked\n            },\n            bubbles: true\n        }));\n         });\n    }\n\n    public blur(): void {\n        this._element.dispatchEvent(DOM.createCustomEvent(\"blur\", {\n            detail: {\n                value: this._element\n            },\n            bubbles: true\n        }));\n    }\n}\n"],"sourceRoot":"../../.."}