'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _testcafe = require('testcafe');

var AureliaSelector = (function () {
    function AureliaSelector() {
        _classCallCheck(this, AureliaSelector);
    }

    _createClass(AureliaSelector, [{
        key: '_createSelector',
        value: function _createSelector(bindingDescriptor, selectorInit) {
            var elementSelector = '*[' + bindingDescriptor.type + '\\.' + bindingDescriptor.command + '="' + bindingDescriptor.expression + '"]';

            return selectorInit ? (0, _testcafe.Selector)(selectorInit).find(elementSelector) : (0, _testcafe.Selector)(elementSelector);
        }

        /*valueBind*/

    }, {
        key: '_createBindSelector',
        value: function _createBindSelector(type, expression, selectorInit) {
            return this._createSelector({
                type: type,
                command: 'bind',
                expression: expression
            }, selectorInit);
        }
    }, {
        key: 'byValueBind',
        value: function byValueBind(expression, parentSelector) {
            return this._createBindSelector('value', expression, parentSelector);
        }
    }, {
        key: 'byShowBind',
        value: function byShowBind(expression, parentSelector) {
            return this._createBindSelector('show', expression, parentSelector);
        }
    }, {
        key: 'byCheckedBind',
        value: function byCheckedBind(expression, parentSelector) {
            return this._createBindSelector('checked', expression, parentSelector);
        }
    }, {
        key: 'byFocusBind',
        value: function byFocusBind(expression, parentSelector) {
            return this._createBindSelector('focus', expression, parentSelector);
        }

        /*eventDelegate*/

    }, {
        key: '_createDelegateSelector',
        value: function _createDelegateSelector(event, expression, selectorInit) {
            return this._createSelector({
                type: event,
                command: 'delegate',
                expression: expression
            }, selectorInit);
        }
    }, {
        key: 'byDbClickDelegate',
        value: function byDbClickDelegate(expression, parentSelector) {
            return this._createDelegateSelector('dblclick', expression, parentSelector);
        }
    }, {
        key: 'byClickDelegate',
        value: function byClickDelegate(expression, parentSelector) {
            return this._createDelegateSelector('click', expression, parentSelector);
        }
    }]);

    return AureliaSelector;
})();

exports['default'] = new AureliaSelector();
module.exports = exports['default'];